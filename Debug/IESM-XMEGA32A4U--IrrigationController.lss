
IESM-XMEGA32A4U--IrrigationController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002004  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000007c  00802000  00002004  00002098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000020a  0080207c  0080207c  00002114  2**0
                  ALLOC
  3 .stab         0000105c  00000000  00000000  00002114  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000072f  00000000  00000000  00003170  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  0000389f  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000858  00000000  00000000  000038d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000fd24  00000000  00000000  00004128  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000369c  00000000  00000000  00013e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000ec8f  00000000  00000000  000174e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001ef0  00000000  00000000  00026178  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000287d9  00000000  00000000  00028068  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00007f3e  00000000  00000000  00050841  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000980  00000000  00000000  00058780  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0000c514  00000000  00000000  00059100  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
       2:	00 00       	nop
       4:	18 c1       	rjmp	.+560    	; 0x236 <__bad_interrupt>
       6:	00 00       	nop
       8:	0c 94 44 0e 	jmp	0x1c88	; 0x1c88 <__vector_2>
       c:	14 c1       	rjmp	.+552    	; 0x236 <__bad_interrupt>
       e:	00 00       	nop
      10:	12 c1       	rjmp	.+548    	; 0x236 <__bad_interrupt>
      12:	00 00       	nop
      14:	10 c1       	rjmp	.+544    	; 0x236 <__bad_interrupt>
      16:	00 00       	nop
      18:	0e c1       	rjmp	.+540    	; 0x236 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	0c c1       	rjmp	.+536    	; 0x236 <__bad_interrupt>
      1e:	00 00       	nop
      20:	0a c1       	rjmp	.+532    	; 0x236 <__bad_interrupt>
      22:	00 00       	nop
      24:	08 c1       	rjmp	.+528    	; 0x236 <__bad_interrupt>
      26:	00 00       	nop
      28:	46 c5       	rjmp	.+2700   	; 0xab6 <__vector_10>
      2a:	00 00       	nop
      2c:	5d c5       	rjmp	.+2746   	; 0xae8 <__vector_11>
      2e:	00 00       	nop
      30:	02 c1       	rjmp	.+516    	; 0x236 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 ba 0a 	jmp	0x1574	; 0x1574 <__vector_13>
      38:	ce c5       	rjmp	.+2972   	; 0xbd6 <__vector_14>
      3a:	00 00       	nop
      3c:	f5 c5       	rjmp	.+3050   	; 0xc28 <__vector_15>
      3e:	00 00       	nop
      40:	1c c6       	rjmp	.+3128   	; 0xc7a <__vector_16>
      42:	00 00       	nop
      44:	43 c6       	rjmp	.+3206   	; 0xccc <__vector_17>
      46:	00 00       	nop
      48:	6a c6       	rjmp	.+3284   	; 0xd1e <__vector_18>
      4a:	00 00       	nop
      4c:	91 c6       	rjmp	.+3362   	; 0xd70 <__vector_19>
      4e:	00 00       	nop
      50:	b8 c6       	rjmp	.+3440   	; 0xdc2 <__vector_20>
      52:	00 00       	nop
      54:	df c6       	rjmp	.+3518   	; 0xe14 <__vector_21>
      56:	00 00       	nop
      58:	06 c7       	rjmp	.+3596   	; 0xe66 <__vector_22>
      5a:	00 00       	nop
      5c:	2d c7       	rjmp	.+3674   	; 0xeb8 <__vector_23>
      5e:	00 00       	nop
      60:	ea c0       	rjmp	.+468    	; 0x236 <__bad_interrupt>
      62:	00 00       	nop
      64:	e8 c0       	rjmp	.+464    	; 0x236 <__bad_interrupt>
      66:	00 00       	nop
      68:	e6 c0       	rjmp	.+460    	; 0x236 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	e4 c0       	rjmp	.+456    	; 0x236 <__bad_interrupt>
      6e:	00 00       	nop
      70:	02 c1       	rjmp	.+516    	; 0x276 <__vector_28>
      72:	00 00       	nop
      74:	34 c1       	rjmp	.+616    	; 0x2de <__vector_29>
      76:	00 00       	nop
      78:	28 c1       	rjmp	.+592    	; 0x2ca <__vector_30>
      7a:	00 00       	nop
      7c:	dc c0       	rjmp	.+440    	; 0x236 <__bad_interrupt>
      7e:	00 00       	nop
      80:	da c0       	rjmp	.+436    	; 0x236 <__bad_interrupt>
      82:	00 00       	nop
      84:	d8 c0       	rjmp	.+432    	; 0x236 <__bad_interrupt>
      86:	00 00       	nop
      88:	0c 94 58 0e 	jmp	0x1cb0	; 0x1cb0 <__vector_34>
      8c:	d4 c0       	rjmp	.+424    	; 0x236 <__bad_interrupt>
      8e:	00 00       	nop
      90:	d2 c0       	rjmp	.+420    	; 0x236 <__bad_interrupt>
      92:	00 00       	nop
      94:	d0 c0       	rjmp	.+416    	; 0x236 <__bad_interrupt>
      96:	00 00       	nop
      98:	ce c0       	rjmp	.+412    	; 0x236 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	cc c0       	rjmp	.+408    	; 0x236 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	ca c0       	rjmp	.+404    	; 0x236 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	c8 c0       	rjmp	.+400    	; 0x236 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	c6 c0       	rjmp	.+396    	; 0x236 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	c4 c0       	rjmp	.+392    	; 0x236 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	c2 c0       	rjmp	.+388    	; 0x236 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c0 c0       	rjmp	.+384    	; 0x236 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0c 94 dd 0a 	jmp	0x15ba	; 0x15ba <__vector_46>
      bc:	0c 94 1f 09 	jmp	0x123e	; 0x123e <__vector_47>
      c0:	0c 94 48 09 	jmp	0x1290	; 0x1290 <__vector_48>
      c4:	0c 94 71 09 	jmp	0x12e2	; 0x12e2 <__vector_49>
      c8:	0c 94 9a 09 	jmp	0x1334	; 0x1334 <__vector_50>
      cc:	0c 94 c3 09 	jmp	0x1386	; 0x1386 <__vector_51>
      d0:	0c 94 ec 09 	jmp	0x13d8	; 0x13d8 <__vector_52>
      d4:	b0 c0       	rjmp	.+352    	; 0x236 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	ae c0       	rjmp	.+348    	; 0x236 <__bad_interrupt>
      da:	00 00       	nop
      dc:	ac c0       	rjmp	.+344    	; 0x236 <__bad_interrupt>
      de:	00 00       	nop
      e0:	aa c0       	rjmp	.+340    	; 0x236 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	a8 c0       	rjmp	.+336    	; 0x236 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	9c c1       	rjmp	.+824    	; 0x422 <__vector_58>
      ea:	00 00       	nop
      ec:	ce c1       	rjmp	.+924    	; 0x48a <__vector_59>
      ee:	00 00       	nop
      f0:	c2 c1       	rjmp	.+900    	; 0x476 <__vector_60>
      f2:	00 00       	nop
      f4:	a0 c0       	rjmp	.+320    	; 0x236 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	9e c0       	rjmp	.+316    	; 0x236 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	9c c0       	rjmp	.+312    	; 0x236 <__bad_interrupt>
      fe:	00 00       	nop
     100:	0c 94 30 0e 	jmp	0x1c60	; 0x1c60 <__vector_64>
     104:	98 c0       	rjmp	.+304    	; 0x236 <__bad_interrupt>
     106:	00 00       	nop
     108:	0c 94 6c 0e 	jmp	0x1cd8	; 0x1cd8 <__vector_66>
     10c:	94 c0       	rjmp	.+296    	; 0x236 <__bad_interrupt>
     10e:	00 00       	nop
     110:	92 c0       	rjmp	.+292    	; 0x236 <__bad_interrupt>
     112:	00 00       	nop
     114:	90 c0       	rjmp	.+288    	; 0x236 <__bad_interrupt>
     116:	00 00       	nop
     118:	8e c0       	rjmp	.+284    	; 0x236 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	8c c0       	rjmp	.+280    	; 0x236 <__bad_interrupt>
     11e:	00 00       	nop
     120:	8a c0       	rjmp	.+276    	; 0x236 <__bad_interrupt>
     122:	00 00       	nop
     124:	88 c0       	rjmp	.+272    	; 0x236 <__bad_interrupt>
     126:	00 00       	nop
     128:	86 c0       	rjmp	.+268    	; 0x236 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	84 c0       	rjmp	.+264    	; 0x236 <__bad_interrupt>
     12e:	00 00       	nop
     130:	82 c0       	rjmp	.+260    	; 0x236 <__bad_interrupt>
     132:	00 00       	nop
     134:	ea c6       	rjmp	.+3540   	; 0xf0a <__vector_77>
     136:	00 00       	nop
     138:	11 c7       	rjmp	.+3618   	; 0xf5c <__vector_78>
     13a:	00 00       	nop
     13c:	38 c7       	rjmp	.+3696   	; 0xfae <__vector_79>
     13e:	00 00       	nop
     140:	5f c7       	rjmp	.+3774   	; 0x1000 <__vector_80>
     142:	00 00       	nop
     144:	86 c7       	rjmp	.+3852   	; 0x1052 <__vector_81>
     146:	00 00       	nop
     148:	ad c7       	rjmp	.+3930   	; 0x10a4 <__vector_82>
     14a:	00 00       	nop
     14c:	d4 c7       	rjmp	.+4008   	; 0x10f6 <__vector_83>
     14e:	00 00       	nop
     150:	fb c7       	rjmp	.+4086   	; 0x1148 <__vector_84>
     152:	00 00       	nop
     154:	0c 94 cd 08 	jmp	0x119a	; 0x119a <__vector_85>
     158:	0c 94 f6 08 	jmp	0x11ec	; 0x11ec <__vector_86>
     15c:	6c c0       	rjmp	.+216    	; 0x236 <__bad_interrupt>
     15e:	00 00       	nop
     160:	6a c0       	rjmp	.+212    	; 0x236 <__bad_interrupt>
     162:	00 00       	nop
     164:	68 c0       	rjmp	.+208    	; 0x236 <__bad_interrupt>
     166:	00 00       	nop
     168:	66 c0       	rjmp	.+204    	; 0x236 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	64 c0       	rjmp	.+200    	; 0x236 <__bad_interrupt>
     16e:	00 00       	nop
     170:	62 c0       	rjmp	.+196    	; 0x236 <__bad_interrupt>
     172:	00 00       	nop
     174:	60 c0       	rjmp	.+192    	; 0x236 <__bad_interrupt>
     176:	00 00       	nop
     178:	5e c0       	rjmp	.+188    	; 0x236 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	5c c0       	rjmp	.+184    	; 0x236 <__bad_interrupt>
     17e:	00 00       	nop
     180:	5a c0       	rjmp	.+180    	; 0x236 <__bad_interrupt>
     182:	00 00       	nop
     184:	58 c0       	rjmp	.+176    	; 0x236 <__bad_interrupt>
     186:	00 00       	nop
     188:	56 c0       	rjmp	.+172    	; 0x236 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	54 c0       	rjmp	.+168    	; 0x236 <__bad_interrupt>
     18e:	00 00       	nop
     190:	52 c0       	rjmp	.+164    	; 0x236 <__bad_interrupt>
     192:	00 00       	nop
     194:	50 c0       	rjmp	.+160    	; 0x236 <__bad_interrupt>
     196:	00 00       	nop
     198:	4e c0       	rjmp	.+156    	; 0x236 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	4c c0       	rjmp	.+152    	; 0x236 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	4a c0       	rjmp	.+148    	; 0x236 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	48 c0       	rjmp	.+144    	; 0x236 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	46 c0       	rjmp	.+140    	; 0x236 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	44 c0       	rjmp	.+136    	; 0x236 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	42 c0       	rjmp	.+132    	; 0x236 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	40 c0       	rjmp	.+128    	; 0x236 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	3e c0       	rjmp	.+124    	; 0x236 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	3c c0       	rjmp	.+120    	; 0x236 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	3a c0       	rjmp	.+116    	; 0x236 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	38 c0       	rjmp	.+112    	; 0x236 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	36 c0       	rjmp	.+108    	; 0x236 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	34 c0       	rjmp	.+104    	; 0x236 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	32 c0       	rjmp	.+100    	; 0x236 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	30 c0       	rjmp	.+96     	; 0x236 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	2e c0       	rjmp	.+92     	; 0x236 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	2c c0       	rjmp	.+88     	; 0x236 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	2a c0       	rjmp	.+84     	; 0x236 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	28 c0       	rjmp	.+80     	; 0x236 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	26 c0       	rjmp	.+76     	; 0x236 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	24 c0       	rjmp	.+72     	; 0x236 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	22 c0       	rjmp	.+68     	; 0x236 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	20 c0       	rjmp	.+64     	; 0x236 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	1e c0       	rjmp	.+60     	; 0x236 <__bad_interrupt>
	...

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	df e2       	ldi	r29, 0x2F	; 47
     204:	de bf       	out	0x3e, r29	; 62
     206:	cd bf       	out	0x3d, r28	; 61

00000208 <__do_copy_data>:
     208:	10 e2       	ldi	r17, 0x20	; 32
     20a:	a0 e0       	ldi	r26, 0x00	; 0
     20c:	b0 e2       	ldi	r27, 0x20	; 32
     20e:	e4 e0       	ldi	r30, 0x04	; 4
     210:	f0 e2       	ldi	r31, 0x20	; 32
     212:	02 c0       	rjmp	.+4      	; 0x218 <__do_copy_data+0x10>
     214:	05 90       	lpm	r0, Z+
     216:	0d 92       	st	X+, r0
     218:	ac 37       	cpi	r26, 0x7C	; 124
     21a:	b1 07       	cpc	r27, r17
     21c:	d9 f7       	brne	.-10     	; 0x214 <__do_copy_data+0xc>

0000021e <__do_clear_bss>:
     21e:	22 e2       	ldi	r18, 0x22	; 34
     220:	ac e7       	ldi	r26, 0x7C	; 124
     222:	b0 e2       	ldi	r27, 0x20	; 32
     224:	01 c0       	rjmp	.+2      	; 0x228 <.do_clear_bss_start>

00000226 <.do_clear_bss_loop>:
     226:	1d 92       	st	X+, r1

00000228 <.do_clear_bss_start>:
     228:	a6 38       	cpi	r26, 0x86	; 134
     22a:	b2 07       	cpc	r27, r18
     22c:	e1 f7       	brne	.-8      	; 0x226 <.do_clear_bss_loop>
     22e:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <main>
     232:	0c 94 00 10 	jmp	0x2000	; 0x2000 <_exit>

00000236 <__bad_interrupt>:
     236:	e4 ce       	rjmp	.-568    	; 0x0 <__vectors>

00000238 <crc8_update>:
    for (uint16_t counter = 0; counter < len; counter++)
    {
        seed = crc_ccitt16_update(seed, *buf++);
    }
    return seed;
}
     238:	86 27       	eor	r24, r22
     23a:	98 e0       	ldi	r25, 0x08	; 8
     23c:	2c e8       	ldi	r18, 0x8C	; 140
     23e:	80 ff       	sbrs	r24, 0
     240:	03 c0       	rjmp	.+6      	; 0x248 <crc8_update+0x10>
     242:	86 95       	lsr	r24
     244:	82 27       	eor	r24, r18
     246:	01 c0       	rjmp	.+2      	; 0x24a <crc8_update+0x12>
     248:	86 95       	lsr	r24
     24a:	91 50       	subi	r25, 0x01	; 1
     24c:	c1 f7       	brne	.-16     	; 0x23e <crc8_update+0x6>
     24e:	08 95       	ret

00000250 <crc8_compute>:

uint8_t crc8_compute(uint8_t* buffer, uint8_t buffer_length)
{
     250:	1f 93       	push	r17
     252:	cf 93       	push	r28
     254:	df 93       	push	r29
     256:	ec 01       	movw	r28, r24
    uint8_t crc8 = 0;
    while (buffer_length--)
     258:	16 2f       	mov	r17, r22
     25a:	11 50       	subi	r17, 0x01	; 1
     25c:	66 23       	and	r22, r22
     25e:	31 f0       	breq	.+12     	; 0x26c <crc8_compute+0x1c>
    return seed;
}

uint8_t crc8_compute(uint8_t* buffer, uint8_t buffer_length)
{
    uint8_t crc8 = 0;
     260:	80 e0       	ldi	r24, 0x00	; 0
    while (buffer_length--)
    {
        crc8 = crc8_update(crc8, *buffer++);
     262:	69 91       	ld	r22, Y+
     264:	e9 df       	rcall	.-46     	; 0x238 <crc8_update>
}

uint8_t crc8_compute(uint8_t* buffer, uint8_t buffer_length)
{
    uint8_t crc8 = 0;
    while (buffer_length--)
     266:	11 50       	subi	r17, 0x01	; 1
     268:	e0 f7       	brcc	.-8      	; 0x262 <crc8_compute+0x12>
     26a:	01 c0       	rjmp	.+2      	; 0x26e <crc8_compute+0x1e>
    return seed;
}

uint8_t crc8_compute(uint8_t* buffer, uint8_t buffer_length)
{
    uint8_t crc8 = 0;
     26c:	80 e0       	ldi	r24, 0x00	; 0
    while (buffer_length--)
    {
        crc8 = crc8_update(crc8, *buffer++);
    }
    return crc8;
}
     26e:	df 91       	pop	r29
     270:	cf 91       	pop	r28
     272:	1f 91       	pop	r17
     274:	08 95       	ret

00000276 <__vector_28>:
}

bool _uartc1_byte_available(void)
{
    return buffer.rx_front != buffer.rx_back;
}
     276:	1f 92       	push	r1
     278:	0f 92       	push	r0
     27a:	0f b6       	in	r0, 0x3f	; 63
     27c:	0f 92       	push	r0
     27e:	11 24       	eor	r1, r1
     280:	2f 93       	push	r18
     282:	8f 93       	push	r24
     284:	9f 93       	push	r25
     286:	af 93       	push	r26
     288:	bf 93       	push	r27
     28a:	ef 93       	push	r30
     28c:	ff 93       	push	r31
     28e:	20 91 b0 08 	lds	r18, 0x08B0
     292:	80 91 0e 21 	lds	r24, 0x210E
     296:	8f 5f       	subi	r24, 0xFF	; 255
     298:	8f 70       	andi	r24, 0x0F	; 15
     29a:	90 91 0f 21 	lds	r25, 0x210F
     29e:	98 17       	cp	r25, r24
     2a0:	41 f0       	breq	.+16     	; 0x2b2 <__vector_28+0x3c>
     2a2:	ee e0       	ldi	r30, 0x0E	; 14
     2a4:	f1 e2       	ldi	r31, 0x21	; 33
     2a6:	a0 81       	ld	r26, Z
     2a8:	b0 e0       	ldi	r27, 0x00	; 0
     2aa:	a2 58       	subi	r26, 0x82	; 130
     2ac:	bf 4d       	sbci	r27, 0xDF	; 223
     2ae:	2c 93       	st	X, r18
     2b0:	80 83       	st	Z, r24
     2b2:	ff 91       	pop	r31
     2b4:	ef 91       	pop	r30
     2b6:	bf 91       	pop	r27
     2b8:	af 91       	pop	r26
     2ba:	9f 91       	pop	r25
     2bc:	8f 91       	pop	r24
     2be:	2f 91       	pop	r18
     2c0:	0f 90       	pop	r0
     2c2:	0f be       	out	0x3f, r0	; 63
     2c4:	0f 90       	pop	r0
     2c6:	1f 90       	pop	r1
     2c8:	18 95       	reti

000002ca <__vector_30>:
     2ca:	1f 92       	push	r1
     2cc:	0f 92       	push	r0
     2ce:	0f b6       	in	r0, 0x3f	; 63
     2d0:	0f 92       	push	r0
     2d2:	11 24       	eor	r1, r1
     2d4:	0f 90       	pop	r0
     2d6:	0f be       	out	0x3f, r0	; 63
     2d8:	0f 90       	pop	r0
     2da:	1f 90       	pop	r1
     2dc:	18 95       	reti

000002de <__vector_29>:
     2de:	1f 92       	push	r1
     2e0:	0f 92       	push	r0
     2e2:	0f b6       	in	r0, 0x3f	; 63
     2e4:	0f 92       	push	r0
     2e6:	11 24       	eor	r1, r1
     2e8:	8f 93       	push	r24
     2ea:	9f 93       	push	r25
     2ec:	af 93       	push	r26
     2ee:	bf 93       	push	r27
     2f0:	ef 93       	push	r30
     2f2:	ff 93       	push	r31
     2f4:	90 91 10 21 	lds	r25, 0x2110
     2f8:	80 91 11 21 	lds	r24, 0x2111
     2fc:	98 13       	cpse	r25, r24
     2fe:	06 c0       	rjmp	.+12     	; 0x30c <__vector_29+0x2e>
     300:	e0 eb       	ldi	r30, 0xB0	; 176
     302:	f8 e0       	ldi	r31, 0x08	; 8
     304:	83 81       	ldd	r24, Z+3	; 0x03
     306:	8c 7f       	andi	r24, 0xFC	; 252
     308:	83 83       	std	Z+3, r24	; 0x03
     30a:	0e c0       	rjmp	.+28     	; 0x328 <__vector_29+0x4a>
     30c:	e1 e1       	ldi	r30, 0x11	; 17
     30e:	f1 e2       	ldi	r31, 0x21	; 33
     310:	a0 81       	ld	r26, Z
     312:	b0 e0       	ldi	r27, 0x00	; 0
     314:	a2 58       	subi	r26, 0x82	; 130
     316:	bf 4d       	sbci	r27, 0xDF	; 223
     318:	50 96       	adiw	r26, 0x10	; 16
     31a:	8c 91       	ld	r24, X
     31c:	80 93 b0 08 	sts	0x08B0, r24
     320:	80 81       	ld	r24, Z
     322:	8f 5f       	subi	r24, 0xFF	; 255
     324:	8f 77       	andi	r24, 0x7F	; 127
     326:	80 83       	st	Z, r24
     328:	ff 91       	pop	r31
     32a:	ef 91       	pop	r30
     32c:	bf 91       	pop	r27
     32e:	af 91       	pop	r26
     330:	9f 91       	pop	r25
     332:	8f 91       	pop	r24
     334:	0f 90       	pop	r0
     336:	0f be       	out	0x3f, r0	; 63
     338:	0f 90       	pop	r0
     33a:	1f 90       	pop	r1
     33c:	18 95       	reti

0000033e <_uartc1_enable_interrupt>:
     33e:	e0 eb       	ldi	r30, 0xB0	; 176
     340:	f8 e0       	ldi	r31, 0x08	; 8
     342:	93 81       	ldd	r25, Z+3	; 0x03
     344:	82 95       	swap	r24
     346:	80 7f       	andi	r24, 0xF0	; 240
     348:	9f 7c       	andi	r25, 0xCF	; 207
     34a:	98 2b       	or	r25, r24
     34c:	93 83       	std	Z+3, r25	; 0x03
     34e:	08 95       	ret

00000350 <_uartc1_init>:
     350:	cf 93       	push	r28
     352:	df 93       	push	r29
     354:	cd b7       	in	r28, 0x3d	; 61
     356:	de b7       	in	r29, 0x3e	; 62
     358:	29 97       	sbiw	r28, 0x09	; 9
     35a:	cd bf       	out	0x3d, r28	; 61
     35c:	de bf       	out	0x3e, r29	; 62
     35e:	89 e0       	ldi	r24, 0x09	; 9
     360:	e0 e0       	ldi	r30, 0x00	; 0
     362:	f0 e2       	ldi	r31, 0x20	; 32
     364:	de 01       	movw	r26, r28
     366:	11 96       	adiw	r26, 0x01	; 1
     368:	01 90       	ld	r0, Z+
     36a:	0d 92       	st	X+, r0
     36c:	8a 95       	dec	r24
     36e:	e1 f7       	brne	.-8      	; 0x368 <_uartc1_init+0x18>
     370:	10 92 0f 21 	sts	0x210F, r1
     374:	10 92 0e 21 	sts	0x210E, r1
     378:	10 92 11 21 	sts	0x2111, r1
     37c:	10 92 10 21 	sts	0x2110, r1
     380:	be 01       	movw	r22, r28
     382:	6f 5f       	subi	r22, 0xFF	; 255
     384:	7f 4f       	sbci	r23, 0xFF	; 255
     386:	80 eb       	ldi	r24, 0xB0	; 176
     388:	98 e0       	ldi	r25, 0x08	; 8
     38a:	0e 94 0e 0c 	call	0x181c	; 0x181c <usart_init_rs232>
     38e:	e0 eb       	ldi	r30, 0xB0	; 176
     390:	f8 e0       	ldi	r31, 0x08	; 8
     392:	83 81       	ldd	r24, Z+3	; 0x03
     394:	8f 7c       	andi	r24, 0xCF	; 207
     396:	83 83       	std	Z+3, r24	; 0x03
     398:	83 81       	ldd	r24, Z+3	; 0x03
     39a:	83 7f       	andi	r24, 0xF3	; 243
     39c:	83 83       	std	Z+3, r24	; 0x03
     39e:	83 81       	ldd	r24, Z+3	; 0x03
     3a0:	8c 7f       	andi	r24, 0xFC	; 252
     3a2:	81 60       	ori	r24, 0x01	; 1
     3a4:	83 83       	std	Z+3, r24	; 0x03
     3a6:	29 96       	adiw	r28, 0x09	; 9
     3a8:	cd bf       	out	0x3d, r28	; 61
     3aa:	de bf       	out	0x3e, r29	; 62
     3ac:	df 91       	pop	r29
     3ae:	cf 91       	pop	r28
     3b0:	08 95       	ret

000003b2 <_uartc1_putc>:

void reset_avr(void);

void _uartc1_putc(char ch)
{
     3b2:	ff 92       	push	r15
     3b4:	0f 93       	push	r16
     3b6:	1f 93       	push	r17
     3b8:	cf 93       	push	r28
     3ba:	df 93       	push	r29
     3bc:	f8 2e       	mov	r15, r24
    timeout_start_singleshot(TIMEOUT_UART, TIMEOUT_TICK_HZ);
     3be:	68 e0       	ldi	r22, 0x08	; 8
     3c0:	70 e0       	ldi	r23, 0x00	; 0
     3c2:	81 e0       	ldi	r24, 0x01	; 1
     3c4:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <timeout_start_singleshot>
}

static bool putb(uint8_t byte)
{
    uint8_t tx_back;
    tx_back = (buffer.tx_back + 1) & TX_BUFFER_MASK;
     3c8:	00 e1       	ldi	r16, 0x10	; 16
     3ca:	11 e2       	ldi	r17, 0x21	; 33
    if (tx_back != buffer.tx_front) {
     3cc:	c1 e1       	ldi	r28, 0x11	; 17
     3ce:	d1 e2       	ldi	r29, 0x21	; 33
void reset_avr(void);

void _uartc1_putc(char ch)
{
    timeout_start_singleshot(TIMEOUT_UART, TIMEOUT_TICK_HZ);
    while (!putb(ch)) {
     3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <_uartc1_putc+0x24>
        if (timeout_test_and_clear_expired(TIMEOUT_UART)) {
            reset_avr();
     3d2:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <reset_avr>
}

static bool putb(uint8_t byte)
{
    uint8_t tx_back;
    tx_back = (buffer.tx_back + 1) & TX_BUFFER_MASK;
     3d6:	f8 01       	movw	r30, r16
     3d8:	90 81       	ld	r25, Z
     3da:	9f 5f       	subi	r25, 0xFF	; 255
     3dc:	9f 77       	andi	r25, 0x7F	; 127
    if (tx_back != buffer.tx_front) {
     3de:	28 81       	ld	r18, Y
     3e0:	92 17       	cp	r25, r18
     3e2:	99 f0       	breq	.+38     	; 0x40a <_uartc1_putc+0x58>
        buffer.TX[buffer.tx_back] = byte;
     3e4:	e0 e1       	ldi	r30, 0x10	; 16
     3e6:	f1 e2       	ldi	r31, 0x21	; 33
     3e8:	a0 81       	ld	r26, Z
     3ea:	b0 e0       	ldi	r27, 0x00	; 0
     3ec:	a2 58       	subi	r26, 0x82	; 130
     3ee:	bf 4d       	sbci	r27, 0xDF	; 223
     3f0:	50 96       	adiw	r26, 0x10	; 16
     3f2:	fc 92       	st	X, r15
        buffer.tx_back = tx_back;
     3f4:	90 83       	st	Z, r25
 *              Use USART_DREINTLVL_t type.
 */
static inline void usart_set_dre_interrupt_level(USART_t *usart,
		enum usart_int_level_t level)
{
	(usart)->CTRLA = ((usart)->CTRLA & ~USART_DREINTLVL_gm) |
     3f6:	e0 eb       	ldi	r30, 0xB0	; 176
     3f8:	f8 e0       	ldi	r31, 0x08	; 8
     3fa:	83 81       	ldd	r24, Z+3	; 0x03
     3fc:	8c 7f       	andi	r24, 0xFC	; 252
     3fe:	81 60       	ori	r24, 0x01	; 1
     400:	83 83       	std	Z+3, r24	; 0x03
    while (!putb(ch)) {
        if (timeout_test_and_clear_expired(TIMEOUT_UART)) {
            reset_avr();
        }
    }
    timeout_stop(TIMEOUT_UART);
     402:	81 e0       	ldi	r24, 0x01	; 1
     404:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <timeout_stop>
     408:	06 c0       	rjmp	.+12     	; 0x416 <_uartc1_putc+0x64>

void _uartc1_putc(char ch)
{
    timeout_start_singleshot(TIMEOUT_UART, TIMEOUT_TICK_HZ);
    while (!putb(ch)) {
        if (timeout_test_and_clear_expired(TIMEOUT_UART)) {
     40a:	81 e0       	ldi	r24, 0x01	; 1
     40c:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <timeout_test_and_clear_expired>
     410:	88 23       	and	r24, r24
     412:	09 f3       	breq	.-62     	; 0x3d6 <_uartc1_putc+0x24>
     414:	de cf       	rjmp	.-68     	; 0x3d2 <_uartc1_putc+0x20>
            reset_avr();
        }
    }
    timeout_stop(TIMEOUT_UART);
}
     416:	df 91       	pop	r29
     418:	cf 91       	pop	r28
     41a:	1f 91       	pop	r17
     41c:	0f 91       	pop	r16
     41e:	ff 90       	pop	r15
     420:	08 95       	ret

00000422 <__vector_58>:
    volatile uint8_t tx_back;
    volatile uint8_t tx_front;
} buffer;

ISR(USARTE0_RXC_vect)
{
     422:	1f 92       	push	r1
     424:	0f 92       	push	r0
     426:	0f b6       	in	r0, 0x3f	; 63
     428:	0f 92       	push	r0
     42a:	11 24       	eor	r1, r1
     42c:	2f 93       	push	r18
     42e:	8f 93       	push	r24
     430:	9f 93       	push	r25
     432:	af 93       	push	r26
     434:	bf 93       	push	r27
     436:	ef 93       	push	r30
     438:	ff 93       	push	r31
    uint8_t data = USARTE0.DATA;
     43a:	20 91 a0 0a 	lds	r18, 0x0AA0
    uint8_t back = (buffer.rx_back + 1) & RX_BUFFER_MASK;
     43e:	80 91 12 22 	lds	r24, 0x2212
     442:	8f 5f       	subi	r24, 0xFF	; 255
     444:	8f 77       	andi	r24, 0x7F	; 127
    if (back != buffer.rx_front) {
     446:	90 91 13 22 	lds	r25, 0x2213
     44a:	98 17       	cp	r25, r24
     44c:	41 f0       	breq	.+16     	; 0x45e <__vector_58+0x3c>
        buffer.RX[buffer.rx_back] = data;
     44e:	e2 e1       	ldi	r30, 0x12	; 18
     450:	f2 e2       	ldi	r31, 0x22	; 34
     452:	a0 81       	ld	r26, Z
     454:	b0 e0       	ldi	r27, 0x00	; 0
     456:	ae 5e       	subi	r26, 0xEE	; 238
     458:	be 4d       	sbci	r27, 0xDE	; 222
     45a:	2c 93       	st	X, r18
        buffer.rx_back = back;
     45c:	80 83       	st	Z, r24
    }
}
     45e:	ff 91       	pop	r31
     460:	ef 91       	pop	r30
     462:	bf 91       	pop	r27
     464:	af 91       	pop	r26
     466:	9f 91       	pop	r25
     468:	8f 91       	pop	r24
     46a:	2f 91       	pop	r18
     46c:	0f 90       	pop	r0
     46e:	0f be       	out	0x3f, r0	; 63
     470:	0f 90       	pop	r0
     472:	1f 90       	pop	r1
     474:	18 95       	reti

00000476 <__vector_60>:

ISR(USARTE0_TXC_vect)
{
     476:	1f 92       	push	r1
     478:	0f 92       	push	r0
     47a:	0f b6       	in	r0, 0x3f	; 63
     47c:	0f 92       	push	r0
     47e:	11 24       	eor	r1, r1
}
     480:	0f 90       	pop	r0
     482:	0f be       	out	0x3f, r0	; 63
     484:	0f 90       	pop	r0
     486:	1f 90       	pop	r1
     488:	18 95       	reti

0000048a <__vector_59>:

ISR(USARTE0_DRE_vect)
{
     48a:	1f 92       	push	r1
     48c:	0f 92       	push	r0
     48e:	0f b6       	in	r0, 0x3f	; 63
     490:	0f 92       	push	r0
     492:	11 24       	eor	r1, r1
     494:	8f 93       	push	r24
     496:	9f 93       	push	r25
     498:	af 93       	push	r26
     49a:	bf 93       	push	r27
     49c:	ef 93       	push	r30
     49e:	ff 93       	push	r31
    if (buffer.tx_back == buffer.tx_front) {
     4a0:	90 91 14 22 	lds	r25, 0x2214
     4a4:	80 91 15 22 	lds	r24, 0x2215
     4a8:	98 13       	cpse	r25, r24
     4aa:	06 c0       	rjmp	.+12     	; 0x4b8 <__vector_59+0x2e>
     4ac:	e0 ea       	ldi	r30, 0xA0	; 160
     4ae:	fa e0       	ldi	r31, 0x0A	; 10
     4b0:	83 81       	ldd	r24, Z+3	; 0x03
     4b2:	8c 7f       	andi	r24, 0xFC	; 252
     4b4:	83 83       	std	Z+3, r24	; 0x03
     4b6:	0d c0       	rjmp	.+26     	; 0x4d2 <__vector_59+0x48>
        usart_set_dre_interrupt_level(&USARTE0, USART_INT_LVL_OFF);
    } else {
        USARTE0.DATA = buffer.TX[buffer.tx_front];
     4b8:	e5 e1       	ldi	r30, 0x15	; 21
     4ba:	f2 e2       	ldi	r31, 0x22	; 34
     4bc:	a0 81       	ld	r26, Z
     4be:	b0 e0       	ldi	r27, 0x00	; 0
     4c0:	ae 56       	subi	r26, 0x6E	; 110
     4c2:	be 4d       	sbci	r27, 0xDE	; 222
     4c4:	8c 91       	ld	r24, X
     4c6:	80 93 a0 0a 	sts	0x0AA0, r24
        buffer.tx_front = (buffer.tx_front + 1) & TX_BUFFER_MASK;
     4ca:	80 81       	ld	r24, Z
     4cc:	8f 5f       	subi	r24, 0xFF	; 255
     4ce:	8f 77       	andi	r24, 0x7F	; 127
     4d0:	80 83       	st	Z, r24
    }
}
     4d2:	ff 91       	pop	r31
     4d4:	ef 91       	pop	r30
     4d6:	bf 91       	pop	r27
     4d8:	af 91       	pop	r26
     4da:	9f 91       	pop	r25
     4dc:	8f 91       	pop	r24
     4de:	0f 90       	pop	r0
     4e0:	0f be       	out	0x3f, r0	; 63
     4e2:	0f 90       	pop	r0
     4e4:	1f 90       	pop	r1
     4e6:	18 95       	reti

000004e8 <_uarte0_enable_interrupt>:
 * \param level Interrupt level of the RXD interrupt.
 */
static inline void usart_set_rx_interrupt_level(USART_t *usart,
		enum usart_int_level_t level)
{
	(usart)->CTRLA = ((usart)->CTRLA & ~USART_RXCINTLVL_gm) |
     4e8:	e0 ea       	ldi	r30, 0xA0	; 160
     4ea:	fa e0       	ldi	r31, 0x0A	; 10
     4ec:	93 81       	ldd	r25, Z+3	; 0x03
     4ee:	82 95       	swap	r24
     4f0:	80 7f       	andi	r24, 0xF0	; 240
     4f2:	9f 7c       	andi	r25, 0xCF	; 207
     4f4:	98 2b       	or	r25, r24
     4f6:	93 83       	std	Z+3, r25	; 0x03
     4f8:	08 95       	ret

000004fa <_uarte0_init>:
{
    usart_set_rx_interrupt_level(&USARTE0, level);
}

void _uarte0_init(void)
{
     4fa:	cf 93       	push	r28
     4fc:	df 93       	push	r29
     4fe:	cd b7       	in	r28, 0x3d	; 61
     500:	de b7       	in	r29, 0x3e	; 62
     502:	29 97       	sbiw	r28, 0x09	; 9
     504:	cd bf       	out	0x3d, r28	; 61
     506:	de bf       	out	0x3e, r29	; 62
    usart_rs232_options_t rs232_options = {
     508:	89 e0       	ldi	r24, 0x09	; 9
     50a:	e9 e0       	ldi	r30, 0x09	; 9
     50c:	f0 e2       	ldi	r31, 0x20	; 32
     50e:	de 01       	movw	r26, r28
     510:	11 96       	adiw	r26, 0x01	; 1
     512:	01 90       	ld	r0, Z+
     514:	0d 92       	st	X+, r0
     516:	8a 95       	dec	r24
     518:	e1 f7       	brne	.-8      	; 0x512 <_uarte0_init+0x18>
        .baudrate = 115200,
        .charlength = USART_CHSIZE_8BIT_gc,
        .paritytype = USART_PMODE_DISABLED_gc,
        .stopbits = false
    };
    buffer.rx_front = 0;
     51a:	10 92 13 22 	sts	0x2213, r1
    buffer.rx_back = 0;
     51e:	10 92 12 22 	sts	0x2212, r1
    buffer.tx_front = 0;
     522:	10 92 15 22 	sts	0x2215, r1
    buffer.tx_back = 0;
     526:	10 92 14 22 	sts	0x2214, r1
    usart_init_rs232(&USARTE0, &rs232_options);
     52a:	be 01       	movw	r22, r28
     52c:	6f 5f       	subi	r22, 0xFF	; 255
     52e:	7f 4f       	sbci	r23, 0xFF	; 255
     530:	80 ea       	ldi	r24, 0xA0	; 160
     532:	9a e0       	ldi	r25, 0x0A	; 10
     534:	0e 94 0e 0c 	call	0x181c	; 0x181c <usart_init_rs232>
     538:	e0 ea       	ldi	r30, 0xA0	; 160
     53a:	fa e0       	ldi	r31, 0x0A	; 10
     53c:	83 81       	ldd	r24, Z+3	; 0x03
     53e:	8f 7c       	andi	r24, 0xCF	; 207
     540:	83 83       	std	Z+3, r24	; 0x03
 * \param level Interrupt level of the TXD interrupt.
 */
static inline void usart_set_tx_interrupt_level(USART_t *usart,
		enum usart_int_level_t level)
{
	(usart)->CTRLA = ((usart)->CTRLA & ~USART_TXCINTLVL_gm) |
     542:	83 81       	ldd	r24, Z+3	; 0x03
     544:	83 7f       	andi	r24, 0xF3	; 243
     546:	83 83       	std	Z+3, r24	; 0x03
 *              Use USART_DREINTLVL_t type.
 */
static inline void usart_set_dre_interrupt_level(USART_t *usart,
		enum usart_int_level_t level)
{
	(usart)->CTRLA = ((usart)->CTRLA & ~USART_DREINTLVL_gm) |
     548:	83 81       	ldd	r24, Z+3	; 0x03
     54a:	8c 7f       	andi	r24, 0xFC	; 252
     54c:	81 60       	ori	r24, 0x01	; 1
     54e:	83 83       	std	Z+3, r24	; 0x03
    usart_set_rx_interrupt_level(&USARTE0, USART_INT_LVL_OFF);
    usart_set_tx_interrupt_level(&USARTE0, USART_INT_LVL_OFF);
    usart_set_dre_interrupt_level(&USARTE0, USART_INT_LVL_LO);
}
     550:	29 96       	adiw	r28, 0x09	; 9
     552:	cd bf       	out	0x3d, r28	; 61
     554:	de bf       	out	0x3e, r29	; 62
     556:	df 91       	pop	r29
     558:	cf 91       	pop	r28
     55a:	08 95       	ret

0000055c <_uarte0_getc>:

int16_t _uarte0_getc(void)
{
    uint8_t ans;
    if (buffer.rx_front == buffer.rx_back) {
     55c:	90 91 13 22 	lds	r25, 0x2213
     560:	80 91 12 22 	lds	r24, 0x2212
     564:	98 17       	cp	r25, r24
     566:	69 f0       	breq	.+26     	; 0x582 <_uarte0_getc+0x26>
        return -1;
    }
    ans = buffer.RX[buffer.rx_front];
     568:	e3 e1       	ldi	r30, 0x13	; 19
     56a:	f2 e2       	ldi	r31, 0x22	; 34
     56c:	a0 81       	ld	r26, Z
     56e:	b0 e0       	ldi	r27, 0x00	; 0
     570:	ae 5e       	subi	r26, 0xEE	; 238
     572:	be 4d       	sbci	r27, 0xDE	; 222
     574:	2c 91       	ld	r18, X
    buffer.rx_front = (buffer.rx_front + 1) & RX_BUFFER_MASK;
     576:	80 81       	ld	r24, Z
     578:	8f 5f       	subi	r24, 0xFF	; 255
     57a:	8f 77       	andi	r24, 0x7F	; 127
     57c:	80 83       	st	Z, r24
    return ans;
     57e:	30 e0       	ldi	r19, 0x00	; 0
     580:	02 c0       	rjmp	.+4      	; 0x586 <_uarte0_getc+0x2a>

int16_t _uarte0_getc(void)
{
    uint8_t ans;
    if (buffer.rx_front == buffer.rx_back) {
        return -1;
     582:	2f ef       	ldi	r18, 0xFF	; 255
     584:	3f ef       	ldi	r19, 0xFF	; 255
    }
    ans = buffer.RX[buffer.rx_front];
    buffer.rx_front = (buffer.rx_front + 1) & RX_BUFFER_MASK;
    return ans;
}
     586:	82 2f       	mov	r24, r18
     588:	93 2f       	mov	r25, r19
     58a:	08 95       	ret

0000058c <_uarte0_byte_available>:

bool _uarte0_byte_available(void)
{
	return buffer.rx_front != buffer.rx_back;
     58c:	20 91 13 22 	lds	r18, 0x2213
     590:	90 91 12 22 	lds	r25, 0x2212
     594:	81 e0       	ldi	r24, 0x01	; 1
     596:	29 13       	cpse	r18, r25
     598:	01 c0       	rjmp	.+2      	; 0x59c <_uarte0_byte_available+0x10>
     59a:	80 e0       	ldi	r24, 0x00	; 0
}
     59c:	08 95       	ret

0000059e <_uarte0_putc>:

void reset_avr(void);

void _uarte0_putc(char ch)
{
     59e:	ff 92       	push	r15
     5a0:	0f 93       	push	r16
     5a2:	1f 93       	push	r17
     5a4:	cf 93       	push	r28
     5a6:	df 93       	push	r29
     5a8:	f8 2e       	mov	r15, r24
    timeout_start_singleshot(TIMEOUT_UART, TIMEOUT_TICK_HZ);
     5aa:	68 e0       	ldi	r22, 0x08	; 8
     5ac:	70 e0       	ldi	r23, 0x00	; 0
     5ae:	81 e0       	ldi	r24, 0x01	; 1
     5b0:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <timeout_start_singleshot>
}

static bool putb(uint8_t byte)
{
    uint8_t tx_back;
    tx_back = (buffer.tx_back + 1) & TX_BUFFER_MASK;
     5b4:	04 e1       	ldi	r16, 0x14	; 20
     5b6:	12 e2       	ldi	r17, 0x22	; 34
    if (tx_back != buffer.tx_front) {
     5b8:	c5 e1       	ldi	r28, 0x15	; 21
     5ba:	d2 e2       	ldi	r29, 0x22	; 34
void reset_avr(void);

void _uarte0_putc(char ch)
{
    timeout_start_singleshot(TIMEOUT_UART, TIMEOUT_TICK_HZ);
    while (!putb(ch)) {
     5bc:	02 c0       	rjmp	.+4      	; 0x5c2 <_uarte0_putc+0x24>
        if (timeout_test_and_clear_expired(TIMEOUT_UART)) {
            reset_avr();
     5be:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <reset_avr>
}

static bool putb(uint8_t byte)
{
    uint8_t tx_back;
    tx_back = (buffer.tx_back + 1) & TX_BUFFER_MASK;
     5c2:	f8 01       	movw	r30, r16
     5c4:	90 81       	ld	r25, Z
     5c6:	9f 5f       	subi	r25, 0xFF	; 255
     5c8:	9f 77       	andi	r25, 0x7F	; 127
    if (tx_back != buffer.tx_front) {
     5ca:	28 81       	ld	r18, Y
     5cc:	92 17       	cp	r25, r18
     5ce:	91 f0       	breq	.+36     	; 0x5f4 <_uarte0_putc+0x56>
        buffer.TX[buffer.tx_back] = byte;
     5d0:	e4 e1       	ldi	r30, 0x14	; 20
     5d2:	f2 e2       	ldi	r31, 0x22	; 34
     5d4:	a0 81       	ld	r26, Z
     5d6:	b0 e0       	ldi	r27, 0x00	; 0
     5d8:	ae 56       	subi	r26, 0x6E	; 110
     5da:	be 4d       	sbci	r27, 0xDE	; 222
     5dc:	fc 92       	st	X, r15
        buffer.tx_back = tx_back;
     5de:	90 83       	st	Z, r25
     5e0:	e0 ea       	ldi	r30, 0xA0	; 160
     5e2:	fa e0       	ldi	r31, 0x0A	; 10
     5e4:	83 81       	ldd	r24, Z+3	; 0x03
     5e6:	8c 7f       	andi	r24, 0xFC	; 252
     5e8:	81 60       	ori	r24, 0x01	; 1
     5ea:	83 83       	std	Z+3, r24	; 0x03
    while (!putb(ch)) {
        if (timeout_test_and_clear_expired(TIMEOUT_UART)) {
            reset_avr();
        }
    }
    timeout_stop(TIMEOUT_UART);
     5ec:	81 e0       	ldi	r24, 0x01	; 1
     5ee:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <timeout_stop>
     5f2:	06 c0       	rjmp	.+12     	; 0x600 <_uarte0_putc+0x62>

void _uarte0_putc(char ch)
{
    timeout_start_singleshot(TIMEOUT_UART, TIMEOUT_TICK_HZ);
    while (!putb(ch)) {
        if (timeout_test_and_clear_expired(TIMEOUT_UART)) {
     5f4:	81 e0       	ldi	r24, 0x01	; 1
     5f6:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <timeout_test_and_clear_expired>
     5fa:	88 23       	and	r24, r24
     5fc:	11 f3       	breq	.-60     	; 0x5c2 <_uarte0_putc+0x24>
     5fe:	df cf       	rjmp	.-66     	; 0x5be <_uarte0_putc+0x20>
            reset_avr();
        }
    }
    timeout_stop(TIMEOUT_UART);
}
     600:	df 91       	pop	r29
     602:	cf 91       	pop	r28
     604:	1f 91       	pop	r17
     606:	0f 91       	pop	r16
     608:	ff 90       	pop	r15
     60a:	08 95       	ret

0000060c <DEBUG_puts>:
            }
        } else {
            _DEBUG_putc(' ');
        }
    }
}
     60c:	cf 93       	push	r28
     60e:	df 93       	push	r29
     610:	ec 01       	movw	r28, r24
     612:	88 81       	ld	r24, Y
     614:	88 23       	and	r24, r24
     616:	29 f0       	breq	.+10     	; 0x622 <DEBUG_puts+0x16>
     618:	21 96       	adiw	r28, 0x01	; 1
     61a:	cb de       	rcall	.-618    	; 0x3b2 <_uartc1_putc>
     61c:	89 91       	ld	r24, Y+
     61e:	81 11       	cpse	r24, r1
     620:	fc cf       	rjmp	.-8      	; 0x61a <DEBUG_puts+0xe>
     622:	df 91       	pop	r29
     624:	cf 91       	pop	r28
     626:	08 95       	ret

00000628 <DEBUG_putcrlf>:
    }
}

void DEBUG_putcrlf(const char* str)
{
    if (str != NULL) {
     628:	00 97       	sbiw	r24, 0x00	; 0
     62a:	09 f0       	breq	.+2      	; 0x62e <DEBUG_putcrlf+0x6>
        DEBUG_puts(str);
     62c:	ef df       	rcall	.-34     	; 0x60c <DEBUG_puts>
    }
    DEBUG_puts("\r\n");
     62e:	82 e1       	ldi	r24, 0x12	; 18
     630:	90 e2       	ldi	r25, 0x20	; 32
     632:	ec cf       	rjmp	.-40     	; 0x60c <DEBUG_puts>

00000634 <MODEM_get_byte>:
#include "crc.h"

int16_t MODEM_get_byte(void)
{
    int16_t ans;
    ans = _MODEM_getc();
     634:	93 cf       	rjmp	.-218    	; 0x55c <_uarte0_getc>
    if (ans < 0) {
        return ans;
    }
    //_DEBUG_putc(ans); //eccho every byte that recieved by modem to debug serial port
    return ans;
}
     636:	08 95       	ret

00000638 <MODEM_raw_putb>:

void MODEM_raw_putb(uint8_t byte)
{
     638:	cf 93       	push	r28
     63a:	c8 2f       	mov	r28, r24
    _MODEM_putc(byte);
     63c:	b0 df       	rcall	.-160    	; 0x59e <_uarte0_putc>
    _DEBUG_putc(byte);
     63e:	8c 2f       	mov	r24, r28
     640:	b8 de       	rcall	.-656    	; 0x3b2 <_uartc1_putc>
}
     642:	cf 91       	pop	r28
     644:	08 95       	ret

00000646 <MODEM_raw_puts>:

void MODEM_raw_puts(const char* data)
{
     646:	cf 93       	push	r28
     648:	df 93       	push	r29
     64a:	ec 01       	movw	r28, r24
    while (*data != '\x00') {
     64c:	88 81       	ld	r24, Y
     64e:	88 23       	and	r24, r24
     650:	29 f0       	breq	.+10     	; 0x65c <MODEM_raw_puts+0x16>
{
    _MODEM_putc(byte);
    _DEBUG_putc(byte);
}

void MODEM_raw_puts(const char* data)
     652:	21 96       	adiw	r28, 0x01	; 1
{
    while (*data != '\x00') {
        MODEM_raw_putb(*data);
     654:	f1 df       	rcall	.-30     	; 0x638 <MODEM_raw_putb>
    _DEBUG_putc(byte);
}

void MODEM_raw_puts(const char* data)
{
    while (*data != '\x00') {
     656:	89 91       	ld	r24, Y+
     658:	81 11       	cpse	r24, r1
     65a:	fc cf       	rjmp	.-8      	; 0x654 <MODEM_raw_puts+0xe>
        MODEM_raw_putb(*data);
        data++;
    }
}
     65c:	df 91       	pop	r29
     65e:	cf 91       	pop	r28
     660:	08 95       	ret

00000662 <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
     662:	43 e0       	ldi	r20, 0x03	; 3
     664:	50 e0       	ldi	r21, 0x00	; 0
     666:	68 e0       	ldi	r22, 0x08	; 8
     668:	80 e2       	ldi	r24, 0x20	; 32
     66a:	96 e0       	ldi	r25, 0x06	; 6
     66c:	bd d0       	rcall	.+378    	; 0x7e8 <ioport_configure_port_pin>
     66e:	43 e0       	ldi	r20, 0x03	; 3
     670:	50 e0       	ldi	r21, 0x00	; 0
     672:	60 e2       	ldi	r22, 0x20	; 32
     674:	80 e0       	ldi	r24, 0x00	; 0
     676:	96 e0       	ldi	r25, 0x06	; 6
     678:	b7 d0       	rcall	.+366    	; 0x7e8 <ioport_configure_port_pin>
     67a:	43 e0       	ldi	r20, 0x03	; 3
     67c:	50 e0       	ldi	r21, 0x00	; 0
     67e:	68 e0       	ldi	r22, 0x08	; 8
     680:	80 e8       	ldi	r24, 0x80	; 128
     682:	96 e0       	ldi	r25, 0x06	; 6
     684:	b1 d0       	rcall	.+354    	; 0x7e8 <ioport_configure_port_pin>
     686:	40 e0       	ldi	r20, 0x00	; 0
     688:	50 e0       	ldi	r21, 0x00	; 0
     68a:	64 e0       	ldi	r22, 0x04	; 4
     68c:	80 e8       	ldi	r24, 0x80	; 128
     68e:	96 e0       	ldi	r25, 0x06	; 6
     690:	ab d0       	rcall	.+342    	; 0x7e8 <ioport_configure_port_pin>
     692:	43 e0       	ldi	r20, 0x03	; 3
     694:	50 e0       	ldi	r21, 0x00	; 0
     696:	68 e0       	ldi	r22, 0x08	; 8
     698:	80 e8       	ldi	r24, 0x80	; 128
     69a:	96 e0       	ldi	r25, 0x06	; 6
     69c:	a5 d0       	rcall	.+330    	; 0x7e8 <ioport_configure_port_pin>
     69e:	40 e0       	ldi	r20, 0x00	; 0
     6a0:	50 e0       	ldi	r21, 0x00	; 0
     6a2:	64 e0       	ldi	r22, 0x04	; 4
     6a4:	80 e8       	ldi	r24, 0x80	; 128
     6a6:	96 e0       	ldi	r25, 0x06	; 6
     6a8:	9f d0       	rcall	.+318    	; 0x7e8 <ioport_configure_port_pin>
     6aa:	43 e0       	ldi	r20, 0x03	; 3
     6ac:	50 e0       	ldi	r21, 0x00	; 0
     6ae:	60 e8       	ldi	r22, 0x80	; 128
     6b0:	80 e4       	ldi	r24, 0x40	; 64
     6b2:	96 e0       	ldi	r25, 0x06	; 6
     6b4:	99 d0       	rcall	.+306    	; 0x7e8 <ioport_configure_port_pin>
     6b6:	40 e0       	ldi	r20, 0x00	; 0
     6b8:	50 e0       	ldi	r21, 0x00	; 0
     6ba:	60 e4       	ldi	r22, 0x40	; 64
     6bc:	80 e4       	ldi	r24, 0x40	; 64
     6be:	96 e0       	ldi	r25, 0x06	; 6
     6c0:	93 d0       	rcall	.+294    	; 0x7e8 <ioport_configure_port_pin>
     6c2:	43 e0       	ldi	r20, 0x03	; 3
     6c4:	50 e0       	ldi	r21, 0x00	; 0
     6c6:	62 e0       	ldi	r22, 0x02	; 2
     6c8:	80 e2       	ldi	r24, 0x20	; 32
     6ca:	96 e0       	ldi	r25, 0x06	; 6
     6cc:	8d d0       	rcall	.+282    	; 0x7e8 <ioport_configure_port_pin>
     6ce:	43 e0       	ldi	r20, 0x03	; 3
     6d0:	50 e0       	ldi	r21, 0x00	; 0
     6d2:	60 e4       	ldi	r22, 0x40	; 64
     6d4:	80 e0       	ldi	r24, 0x00	; 0
     6d6:	96 e0       	ldi	r25, 0x06	; 6
     6d8:	87 d0       	rcall	.+270    	; 0x7e8 <ioport_configure_port_pin>
     6da:	41 e0       	ldi	r20, 0x01	; 1
     6dc:	50 e0       	ldi	r21, 0x00	; 0
     6de:	61 e0       	ldi	r22, 0x01	; 1
     6e0:	80 e6       	ldi	r24, 0x60	; 96
     6e2:	96 e0       	ldi	r25, 0x06	; 6
     6e4:	81 d0       	rcall	.+258    	; 0x7e8 <ioport_configure_port_pin>
     6e6:	41 e0       	ldi	r20, 0x01	; 1
     6e8:	50 e0       	ldi	r21, 0x00	; 0
     6ea:	62 e0       	ldi	r22, 0x02	; 2
     6ec:	80 e6       	ldi	r24, 0x60	; 96
     6ee:	96 e0       	ldi	r25, 0x06	; 6
     6f0:	7b d0       	rcall	.+246    	; 0x7e8 <ioport_configure_port_pin>
     6f2:	43 e0       	ldi	r20, 0x03	; 3
     6f4:	50 e0       	ldi	r21, 0x00	; 0
     6f6:	68 e0       	ldi	r22, 0x08	; 8
     6f8:	80 e6       	ldi	r24, 0x60	; 96
     6fa:	96 e0       	ldi	r25, 0x06	; 6
     6fc:	75 d0       	rcall	.+234    	; 0x7e8 <ioport_configure_port_pin>
     6fe:	40 e0       	ldi	r20, 0x00	; 0
     700:	50 e0       	ldi	r21, 0x00	; 0
     702:	64 e0       	ldi	r22, 0x04	; 4
     704:	80 e4       	ldi	r24, 0x40	; 64
     706:	96 e0       	ldi	r25, 0x06	; 6
     708:	6f d0       	rcall	.+222    	; 0x7e8 <ioport_configure_port_pin>
     70a:	40 e0       	ldi	r20, 0x00	; 0
     70c:	50 e0       	ldi	r21, 0x00	; 0
     70e:	64 e0       	ldi	r22, 0x04	; 4
     710:	80 e6       	ldi	r24, 0x60	; 96
     712:	96 e0       	ldi	r25, 0x06	; 6
     714:	69 d0       	rcall	.+210    	; 0x7e8 <ioport_configure_port_pin>
     716:	40 e0       	ldi	r20, 0x00	; 0
     718:	50 e0       	ldi	r21, 0x00	; 0
     71a:	64 e0       	ldi	r22, 0x04	; 4
     71c:	80 e2       	ldi	r24, 0x20	; 32
     71e:	96 e0       	ldi	r25, 0x06	; 6
     720:	63 d0       	rcall	.+198    	; 0x7e8 <ioport_configure_port_pin>
     722:	40 e0       	ldi	r20, 0x00	; 0
     724:	50 e0       	ldi	r21, 0x00	; 0
     726:	64 e0       	ldi	r22, 0x04	; 4
     728:	80 e0       	ldi	r24, 0x00	; 0
     72a:	96 e0       	ldi	r25, 0x06	; 6
     72c:	5d c0       	rjmp	.+186    	; 0x7e8 <ioport_configure_port_pin>

0000072e <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
     72e:	cf 93       	push	r28
     730:	df 93       	push	r29
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     732:	8f ef       	ldi	r24, 0xFF	; 255
     734:	80 93 70 00 	sts	0x0070, r24
     738:	80 93 71 00 	sts	0x0071, r24
     73c:	80 93 72 00 	sts	0x0072, r24
     740:	80 93 73 00 	sts	0x0073, r24
     744:	80 93 74 00 	sts	0x0074, r24
     748:	80 93 75 00 	sts	0x0075, r24
     74c:	80 93 76 00 	sts	0x0076, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     750:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     752:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     754:	e0 e5       	ldi	r30, 0x50	; 80
     756:	f0 e0       	ldi	r31, 0x00	; 0
     758:	90 81       	ld	r25, Z
     75a:	92 60       	ori	r25, 0x02	; 2
     75c:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     75e:	8f bf       	out	0x3f, r24	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     760:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     762:	81 ff       	sbrs	r24, 1
     764:	fd cf       	rjmp	.-6      	; 0x760 <sysclk_init+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     766:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     768:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     76a:	e0 e5       	ldi	r30, 0x50	; 80
     76c:	f0 e0       	ldi	r31, 0x00	; 0
     76e:	90 81       	ld	r25, Z
     770:	94 60       	ori	r25, 0x04	; 4
     772:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     774:	8f bf       	out	0x3f, r24	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     776:	81 81       	ldd	r24, Z+1	; 0x01
     778:	82 ff       	sbrs	r24, 2
     77a:	fd cf       	rjmp	.-6      	; 0x776 <sysclk_init+0x48>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     77c:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     77e:	f8 94       	cli
#if XMEGA_AU || XMEGA_B || XMEGA_C || XMEGA_E
		Assert((ref_id == OSC_ID_RC32KHZ)
				|| (ref_id == OSC_ID_XOSC)
				|| (ref_id == OSC_ID_USBSOF));

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
     780:	c0 e5       	ldi	r28, 0x50	; 80
     782:	d0 e0       	ldi	r29, 0x00	; 0
     784:	9e 81       	ldd	r25, Y+6	; 0x06
     786:	99 7f       	andi	r25, 0xF9	; 249
     788:	9e 83       	std	Y+6, r25	; 0x06
		if (ref_id == OSC_ID_XOSC) {
			osc_enable(OSC_ID_RC32KHZ);
			OSC.DFLLCTRL |= OSC_RC32MCREF_XOSC32K_gc;
		}
		else if (ref_id == OSC_ID_RC32KHZ) {
			OSC.DFLLCTRL |= OSC_RC32MCREF_RC32K_gc;
     78a:	9e 81       	ldd	r25, Y+6	; 0x06
     78c:	9e 83       	std	Y+6, r25	; 0x06
		}
		else if (ref_id == OSC_ID_RC32KHZ) {
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
		}
#endif
		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
     78e:	e0 e6       	ldi	r30, 0x60	; 96
     790:	f0 e0       	ldi	r31, 0x00	; 0
     792:	90 81       	ld	r25, Z
     794:	91 60       	ori	r25, 0x01	; 1
     796:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     798:	8f bf       	out	0x3f, r24	; 63
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
     79a:	61 e0       	ldi	r22, 0x01	; 1
     79c:	80 e4       	ldi	r24, 0x40	; 64
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	4b d0       	rcall	.+150    	; 0x838 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     7a2:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     7a4:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
     7a6:	98 81       	ld	r25, Y
     7a8:	9e 7f       	andi	r25, 0xFE	; 254
     7aa:	98 83       	st	Y, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     7ac:	8f bf       	out	0x3f, r24	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     7ae:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     7b0:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     7b2:	98 81       	ld	r25, Y
     7b4:	94 60       	ori	r25, 0x04	; 4
     7b6:	98 83       	st	Y, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     7b8:	8f bf       	out	0x3f, r24	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     7ba:	e0 e5       	ldi	r30, 0x50	; 80
     7bc:	f0 e0       	ldi	r31, 0x00	; 0
     7be:	81 81       	ldd	r24, Z+1	; 0x01
     7c0:	82 ff       	sbrs	r24, 2
     7c2:	fd cf       	rjmp	.-6      	; 0x7be <sysclk_init+0x90>
		osc_enable(OSC_ID_XOSC);
		osc_wait_ready(OSC_ID_XOSC);
		break;
	}

	CLK.RTCCTRL = id | CLK_RTCEN_bm;
     7c4:	85 e0       	ldi	r24, 0x05	; 5
     7c6:	e0 e4       	ldi	r30, 0x40	; 64
     7c8:	f0 e0       	ldi	r31, 0x00	; 0
     7ca:	83 83       	std	Z+3, r24	; 0x03
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
     7cc:	df 91       	pop	r29
     7ce:	cf 91       	pop	r28
     7d0:	08 95       	ret

000007d2 <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     7d2:	2f b7       	in	r18, 0x3f	; 63
	cpu_irq_disable();
     7d4:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     7d6:	fc 01       	movw	r30, r24
     7d8:	e0 59       	subi	r30, 0x90	; 144
     7da:	ff 4f       	sbci	r31, 0xFF	; 255
     7dc:	60 95       	com	r22
     7de:	80 81       	ld	r24, Z
     7e0:	68 23       	and	r22, r24
     7e2:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     7e4:	2f bf       	out	0x3f, r18	; 63
     7e6:	08 95       	ret

000007e8 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
     7e8:	cf 93       	push	r28
     7ea:	df 93       	push	r29
 *
 */
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
     7ec:	fc 01       	movw	r30, r24
     7ee:	70 96       	adiw	r30, 0x10	; 16
     7f0:	20 e0       	ldi	r18, 0x00	; 0
     7f2:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
     7f4:	c6 2f       	mov	r28, r22
     7f6:	d0 e0       	ldi	r29, 0x00	; 0
     7f8:	de 01       	movw	r26, r28
     7fa:	02 2e       	mov	r0, r18
     7fc:	02 c0       	rjmp	.+4      	; 0x802 <ioport_configure_port_pin+0x1a>
     7fe:	b5 95       	asr	r27
     800:	a7 95       	ror	r26
     802:	0a 94       	dec	r0
     804:	e2 f7       	brpl	.-8      	; 0x7fe <ioport_configure_port_pin+0x16>
     806:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     808:	50 83       	st	Z, r21
     80a:	2f 5f       	subi	r18, 0xFF	; 255
     80c:	3f 4f       	sbci	r19, 0xFF	; 255
     80e:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
     810:	28 30       	cpi	r18, 0x08	; 8
     812:	31 05       	cpc	r19, r1
     814:	89 f7       	brne	.-30     	; 0x7f8 <ioport_configure_port_pin+0x10>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
     816:	40 ff       	sbrs	r20, 0
     818:	0a c0       	rjmp	.+20     	; 0x82e <ioport_configure_port_pin+0x46>
		if (flags & IOPORT_INIT_HIGH) {
     81a:	41 ff       	sbrs	r20, 1
     81c:	03 c0       	rjmp	.+6      	; 0x824 <ioport_configure_port_pin+0x3c>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
     81e:	fc 01       	movw	r30, r24
     820:	65 83       	std	Z+5, r22	; 0x05
     822:	02 c0       	rjmp	.+4      	; 0x828 <ioport_configure_port_pin+0x40>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
     824:	fc 01       	movw	r30, r24
     826:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
     828:	fc 01       	movw	r30, r24
     82a:	61 83       	std	Z+1, r22	; 0x01
     82c:	02 c0       	rjmp	.+4      	; 0x832 <ioport_configure_port_pin+0x4a>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
     82e:	fc 01       	movw	r30, r24
     830:	62 83       	std	Z+2, r22	; 0x02
	}
}
     832:	df 91       	pop	r29
     834:	cf 91       	pop	r28
     836:	08 95       	ret

00000838 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
     838:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
     83a:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
     83c:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
     83e:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
     840:	60 83       	st	Z, r22
	ret                             // Return to caller
     842:	08 95       	ret

00000844 <nvm_eeprom_flush_buffer>:
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
     844:	e0 ec       	ldi	r30, 0xC0	; 192
     846:	f1 e0       	ldi	r31, 0x01	; 1
     848:	87 85       	ldd	r24, Z+15	; 0x0f
     84a:	88 23       	and	r24, r24
     84c:	ec f3       	brlt	.-6      	; 0x848 <nvm_eeprom_flush_buffer+0x4>
{
	// Wait until NVM is ready
	nvm_wait_until_ready();

	// Flush EEPROM page buffer if necessary
	if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
     84e:	e0 ec       	ldi	r30, 0xC0	; 192
     850:	f1 e0       	ldi	r31, 0x01	; 1
     852:	87 85       	ldd	r24, Z+15	; 0x0f
     854:	81 ff       	sbrs	r24, 1
     856:	06 c0       	rjmp	.+12     	; 0x864 <nvm_eeprom_flush_buffer+0x20>
		NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
     858:	86 e3       	ldi	r24, 0x36	; 54
     85a:	82 87       	std	Z+10, r24	; 0x0a
 * \note The correct NVM command must be set in the NVM.CMD register before
 *       calling this function.
 */
static inline void nvm_exec(void)
{
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
     85c:	61 e0       	ldi	r22, 0x01	; 1
     85e:	8b ec       	ldi	r24, 0xCB	; 203
     860:	91 e0       	ldi	r25, 0x01	; 1
     862:	ea cf       	rjmp	.-44     	; 0x838 <ccp_write_io>
     864:	08 95       	ret

00000866 <nvm_eeprom_load_byte_to_buffer>:
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
     866:	e0 ec       	ldi	r30, 0xC0	; 192
     868:	f1 e0       	ldi	r31, 0x01	; 1
     86a:	97 85       	ldd	r25, Z+15	; 0x0f
     86c:	99 23       	and	r25, r25
     86e:	ec f3       	brlt	.-6      	; 0x86a <nvm_eeprom_load_byte_to_buffer+0x4>
 *        write operations still needs to be done through IO register.
 */
static inline void eeprom_enable_mapping(void)
{
#if !XMEGA_E
	NVM_CTRLB = NVM_CTRLB | NVM_EEMAPEN_bm;
     870:	ec ec       	ldi	r30, 0xCC	; 204
     872:	f1 e0       	ldi	r31, 0x01	; 1
     874:	90 81       	ld	r25, Z
     876:	98 60       	ori	r25, 0x08	; 8
     878:	90 83       	st	Z, r25
{
	// Wait until NVM is ready
	nvm_wait_until_ready();

	eeprom_enable_mapping();
	*(uint8_t*)(byte_addr + MAPPED_EEPROM_START) = value;
     87a:	a8 2f       	mov	r26, r24
     87c:	b0 e0       	ldi	r27, 0x00	; 0
     87e:	b0 5f       	subi	r27, 0xF0	; 240
     880:	6c 93       	st	X, r22
 *  IO mapped access is now enabled.
 */
static inline void eeprom_disable_mapping(void)
{
#if !XMEGA_E
	NVM_CTRLB = NVM_CTRLB & ~NVM_EEMAPEN_bm;
     882:	80 81       	ld	r24, Z
     884:	87 7f       	andi	r24, 0xF7	; 247
     886:	80 83       	st	Z, r24
     888:	08 95       	ret

0000088a <nvm_eeprom_write_byte>:
 *
 * \param  address    EEPROM address (max EEPROM_SIZE)
 * \param  value      Byte value to write to EEPROM.
 */
void nvm_eeprom_write_byte(eeprom_addr_t address, uint8_t value)
{
     88a:	ff 92       	push	r15
     88c:	0f 93       	push	r16
     88e:	1f 93       	push	r17
     890:	cf 93       	push	r28
     892:	df 93       	push	r29
     894:	18 2f       	mov	r17, r24
     896:	f9 2e       	mov	r15, r25
     898:	c6 2f       	mov	r28, r22

	Assert(address <= EEPROM_SIZE);
	/*  Flush buffer to make sure no unintentional data is written and load
	 *  the "Page Load" command into the command register.
	 */
	old_cmd = NVM.CMD;
     89a:	e0 ec       	ldi	r30, 0xC0	; 192
     89c:	f1 e0       	ldi	r31, 0x01	; 1
     89e:	02 85       	ldd	r16, Z+10	; 0x0a
	nvm_eeprom_flush_buffer();
     8a0:	d1 df       	rcall	.-94     	; 0x844 <nvm_eeprom_flush_buffer>
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
     8a2:	e0 ec       	ldi	r30, 0xC0	; 192
     8a4:	f1 e0       	ldi	r31, 0x01	; 1
     8a6:	27 85       	ldd	r18, Z+15	; 0x0f
     8a8:	22 23       	and	r18, r18
     8aa:	ec f3       	brlt	.-6      	; 0x8a6 <nvm_eeprom_write_byte+0x1c>
	// Wait until NVM is ready
	nvm_wait_until_ready();
	nvm_eeprom_load_byte_to_buffer(address, value);
     8ac:	6c 2f       	mov	r22, r28
     8ae:	81 2f       	mov	r24, r17
     8b0:	da df       	rcall	.-76     	; 0x866 <nvm_eeprom_load_byte_to_buffer>

	// Set address to write to
	NVM.ADDR2 = 0x00;
     8b2:	c0 ec       	ldi	r28, 0xC0	; 192
     8b4:	d1 e0       	ldi	r29, 0x01	; 1
     8b6:	1a 82       	std	Y+2, r1	; 0x02
	NVM.ADDR1 = (address >> 8) & 0xFF;
     8b8:	f9 82       	std	Y+1, r15	; 0x01
	NVM.ADDR0 = address & 0xFF;
     8ba:	18 83       	st	Y, r17

	/*  Issue EEPROM Atomic Write (Erase&Write) command. Load command, write
	 *  the protection signature and execute command.
	 */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
     8bc:	85 e3       	ldi	r24, 0x35	; 53
     8be:	8a 87       	std	Y+10, r24	; 0x0a
 * \note The correct NVM command must be set in the NVM.CMD register before
 *       calling this function.
 */
static inline void nvm_exec(void)
{
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
     8c0:	61 e0       	ldi	r22, 0x01	; 1
     8c2:	8b ec       	ldi	r24, 0xCB	; 203
     8c4:	91 e0       	ldi	r25, 0x01	; 1
     8c6:	b8 df       	rcall	.-144    	; 0x838 <ccp_write_io>
	nvm_exec();
	NVM.CMD = old_cmd;
     8c8:	0a 87       	std	Y+10, r16	; 0x0a
}
     8ca:	df 91       	pop	r29
     8cc:	cf 91       	pop	r28
     8ce:	1f 91       	pop	r17
     8d0:	0f 91       	pop	r16
     8d2:	ff 90       	pop	r15
     8d4:	08 95       	ret

000008d6 <nvm_eeprom_load_page_to_buffer>:
 *       EEPROM write page operation.
 *
 * \param  values   Pointer to SRAM buffer containing an entire page.
 */
void nvm_eeprom_load_page_to_buffer(const uint8_t *values)
{
     8d6:	ef 92       	push	r14
     8d8:	ff 92       	push	r15
     8da:	0f 93       	push	r16
     8dc:	1f 93       	push	r17
     8de:	cf 93       	push	r28
     8e0:	df 93       	push	r29
     8e2:	8c 01       	movw	r16, r24
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
     8e4:	e0 ec       	ldi	r30, 0xC0	; 192
     8e6:	f1 e0       	ldi	r31, 0x01	; 1
     8e8:	87 85       	ldd	r24, Z+15	; 0x0f
     8ea:	88 23       	and	r24, r24
     8ec:	ec f3       	brlt	.-6      	; 0x8e8 <nvm_eeprom_load_page_to_buffer+0x12>
 *       is written to the EEPROM page given by the address parameter to the
 *       EEPROM write page operation.
 *
 * \param  values   Pointer to SRAM buffer containing an entire page.
 */
void nvm_eeprom_load_page_to_buffer(const uint8_t *values)
     8ee:	78 01       	movw	r14, r16
     8f0:	80 e2       	ldi	r24, 0x20	; 32
     8f2:	e8 0e       	add	r14, r24
     8f4:	f1 1c       	adc	r15, r1
     8f6:	e8 01       	movw	r28, r16
     8f8:	8c 2f       	mov	r24, r28
     8fa:	80 1b       	sub	r24, r16
	nvm_wait_until_ready();

	// Load multiple bytes into page buffer
	uint8_t i;
	for (i = 0; i < EEPROM_PAGE_SIZE; ++i) {
		nvm_eeprom_load_byte_to_buffer(i, *values);
     8fc:	69 91       	ld	r22, Y+
     8fe:	b3 df       	rcall	.-154    	; 0x866 <nvm_eeprom_load_byte_to_buffer>
	// Wait until NVM is ready
	nvm_wait_until_ready();

	// Load multiple bytes into page buffer
	uint8_t i;
	for (i = 0; i < EEPROM_PAGE_SIZE; ++i) {
     900:	ce 15       	cp	r28, r14
     902:	df 05       	cpc	r29, r15
     904:	c9 f7       	brne	.-14     	; 0x8f8 <nvm_eeprom_load_page_to_buffer+0x22>
		nvm_eeprom_load_byte_to_buffer(i, *values);
		++values;
	}
}
     906:	df 91       	pop	r29
     908:	cf 91       	pop	r28
     90a:	1f 91       	pop	r17
     90c:	0f 91       	pop	r16
     90e:	ff 90       	pop	r15
     910:	ef 90       	pop	r14
     912:	08 95       	ret

00000914 <nvm_eeprom_atomic_write_page>:
 * locations that have not been loaded will be left untouched in EEPROM.
 *
 * \param  page_addr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGE_SIZE
 */
void nvm_eeprom_atomic_write_page(uint8_t page_addr)
{
     914:	1f 93       	push	r17
     916:	cf 93       	push	r28
     918:	df 93       	push	r29
     91a:	e0 ec       	ldi	r30, 0xC0	; 192
     91c:	f1 e0       	ldi	r31, 0x01	; 1
     91e:	97 85       	ldd	r25, Z+15	; 0x0f
     920:	99 23       	and	r25, r25
     922:	ec f3       	brlt	.-6      	; 0x91e <nvm_eeprom_atomic_write_page+0xa>
	// Wait until NVM is ready
	nvm_wait_until_ready();

	// Calculate page address
	uint16_t address = (uint16_t)(page_addr * EEPROM_PAGE_SIZE);
     924:	20 e2       	ldi	r18, 0x20	; 32
     926:	82 9f       	mul	r24, r18
     928:	c0 01       	movw	r24, r0
     92a:	11 24       	eor	r1, r1

	Assert(address <= EEPROM_SIZE);

	// Set address
	NVM.ADDR2 = 0x00;
     92c:	c0 ec       	ldi	r28, 0xC0	; 192
     92e:	d1 e0       	ldi	r29, 0x01	; 1
     930:	1a 82       	std	Y+2, r1	; 0x02
	NVM.ADDR1 = (address >> 8) & 0xFF;
     932:	99 83       	std	Y+1, r25	; 0x01
	NVM.ADDR0 = address & 0xFF;
     934:	88 83       	st	Y, r24
 */
static inline void nvm_issue_command(NVM_CMD_t nvm_command)
{
	uint8_t old_cmd;

	old_cmd = NVM.CMD;
     936:	1a 85       	ldd	r17, Y+10	; 0x0a
	NVM.CMD = nvm_command;
     938:	85 e3       	ldi	r24, 0x35	; 53
     93a:	8a 87       	std	Y+10, r24	; 0x0a
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
     93c:	61 e0       	ldi	r22, 0x01	; 1
     93e:	8b ec       	ldi	r24, 0xCB	; 203
     940:	91 e0       	ldi	r25, 0x01	; 1
     942:	7a df       	rcall	.-268    	; 0x838 <ccp_write_io>
	NVM.CMD = old_cmd;
     944:	1a 87       	std	Y+10, r17	; 0x0a

	// Issue EEPROM Atomic Write (Erase&Write) command
	nvm_issue_command(NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc);
}
     946:	df 91       	pop	r29
     948:	cf 91       	pop	r28
     94a:	1f 91       	pop	r17
     94c:	08 95       	ret

0000094e <nvm_eeprom_erase_and_write_buffer>:
 * \param address   the address to where to write
 * \param buf       pointer to the data
 * \param len       the number of bytes to write
 */
void nvm_eeprom_erase_and_write_buffer(eeprom_addr_t address, const void *buf, uint16_t len)
{
     94e:	cf 92       	push	r12
     950:	df 92       	push	r13
     952:	ef 92       	push	r14
     954:	ff 92       	push	r15
     956:	0f 93       	push	r16
     958:	1f 93       	push	r17
     95a:	cf 93       	push	r28
     95c:	df 93       	push	r29
     95e:	ec 01       	movw	r28, r24
     960:	7b 01       	movw	r14, r22
     962:	8a 01       	movw	r16, r20
	while (len) {
     964:	41 15       	cp	r20, r1
     966:	51 05       	cpc	r21, r1
     968:	51 f1       	breq	.+84     	; 0x9be <nvm_eeprom_erase_and_write_buffer+0x70>
		if (((address%EEPROM_PAGE_SIZE)==0) && (len>=EEPROM_PAGE_SIZE)) {
     96a:	ce 01       	movw	r24, r28
     96c:	8f 71       	andi	r24, 0x1F	; 31
     96e:	99 27       	eor	r25, r25
     970:	89 2b       	or	r24, r25
     972:	b1 f4       	brne	.+44     	; 0x9a0 <nvm_eeprom_erase_and_write_buffer+0x52>
     974:	00 32       	cpi	r16, 0x20	; 32
     976:	11 05       	cpc	r17, r1
     978:	98 f0       	brcs	.+38     	; 0x9a0 <nvm_eeprom_erase_and_write_buffer+0x52>
			// A full page can be written
			nvm_eeprom_load_page_to_buffer((uint8_t*)buf);
     97a:	c7 01       	movw	r24, r14
     97c:	ac df       	rcall	.-168    	; 0x8d6 <nvm_eeprom_load_page_to_buffer>
			nvm_eeprom_atomic_write_page(address/EEPROM_PAGE_SIZE);
     97e:	ce 01       	movw	r24, r28
     980:	96 95       	lsr	r25
     982:	87 95       	ror	r24
     984:	92 95       	swap	r25
     986:	82 95       	swap	r24
     988:	8f 70       	andi	r24, 0x0F	; 15
     98a:	89 27       	eor	r24, r25
     98c:	9f 70       	andi	r25, 0x0F	; 15
     98e:	89 27       	eor	r24, r25
     990:	c1 df       	rcall	.-126    	; 0x914 <nvm_eeprom_atomic_write_page>
			address += EEPROM_PAGE_SIZE;
     992:	a0 96       	adiw	r28, 0x20	; 32
			buf = (uint8_t*)buf + EEPROM_PAGE_SIZE;
     994:	80 e2       	ldi	r24, 0x20	; 32
     996:	e8 0e       	add	r14, r24
     998:	f1 1c       	adc	r15, r1
			len -= EEPROM_PAGE_SIZE;
     99a:	00 52       	subi	r16, 0x20	; 32
     99c:	11 09       	sbc	r17, r1
     99e:	0c c0       	rjmp	.+24     	; 0x9b8 <nvm_eeprom_erase_and_write_buffer+0x6a>
		} else {
			nvm_eeprom_write_byte(address++, *(uint8_t*)buf);
     9a0:	6e 01       	movw	r12, r28
     9a2:	ef ef       	ldi	r30, 0xFF	; 255
     9a4:	ce 1a       	sub	r12, r30
     9a6:	de 0a       	sbc	r13, r30
     9a8:	f7 01       	movw	r30, r14
     9aa:	61 91       	ld	r22, Z+
     9ac:	7f 01       	movw	r14, r30
     9ae:	ce 01       	movw	r24, r28
     9b0:	6c df       	rcall	.-296    	; 0x88a <nvm_eeprom_write_byte>
			buf = (uint8_t*)buf + 1;
			len--;
     9b2:	01 50       	subi	r16, 0x01	; 1
     9b4:	11 09       	sbc	r17, r1
			nvm_eeprom_atomic_write_page(address/EEPROM_PAGE_SIZE);
			address += EEPROM_PAGE_SIZE;
			buf = (uint8_t*)buf + EEPROM_PAGE_SIZE;
			len -= EEPROM_PAGE_SIZE;
		} else {
			nvm_eeprom_write_byte(address++, *(uint8_t*)buf);
     9b6:	e6 01       	movw	r28, r12
 * \param buf       pointer to the data
 * \param len       the number of bytes to write
 */
void nvm_eeprom_erase_and_write_buffer(eeprom_addr_t address, const void *buf, uint16_t len)
{
	while (len) {
     9b8:	01 15       	cp	r16, r1
     9ba:	11 05       	cpc	r17, r1
     9bc:	b1 f6       	brne	.-84     	; 0x96a <nvm_eeprom_erase_and_write_buffer+0x1c>
			nvm_eeprom_write_byte(address++, *(uint8_t*)buf);
			buf = (uint8_t*)buf + 1;
			len--;
		}
	}
}
     9be:	df 91       	pop	r29
     9c0:	cf 91       	pop	r28
     9c2:	1f 91       	pop	r17
     9c4:	0f 91       	pop	r16
     9c6:	ff 90       	pop	r15
     9c8:	ef 90       	pop	r14
     9ca:	df 90       	pop	r13
     9cc:	cf 90       	pop	r12
     9ce:	08 95       	ret

000009d0 <rtc_set_time>:
 *
 * \param time Time value to set
 */
void rtc_set_time(uint32_t time)
{
	RTC.CTRL = RTC_PRESCALER_OFF_gc;
     9d0:	10 92 00 04 	sts	0x0400, r1
 * \brief Check if RTC is busy synchronizing
 */
__always_inline bool rtc_is_busy(void);
__always_inline bool rtc_is_busy(void)
{
	return RTC.STATUS & RTC_SYNCBUSY_bm;
     9d4:	e0 e0       	ldi	r30, 0x00	; 0
     9d6:	f4 e0       	ldi	r31, 0x04	; 4
     9d8:	21 81       	ldd	r18, Z+1	; 0x01
 */
void rtc_set_time(uint32_t time)
{
	RTC.CTRL = RTC_PRESCALER_OFF_gc;

	while (rtc_is_busy());
     9da:	20 fd       	sbrc	r18, 0
     9dc:	fd cf       	rjmp	.-6      	; 0x9d8 <rtc_set_time+0x8>

	RTC.CNT = time;
     9de:	e0 e0       	ldi	r30, 0x00	; 0
     9e0:	f4 e0       	ldi	r31, 0x04	; 4
     9e2:	60 87       	std	Z+8, r22	; 0x08
     9e4:	71 87       	std	Z+9, r23	; 0x09
	rtc_data.counter_high = time >> 16;
     9e6:	80 93 7e 22 	sts	0x227E, r24
     9ea:	90 93 7f 22 	sts	0x227F, r25
	RTC.CTRL = CONFIG_RTC_PRESCALER;
     9ee:	87 e0       	ldi	r24, 0x07	; 7
     9f0:	80 83       	st	Z, r24
     9f2:	08 95       	ret

000009f4 <rtc_get_time>:
 *       sleep.
 * \note Without this errata this function can block for up to 1 RTC
 *       clock source cycle after waking up from sleep.
 */
uint32_t rtc_get_time(void)
{
     9f4:	0f 93       	push	r16
     9f6:	1f 93       	push	r17
 * \brief Check if RTC is busy synchronizing
 */
__always_inline bool rtc_is_busy(void);
__always_inline bool rtc_is_busy(void)
{
	return RTC.STATUS & RTC_SYNCBUSY_bm;
     9f8:	e0 e0       	ldi	r30, 0x00	; 0
     9fa:	f4 e0       	ldi	r31, 0x04	; 4
     9fc:	81 81       	ldd	r24, Z+1	; 0x01
{
	irqflags_t flags;
	uint16_t   count_high;
	uint16_t   count_low;

	while (rtc_is_busy());
     9fe:	80 fd       	sbrc	r24, 0
     a00:	fd cf       	rjmp	.-6      	; 0x9fc <rtc_get_time+0x8>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     a02:	2f b7       	in	r18, 0x3f	; 63
	cpu_irq_disable();
     a04:	f8 94       	cli

	flags = cpu_irq_save();
	count_high = rtc_data.counter_high;
     a06:	00 91 7e 22 	lds	r16, 0x227E
     a0a:	10 91 7f 22 	lds	r17, 0x227F
	count_low = RTC.CNT;
     a0e:	e0 e0       	ldi	r30, 0x00	; 0
     a10:	f4 e0       	ldi	r31, 0x04	; 4
     a12:	80 85       	ldd	r24, Z+8	; 0x08
     a14:	91 85       	ldd	r25, Z+9	; 0x09
	// Test for possible pending increase of high count value
	if ((count_low == 0) && (RTC.INTFLAGS & RTC_OVFIF_bm))
     a16:	00 97       	sbiw	r24, 0x00	; 0
     a18:	29 f4       	brne	.+10     	; 0xa24 <rtc_get_time+0x30>
     a1a:	33 81       	ldd	r19, Z+3	; 0x03
     a1c:	30 ff       	sbrs	r19, 0
     a1e:	02 c0       	rjmp	.+4      	; 0xa24 <rtc_get_time+0x30>
		count_high++;
     a20:	0f 5f       	subi	r16, 0xFF	; 255
     a22:	1f 4f       	sbci	r17, 0xFF	; 255
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     a24:	2f bf       	out	0x3f, r18	; 63
	cpu_irq_restore(flags);

	return ((uint32_t)count_high << 16) | count_low;
     a26:	20 e0       	ldi	r18, 0x00	; 0
     a28:	30 e0       	ldi	r19, 0x00	; 0
     a2a:	98 01       	movw	r18, r16
     a2c:	11 27       	eor	r17, r17
     a2e:	00 27       	eor	r16, r16
     a30:	a0 e0       	ldi	r26, 0x00	; 0
     a32:	b0 e0       	ldi	r27, 0x00	; 0
     a34:	08 2b       	or	r16, r24
     a36:	19 2b       	or	r17, r25
     a38:	2a 2b       	or	r18, r26
     a3a:	3b 2b       	or	r19, r27
}
     a3c:	60 2f       	mov	r22, r16
     a3e:	71 2f       	mov	r23, r17
     a40:	82 2f       	mov	r24, r18
     a42:	93 2f       	mov	r25, r19
     a44:	1f 91       	pop	r17
     a46:	0f 91       	pop	r16
     a48:	08 95       	ret

00000a4a <rtc_set_alarm>:
 * \param time Absolute time value. See also \ref rtc_min_alarm_time
 * \pre Needs interrupts disabled if used from several contexts
 */
void rtc_set_alarm(uint32_t time)
{
	RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
     a4a:	e0 e0       	ldi	r30, 0x00	; 0
     a4c:	f4 e0       	ldi	r31, 0x04	; 4
     a4e:	21 e0       	ldi	r18, 0x01	; 1
     a50:	22 83       	std	Z+2, r18	; 0x02
	RTC.COMP = time;
     a52:	64 87       	std	Z+12, r22	; 0x0c
     a54:	75 87       	std	Z+13, r23	; 0x0d
	rtc_data.alarm_low = time;
     a56:	60 93 82 22 	sts	0x2282, r22
     a5a:	70 93 83 22 	sts	0x2283, r23
	rtc_data.alarm_high = time >> 16;
     a5e:	80 93 80 22 	sts	0x2280, r24
     a62:	90 93 81 22 	sts	0x2281, r25
 * \brief Check if RTC is busy synchronizing
 */
__always_inline bool rtc_is_busy(void);
__always_inline bool rtc_is_busy(void)
{
	return RTC.STATUS & RTC_SYNCBUSY_bm;
     a66:	81 81       	ldd	r24, Z+1	; 0x01
	RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
	RTC.COMP = time;
	rtc_data.alarm_low = time;
	rtc_data.alarm_high = time >> 16;

	while (rtc_is_busy());
     a68:	80 fd       	sbrc	r24, 0
     a6a:	fd cf       	rjmp	.-6      	; 0xa66 <rtc_set_alarm+0x1c>

	RTC.INTFLAGS = RTC_COMPIF_bm;
     a6c:	e0 e0       	ldi	r30, 0x00	; 0
     a6e:	f4 e0       	ldi	r31, 0x04	; 4
     a70:	82 e0       	ldi	r24, 0x02	; 2
     a72:	83 83       	std	Z+3, r24	; 0x03
	RTC.INTCTRL = (uint8_t)RTC_COMPARE_INT_LEVEL
     a74:	85 e0       	ldi	r24, 0x05	; 5
     a76:	82 83       	std	Z+2, r24	; 0x02
     a78:	08 95       	ret

00000a7a <rtc_set_callback>:
 *
 * \param callback Callback function pointer
 */
void rtc_set_callback(rtc_callback_t callback)
{
	rtc_data.callback = callback;
     a7a:	80 93 84 22 	sts	0x2284, r24
     a7e:	90 93 85 22 	sts	0x2285, r25
     a82:	08 95       	ret

00000a84 <rtc_init>:
 * \note The RTC clock source used by the RTC module should be set up before
 *       calling this function. 
 */
void rtc_init(void)
{
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
     a84:	64 e0       	ldi	r22, 0x04	; 4
     a86:	80 e0       	ldi	r24, 0x00	; 0
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a3 de       	rcall	.-698    	; 0x7d2 <sysclk_enable_module>
	RTC.PER = 0xffff;
     a8c:	e0 e0       	ldi	r30, 0x00	; 0
     a8e:	f4 e0       	ldi	r31, 0x04	; 4
     a90:	8f ef       	ldi	r24, 0xFF	; 255
     a92:	9f ef       	ldi	r25, 0xFF	; 255
     a94:	82 87       	std	Z+10, r24	; 0x0a
     a96:	93 87       	std	Z+11, r25	; 0x0b
	RTC.CNT = 0;
     a98:	10 86       	std	Z+8, r1	; 0x08
     a9a:	11 86       	std	Z+9, r1	; 0x09

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     a9c:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     a9e:	f8 94       	cli
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
     aa0:	ab e7       	ldi	r26, 0x7B	; 123
     aa2:	b2 e2       	ldi	r27, 0x22	; 34
     aa4:	9c 91       	ld	r25, X
     aa6:	9f 5f       	subi	r25, 0xFF	; 255
     aa8:	9c 93       	st	X, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     aaa:	8f bf       	out	0x3f, r24	; 63
	/* Since overflow interrupt is needed all the time we limit sleep to
	 * power-save.
	 */
	sleepmgr_lock_mode(SLEEPMGR_PSAVE);
	RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	82 83       	std	Z+2, r24	; 0x02
	RTC.CTRL = CONFIG_RTC_PRESCALER;
     ab0:	87 e0       	ldi	r24, 0x07	; 7
     ab2:	80 83       	st	Z, r24
     ab4:	08 95       	ret

00000ab6 <__vector_10>:
/**
 * \internal
 * \brief Overflow interrupt handling high counter
 */
ISR(RTC_OVF_vect)
{
     ab6:	1f 92       	push	r1
     ab8:	0f 92       	push	r0
     aba:	0f b6       	in	r0, 0x3f	; 63
     abc:	0f 92       	push	r0
     abe:	11 24       	eor	r1, r1
     ac0:	8f 93       	push	r24
     ac2:	9f 93       	push	r25
     ac4:	ef 93       	push	r30
     ac6:	ff 93       	push	r31
	rtc_data.counter_high++;
     ac8:	ee e7       	ldi	r30, 0x7E	; 126
     aca:	f2 e2       	ldi	r31, 0x22	; 34
     acc:	80 81       	ld	r24, Z
     ace:	91 81       	ldd	r25, Z+1	; 0x01
     ad0:	01 96       	adiw	r24, 0x01	; 1
     ad2:	80 83       	st	Z, r24
     ad4:	91 83       	std	Z+1, r25	; 0x01
}
     ad6:	ff 91       	pop	r31
     ad8:	ef 91       	pop	r30
     ada:	9f 91       	pop	r25
     adc:	8f 91       	pop	r24
     ade:	0f 90       	pop	r0
     ae0:	0f be       	out	0x3f, r0	; 63
     ae2:	0f 90       	pop	r0
     ae4:	1f 90       	pop	r1
     ae6:	18 95       	reti

00000ae8 <__vector_11>:
/**
 * \internal
 * \brief Compare interrupt used for alarm
 */
ISR(RTC_COMP_vect)
{
     ae8:	1f 92       	push	r1
     aea:	0f 92       	push	r0
     aec:	0f b6       	in	r0, 0x3f	; 63
     aee:	0f 92       	push	r0
     af0:	11 24       	eor	r1, r1
     af2:	cf 92       	push	r12
     af4:	df 92       	push	r13
     af6:	ef 92       	push	r14
     af8:	ff 92       	push	r15
     afa:	0f 93       	push	r16
     afc:	1f 93       	push	r17
     afe:	2f 93       	push	r18
     b00:	3f 93       	push	r19
     b02:	4f 93       	push	r20
     b04:	5f 93       	push	r21
     b06:	6f 93       	push	r22
     b08:	7f 93       	push	r23
     b0a:	8f 93       	push	r24
     b0c:	9f 93       	push	r25
     b0e:	af 93       	push	r26
     b10:	bf 93       	push	r27
     b12:	ef 93       	push	r30
     b14:	ff 93       	push	r31
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
     b16:	40 91 7e 22 	lds	r20, 0x227E
     b1a:	50 91 7f 22 	lds	r21, 0x227F
     b1e:	80 91 80 22 	lds	r24, 0x2280
     b22:	90 91 81 22 	lds	r25, 0x2281
     b26:	48 17       	cp	r20, r24
     b28:	59 07       	cpc	r21, r25
     b2a:	f0 f1       	brcs	.+124    	; 0xba8 <__vector_11+0xc0>
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
     b2c:	81 e0       	ldi	r24, 0x01	; 1
     b2e:	e0 e0       	ldi	r30, 0x00	; 0
     b30:	f4 e0       	ldi	r31, 0x04	; 4
     b32:	82 83       	std	Z+2, r24	; 0x02
		if (rtc_data.callback) {
     b34:	e0 91 84 22 	lds	r30, 0x2284
     b38:	f0 91 85 22 	lds	r31, 0x2285
     b3c:	30 97       	sbiw	r30, 0x00	; 0
     b3e:	a1 f1       	breq	.+104    	; 0xba8 <__vector_11+0xc0>
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
					| RTC.CNT;
     b40:	a0 e0       	ldi	r26, 0x00	; 0
     b42:	b4 e0       	ldi	r27, 0x04	; 4
     b44:	18 96       	adiw	r26, 0x08	; 8
     b46:	8d 91       	ld	r24, X+
     b48:	9c 91       	ld	r25, X
     b4a:	19 97       	sbiw	r26, 0x09	; 9
ISR(RTC_COMP_vect)
{
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
     b4c:	60 e0       	ldi	r22, 0x00	; 0
     b4e:	70 e0       	ldi	r23, 0x00	; 0
     b50:	ba 01       	movw	r22, r20
     b52:	55 27       	eor	r21, r21
     b54:	44 27       	eor	r20, r20
					| RTC.CNT;
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
ISR(RTC_COMP_vect)
{
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
     b5a:	8a 01       	movw	r16, r20
     b5c:	9b 01       	movw	r18, r22
     b5e:	08 2b       	or	r16, r24
     b60:	19 2b       	or	r17, r25
     b62:	2a 2b       	or	r18, r26
     b64:	3b 2b       	or	r19, r27
     b66:	c9 01       	movw	r24, r18
     b68:	b8 01       	movw	r22, r16
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
     b6a:	00 91 80 22 	lds	r16, 0x2280
     b6e:	10 91 81 22 	lds	r17, 0x2281
     b72:	20 e0       	ldi	r18, 0x00	; 0
     b74:	30 e0       	ldi	r19, 0x00	; 0
     b76:	98 01       	movw	r18, r16
     b78:	11 27       	eor	r17, r17
     b7a:	00 27       	eor	r16, r16
					| rtc_data.alarm_low;
     b7c:	c0 90 82 22 	lds	r12, 0x2282
     b80:	d0 90 83 22 	lds	r13, 0x2283
     b84:	e1 2c       	mov	r14, r1
     b86:	f1 2c       	mov	r15, r1
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
     b88:	0c 29       	or	r16, r12
     b8a:	1d 29       	or	r17, r13
     b8c:	2e 29       	or	r18, r14
     b8e:	3f 29       	or	r19, r15
					| rtc_data.alarm_low;
			/* Workaround for errata. Count might not be updated
			 * when waking up from sleep, so in this case use alarm
			 * time plus one.
			 */
			if (alarm >= count)
     b90:	06 17       	cp	r16, r22
     b92:	17 07       	cpc	r17, r23
     b94:	28 07       	cpc	r18, r24
     b96:	39 07       	cpc	r19, r25
     b98:	30 f0       	brcs	.+12     	; 0xba6 <__vector_11+0xbe>
				count = alarm + 1;
     b9a:	c9 01       	movw	r24, r18
     b9c:	b8 01       	movw	r22, r16
     b9e:	6f 5f       	subi	r22, 0xFF	; 255
     ba0:	7f 4f       	sbci	r23, 0xFF	; 255
     ba2:	8f 4f       	sbci	r24, 0xFF	; 255
     ba4:	9f 4f       	sbci	r25, 0xFF	; 255
			rtc_data.callback(count);
     ba6:	09 95       	icall
		}
	}
}
     ba8:	ff 91       	pop	r31
     baa:	ef 91       	pop	r30
     bac:	bf 91       	pop	r27
     bae:	af 91       	pop	r26
     bb0:	9f 91       	pop	r25
     bb2:	8f 91       	pop	r24
     bb4:	7f 91       	pop	r23
     bb6:	6f 91       	pop	r22
     bb8:	5f 91       	pop	r21
     bba:	4f 91       	pop	r20
     bbc:	3f 91       	pop	r19
     bbe:	2f 91       	pop	r18
     bc0:	1f 91       	pop	r17
     bc2:	0f 91       	pop	r16
     bc4:	ff 90       	pop	r15
     bc6:	ef 90       	pop	r14
     bc8:	df 90       	pop	r13
     bca:	cf 90       	pop	r12
     bcc:	0f 90       	pop	r0
     bce:	0f be       	out	0x3f, r0	; 63
     bd0:	0f 90       	pop	r0
     bd2:	1f 90       	pop	r1
     bd4:	18 95       	reti

00000bd6 <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
     bd6:	1f 92       	push	r1
     bd8:	0f 92       	push	r0
     bda:	0f b6       	in	r0, 0x3f	; 63
     bdc:	0f 92       	push	r0
     bde:	11 24       	eor	r1, r1
     be0:	2f 93       	push	r18
     be2:	3f 93       	push	r19
     be4:	4f 93       	push	r20
     be6:	5f 93       	push	r21
     be8:	6f 93       	push	r22
     bea:	7f 93       	push	r23
     bec:	8f 93       	push	r24
     bee:	9f 93       	push	r25
     bf0:	af 93       	push	r26
     bf2:	bf 93       	push	r27
     bf4:	ef 93       	push	r30
     bf6:	ff 93       	push	r31
	if (tc_tcc0_ovf_callback) {
     bf8:	e0 91 16 22 	lds	r30, 0x2216
     bfc:	f0 91 17 22 	lds	r31, 0x2217
     c00:	30 97       	sbiw	r30, 0x00	; 0
     c02:	09 f0       	breq	.+2      	; 0xc06 <__vector_14+0x30>
		tc_tcc0_ovf_callback();
     c04:	09 95       	icall
	}
}
     c06:	ff 91       	pop	r31
     c08:	ef 91       	pop	r30
     c0a:	bf 91       	pop	r27
     c0c:	af 91       	pop	r26
     c0e:	9f 91       	pop	r25
     c10:	8f 91       	pop	r24
     c12:	7f 91       	pop	r23
     c14:	6f 91       	pop	r22
     c16:	5f 91       	pop	r21
     c18:	4f 91       	pop	r20
     c1a:	3f 91       	pop	r19
     c1c:	2f 91       	pop	r18
     c1e:	0f 90       	pop	r0
     c20:	0f be       	out	0x3f, r0	; 63
     c22:	0f 90       	pop	r0
     c24:	1f 90       	pop	r1
     c26:	18 95       	reti

00000c28 <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
     c28:	1f 92       	push	r1
     c2a:	0f 92       	push	r0
     c2c:	0f b6       	in	r0, 0x3f	; 63
     c2e:	0f 92       	push	r0
     c30:	11 24       	eor	r1, r1
     c32:	2f 93       	push	r18
     c34:	3f 93       	push	r19
     c36:	4f 93       	push	r20
     c38:	5f 93       	push	r21
     c3a:	6f 93       	push	r22
     c3c:	7f 93       	push	r23
     c3e:	8f 93       	push	r24
     c40:	9f 93       	push	r25
     c42:	af 93       	push	r26
     c44:	bf 93       	push	r27
     c46:	ef 93       	push	r30
     c48:	ff 93       	push	r31
	if (tc_tcc0_err_callback) {
     c4a:	e0 91 18 22 	lds	r30, 0x2218
     c4e:	f0 91 19 22 	lds	r31, 0x2219
     c52:	30 97       	sbiw	r30, 0x00	; 0
     c54:	09 f0       	breq	.+2      	; 0xc58 <__vector_15+0x30>
		tc_tcc0_err_callback();
     c56:	09 95       	icall
	}
}
     c58:	ff 91       	pop	r31
     c5a:	ef 91       	pop	r30
     c5c:	bf 91       	pop	r27
     c5e:	af 91       	pop	r26
     c60:	9f 91       	pop	r25
     c62:	8f 91       	pop	r24
     c64:	7f 91       	pop	r23
     c66:	6f 91       	pop	r22
     c68:	5f 91       	pop	r21
     c6a:	4f 91       	pop	r20
     c6c:	3f 91       	pop	r19
     c6e:	2f 91       	pop	r18
     c70:	0f 90       	pop	r0
     c72:	0f be       	out	0x3f, r0	; 63
     c74:	0f 90       	pop	r0
     c76:	1f 90       	pop	r1
     c78:	18 95       	reti

00000c7a <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
     c7a:	1f 92       	push	r1
     c7c:	0f 92       	push	r0
     c7e:	0f b6       	in	r0, 0x3f	; 63
     c80:	0f 92       	push	r0
     c82:	11 24       	eor	r1, r1
     c84:	2f 93       	push	r18
     c86:	3f 93       	push	r19
     c88:	4f 93       	push	r20
     c8a:	5f 93       	push	r21
     c8c:	6f 93       	push	r22
     c8e:	7f 93       	push	r23
     c90:	8f 93       	push	r24
     c92:	9f 93       	push	r25
     c94:	af 93       	push	r26
     c96:	bf 93       	push	r27
     c98:	ef 93       	push	r30
     c9a:	ff 93       	push	r31
	if (tc_tcc0_cca_callback) {
     c9c:	e0 91 1a 22 	lds	r30, 0x221A
     ca0:	f0 91 1b 22 	lds	r31, 0x221B
     ca4:	30 97       	sbiw	r30, 0x00	; 0
     ca6:	09 f0       	breq	.+2      	; 0xcaa <__vector_16+0x30>
		tc_tcc0_cca_callback();
     ca8:	09 95       	icall
	}
}
     caa:	ff 91       	pop	r31
     cac:	ef 91       	pop	r30
     cae:	bf 91       	pop	r27
     cb0:	af 91       	pop	r26
     cb2:	9f 91       	pop	r25
     cb4:	8f 91       	pop	r24
     cb6:	7f 91       	pop	r23
     cb8:	6f 91       	pop	r22
     cba:	5f 91       	pop	r21
     cbc:	4f 91       	pop	r20
     cbe:	3f 91       	pop	r19
     cc0:	2f 91       	pop	r18
     cc2:	0f 90       	pop	r0
     cc4:	0f be       	out	0x3f, r0	; 63
     cc6:	0f 90       	pop	r0
     cc8:	1f 90       	pop	r1
     cca:	18 95       	reti

00000ccc <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
     ccc:	1f 92       	push	r1
     cce:	0f 92       	push	r0
     cd0:	0f b6       	in	r0, 0x3f	; 63
     cd2:	0f 92       	push	r0
     cd4:	11 24       	eor	r1, r1
     cd6:	2f 93       	push	r18
     cd8:	3f 93       	push	r19
     cda:	4f 93       	push	r20
     cdc:	5f 93       	push	r21
     cde:	6f 93       	push	r22
     ce0:	7f 93       	push	r23
     ce2:	8f 93       	push	r24
     ce4:	9f 93       	push	r25
     ce6:	af 93       	push	r26
     ce8:	bf 93       	push	r27
     cea:	ef 93       	push	r30
     cec:	ff 93       	push	r31
	if (tc_tcc0_ccb_callback) {
     cee:	e0 91 1c 22 	lds	r30, 0x221C
     cf2:	f0 91 1d 22 	lds	r31, 0x221D
     cf6:	30 97       	sbiw	r30, 0x00	; 0
     cf8:	09 f0       	breq	.+2      	; 0xcfc <__vector_17+0x30>
		tc_tcc0_ccb_callback();
     cfa:	09 95       	icall
	}
}
     cfc:	ff 91       	pop	r31
     cfe:	ef 91       	pop	r30
     d00:	bf 91       	pop	r27
     d02:	af 91       	pop	r26
     d04:	9f 91       	pop	r25
     d06:	8f 91       	pop	r24
     d08:	7f 91       	pop	r23
     d0a:	6f 91       	pop	r22
     d0c:	5f 91       	pop	r21
     d0e:	4f 91       	pop	r20
     d10:	3f 91       	pop	r19
     d12:	2f 91       	pop	r18
     d14:	0f 90       	pop	r0
     d16:	0f be       	out	0x3f, r0	; 63
     d18:	0f 90       	pop	r0
     d1a:	1f 90       	pop	r1
     d1c:	18 95       	reti

00000d1e <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
     d1e:	1f 92       	push	r1
     d20:	0f 92       	push	r0
     d22:	0f b6       	in	r0, 0x3f	; 63
     d24:	0f 92       	push	r0
     d26:	11 24       	eor	r1, r1
     d28:	2f 93       	push	r18
     d2a:	3f 93       	push	r19
     d2c:	4f 93       	push	r20
     d2e:	5f 93       	push	r21
     d30:	6f 93       	push	r22
     d32:	7f 93       	push	r23
     d34:	8f 93       	push	r24
     d36:	9f 93       	push	r25
     d38:	af 93       	push	r26
     d3a:	bf 93       	push	r27
     d3c:	ef 93       	push	r30
     d3e:	ff 93       	push	r31
	if (tc_tcc0_ccc_callback) {
     d40:	e0 91 1e 22 	lds	r30, 0x221E
     d44:	f0 91 1f 22 	lds	r31, 0x221F
     d48:	30 97       	sbiw	r30, 0x00	; 0
     d4a:	09 f0       	breq	.+2      	; 0xd4e <__vector_18+0x30>
		tc_tcc0_ccc_callback();
     d4c:	09 95       	icall
	}
}
     d4e:	ff 91       	pop	r31
     d50:	ef 91       	pop	r30
     d52:	bf 91       	pop	r27
     d54:	af 91       	pop	r26
     d56:	9f 91       	pop	r25
     d58:	8f 91       	pop	r24
     d5a:	7f 91       	pop	r23
     d5c:	6f 91       	pop	r22
     d5e:	5f 91       	pop	r21
     d60:	4f 91       	pop	r20
     d62:	3f 91       	pop	r19
     d64:	2f 91       	pop	r18
     d66:	0f 90       	pop	r0
     d68:	0f be       	out	0x3f, r0	; 63
     d6a:	0f 90       	pop	r0
     d6c:	1f 90       	pop	r1
     d6e:	18 95       	reti

00000d70 <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
     d70:	1f 92       	push	r1
     d72:	0f 92       	push	r0
     d74:	0f b6       	in	r0, 0x3f	; 63
     d76:	0f 92       	push	r0
     d78:	11 24       	eor	r1, r1
     d7a:	2f 93       	push	r18
     d7c:	3f 93       	push	r19
     d7e:	4f 93       	push	r20
     d80:	5f 93       	push	r21
     d82:	6f 93       	push	r22
     d84:	7f 93       	push	r23
     d86:	8f 93       	push	r24
     d88:	9f 93       	push	r25
     d8a:	af 93       	push	r26
     d8c:	bf 93       	push	r27
     d8e:	ef 93       	push	r30
     d90:	ff 93       	push	r31
	if (tc_tcc0_ccd_callback) {
     d92:	e0 91 20 22 	lds	r30, 0x2220
     d96:	f0 91 21 22 	lds	r31, 0x2221
     d9a:	30 97       	sbiw	r30, 0x00	; 0
     d9c:	09 f0       	breq	.+2      	; 0xda0 <__vector_19+0x30>
		tc_tcc0_ccd_callback();
     d9e:	09 95       	icall
	}
}
     da0:	ff 91       	pop	r31
     da2:	ef 91       	pop	r30
     da4:	bf 91       	pop	r27
     da6:	af 91       	pop	r26
     da8:	9f 91       	pop	r25
     daa:	8f 91       	pop	r24
     dac:	7f 91       	pop	r23
     dae:	6f 91       	pop	r22
     db0:	5f 91       	pop	r21
     db2:	4f 91       	pop	r20
     db4:	3f 91       	pop	r19
     db6:	2f 91       	pop	r18
     db8:	0f 90       	pop	r0
     dba:	0f be       	out	0x3f, r0	; 63
     dbc:	0f 90       	pop	r0
     dbe:	1f 90       	pop	r1
     dc0:	18 95       	reti

00000dc2 <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
     dc2:	1f 92       	push	r1
     dc4:	0f 92       	push	r0
     dc6:	0f b6       	in	r0, 0x3f	; 63
     dc8:	0f 92       	push	r0
     dca:	11 24       	eor	r1, r1
     dcc:	2f 93       	push	r18
     dce:	3f 93       	push	r19
     dd0:	4f 93       	push	r20
     dd2:	5f 93       	push	r21
     dd4:	6f 93       	push	r22
     dd6:	7f 93       	push	r23
     dd8:	8f 93       	push	r24
     dda:	9f 93       	push	r25
     ddc:	af 93       	push	r26
     dde:	bf 93       	push	r27
     de0:	ef 93       	push	r30
     de2:	ff 93       	push	r31
	if (tc_tcc1_ovf_callback) {
     de4:	e0 91 22 22 	lds	r30, 0x2222
     de8:	f0 91 23 22 	lds	r31, 0x2223
     dec:	30 97       	sbiw	r30, 0x00	; 0
     dee:	09 f0       	breq	.+2      	; 0xdf2 <__vector_20+0x30>
		tc_tcc1_ovf_callback();
     df0:	09 95       	icall
	}
}
     df2:	ff 91       	pop	r31
     df4:	ef 91       	pop	r30
     df6:	bf 91       	pop	r27
     df8:	af 91       	pop	r26
     dfa:	9f 91       	pop	r25
     dfc:	8f 91       	pop	r24
     dfe:	7f 91       	pop	r23
     e00:	6f 91       	pop	r22
     e02:	5f 91       	pop	r21
     e04:	4f 91       	pop	r20
     e06:	3f 91       	pop	r19
     e08:	2f 91       	pop	r18
     e0a:	0f 90       	pop	r0
     e0c:	0f be       	out	0x3f, r0	; 63
     e0e:	0f 90       	pop	r0
     e10:	1f 90       	pop	r1
     e12:	18 95       	reti

00000e14 <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
     e14:	1f 92       	push	r1
     e16:	0f 92       	push	r0
     e18:	0f b6       	in	r0, 0x3f	; 63
     e1a:	0f 92       	push	r0
     e1c:	11 24       	eor	r1, r1
     e1e:	2f 93       	push	r18
     e20:	3f 93       	push	r19
     e22:	4f 93       	push	r20
     e24:	5f 93       	push	r21
     e26:	6f 93       	push	r22
     e28:	7f 93       	push	r23
     e2a:	8f 93       	push	r24
     e2c:	9f 93       	push	r25
     e2e:	af 93       	push	r26
     e30:	bf 93       	push	r27
     e32:	ef 93       	push	r30
     e34:	ff 93       	push	r31
	if (tc_tcc1_err_callback) {
     e36:	e0 91 24 22 	lds	r30, 0x2224
     e3a:	f0 91 25 22 	lds	r31, 0x2225
     e3e:	30 97       	sbiw	r30, 0x00	; 0
     e40:	09 f0       	breq	.+2      	; 0xe44 <__vector_21+0x30>
		tc_tcc1_err_callback();
     e42:	09 95       	icall
	}
}
     e44:	ff 91       	pop	r31
     e46:	ef 91       	pop	r30
     e48:	bf 91       	pop	r27
     e4a:	af 91       	pop	r26
     e4c:	9f 91       	pop	r25
     e4e:	8f 91       	pop	r24
     e50:	7f 91       	pop	r23
     e52:	6f 91       	pop	r22
     e54:	5f 91       	pop	r21
     e56:	4f 91       	pop	r20
     e58:	3f 91       	pop	r19
     e5a:	2f 91       	pop	r18
     e5c:	0f 90       	pop	r0
     e5e:	0f be       	out	0x3f, r0	; 63
     e60:	0f 90       	pop	r0
     e62:	1f 90       	pop	r1
     e64:	18 95       	reti

00000e66 <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
     e66:	1f 92       	push	r1
     e68:	0f 92       	push	r0
     e6a:	0f b6       	in	r0, 0x3f	; 63
     e6c:	0f 92       	push	r0
     e6e:	11 24       	eor	r1, r1
     e70:	2f 93       	push	r18
     e72:	3f 93       	push	r19
     e74:	4f 93       	push	r20
     e76:	5f 93       	push	r21
     e78:	6f 93       	push	r22
     e7a:	7f 93       	push	r23
     e7c:	8f 93       	push	r24
     e7e:	9f 93       	push	r25
     e80:	af 93       	push	r26
     e82:	bf 93       	push	r27
     e84:	ef 93       	push	r30
     e86:	ff 93       	push	r31
	if (tc_tcc1_cca_callback) {
     e88:	e0 91 26 22 	lds	r30, 0x2226
     e8c:	f0 91 27 22 	lds	r31, 0x2227
     e90:	30 97       	sbiw	r30, 0x00	; 0
     e92:	09 f0       	breq	.+2      	; 0xe96 <__vector_22+0x30>
		tc_tcc1_cca_callback();
     e94:	09 95       	icall
	}
}
     e96:	ff 91       	pop	r31
     e98:	ef 91       	pop	r30
     e9a:	bf 91       	pop	r27
     e9c:	af 91       	pop	r26
     e9e:	9f 91       	pop	r25
     ea0:	8f 91       	pop	r24
     ea2:	7f 91       	pop	r23
     ea4:	6f 91       	pop	r22
     ea6:	5f 91       	pop	r21
     ea8:	4f 91       	pop	r20
     eaa:	3f 91       	pop	r19
     eac:	2f 91       	pop	r18
     eae:	0f 90       	pop	r0
     eb0:	0f be       	out	0x3f, r0	; 63
     eb2:	0f 90       	pop	r0
     eb4:	1f 90       	pop	r1
     eb6:	18 95       	reti

00000eb8 <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
     eb8:	1f 92       	push	r1
     eba:	0f 92       	push	r0
     ebc:	0f b6       	in	r0, 0x3f	; 63
     ebe:	0f 92       	push	r0
     ec0:	11 24       	eor	r1, r1
     ec2:	2f 93       	push	r18
     ec4:	3f 93       	push	r19
     ec6:	4f 93       	push	r20
     ec8:	5f 93       	push	r21
     eca:	6f 93       	push	r22
     ecc:	7f 93       	push	r23
     ece:	8f 93       	push	r24
     ed0:	9f 93       	push	r25
     ed2:	af 93       	push	r26
     ed4:	bf 93       	push	r27
     ed6:	ef 93       	push	r30
     ed8:	ff 93       	push	r31
	if (tc_tcc1_ccb_callback) {
     eda:	e0 91 28 22 	lds	r30, 0x2228
     ede:	f0 91 29 22 	lds	r31, 0x2229
     ee2:	30 97       	sbiw	r30, 0x00	; 0
     ee4:	09 f0       	breq	.+2      	; 0xee8 <__vector_23+0x30>
		tc_tcc1_ccb_callback();
     ee6:	09 95       	icall
	}
}
     ee8:	ff 91       	pop	r31
     eea:	ef 91       	pop	r30
     eec:	bf 91       	pop	r27
     eee:	af 91       	pop	r26
     ef0:	9f 91       	pop	r25
     ef2:	8f 91       	pop	r24
     ef4:	7f 91       	pop	r23
     ef6:	6f 91       	pop	r22
     ef8:	5f 91       	pop	r21
     efa:	4f 91       	pop	r20
     efc:	3f 91       	pop	r19
     efe:	2f 91       	pop	r18
     f00:	0f 90       	pop	r0
     f02:	0f be       	out	0x3f, r0	; 63
     f04:	0f 90       	pop	r0
     f06:	1f 90       	pop	r1
     f08:	18 95       	reti

00000f0a <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
     f0a:	1f 92       	push	r1
     f0c:	0f 92       	push	r0
     f0e:	0f b6       	in	r0, 0x3f	; 63
     f10:	0f 92       	push	r0
     f12:	11 24       	eor	r1, r1
     f14:	2f 93       	push	r18
     f16:	3f 93       	push	r19
     f18:	4f 93       	push	r20
     f1a:	5f 93       	push	r21
     f1c:	6f 93       	push	r22
     f1e:	7f 93       	push	r23
     f20:	8f 93       	push	r24
     f22:	9f 93       	push	r25
     f24:	af 93       	push	r26
     f26:	bf 93       	push	r27
     f28:	ef 93       	push	r30
     f2a:	ff 93       	push	r31
	if (tc_tcd0_ovf_callback) {
     f2c:	e0 91 2a 22 	lds	r30, 0x222A
     f30:	f0 91 2b 22 	lds	r31, 0x222B
     f34:	30 97       	sbiw	r30, 0x00	; 0
     f36:	09 f0       	breq	.+2      	; 0xf3a <__vector_77+0x30>
		tc_tcd0_ovf_callback();
     f38:	09 95       	icall
	}
}
     f3a:	ff 91       	pop	r31
     f3c:	ef 91       	pop	r30
     f3e:	bf 91       	pop	r27
     f40:	af 91       	pop	r26
     f42:	9f 91       	pop	r25
     f44:	8f 91       	pop	r24
     f46:	7f 91       	pop	r23
     f48:	6f 91       	pop	r22
     f4a:	5f 91       	pop	r21
     f4c:	4f 91       	pop	r20
     f4e:	3f 91       	pop	r19
     f50:	2f 91       	pop	r18
     f52:	0f 90       	pop	r0
     f54:	0f be       	out	0x3f, r0	; 63
     f56:	0f 90       	pop	r0
     f58:	1f 90       	pop	r1
     f5a:	18 95       	reti

00000f5c <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
     f5c:	1f 92       	push	r1
     f5e:	0f 92       	push	r0
     f60:	0f b6       	in	r0, 0x3f	; 63
     f62:	0f 92       	push	r0
     f64:	11 24       	eor	r1, r1
     f66:	2f 93       	push	r18
     f68:	3f 93       	push	r19
     f6a:	4f 93       	push	r20
     f6c:	5f 93       	push	r21
     f6e:	6f 93       	push	r22
     f70:	7f 93       	push	r23
     f72:	8f 93       	push	r24
     f74:	9f 93       	push	r25
     f76:	af 93       	push	r26
     f78:	bf 93       	push	r27
     f7a:	ef 93       	push	r30
     f7c:	ff 93       	push	r31
	if (tc_tcd0_err_callback) {
     f7e:	e0 91 2c 22 	lds	r30, 0x222C
     f82:	f0 91 2d 22 	lds	r31, 0x222D
     f86:	30 97       	sbiw	r30, 0x00	; 0
     f88:	09 f0       	breq	.+2      	; 0xf8c <__vector_78+0x30>
		tc_tcd0_err_callback();
     f8a:	09 95       	icall
	}
}
     f8c:	ff 91       	pop	r31
     f8e:	ef 91       	pop	r30
     f90:	bf 91       	pop	r27
     f92:	af 91       	pop	r26
     f94:	9f 91       	pop	r25
     f96:	8f 91       	pop	r24
     f98:	7f 91       	pop	r23
     f9a:	6f 91       	pop	r22
     f9c:	5f 91       	pop	r21
     f9e:	4f 91       	pop	r20
     fa0:	3f 91       	pop	r19
     fa2:	2f 91       	pop	r18
     fa4:	0f 90       	pop	r0
     fa6:	0f be       	out	0x3f, r0	; 63
     fa8:	0f 90       	pop	r0
     faa:	1f 90       	pop	r1
     fac:	18 95       	reti

00000fae <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
     fae:	1f 92       	push	r1
     fb0:	0f 92       	push	r0
     fb2:	0f b6       	in	r0, 0x3f	; 63
     fb4:	0f 92       	push	r0
     fb6:	11 24       	eor	r1, r1
     fb8:	2f 93       	push	r18
     fba:	3f 93       	push	r19
     fbc:	4f 93       	push	r20
     fbe:	5f 93       	push	r21
     fc0:	6f 93       	push	r22
     fc2:	7f 93       	push	r23
     fc4:	8f 93       	push	r24
     fc6:	9f 93       	push	r25
     fc8:	af 93       	push	r26
     fca:	bf 93       	push	r27
     fcc:	ef 93       	push	r30
     fce:	ff 93       	push	r31
	if (tc_tcd0_cca_callback) {
     fd0:	e0 91 2e 22 	lds	r30, 0x222E
     fd4:	f0 91 2f 22 	lds	r31, 0x222F
     fd8:	30 97       	sbiw	r30, 0x00	; 0
     fda:	09 f0       	breq	.+2      	; 0xfde <__vector_79+0x30>
		tc_tcd0_cca_callback();
     fdc:	09 95       	icall
	}
}
     fde:	ff 91       	pop	r31
     fe0:	ef 91       	pop	r30
     fe2:	bf 91       	pop	r27
     fe4:	af 91       	pop	r26
     fe6:	9f 91       	pop	r25
     fe8:	8f 91       	pop	r24
     fea:	7f 91       	pop	r23
     fec:	6f 91       	pop	r22
     fee:	5f 91       	pop	r21
     ff0:	4f 91       	pop	r20
     ff2:	3f 91       	pop	r19
     ff4:	2f 91       	pop	r18
     ff6:	0f 90       	pop	r0
     ff8:	0f be       	out	0x3f, r0	; 63
     ffa:	0f 90       	pop	r0
     ffc:	1f 90       	pop	r1
     ffe:	18 95       	reti

00001000 <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
    1000:	1f 92       	push	r1
    1002:	0f 92       	push	r0
    1004:	0f b6       	in	r0, 0x3f	; 63
    1006:	0f 92       	push	r0
    1008:	11 24       	eor	r1, r1
    100a:	2f 93       	push	r18
    100c:	3f 93       	push	r19
    100e:	4f 93       	push	r20
    1010:	5f 93       	push	r21
    1012:	6f 93       	push	r22
    1014:	7f 93       	push	r23
    1016:	8f 93       	push	r24
    1018:	9f 93       	push	r25
    101a:	af 93       	push	r26
    101c:	bf 93       	push	r27
    101e:	ef 93       	push	r30
    1020:	ff 93       	push	r31
	if (tc_tcd0_ccb_callback) {
    1022:	e0 91 30 22 	lds	r30, 0x2230
    1026:	f0 91 31 22 	lds	r31, 0x2231
    102a:	30 97       	sbiw	r30, 0x00	; 0
    102c:	09 f0       	breq	.+2      	; 0x1030 <__vector_80+0x30>
		tc_tcd0_ccb_callback();
    102e:	09 95       	icall
	}
}
    1030:	ff 91       	pop	r31
    1032:	ef 91       	pop	r30
    1034:	bf 91       	pop	r27
    1036:	af 91       	pop	r26
    1038:	9f 91       	pop	r25
    103a:	8f 91       	pop	r24
    103c:	7f 91       	pop	r23
    103e:	6f 91       	pop	r22
    1040:	5f 91       	pop	r21
    1042:	4f 91       	pop	r20
    1044:	3f 91       	pop	r19
    1046:	2f 91       	pop	r18
    1048:	0f 90       	pop	r0
    104a:	0f be       	out	0x3f, r0	; 63
    104c:	0f 90       	pop	r0
    104e:	1f 90       	pop	r1
    1050:	18 95       	reti

00001052 <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
    1052:	1f 92       	push	r1
    1054:	0f 92       	push	r0
    1056:	0f b6       	in	r0, 0x3f	; 63
    1058:	0f 92       	push	r0
    105a:	11 24       	eor	r1, r1
    105c:	2f 93       	push	r18
    105e:	3f 93       	push	r19
    1060:	4f 93       	push	r20
    1062:	5f 93       	push	r21
    1064:	6f 93       	push	r22
    1066:	7f 93       	push	r23
    1068:	8f 93       	push	r24
    106a:	9f 93       	push	r25
    106c:	af 93       	push	r26
    106e:	bf 93       	push	r27
    1070:	ef 93       	push	r30
    1072:	ff 93       	push	r31
	if (tc_tcd0_ccc_callback) {
    1074:	e0 91 32 22 	lds	r30, 0x2232
    1078:	f0 91 33 22 	lds	r31, 0x2233
    107c:	30 97       	sbiw	r30, 0x00	; 0
    107e:	09 f0       	breq	.+2      	; 0x1082 <__vector_81+0x30>
		tc_tcd0_ccc_callback();
    1080:	09 95       	icall
	}
}
    1082:	ff 91       	pop	r31
    1084:	ef 91       	pop	r30
    1086:	bf 91       	pop	r27
    1088:	af 91       	pop	r26
    108a:	9f 91       	pop	r25
    108c:	8f 91       	pop	r24
    108e:	7f 91       	pop	r23
    1090:	6f 91       	pop	r22
    1092:	5f 91       	pop	r21
    1094:	4f 91       	pop	r20
    1096:	3f 91       	pop	r19
    1098:	2f 91       	pop	r18
    109a:	0f 90       	pop	r0
    109c:	0f be       	out	0x3f, r0	; 63
    109e:	0f 90       	pop	r0
    10a0:	1f 90       	pop	r1
    10a2:	18 95       	reti

000010a4 <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
    10a4:	1f 92       	push	r1
    10a6:	0f 92       	push	r0
    10a8:	0f b6       	in	r0, 0x3f	; 63
    10aa:	0f 92       	push	r0
    10ac:	11 24       	eor	r1, r1
    10ae:	2f 93       	push	r18
    10b0:	3f 93       	push	r19
    10b2:	4f 93       	push	r20
    10b4:	5f 93       	push	r21
    10b6:	6f 93       	push	r22
    10b8:	7f 93       	push	r23
    10ba:	8f 93       	push	r24
    10bc:	9f 93       	push	r25
    10be:	af 93       	push	r26
    10c0:	bf 93       	push	r27
    10c2:	ef 93       	push	r30
    10c4:	ff 93       	push	r31
	if (tc_tcd0_ccd_callback) {
    10c6:	e0 91 34 22 	lds	r30, 0x2234
    10ca:	f0 91 35 22 	lds	r31, 0x2235
    10ce:	30 97       	sbiw	r30, 0x00	; 0
    10d0:	09 f0       	breq	.+2      	; 0x10d4 <__vector_82+0x30>
		tc_tcd0_ccd_callback();
    10d2:	09 95       	icall
	}
}
    10d4:	ff 91       	pop	r31
    10d6:	ef 91       	pop	r30
    10d8:	bf 91       	pop	r27
    10da:	af 91       	pop	r26
    10dc:	9f 91       	pop	r25
    10de:	8f 91       	pop	r24
    10e0:	7f 91       	pop	r23
    10e2:	6f 91       	pop	r22
    10e4:	5f 91       	pop	r21
    10e6:	4f 91       	pop	r20
    10e8:	3f 91       	pop	r19
    10ea:	2f 91       	pop	r18
    10ec:	0f 90       	pop	r0
    10ee:	0f be       	out	0x3f, r0	; 63
    10f0:	0f 90       	pop	r0
    10f2:	1f 90       	pop	r1
    10f4:	18 95       	reti

000010f6 <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
    10f6:	1f 92       	push	r1
    10f8:	0f 92       	push	r0
    10fa:	0f b6       	in	r0, 0x3f	; 63
    10fc:	0f 92       	push	r0
    10fe:	11 24       	eor	r1, r1
    1100:	2f 93       	push	r18
    1102:	3f 93       	push	r19
    1104:	4f 93       	push	r20
    1106:	5f 93       	push	r21
    1108:	6f 93       	push	r22
    110a:	7f 93       	push	r23
    110c:	8f 93       	push	r24
    110e:	9f 93       	push	r25
    1110:	af 93       	push	r26
    1112:	bf 93       	push	r27
    1114:	ef 93       	push	r30
    1116:	ff 93       	push	r31
	if (tc_tcd1_ovf_callback) {
    1118:	e0 91 36 22 	lds	r30, 0x2236
    111c:	f0 91 37 22 	lds	r31, 0x2237
    1120:	30 97       	sbiw	r30, 0x00	; 0
    1122:	09 f0       	breq	.+2      	; 0x1126 <__vector_83+0x30>
		tc_tcd1_ovf_callback();
    1124:	09 95       	icall
	}
}
    1126:	ff 91       	pop	r31
    1128:	ef 91       	pop	r30
    112a:	bf 91       	pop	r27
    112c:	af 91       	pop	r26
    112e:	9f 91       	pop	r25
    1130:	8f 91       	pop	r24
    1132:	7f 91       	pop	r23
    1134:	6f 91       	pop	r22
    1136:	5f 91       	pop	r21
    1138:	4f 91       	pop	r20
    113a:	3f 91       	pop	r19
    113c:	2f 91       	pop	r18
    113e:	0f 90       	pop	r0
    1140:	0f be       	out	0x3f, r0	; 63
    1142:	0f 90       	pop	r0
    1144:	1f 90       	pop	r1
    1146:	18 95       	reti

00001148 <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
    1148:	1f 92       	push	r1
    114a:	0f 92       	push	r0
    114c:	0f b6       	in	r0, 0x3f	; 63
    114e:	0f 92       	push	r0
    1150:	11 24       	eor	r1, r1
    1152:	2f 93       	push	r18
    1154:	3f 93       	push	r19
    1156:	4f 93       	push	r20
    1158:	5f 93       	push	r21
    115a:	6f 93       	push	r22
    115c:	7f 93       	push	r23
    115e:	8f 93       	push	r24
    1160:	9f 93       	push	r25
    1162:	af 93       	push	r26
    1164:	bf 93       	push	r27
    1166:	ef 93       	push	r30
    1168:	ff 93       	push	r31
	if (tc_tcd1_err_callback) {
    116a:	e0 91 38 22 	lds	r30, 0x2238
    116e:	f0 91 39 22 	lds	r31, 0x2239
    1172:	30 97       	sbiw	r30, 0x00	; 0
    1174:	09 f0       	breq	.+2      	; 0x1178 <__vector_84+0x30>
		tc_tcd1_err_callback();
    1176:	09 95       	icall
	}
}
    1178:	ff 91       	pop	r31
    117a:	ef 91       	pop	r30
    117c:	bf 91       	pop	r27
    117e:	af 91       	pop	r26
    1180:	9f 91       	pop	r25
    1182:	8f 91       	pop	r24
    1184:	7f 91       	pop	r23
    1186:	6f 91       	pop	r22
    1188:	5f 91       	pop	r21
    118a:	4f 91       	pop	r20
    118c:	3f 91       	pop	r19
    118e:	2f 91       	pop	r18
    1190:	0f 90       	pop	r0
    1192:	0f be       	out	0x3f, r0	; 63
    1194:	0f 90       	pop	r0
    1196:	1f 90       	pop	r1
    1198:	18 95       	reti

0000119a <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
    119a:	1f 92       	push	r1
    119c:	0f 92       	push	r0
    119e:	0f b6       	in	r0, 0x3f	; 63
    11a0:	0f 92       	push	r0
    11a2:	11 24       	eor	r1, r1
    11a4:	2f 93       	push	r18
    11a6:	3f 93       	push	r19
    11a8:	4f 93       	push	r20
    11aa:	5f 93       	push	r21
    11ac:	6f 93       	push	r22
    11ae:	7f 93       	push	r23
    11b0:	8f 93       	push	r24
    11b2:	9f 93       	push	r25
    11b4:	af 93       	push	r26
    11b6:	bf 93       	push	r27
    11b8:	ef 93       	push	r30
    11ba:	ff 93       	push	r31
	if (tc_tcd1_cca_callback) {
    11bc:	e0 91 3a 22 	lds	r30, 0x223A
    11c0:	f0 91 3b 22 	lds	r31, 0x223B
    11c4:	30 97       	sbiw	r30, 0x00	; 0
    11c6:	09 f0       	breq	.+2      	; 0x11ca <__vector_85+0x30>
		tc_tcd1_cca_callback();
    11c8:	09 95       	icall
	}
}
    11ca:	ff 91       	pop	r31
    11cc:	ef 91       	pop	r30
    11ce:	bf 91       	pop	r27
    11d0:	af 91       	pop	r26
    11d2:	9f 91       	pop	r25
    11d4:	8f 91       	pop	r24
    11d6:	7f 91       	pop	r23
    11d8:	6f 91       	pop	r22
    11da:	5f 91       	pop	r21
    11dc:	4f 91       	pop	r20
    11de:	3f 91       	pop	r19
    11e0:	2f 91       	pop	r18
    11e2:	0f 90       	pop	r0
    11e4:	0f be       	out	0x3f, r0	; 63
    11e6:	0f 90       	pop	r0
    11e8:	1f 90       	pop	r1
    11ea:	18 95       	reti

000011ec <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
    11ec:	1f 92       	push	r1
    11ee:	0f 92       	push	r0
    11f0:	0f b6       	in	r0, 0x3f	; 63
    11f2:	0f 92       	push	r0
    11f4:	11 24       	eor	r1, r1
    11f6:	2f 93       	push	r18
    11f8:	3f 93       	push	r19
    11fa:	4f 93       	push	r20
    11fc:	5f 93       	push	r21
    11fe:	6f 93       	push	r22
    1200:	7f 93       	push	r23
    1202:	8f 93       	push	r24
    1204:	9f 93       	push	r25
    1206:	af 93       	push	r26
    1208:	bf 93       	push	r27
    120a:	ef 93       	push	r30
    120c:	ff 93       	push	r31
	if (tc_tcd1_ccb_callback) {
    120e:	e0 91 3c 22 	lds	r30, 0x223C
    1212:	f0 91 3d 22 	lds	r31, 0x223D
    1216:	30 97       	sbiw	r30, 0x00	; 0
    1218:	09 f0       	breq	.+2      	; 0x121c <__vector_86+0x30>
		tc_tcd1_ccb_callback();
    121a:	09 95       	icall
	}
}
    121c:	ff 91       	pop	r31
    121e:	ef 91       	pop	r30
    1220:	bf 91       	pop	r27
    1222:	af 91       	pop	r26
    1224:	9f 91       	pop	r25
    1226:	8f 91       	pop	r24
    1228:	7f 91       	pop	r23
    122a:	6f 91       	pop	r22
    122c:	5f 91       	pop	r21
    122e:	4f 91       	pop	r20
    1230:	3f 91       	pop	r19
    1232:	2f 91       	pop	r18
    1234:	0f 90       	pop	r0
    1236:	0f be       	out	0x3f, r0	; 63
    1238:	0f 90       	pop	r0
    123a:	1f 90       	pop	r1
    123c:	18 95       	reti

0000123e <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
    123e:	1f 92       	push	r1
    1240:	0f 92       	push	r0
    1242:	0f b6       	in	r0, 0x3f	; 63
    1244:	0f 92       	push	r0
    1246:	11 24       	eor	r1, r1
    1248:	2f 93       	push	r18
    124a:	3f 93       	push	r19
    124c:	4f 93       	push	r20
    124e:	5f 93       	push	r21
    1250:	6f 93       	push	r22
    1252:	7f 93       	push	r23
    1254:	8f 93       	push	r24
    1256:	9f 93       	push	r25
    1258:	af 93       	push	r26
    125a:	bf 93       	push	r27
    125c:	ef 93       	push	r30
    125e:	ff 93       	push	r31
	if (tc_tce0_ovf_callback) {
    1260:	e0 91 3e 22 	lds	r30, 0x223E
    1264:	f0 91 3f 22 	lds	r31, 0x223F
    1268:	30 97       	sbiw	r30, 0x00	; 0
    126a:	09 f0       	breq	.+2      	; 0x126e <__vector_47+0x30>
		tc_tce0_ovf_callback();
    126c:	09 95       	icall
	}
}
    126e:	ff 91       	pop	r31
    1270:	ef 91       	pop	r30
    1272:	bf 91       	pop	r27
    1274:	af 91       	pop	r26
    1276:	9f 91       	pop	r25
    1278:	8f 91       	pop	r24
    127a:	7f 91       	pop	r23
    127c:	6f 91       	pop	r22
    127e:	5f 91       	pop	r21
    1280:	4f 91       	pop	r20
    1282:	3f 91       	pop	r19
    1284:	2f 91       	pop	r18
    1286:	0f 90       	pop	r0
    1288:	0f be       	out	0x3f, r0	; 63
    128a:	0f 90       	pop	r0
    128c:	1f 90       	pop	r1
    128e:	18 95       	reti

00001290 <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
    1290:	1f 92       	push	r1
    1292:	0f 92       	push	r0
    1294:	0f b6       	in	r0, 0x3f	; 63
    1296:	0f 92       	push	r0
    1298:	11 24       	eor	r1, r1
    129a:	2f 93       	push	r18
    129c:	3f 93       	push	r19
    129e:	4f 93       	push	r20
    12a0:	5f 93       	push	r21
    12a2:	6f 93       	push	r22
    12a4:	7f 93       	push	r23
    12a6:	8f 93       	push	r24
    12a8:	9f 93       	push	r25
    12aa:	af 93       	push	r26
    12ac:	bf 93       	push	r27
    12ae:	ef 93       	push	r30
    12b0:	ff 93       	push	r31
	if (tc_tce0_err_callback) {
    12b2:	e0 91 40 22 	lds	r30, 0x2240
    12b6:	f0 91 41 22 	lds	r31, 0x2241
    12ba:	30 97       	sbiw	r30, 0x00	; 0
    12bc:	09 f0       	breq	.+2      	; 0x12c0 <__vector_48+0x30>
		tc_tce0_err_callback();
    12be:	09 95       	icall
	}
}
    12c0:	ff 91       	pop	r31
    12c2:	ef 91       	pop	r30
    12c4:	bf 91       	pop	r27
    12c6:	af 91       	pop	r26
    12c8:	9f 91       	pop	r25
    12ca:	8f 91       	pop	r24
    12cc:	7f 91       	pop	r23
    12ce:	6f 91       	pop	r22
    12d0:	5f 91       	pop	r21
    12d2:	4f 91       	pop	r20
    12d4:	3f 91       	pop	r19
    12d6:	2f 91       	pop	r18
    12d8:	0f 90       	pop	r0
    12da:	0f be       	out	0x3f, r0	; 63
    12dc:	0f 90       	pop	r0
    12de:	1f 90       	pop	r1
    12e0:	18 95       	reti

000012e2 <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
    12e2:	1f 92       	push	r1
    12e4:	0f 92       	push	r0
    12e6:	0f b6       	in	r0, 0x3f	; 63
    12e8:	0f 92       	push	r0
    12ea:	11 24       	eor	r1, r1
    12ec:	2f 93       	push	r18
    12ee:	3f 93       	push	r19
    12f0:	4f 93       	push	r20
    12f2:	5f 93       	push	r21
    12f4:	6f 93       	push	r22
    12f6:	7f 93       	push	r23
    12f8:	8f 93       	push	r24
    12fa:	9f 93       	push	r25
    12fc:	af 93       	push	r26
    12fe:	bf 93       	push	r27
    1300:	ef 93       	push	r30
    1302:	ff 93       	push	r31
	if (tc_tce0_cca_callback) {
    1304:	e0 91 42 22 	lds	r30, 0x2242
    1308:	f0 91 43 22 	lds	r31, 0x2243
    130c:	30 97       	sbiw	r30, 0x00	; 0
    130e:	09 f0       	breq	.+2      	; 0x1312 <__vector_49+0x30>
		tc_tce0_cca_callback();
    1310:	09 95       	icall
	}
}
    1312:	ff 91       	pop	r31
    1314:	ef 91       	pop	r30
    1316:	bf 91       	pop	r27
    1318:	af 91       	pop	r26
    131a:	9f 91       	pop	r25
    131c:	8f 91       	pop	r24
    131e:	7f 91       	pop	r23
    1320:	6f 91       	pop	r22
    1322:	5f 91       	pop	r21
    1324:	4f 91       	pop	r20
    1326:	3f 91       	pop	r19
    1328:	2f 91       	pop	r18
    132a:	0f 90       	pop	r0
    132c:	0f be       	out	0x3f, r0	; 63
    132e:	0f 90       	pop	r0
    1330:	1f 90       	pop	r1
    1332:	18 95       	reti

00001334 <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
    1334:	1f 92       	push	r1
    1336:	0f 92       	push	r0
    1338:	0f b6       	in	r0, 0x3f	; 63
    133a:	0f 92       	push	r0
    133c:	11 24       	eor	r1, r1
    133e:	2f 93       	push	r18
    1340:	3f 93       	push	r19
    1342:	4f 93       	push	r20
    1344:	5f 93       	push	r21
    1346:	6f 93       	push	r22
    1348:	7f 93       	push	r23
    134a:	8f 93       	push	r24
    134c:	9f 93       	push	r25
    134e:	af 93       	push	r26
    1350:	bf 93       	push	r27
    1352:	ef 93       	push	r30
    1354:	ff 93       	push	r31
	if (tc_tce0_ccb_callback) {
    1356:	e0 91 44 22 	lds	r30, 0x2244
    135a:	f0 91 45 22 	lds	r31, 0x2245
    135e:	30 97       	sbiw	r30, 0x00	; 0
    1360:	09 f0       	breq	.+2      	; 0x1364 <__vector_50+0x30>
		tc_tce0_ccb_callback();
    1362:	09 95       	icall
	}
}
    1364:	ff 91       	pop	r31
    1366:	ef 91       	pop	r30
    1368:	bf 91       	pop	r27
    136a:	af 91       	pop	r26
    136c:	9f 91       	pop	r25
    136e:	8f 91       	pop	r24
    1370:	7f 91       	pop	r23
    1372:	6f 91       	pop	r22
    1374:	5f 91       	pop	r21
    1376:	4f 91       	pop	r20
    1378:	3f 91       	pop	r19
    137a:	2f 91       	pop	r18
    137c:	0f 90       	pop	r0
    137e:	0f be       	out	0x3f, r0	; 63
    1380:	0f 90       	pop	r0
    1382:	1f 90       	pop	r1
    1384:	18 95       	reti

00001386 <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
    1386:	1f 92       	push	r1
    1388:	0f 92       	push	r0
    138a:	0f b6       	in	r0, 0x3f	; 63
    138c:	0f 92       	push	r0
    138e:	11 24       	eor	r1, r1
    1390:	2f 93       	push	r18
    1392:	3f 93       	push	r19
    1394:	4f 93       	push	r20
    1396:	5f 93       	push	r21
    1398:	6f 93       	push	r22
    139a:	7f 93       	push	r23
    139c:	8f 93       	push	r24
    139e:	9f 93       	push	r25
    13a0:	af 93       	push	r26
    13a2:	bf 93       	push	r27
    13a4:	ef 93       	push	r30
    13a6:	ff 93       	push	r31
	if (tc_tce0_ccc_callback) {
    13a8:	e0 91 46 22 	lds	r30, 0x2246
    13ac:	f0 91 47 22 	lds	r31, 0x2247
    13b0:	30 97       	sbiw	r30, 0x00	; 0
    13b2:	09 f0       	breq	.+2      	; 0x13b6 <__vector_51+0x30>
		tc_tce0_ccc_callback();
    13b4:	09 95       	icall
	}
}
    13b6:	ff 91       	pop	r31
    13b8:	ef 91       	pop	r30
    13ba:	bf 91       	pop	r27
    13bc:	af 91       	pop	r26
    13be:	9f 91       	pop	r25
    13c0:	8f 91       	pop	r24
    13c2:	7f 91       	pop	r23
    13c4:	6f 91       	pop	r22
    13c6:	5f 91       	pop	r21
    13c8:	4f 91       	pop	r20
    13ca:	3f 91       	pop	r19
    13cc:	2f 91       	pop	r18
    13ce:	0f 90       	pop	r0
    13d0:	0f be       	out	0x3f, r0	; 63
    13d2:	0f 90       	pop	r0
    13d4:	1f 90       	pop	r1
    13d6:	18 95       	reti

000013d8 <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
    13d8:	1f 92       	push	r1
    13da:	0f 92       	push	r0
    13dc:	0f b6       	in	r0, 0x3f	; 63
    13de:	0f 92       	push	r0
    13e0:	11 24       	eor	r1, r1
    13e2:	2f 93       	push	r18
    13e4:	3f 93       	push	r19
    13e6:	4f 93       	push	r20
    13e8:	5f 93       	push	r21
    13ea:	6f 93       	push	r22
    13ec:	7f 93       	push	r23
    13ee:	8f 93       	push	r24
    13f0:	9f 93       	push	r25
    13f2:	af 93       	push	r26
    13f4:	bf 93       	push	r27
    13f6:	ef 93       	push	r30
    13f8:	ff 93       	push	r31
	if (tc_tce0_ccd_callback) {
    13fa:	e0 91 48 22 	lds	r30, 0x2248
    13fe:	f0 91 49 22 	lds	r31, 0x2249
    1402:	30 97       	sbiw	r30, 0x00	; 0
    1404:	09 f0       	breq	.+2      	; 0x1408 <__vector_52+0x30>
		tc_tce0_ccd_callback();
    1406:	09 95       	icall
	}
}
    1408:	ff 91       	pop	r31
    140a:	ef 91       	pop	r30
    140c:	bf 91       	pop	r27
    140e:	af 91       	pop	r26
    1410:	9f 91       	pop	r25
    1412:	8f 91       	pop	r24
    1414:	7f 91       	pop	r23
    1416:	6f 91       	pop	r22
    1418:	5f 91       	pop	r21
    141a:	4f 91       	pop	r20
    141c:	3f 91       	pop	r19
    141e:	2f 91       	pop	r18
    1420:	0f 90       	pop	r0
    1422:	0f be       	out	0x3f, r0	; 63
    1424:	0f 90       	pop	r0
    1426:	1f 90       	pop	r1
    1428:	18 95       	reti

0000142a <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
    142a:	cf 93       	push	r28
    142c:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
    142e:	e0 91 4a 22 	lds	r30, 0x224A
    1432:	f0 91 4b 22 	lds	r31, 0x224B
    1436:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
    1438:	83 ff       	sbrs	r24, 3
    143a:	0b c0       	rjmp	.+22     	; 0x1452 <twim_interrupt_handler+0x28>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
    143c:	88 60       	ori	r24, 0x08	; 8
    143e:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
    1440:	83 e0       	ldi	r24, 0x03	; 3
    1442:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
    1444:	86 ef       	ldi	r24, 0xF6	; 246
    1446:	9f ef       	ldi	r25, 0xFF	; 255
    1448:	80 93 54 22 	sts	0x2254, r24
    144c:	90 93 55 22 	sts	0x2255, r25
    1450:	8e c0       	rjmp	.+284    	; 0x156e <twim_interrupt_handler+0x144>
 *
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
    1452:	98 2f       	mov	r25, r24
    1454:	94 71       	andi	r25, 0x14	; 20

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
		transfer.status = ERR_BUSY;

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    1456:	49 f0       	breq	.+18     	; 0x146a <twim_interrupt_handler+0x40>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1458:	83 e0       	ldi	r24, 0x03	; 3
    145a:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
    145c:	8f ef       	ldi	r24, 0xFF	; 255
    145e:	9f ef       	ldi	r25, 0xFF	; 255
    1460:	80 93 54 22 	sts	0x2254, r24
    1464:	90 93 55 22 	sts	0x2255, r25
    1468:	82 c0       	rjmp	.+260    	; 0x156e <twim_interrupt_handler+0x144>

	} else if (master_status & TWI_MASTER_WIF_bm) {
    146a:	86 ff       	sbrs	r24, 6
    146c:	42 c0       	rjmp	.+132    	; 0x14f2 <twim_interrupt_handler+0xc8>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    146e:	a0 91 4c 22 	lds	r26, 0x224C
    1472:	b0 91 4d 22 	lds	r27, 0x224D

	if (transfer.addr_count < pkg->addr_length) {
    1476:	80 91 4e 22 	lds	r24, 0x224E
    147a:	90 91 4f 22 	lds	r25, 0x224F
    147e:	14 96       	adiw	r26, 0x04	; 4
    1480:	2d 91       	ld	r18, X+
    1482:	3c 91       	ld	r19, X
    1484:	15 97       	sbiw	r26, 0x05	; 5
    1486:	82 17       	cp	r24, r18
    1488:	93 07       	cpc	r25, r19
    148a:	5c f4       	brge	.+22     	; 0x14a2 <twim_interrupt_handler+0x78>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
    148c:	a8 0f       	add	r26, r24
    148e:	b9 1f       	adc	r27, r25
    1490:	11 96       	adiw	r26, 0x01	; 1
    1492:	2c 91       	ld	r18, X
    1494:	27 83       	std	Z+7, r18	; 0x07
    1496:	01 96       	adiw	r24, 0x01	; 1
    1498:	80 93 4e 22 	sts	0x224E, r24
    149c:	90 93 4f 22 	sts	0x224F, r25
    14a0:	66 c0       	rjmp	.+204    	; 0x156e <twim_interrupt_handler+0x144>

	} else if (transfer.data_count < pkg->length) {
    14a2:	80 91 50 22 	lds	r24, 0x2250
    14a6:	90 91 51 22 	lds	r25, 0x2251
    14aa:	18 96       	adiw	r26, 0x08	; 8
    14ac:	2d 91       	ld	r18, X+
    14ae:	3c 91       	ld	r19, X
    14b0:	19 97       	sbiw	r26, 0x09	; 9
    14b2:	82 17       	cp	r24, r18
    14b4:	93 07       	cpc	r25, r19
    14b6:	b0 f4       	brcc	.+44     	; 0x14e4 <twim_interrupt_handler+0xba>

		if (transfer.read) {
    14b8:	20 91 52 22 	lds	r18, 0x2252
    14bc:	22 23       	and	r18, r18
    14be:	21 f0       	breq	.+8      	; 0x14c8 <twim_interrupt_handler+0x9e>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
    14c0:	86 81       	ldd	r24, Z+6	; 0x06
    14c2:	81 60       	ori	r24, 0x01	; 1
    14c4:	86 83       	std	Z+6, r24	; 0x06
    14c6:	53 c0       	rjmp	.+166    	; 0x156e <twim_interrupt_handler+0x144>

		} else {
			const uint8_t * const data = pkg->buffer;
			bus->MASTER.DATA = data[transfer.data_count++];
    14c8:	16 96       	adiw	r26, 0x06	; 6
    14ca:	0d 90       	ld	r0, X+
    14cc:	bc 91       	ld	r27, X
    14ce:	a0 2d       	mov	r26, r0
    14d0:	a8 0f       	add	r26, r24
    14d2:	b9 1f       	adc	r27, r25
    14d4:	2c 91       	ld	r18, X
    14d6:	27 83       	std	Z+7, r18	; 0x07
    14d8:	01 96       	adiw	r24, 0x01	; 1
    14da:	80 93 50 22 	sts	0x2250, r24
    14de:	90 93 51 22 	sts	0x2251, r25
    14e2:	45 c0       	rjmp	.+138    	; 0x156e <twim_interrupt_handler+0x144>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    14e4:	83 e0       	ldi	r24, 0x03	; 3
    14e6:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
    14e8:	10 92 54 22 	sts	0x2254, r1
    14ec:	10 92 55 22 	sts	0x2255, r1
    14f0:	3e c0       	rjmp	.+124    	; 0x156e <twim_interrupt_handler+0x144>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
    14f2:	88 23       	and	r24, r24
    14f4:	b4 f5       	brge	.+108    	; 0x1562 <twim_interrupt_handler+0x138>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    14f6:	a0 91 4c 22 	lds	r26, 0x224C
    14fa:	b0 91 4d 22 	lds	r27, 0x224D

	if (transfer.data_count < pkg->length) {
    14fe:	80 91 50 22 	lds	r24, 0x2250
    1502:	90 91 51 22 	lds	r25, 0x2251
    1506:	18 96       	adiw	r26, 0x08	; 8
    1508:	2d 91       	ld	r18, X+
    150a:	3c 91       	ld	r19, X
    150c:	19 97       	sbiw	r26, 0x09	; 9
    150e:	82 17       	cp	r24, r18
    1510:	93 07       	cpc	r25, r19
    1512:	f0 f4       	brcc	.+60     	; 0x1550 <twim_interrupt_handler+0x126>

		uint8_t * const data = pkg->buffer;
		data[transfer.data_count++] = bus->MASTER.DATA;
    1514:	27 81       	ldd	r18, Z+7	; 0x07
    1516:	16 96       	adiw	r26, 0x06	; 6
    1518:	cd 91       	ld	r28, X+
    151a:	dc 91       	ld	r29, X
    151c:	17 97       	sbiw	r26, 0x07	; 7
    151e:	c8 0f       	add	r28, r24
    1520:	d9 1f       	adc	r29, r25
    1522:	28 83       	st	Y, r18
    1524:	01 96       	adiw	r24, 0x01	; 1
    1526:	80 93 50 22 	sts	0x2250, r24
    152a:	90 93 51 22 	sts	0x2251, r25

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
    152e:	18 96       	adiw	r26, 0x08	; 8
    1530:	2d 91       	ld	r18, X+
    1532:	3c 91       	ld	r19, X
    1534:	19 97       	sbiw	r26, 0x09	; 9
    1536:	82 17       	cp	r24, r18
    1538:	93 07       	cpc	r25, r19
    153a:	18 f4       	brcc	.+6      	; 0x1542 <twim_interrupt_handler+0x118>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    153c:	82 e0       	ldi	r24, 0x02	; 2
    153e:	83 83       	std	Z+3, r24	; 0x03
    1540:	16 c0       	rjmp	.+44     	; 0x156e <twim_interrupt_handler+0x144>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    1542:	87 e0       	ldi	r24, 0x07	; 7
    1544:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
    1546:	10 92 54 22 	sts	0x2254, r1
    154a:	10 92 55 22 	sts	0x2255, r1
    154e:	0f c0       	rjmp	.+30     	; 0x156e <twim_interrupt_handler+0x144>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1550:	83 e0       	ldi	r24, 0x03	; 3
    1552:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
    1554:	89 ef       	ldi	r24, 0xF9	; 249
    1556:	9f ef       	ldi	r25, 0xFF	; 255
    1558:	80 93 54 22 	sts	0x2254, r24
    155c:	90 93 55 22 	sts	0x2255, r25
    1560:	06 c0       	rjmp	.+12     	; 0x156e <twim_interrupt_handler+0x144>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
    1562:	8b ef       	ldi	r24, 0xFB	; 251
    1564:	9f ef       	ldi	r25, 0xFF	; 255
    1566:	80 93 54 22 	sts	0x2254, r24
    156a:	90 93 55 22 	sts	0x2255, r25
	}
}
    156e:	df 91       	pop	r29
    1570:	cf 91       	pop	r28
    1572:	08 95       	ret

00001574 <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
    1574:	1f 92       	push	r1
    1576:	0f 92       	push	r0
    1578:	0f b6       	in	r0, 0x3f	; 63
    157a:	0f 92       	push	r0
    157c:	11 24       	eor	r1, r1
    157e:	2f 93       	push	r18
    1580:	3f 93       	push	r19
    1582:	4f 93       	push	r20
    1584:	5f 93       	push	r21
    1586:	6f 93       	push	r22
    1588:	7f 93       	push	r23
    158a:	8f 93       	push	r24
    158c:	9f 93       	push	r25
    158e:	af 93       	push	r26
    1590:	bf 93       	push	r27
    1592:	ef 93       	push	r30
    1594:	ff 93       	push	r31
    1596:	49 df       	rcall	.-366    	; 0x142a <twim_interrupt_handler>
    1598:	ff 91       	pop	r31
    159a:	ef 91       	pop	r30
    159c:	bf 91       	pop	r27
    159e:	af 91       	pop	r26
    15a0:	9f 91       	pop	r25
    15a2:	8f 91       	pop	r24
    15a4:	7f 91       	pop	r23
    15a6:	6f 91       	pop	r22
    15a8:	5f 91       	pop	r21
    15aa:	4f 91       	pop	r20
    15ac:	3f 91       	pop	r19
    15ae:	2f 91       	pop	r18
    15b0:	0f 90       	pop	r0
    15b2:	0f be       	out	0x3f, r0	; 63
    15b4:	0f 90       	pop	r0
    15b6:	1f 90       	pop	r1
    15b8:	18 95       	reti

000015ba <__vector_46>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
    15ba:	1f 92       	push	r1
    15bc:	0f 92       	push	r0
    15be:	0f b6       	in	r0, 0x3f	; 63
    15c0:	0f 92       	push	r0
    15c2:	11 24       	eor	r1, r1
    15c4:	2f 93       	push	r18
    15c6:	3f 93       	push	r19
    15c8:	4f 93       	push	r20
    15ca:	5f 93       	push	r21
    15cc:	6f 93       	push	r22
    15ce:	7f 93       	push	r23
    15d0:	8f 93       	push	r24
    15d2:	9f 93       	push	r25
    15d4:	af 93       	push	r26
    15d6:	bf 93       	push	r27
    15d8:	ef 93       	push	r30
    15da:	ff 93       	push	r31
    15dc:	26 df       	rcall	.-436    	; 0x142a <twim_interrupt_handler>
    15de:	ff 91       	pop	r31
    15e0:	ef 91       	pop	r30
    15e2:	bf 91       	pop	r27
    15e4:	af 91       	pop	r26
    15e6:	9f 91       	pop	r25
    15e8:	8f 91       	pop	r24
    15ea:	7f 91       	pop	r23
    15ec:	6f 91       	pop	r22
    15ee:	5f 91       	pop	r21
    15f0:	4f 91       	pop	r20
    15f2:	3f 91       	pop	r19
    15f4:	2f 91       	pop	r18
    15f6:	0f 90       	pop	r0
    15f8:	0f be       	out	0x3f, r0	; 63
    15fa:	0f 90       	pop	r0
    15fc:	1f 90       	pop	r1
    15fe:	18 95       	reti

00001600 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    1600:	4f 92       	push	r4
    1602:	5f 92       	push	r5
    1604:	6f 92       	push	r6
    1606:	7f 92       	push	r7
    1608:	8f 92       	push	r8
    160a:	9f 92       	push	r9
    160c:	af 92       	push	r10
    160e:	bf 92       	push	r11
    1610:	cf 92       	push	r12
    1612:	df 92       	push	r13
    1614:	ef 92       	push	r14
    1616:	ff 92       	push	r15
    1618:	0f 93       	push	r16
    161a:	1f 93       	push	r17
    161c:	cf 93       	push	r28
    161e:	df 93       	push	r29
    1620:	ec 01       	movw	r28, r24
    1622:	4a 01       	movw	r8, r20
    1624:	5b 01       	movw	r10, r22
    1626:	28 01       	movw	r4, r16
    1628:	39 01       	movw	r6, r18

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    162a:	d9 01       	movw	r26, r18
    162c:	c8 01       	movw	r24, r16
    162e:	68 94       	set
    1630:	12 f8       	bld	r1, 2
    1632:	b6 95       	lsr	r27
    1634:	a7 95       	ror	r26
    1636:	97 95       	ror	r25
    1638:	87 95       	ror	r24
    163a:	16 94       	lsr	r1
    163c:	d1 f7       	brne	.-12     	; 0x1632 <usart_set_baudrate+0x32>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    163e:	b9 01       	movw	r22, r18
    1640:	a8 01       	movw	r20, r16
    1642:	03 2e       	mov	r0, r19
    1644:	36 e1       	ldi	r19, 0x16	; 22
    1646:	76 95       	lsr	r23
    1648:	67 95       	ror	r22
    164a:	57 95       	ror	r21
    164c:	47 95       	ror	r20
    164e:	3a 95       	dec	r19
    1650:	d1 f7       	brne	.-12     	; 0x1646 <usart_set_baudrate+0x46>
    1652:	30 2d       	mov	r19, r0

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    1654:	2c 81       	ldd	r18, Y+4	; 0x04
    1656:	22 fd       	sbrc	r18, 2
    1658:	08 c0       	rjmp	.+16     	; 0x166a <usart_set_baudrate+0x6a>
		max_rate /= 2;
    165a:	b6 95       	lsr	r27
    165c:	a7 95       	ror	r26
    165e:	97 95       	ror	r25
    1660:	87 95       	ror	r24
		min_rate /= 2;
    1662:	76 95       	lsr	r23
    1664:	67 95       	ror	r22
    1666:	57 95       	ror	r21
    1668:	47 95       	ror	r20
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    166a:	88 15       	cp	r24, r8
    166c:	99 05       	cpc	r25, r9
    166e:	aa 05       	cpc	r26, r10
    1670:	bb 05       	cpc	r27, r11
    1672:	08 f4       	brcc	.+2      	; 0x1676 <usart_set_baudrate+0x76>
    1674:	aa c0       	rjmp	.+340    	; 0x17ca <usart_set_baudrate+0x1ca>
    1676:	84 16       	cp	r8, r20
    1678:	95 06       	cpc	r9, r21
    167a:	a6 06       	cpc	r10, r22
    167c:	b7 06       	cpc	r11, r23
    167e:	08 f4       	brcc	.+2      	; 0x1682 <usart_set_baudrate+0x82>
    1680:	a6 c0       	rjmp	.+332    	; 0x17ce <usart_set_baudrate+0x1ce>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    1682:	8c 81       	ldd	r24, Y+4	; 0x04
    1684:	82 fd       	sbrc	r24, 2
    1686:	04 c0       	rjmp	.+8      	; 0x1690 <usart_set_baudrate+0x90>
		baud *= 2;
    1688:	88 0c       	add	r8, r8
    168a:	99 1c       	adc	r9, r9
    168c:	aa 1c       	adc	r10, r10
    168e:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
    1690:	c3 01       	movw	r24, r6
    1692:	b2 01       	movw	r22, r4
    1694:	a5 01       	movw	r20, r10
    1696:	94 01       	movw	r18, r8
    1698:	5c d4       	rcall	.+2232   	; 0x1f52 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
    169a:	2f 3f       	cpi	r18, 0xFF	; 255
    169c:	31 05       	cpc	r19, r1
    169e:	41 05       	cpc	r20, r1
    16a0:	51 05       	cpc	r21, r1
    16a2:	08 f4       	brcc	.+2      	; 0x16a6 <usart_set_baudrate+0xa6>
    16a4:	96 c0       	rjmp	.+300    	; 0x17d2 <usart_set_baudrate+0x1d2>
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		baud *= 2;
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
    16a6:	c1 2c       	mov	r12, r1
    16a8:	d1 2c       	mov	r13, r1
    16aa:	76 01       	movw	r14, r12
    16ac:	ca 94       	dec	r12
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    16ae:	19 ef       	ldi	r17, 0xF9	; 249
    16b0:	05 c0       	rjmp	.+10     	; 0x16bc <usart_set_baudrate+0xbc>
		if (ratio < limit) {
    16b2:	2c 15       	cp	r18, r12
    16b4:	3d 05       	cpc	r19, r13
    16b6:	4e 05       	cpc	r20, r14
    16b8:	5f 05       	cpc	r21, r15
    16ba:	68 f0       	brcs	.+26     	; 0x16d6 <usart_set_baudrate+0xd6>
			break;
		}

		limit <<= 1;
    16bc:	cc 0c       	add	r12, r12
    16be:	dd 1c       	adc	r13, r13
    16c0:	ee 1c       	adc	r14, r14
    16c2:	ff 1c       	adc	r15, r15

		if (exp < -3) {
    16c4:	1d 3f       	cpi	r17, 0xFD	; 253
    16c6:	14 f4       	brge	.+4      	; 0x16cc <usart_set_baudrate+0xcc>
			limit |= 1;
    16c8:	68 94       	set
    16ca:	c0 f8       	bld	r12, 0

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    16cc:	1f 5f       	subi	r17, 0xFF	; 255
    16ce:	17 30       	cpi	r17, 0x07	; 7
    16d0:	81 f7       	brne	.-32     	; 0x16b2 <usart_set_baudrate+0xb2>
    16d2:	21 2f       	mov	r18, r17
    16d4:	52 c0       	rjmp	.+164    	; 0x177a <usart_set_baudrate+0x17a>
    16d6:	21 2f       	mov	r18, r17
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    16d8:	11 23       	and	r17, r17
    16da:	0c f0       	brlt	.+2      	; 0x16de <usart_set_baudrate+0xde>
    16dc:	4e c0       	rjmp	.+156    	; 0x177a <usart_set_baudrate+0x17a>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    16de:	d5 01       	movw	r26, r10
    16e0:	c4 01       	movw	r24, r8
    16e2:	88 0f       	add	r24, r24
    16e4:	99 1f       	adc	r25, r25
    16e6:	aa 1f       	adc	r26, r26
    16e8:	bb 1f       	adc	r27, r27
    16ea:	88 0f       	add	r24, r24
    16ec:	99 1f       	adc	r25, r25
    16ee:	aa 1f       	adc	r26, r26
    16f0:	bb 1f       	adc	r27, r27
    16f2:	88 0f       	add	r24, r24
    16f4:	99 1f       	adc	r25, r25
    16f6:	aa 1f       	adc	r26, r26
    16f8:	bb 1f       	adc	r27, r27
    16fa:	48 1a       	sub	r4, r24
    16fc:	59 0a       	sbc	r5, r25
    16fe:	6a 0a       	sbc	r6, r26
    1700:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    1702:	1e 3f       	cpi	r17, 0xFE	; 254
    1704:	ec f4       	brge	.+58     	; 0x1740 <usart_set_baudrate+0x140>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    1706:	6d ef       	ldi	r22, 0xFD	; 253
    1708:	7f ef       	ldi	r23, 0xFF	; 255
    170a:	61 1b       	sub	r22, r17
    170c:	71 09       	sbc	r23, r1
    170e:	17 fd       	sbrc	r17, 7
    1710:	73 95       	inc	r23
    1712:	04 c0       	rjmp	.+8      	; 0x171c <usart_set_baudrate+0x11c>
    1714:	44 0c       	add	r4, r4
    1716:	55 1c       	adc	r5, r5
    1718:	66 1c       	adc	r6, r6
    171a:	77 1c       	adc	r7, r7
    171c:	6a 95       	dec	r22
    171e:	d2 f7       	brpl	.-12     	; 0x1714 <usart_set_baudrate+0x114>
    1720:	d5 01       	movw	r26, r10
    1722:	c4 01       	movw	r24, r8
    1724:	b6 95       	lsr	r27
    1726:	a7 95       	ror	r26
    1728:	97 95       	ror	r25
    172a:	87 95       	ror	r24
    172c:	bc 01       	movw	r22, r24
    172e:	cd 01       	movw	r24, r26
    1730:	64 0d       	add	r22, r4
    1732:	75 1d       	adc	r23, r5
    1734:	86 1d       	adc	r24, r6
    1736:	97 1d       	adc	r25, r7
    1738:	a5 01       	movw	r20, r10
    173a:	94 01       	movw	r18, r8
    173c:	0a d4       	rcall	.+2068   	; 0x1f52 <__udivmodsi4>
    173e:	3c c0       	rjmp	.+120    	; 0x17b8 <usart_set_baudrate+0x1b8>
		} else {
			baud <<= exp + 3;
    1740:	21 2f       	mov	r18, r17
    1742:	33 27       	eor	r19, r19
    1744:	27 fd       	sbrc	r18, 7
    1746:	30 95       	com	r19
    1748:	2d 5f       	subi	r18, 0xFD	; 253
    174a:	3f 4f       	sbci	r19, 0xFF	; 255
    174c:	d5 01       	movw	r26, r10
    174e:	c4 01       	movw	r24, r8
    1750:	04 c0       	rjmp	.+8      	; 0x175a <usart_set_baudrate+0x15a>
    1752:	88 0f       	add	r24, r24
    1754:	99 1f       	adc	r25, r25
    1756:	aa 1f       	adc	r26, r26
    1758:	bb 1f       	adc	r27, r27
    175a:	2a 95       	dec	r18
    175c:	d2 f7       	brpl	.-12     	; 0x1752 <usart_set_baudrate+0x152>
    175e:	9c 01       	movw	r18, r24
    1760:	ad 01       	movw	r20, r26
			div = (cpu_hz + baud / 2) / baud;
    1762:	b6 95       	lsr	r27
    1764:	a7 95       	ror	r26
    1766:	97 95       	ror	r25
    1768:	87 95       	ror	r24
    176a:	bc 01       	movw	r22, r24
    176c:	cd 01       	movw	r24, r26
    176e:	64 0d       	add	r22, r4
    1770:	75 1d       	adc	r23, r5
    1772:	86 1d       	adc	r24, r6
    1774:	97 1d       	adc	r25, r7
    1776:	ed d3       	rcall	.+2010   	; 0x1f52 <__udivmodsi4>
    1778:	1f c0       	rjmp	.+62     	; 0x17b8 <usart_set_baudrate+0x1b8>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    177a:	33 27       	eor	r19, r19
    177c:	27 fd       	sbrc	r18, 7
    177e:	30 95       	com	r19
    1780:	2d 5f       	subi	r18, 0xFD	; 253
    1782:	3f 4f       	sbci	r19, 0xFF	; 255
    1784:	d5 01       	movw	r26, r10
    1786:	c4 01       	movw	r24, r8
    1788:	04 c0       	rjmp	.+8      	; 0x1792 <usart_set_baudrate+0x192>
    178a:	88 0f       	add	r24, r24
    178c:	99 1f       	adc	r25, r25
    178e:	aa 1f       	adc	r26, r26
    1790:	bb 1f       	adc	r27, r27
    1792:	2a 95       	dec	r18
    1794:	d2 f7       	brpl	.-12     	; 0x178a <usart_set_baudrate+0x18a>
    1796:	9c 01       	movw	r18, r24
    1798:	ad 01       	movw	r20, r26
		div = (cpu_hz + baud / 2) / baud - 1;
    179a:	b6 95       	lsr	r27
    179c:	a7 95       	ror	r26
    179e:	97 95       	ror	r25
    17a0:	87 95       	ror	r24
    17a2:	bc 01       	movw	r22, r24
    17a4:	cd 01       	movw	r24, r26
    17a6:	64 0d       	add	r22, r4
    17a8:	75 1d       	adc	r23, r5
    17aa:	86 1d       	adc	r24, r6
    17ac:	97 1d       	adc	r25, r7
    17ae:	d1 d3       	rcall	.+1954   	; 0x1f52 <__udivmodsi4>
    17b0:	21 50       	subi	r18, 0x01	; 1
    17b2:	31 09       	sbc	r19, r1
    17b4:	41 09       	sbc	r20, r1
    17b6:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    17b8:	83 2f       	mov	r24, r19
    17ba:	8f 70       	andi	r24, 0x0F	; 15
    17bc:	12 95       	swap	r17
    17be:	10 7f       	andi	r17, 0xF0	; 240
    17c0:	18 2b       	or	r17, r24
    17c2:	1f 83       	std	Y+7, r17	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    17c4:	2e 83       	std	Y+6, r18	; 0x06

	return true;
    17c6:	81 e0       	ldi	r24, 0x01	; 1
    17c8:	18 c0       	rjmp	.+48     	; 0x17fa <usart_set_baudrate+0x1fa>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    17ca:	80 e0       	ldi	r24, 0x00	; 0
    17cc:	16 c0       	rjmp	.+44     	; 0x17fa <usart_set_baudrate+0x1fa>
    17ce:	80 e0       	ldi	r24, 0x00	; 0
    17d0:	14 c0       	rjmp	.+40     	; 0x17fa <usart_set_baudrate+0x1fa>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    17d2:	d5 01       	movw	r26, r10
    17d4:	c4 01       	movw	r24, r8
    17d6:	88 0f       	add	r24, r24
    17d8:	99 1f       	adc	r25, r25
    17da:	aa 1f       	adc	r26, r26
    17dc:	bb 1f       	adc	r27, r27
    17de:	88 0f       	add	r24, r24
    17e0:	99 1f       	adc	r25, r25
    17e2:	aa 1f       	adc	r26, r26
    17e4:	bb 1f       	adc	r27, r27
    17e6:	88 0f       	add	r24, r24
    17e8:	99 1f       	adc	r25, r25
    17ea:	aa 1f       	adc	r26, r26
    17ec:	bb 1f       	adc	r27, r27
    17ee:	48 1a       	sub	r4, r24
    17f0:	59 0a       	sbc	r5, r25
    17f2:	6a 0a       	sbc	r6, r26
    17f4:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    17f6:	19 ef       	ldi	r17, 0xF9	; 249
    17f8:	86 cf       	rjmp	.-244    	; 0x1706 <usart_set_baudrate+0x106>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
    17fa:	df 91       	pop	r29
    17fc:	cf 91       	pop	r28
    17fe:	1f 91       	pop	r17
    1800:	0f 91       	pop	r16
    1802:	ff 90       	pop	r15
    1804:	ef 90       	pop	r14
    1806:	df 90       	pop	r13
    1808:	cf 90       	pop	r12
    180a:	bf 90       	pop	r11
    180c:	af 90       	pop	r10
    180e:	9f 90       	pop	r9
    1810:	8f 90       	pop	r8
    1812:	7f 90       	pop	r7
    1814:	6f 90       	pop	r6
    1816:	5f 90       	pop	r5
    1818:	4f 90       	pop	r4
    181a:	08 95       	ret

0000181c <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
    181c:	0f 93       	push	r16
    181e:	1f 93       	push	r17
    1820:	cf 93       	push	r28
    1822:	df 93       	push	r29
    1824:	ec 01       	movw	r28, r24
    1826:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    1828:	00 97       	sbiw	r24, 0x00	; 0
    182a:	09 f4       	brne	.+2      	; 0x182e <usart_init_rs232+0x12>
    182c:	ee c0       	rjmp	.+476    	; 0x1a0a <usart_init_rs232+0x1ee>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    182e:	80 3c       	cpi	r24, 0xC0	; 192
    1830:	91 05       	cpc	r25, r1
    1832:	31 f4       	brne	.+12     	; 0x1840 <usart_init_rs232+0x24>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    1834:	60 e1       	ldi	r22, 0x10	; 16
    1836:	80 e0       	ldi	r24, 0x00	; 0
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <sysclk_enable_module>
    183e:	e5 c0       	rjmp	.+458    	; 0x1a0a <usart_init_rs232+0x1ee>
	else if (module == &EBI) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    1840:	c1 15       	cp	r28, r1
    1842:	84 e0       	ldi	r24, 0x04	; 4
    1844:	d8 07       	cpc	r29, r24
    1846:	31 f4       	brne	.+12     	; 0x1854 <usart_init_rs232+0x38>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    1848:	64 e0       	ldi	r22, 0x04	; 4
    184a:	80 e0       	ldi	r24, 0x00	; 0
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <sysclk_enable_module>
    1852:	db c0       	rjmp	.+438    	; 0x1a0a <usart_init_rs232+0x1ee>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    1854:	c0 38       	cpi	r28, 0x80	; 128
    1856:	e1 e0       	ldi	r30, 0x01	; 1
    1858:	de 07       	cpc	r29, r30
    185a:	31 f4       	brne	.+12     	; 0x1868 <usart_init_rs232+0x4c>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    185c:	62 e0       	ldi	r22, 0x02	; 2
    185e:	80 e0       	ldi	r24, 0x00	; 0
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <sysclk_enable_module>
    1866:	d1 c0       	rjmp	.+418    	; 0x1a0a <usart_init_rs232+0x1ee>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    1868:	c1 15       	cp	r28, r1
    186a:	f1 e0       	ldi	r31, 0x01	; 1
    186c:	df 07       	cpc	r29, r31
    186e:	31 f4       	brne	.+12     	; 0x187c <usart_init_rs232+0x60>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    1870:	61 e0       	ldi	r22, 0x01	; 1
    1872:	80 e0       	ldi	r24, 0x00	; 0
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <sysclk_enable_module>
    187a:	c7 c0       	rjmp	.+398    	; 0x1a0a <usart_init_rs232+0x1ee>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    187c:	c0 38       	cpi	r28, 0x80	; 128
    187e:	83 e0       	ldi	r24, 0x03	; 3
    1880:	d8 07       	cpc	r29, r24
    1882:	31 f4       	brne	.+12     	; 0x1890 <usart_init_rs232+0x74>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    1884:	61 e0       	ldi	r22, 0x01	; 1
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <sysclk_enable_module>
    188e:	bd c0       	rjmp	.+378    	; 0x1a0a <usart_init_rs232+0x1ee>
	else if (module == &ACB) {
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    1890:	c1 15       	cp	r28, r1
    1892:	e2 e0       	ldi	r30, 0x02	; 2
    1894:	de 07       	cpc	r29, r30
    1896:	31 f4       	brne	.+12     	; 0x18a4 <usart_init_rs232+0x88>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    1898:	62 e0       	ldi	r22, 0x02	; 2
    189a:	81 e0       	ldi	r24, 0x01	; 1
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <sysclk_enable_module>
    18a2:	b3 c0       	rjmp	.+358    	; 0x1a0a <usart_init_rs232+0x1ee>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    18a4:	c0 32       	cpi	r28, 0x20	; 32
    18a6:	f3 e0       	ldi	r31, 0x03	; 3
    18a8:	df 07       	cpc	r29, r31
    18aa:	31 f4       	brne	.+12     	; 0x18b8 <usart_init_rs232+0x9c>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    18ac:	64 e0       	ldi	r22, 0x04	; 4
    18ae:	82 e0       	ldi	r24, 0x02	; 2
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <sysclk_enable_module>
    18b6:	a9 c0       	rjmp	.+338    	; 0x1a0a <usart_init_rs232+0x1ee>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    18b8:	c1 15       	cp	r28, r1
    18ba:	88 e0       	ldi	r24, 0x08	; 8
    18bc:	d8 07       	cpc	r29, r24
    18be:	31 f4       	brne	.+12     	; 0x18cc <usart_init_rs232+0xb0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    18c0:	61 e0       	ldi	r22, 0x01	; 1
    18c2:	83 e0       	ldi	r24, 0x03	; 3
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <sysclk_enable_module>
    18ca:	9f c0       	rjmp	.+318    	; 0x1a0a <usart_init_rs232+0x1ee>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    18cc:	c1 15       	cp	r28, r1
    18ce:	e9 e0       	ldi	r30, 0x09	; 9
    18d0:	de 07       	cpc	r29, r30
    18d2:	31 f4       	brne	.+12     	; 0x18e0 <usart_init_rs232+0xc4>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    18d4:	61 e0       	ldi	r22, 0x01	; 1
    18d6:	84 e0       	ldi	r24, 0x04	; 4
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <sysclk_enable_module>
    18de:	95 c0       	rjmp	.+298    	; 0x1a0a <usart_init_rs232+0x1ee>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    18e0:	c1 15       	cp	r28, r1
    18e2:	fa e0       	ldi	r31, 0x0A	; 10
    18e4:	df 07       	cpc	r29, r31
    18e6:	31 f4       	brne	.+12     	; 0x18f4 <usart_init_rs232+0xd8>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    18e8:	61 e0       	ldi	r22, 0x01	; 1
    18ea:	85 e0       	ldi	r24, 0x05	; 5
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <sysclk_enable_module>
    18f2:	8b c0       	rjmp	.+278    	; 0x1a0a <usart_init_rs232+0x1ee>
	else if (module == &TCF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    18f4:	c0 34       	cpi	r28, 0x40	; 64
    18f6:	88 e0       	ldi	r24, 0x08	; 8
    18f8:	d8 07       	cpc	r29, r24
    18fa:	31 f4       	brne	.+12     	; 0x1908 <usart_init_rs232+0xec>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    18fc:	62 e0       	ldi	r22, 0x02	; 2
    18fe:	83 e0       	ldi	r24, 0x03	; 3
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <sysclk_enable_module>
    1906:	81 c0       	rjmp	.+258    	; 0x1a0a <usart_init_rs232+0x1ee>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    1908:	c0 34       	cpi	r28, 0x40	; 64
    190a:	e9 e0       	ldi	r30, 0x09	; 9
    190c:	de 07       	cpc	r29, r30
    190e:	31 f4       	brne	.+12     	; 0x191c <usart_init_rs232+0x100>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    1910:	62 e0       	ldi	r22, 0x02	; 2
    1912:	84 e0       	ldi	r24, 0x04	; 4
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <sysclk_enable_module>
    191a:	77 c0       	rjmp	.+238    	; 0x1a0a <usart_init_rs232+0x1ee>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    191c:	c0 39       	cpi	r28, 0x90	; 144
    191e:	f8 e0       	ldi	r31, 0x08	; 8
    1920:	df 07       	cpc	r29, r31
    1922:	31 f4       	brne	.+12     	; 0x1930 <usart_init_rs232+0x114>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1924:	64 e0       	ldi	r22, 0x04	; 4
    1926:	83 e0       	ldi	r24, 0x03	; 3
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <sysclk_enable_module>
    192e:	6d c0       	rjmp	.+218    	; 0x1a0a <usart_init_rs232+0x1ee>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    1930:	c0 39       	cpi	r28, 0x90	; 144
    1932:	89 e0       	ldi	r24, 0x09	; 9
    1934:	d8 07       	cpc	r29, r24
    1936:	31 f4       	brne	.+12     	; 0x1944 <usart_init_rs232+0x128>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1938:	64 e0       	ldi	r22, 0x04	; 4
    193a:	84 e0       	ldi	r24, 0x04	; 4
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <sysclk_enable_module>
    1942:	63 c0       	rjmp	.+198    	; 0x1a0a <usart_init_rs232+0x1ee>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    1944:	c0 39       	cpi	r28, 0x90	; 144
    1946:	ea e0       	ldi	r30, 0x0A	; 10
    1948:	de 07       	cpc	r29, r30
    194a:	31 f4       	brne	.+12     	; 0x1958 <usart_init_rs232+0x13c>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    194c:	64 e0       	ldi	r22, 0x04	; 4
    194e:	85 e0       	ldi	r24, 0x05	; 5
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <sysclk_enable_module>
    1956:	59 c0       	rjmp	.+178    	; 0x1a0a <usart_init_rs232+0x1ee>
	else if (module == &HIRESF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    1958:	c0 3c       	cpi	r28, 0xC0	; 192
    195a:	f8 e0       	ldi	r31, 0x08	; 8
    195c:	df 07       	cpc	r29, r31
    195e:	31 f4       	brne	.+12     	; 0x196c <usart_init_rs232+0x150>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    1960:	68 e0       	ldi	r22, 0x08	; 8
    1962:	83 e0       	ldi	r24, 0x03	; 3
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <sysclk_enable_module>
    196a:	4f c0       	rjmp	.+158    	; 0x1a0a <usart_init_rs232+0x1ee>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    196c:	c0 3c       	cpi	r28, 0xC0	; 192
    196e:	89 e0       	ldi	r24, 0x09	; 9
    1970:	d8 07       	cpc	r29, r24
    1972:	31 f4       	brne	.+12     	; 0x1980 <usart_init_rs232+0x164>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    1974:	68 e0       	ldi	r22, 0x08	; 8
    1976:	84 e0       	ldi	r24, 0x04	; 4
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <sysclk_enable_module>
    197e:	45 c0       	rjmp	.+138    	; 0x1a0a <usart_init_rs232+0x1ee>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    1980:	c0 3a       	cpi	r28, 0xA0	; 160
    1982:	e8 e0       	ldi	r30, 0x08	; 8
    1984:	de 07       	cpc	r29, r30
    1986:	31 f4       	brne	.+12     	; 0x1994 <usart_init_rs232+0x178>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    1988:	60 e1       	ldi	r22, 0x10	; 16
    198a:	83 e0       	ldi	r24, 0x03	; 3
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <sysclk_enable_module>
    1992:	3b c0       	rjmp	.+118    	; 0x1a0a <usart_init_rs232+0x1ee>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    1994:	c0 3a       	cpi	r28, 0xA0	; 160
    1996:	f9 e0       	ldi	r31, 0x09	; 9
    1998:	df 07       	cpc	r29, r31
    199a:	31 f4       	brne	.+12     	; 0x19a8 <usart_init_rs232+0x18c>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    199c:	60 e1       	ldi	r22, 0x10	; 16
    199e:	84 e0       	ldi	r24, 0x04	; 4
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <sysclk_enable_module>
    19a6:	31 c0       	rjmp	.+98     	; 0x1a0a <usart_init_rs232+0x1ee>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    19a8:	c0 3a       	cpi	r28, 0xA0	; 160
    19aa:	8a e0       	ldi	r24, 0x0A	; 10
    19ac:	d8 07       	cpc	r29, r24
    19ae:	31 f4       	brne	.+12     	; 0x19bc <usart_init_rs232+0x1a0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    19b0:	60 e1       	ldi	r22, 0x10	; 16
    19b2:	85 e0       	ldi	r24, 0x05	; 5
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <sysclk_enable_module>
    19ba:	27 c0       	rjmp	.+78     	; 0x1a0a <usart_init_rs232+0x1ee>
	else if (module == &USARTF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    19bc:	c0 3b       	cpi	r28, 0xB0	; 176
    19be:	e8 e0       	ldi	r30, 0x08	; 8
    19c0:	de 07       	cpc	r29, r30
    19c2:	31 f4       	brne	.+12     	; 0x19d0 <usart_init_rs232+0x1b4>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    19c4:	60 e2       	ldi	r22, 0x20	; 32
    19c6:	83 e0       	ldi	r24, 0x03	; 3
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <sysclk_enable_module>
    19ce:	1d c0       	rjmp	.+58     	; 0x1a0a <usart_init_rs232+0x1ee>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    19d0:	c0 3b       	cpi	r28, 0xB0	; 176
    19d2:	f9 e0       	ldi	r31, 0x09	; 9
    19d4:	df 07       	cpc	r29, r31
    19d6:	31 f4       	brne	.+12     	; 0x19e4 <usart_init_rs232+0x1c8>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    19d8:	60 e2       	ldi	r22, 0x20	; 32
    19da:	84 e0       	ldi	r24, 0x04	; 4
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <sysclk_enable_module>
    19e2:	13 c0       	rjmp	.+38     	; 0x1a0a <usart_init_rs232+0x1ee>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    19e4:	c0 38       	cpi	r28, 0x80	; 128
    19e6:	84 e0       	ldi	r24, 0x04	; 4
    19e8:	d8 07       	cpc	r29, r24
    19ea:	31 f4       	brne	.+12     	; 0x19f8 <usart_init_rs232+0x1dc>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    19ec:	60 e4       	ldi	r22, 0x40	; 64
    19ee:	83 e0       	ldi	r24, 0x03	; 3
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <sysclk_enable_module>
    19f6:	09 c0       	rjmp	.+18     	; 0x1a0a <usart_init_rs232+0x1ee>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    19f8:	c0 3a       	cpi	r28, 0xA0	; 160
    19fa:	e4 e0       	ldi	r30, 0x04	; 4
    19fc:	de 07       	cpc	r29, r30
    19fe:	29 f4       	brne	.+10     	; 0x1a0a <usart_init_rs232+0x1ee>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    1a00:	60 e4       	ldi	r22, 0x40	; 64
    1a02:	85 e0       	ldi	r24, 0x05	; 5
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    1a0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a0c:	8f 73       	andi	r24, 0x3F	; 63
    1a0e:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    1a10:	f8 01       	movw	r30, r16
    1a12:	96 81       	ldd	r25, Z+6	; 0x06
    1a14:	84 81       	ldd	r24, Z+4	; 0x04
    1a16:	89 2b       	or	r24, r25
    1a18:	90 85       	ldd	r25, Z+8	; 0x08
    1a1a:	99 23       	and	r25, r25
    1a1c:	11 f0       	breq	.+4      	; 0x1a22 <usart_init_rs232+0x206>
    1a1e:	98 e0       	ldi	r25, 0x08	; 8
    1a20:	01 c0       	rjmp	.+2      	; 0x1a24 <usart_init_rs232+0x208>
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	89 2b       	or	r24, r25
    1a26:	8d 83       	std	Y+5, r24	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    1a28:	f8 01       	movw	r30, r16
    1a2a:	40 81       	ld	r20, Z
    1a2c:	51 81       	ldd	r21, Z+1	; 0x01
    1a2e:	62 81       	ldd	r22, Z+2	; 0x02
    1a30:	73 81       	ldd	r23, Z+3	; 0x03
    1a32:	00 e0       	ldi	r16, 0x00	; 0
    1a34:	18 e4       	ldi	r17, 0x48	; 72
    1a36:	28 ee       	ldi	r18, 0xE8	; 232
    1a38:	31 e0       	ldi	r19, 0x01	; 1
    1a3a:	ce 01       	movw	r24, r28
    1a3c:	e1 dd       	rcall	.-1086   	; 0x1600 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    1a3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a40:	98 60       	ori	r25, 0x08	; 8
    1a42:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    1a44:	9c 81       	ldd	r25, Y+4	; 0x04
    1a46:	90 61       	ori	r25, 0x10	; 16
    1a48:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
    1a4a:	df 91       	pop	r29
    1a4c:	cf 91       	pop	r28
    1a4e:	1f 91       	pop	r17
    1a50:	0f 91       	pop	r16
    1a52:	08 95       	ret

00001a54 <tick_handler>:
 * \param id      \ref timeout_id_t
 * \param period  Time period in number of ticks
 */
void timeout_start_periodic(timeout_id_t id, uint16_t period)
{
	timeout_start_offset(id, period, period);
    1a54:	cf 93       	push	r28
    1a56:	df 93       	push	r29
    1a58:	c0 91 56 22 	lds	r28, 0x2256
    1a5c:	d0 91 77 22 	lds	r29, 0x2277
    1a60:	e7 e5       	ldi	r30, 0x57	; 87
    1a62:	f2 e2       	ldi	r31, 0x22	; 34
    1a64:	80 e0       	ldi	r24, 0x00	; 0
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	61 e0       	ldi	r22, 0x01	; 1
    1a6a:	70 e0       	ldi	r23, 0x00	; 0
    1a6c:	2c 2f       	mov	r18, r28
    1a6e:	30 e0       	ldi	r19, 0x00	; 0
    1a70:	08 2e       	mov	r0, r24
    1a72:	02 c0       	rjmp	.+4      	; 0x1a78 <tick_handler+0x24>
    1a74:	35 95       	asr	r19
    1a76:	27 95       	ror	r18
    1a78:	0a 94       	dec	r0
    1a7a:	e2 f7       	brpl	.-8      	; 0x1a74 <tick_handler+0x20>
    1a7c:	20 ff       	sbrs	r18, 0
    1a7e:	1a c0       	rjmp	.+52     	; 0x1ab4 <tick_handler+0x60>
    1a80:	20 81       	ld	r18, Z
    1a82:	31 81       	ldd	r19, Z+1	; 0x01
    1a84:	21 50       	subi	r18, 0x01	; 1
    1a86:	31 09       	sbc	r19, r1
    1a88:	20 83       	st	Z, r18
    1a8a:	31 83       	std	Z+1, r19	; 0x01
    1a8c:	23 2b       	or	r18, r19
    1a8e:	91 f4       	brne	.+36     	; 0x1ab4 <tick_handler+0x60>
    1a90:	9b 01       	movw	r18, r22
    1a92:	08 2e       	mov	r0, r24
    1a94:	02 c0       	rjmp	.+4      	; 0x1a9a <tick_handler+0x46>
    1a96:	22 0f       	add	r18, r18
    1a98:	33 1f       	adc	r19, r19
    1a9a:	0a 94       	dec	r0
    1a9c:	e2 f7       	brpl	.-8      	; 0x1a96 <tick_handler+0x42>
    1a9e:	d2 2b       	or	r29, r18
    1aa0:	42 81       	ldd	r20, Z+2	; 0x02
    1aa2:	53 81       	ldd	r21, Z+3	; 0x03
    1aa4:	41 15       	cp	r20, r1
    1aa6:	51 05       	cpc	r21, r1
    1aa8:	19 f0       	breq	.+6      	; 0x1ab0 <tick_handler+0x5c>
    1aaa:	40 83       	st	Z, r20
    1aac:	51 83       	std	Z+1, r21	; 0x01
    1aae:	02 c0       	rjmp	.+4      	; 0x1ab4 <tick_handler+0x60>
    1ab0:	20 95       	com	r18
    1ab2:	c2 23       	and	r28, r18
    1ab4:	01 96       	adiw	r24, 0x01	; 1
    1ab6:	34 96       	adiw	r30, 0x04	; 4
    1ab8:	88 30       	cpi	r24, 0x08	; 8
    1aba:	91 05       	cpc	r25, r1
    1abc:	b9 f6       	brne	.-82     	; 0x1a6c <tick_handler+0x18>
    1abe:	c0 93 56 22 	sts	0x2256, r28
    1ac2:	d0 93 77 22 	sts	0x2277, r29
    1ac6:	60 e0       	ldi	r22, 0x00	; 0
    1ac8:	70 e0       	ldi	r23, 0x00	; 0
    1aca:	cb 01       	movw	r24, r22
    1acc:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <rtc_set_time>
    1ad0:	60 e8       	ldi	r22, 0x80	; 128
    1ad2:	70 e0       	ldi	r23, 0x00	; 0
    1ad4:	80 e0       	ldi	r24, 0x00	; 0
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
    1ad8:	0e 94 25 05 	call	0xa4a	; 0xa4a <rtc_set_alarm>
    1adc:	df 91       	pop	r29
    1ade:	cf 91       	pop	r28
    1ae0:	08 95       	ret

00001ae2 <timeout_init>:
    1ae2:	0e 94 42 05 	call	0xa84	; 0xa84 <rtc_init>
    1ae6:	8a e2       	ldi	r24, 0x2A	; 42
    1ae8:	9d e0       	ldi	r25, 0x0D	; 13
    1aea:	0e 94 3d 05 	call	0xa7a	; 0xa7a <rtc_set_callback>
    1aee:	60 e0       	ldi	r22, 0x00	; 0
    1af0:	70 e0       	ldi	r23, 0x00	; 0
    1af2:	cb 01       	movw	r24, r22
    1af4:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <rtc_set_time>
    1af8:	60 e8       	ldi	r22, 0x80	; 128
    1afa:	70 e0       	ldi	r23, 0x00	; 0
    1afc:	80 e0       	ldi	r24, 0x00	; 0
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	0c 94 25 05 	jmp	0xa4a	; 0xa4a <rtc_set_alarm>

00001b04 <timeout_start_offset>:
    1b04:	88 30       	cpi	r24, 0x08	; 8
    1b06:	18 f5       	brcc	.+70     	; 0x1b4e <timeout_start_offset+0x4a>
    1b08:	af b7       	in	r26, 0x3f	; 63
    1b0a:	f8 94       	cli
    1b0c:	e8 2f       	mov	r30, r24
    1b0e:	f0 e0       	ldi	r31, 0x00	; 0
    1b10:	ee 0f       	add	r30, r30
    1b12:	ff 1f       	adc	r31, r31
    1b14:	ee 0f       	add	r30, r30
    1b16:	ff 1f       	adc	r31, r31
    1b18:	e9 5a       	subi	r30, 0xA9	; 169
    1b1a:	fd 4d       	sbci	r31, 0xDD	; 221
    1b1c:	40 83       	st	Z, r20
    1b1e:	51 83       	std	Z+1, r21	; 0x01
    1b20:	62 83       	std	Z+2, r22	; 0x02
    1b22:	73 83       	std	Z+3, r23	; 0x03
    1b24:	21 e0       	ldi	r18, 0x01	; 1
    1b26:	30 e0       	ldi	r19, 0x00	; 0
    1b28:	a9 01       	movw	r20, r18
    1b2a:	02 c0       	rjmp	.+4      	; 0x1b30 <timeout_start_offset+0x2c>
    1b2c:	44 0f       	add	r20, r20
    1b2e:	55 1f       	adc	r21, r21
    1b30:	8a 95       	dec	r24
    1b32:	e2 f7       	brpl	.-8      	; 0x1b2c <timeout_start_offset+0x28>
    1b34:	ca 01       	movw	r24, r20
    1b36:	90 91 56 22 	lds	r25, 0x2256
    1b3a:	98 2b       	or	r25, r24
    1b3c:	90 93 56 22 	sts	0x2256, r25
    1b40:	80 95       	com	r24
    1b42:	90 91 77 22 	lds	r25, 0x2277
    1b46:	89 23       	and	r24, r25
    1b48:	80 93 77 22 	sts	0x2277, r24
    1b4c:	af bf       	out	0x3f, r26	; 63
    1b4e:	08 95       	ret

00001b50 <timeout_start_singleshot>:
    1b50:	ab 01       	movw	r20, r22
    1b52:	60 e0       	ldi	r22, 0x00	; 0
    1b54:	70 e0       	ldi	r23, 0x00	; 0
    1b56:	d6 cf       	rjmp	.-84     	; 0x1b04 <timeout_start_offset>

00001b58 <timeout_test_and_clear_expired>:
 * \retval false  Timer still running
 */
bool timeout_test_and_clear_expired(timeout_id_t id)
{
	/* Check that ID within the TIMEOUT_COUNT range */
	if (id < TIMEOUT_COUNT) {
    1b58:	88 30       	cpi	r24, 0x08	; 8
    1b5a:	f8 f4       	brcc	.+62     	; 0x1b9a <timeout_test_and_clear_expired+0x42>
		irqflags_t flags;

		/* Check if timeout has expired */
		if (timeout_expired & (1 << id)) {
    1b5c:	20 91 77 22 	lds	r18, 0x2277
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	08 2e       	mov	r0, r24
    1b64:	02 c0       	rjmp	.+4      	; 0x1b6a <timeout_test_and_clear_expired+0x12>
    1b66:	35 95       	asr	r19
    1b68:	27 95       	ror	r18
    1b6a:	0a 94       	dec	r0
    1b6c:	e2 f7       	brpl	.-8      	; 0x1b66 <timeout_test_and_clear_expired+0xe>
    1b6e:	20 ff       	sbrs	r18, 0
    1b70:	16 c0       	rjmp	.+44     	; 0x1b9e <timeout_test_and_clear_expired+0x46>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1b72:	4f b7       	in	r20, 0x3f	; 63
	cpu_irq_disable();
    1b74:	f8 94       	cli
			flags = cpu_irq_save();
			timeout_expired &= ~(1 << id);
    1b76:	21 e0       	ldi	r18, 0x01	; 1
    1b78:	30 e0       	ldi	r19, 0x00	; 0
    1b7a:	b9 01       	movw	r22, r18
    1b7c:	02 c0       	rjmp	.+4      	; 0x1b82 <timeout_test_and_clear_expired+0x2a>
    1b7e:	66 0f       	add	r22, r22
    1b80:	77 1f       	adc	r23, r23
    1b82:	8a 95       	dec	r24
    1b84:	e2 f7       	brpl	.-8      	; 0x1b7e <timeout_test_and_clear_expired+0x26>
    1b86:	cb 01       	movw	r24, r22
    1b88:	80 95       	com	r24
    1b8a:	90 91 77 22 	lds	r25, 0x2277
    1b8e:	89 23       	and	r24, r25
    1b90:	80 93 77 22 	sts	0x2277, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1b94:	4f bf       	out	0x3f, r20	; 63
			cpu_irq_restore(flags);
			return true;
    1b96:	81 e0       	ldi	r24, 0x01	; 1
    1b98:	08 95       	ret
		}
	}

	return false;
    1b9a:	80 e0       	ldi	r24, 0x00	; 0
    1b9c:	08 95       	ret
    1b9e:	80 e0       	ldi	r24, 0x00	; 0
}
    1ba0:	08 95       	ret

00001ba2 <timeout_stop>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1ba2:	4f b7       	in	r20, 0x3f	; 63
	cpu_irq_disable();
    1ba4:	f8 94       	cli
 */
void timeout_stop(timeout_id_t id)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	timeout_active &= ~(1 << id);
    1ba6:	21 e0       	ldi	r18, 0x01	; 1
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
    1baa:	b9 01       	movw	r22, r18
    1bac:	02 c0       	rjmp	.+4      	; 0x1bb2 <timeout_stop+0x10>
    1bae:	66 0f       	add	r22, r22
    1bb0:	77 1f       	adc	r23, r23
    1bb2:	8a 95       	dec	r24
    1bb4:	e2 f7       	brpl	.-8      	; 0x1bae <timeout_stop+0xc>
    1bb6:	cb 01       	movw	r24, r22
    1bb8:	80 95       	com	r24
    1bba:	90 91 56 22 	lds	r25, 0x2256
    1bbe:	89 23       	and	r24, r25
    1bc0:	80 93 56 22 	sts	0x2256, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1bc4:	4f bf       	out	0x3f, r20	; 63
    1bc6:	08 95       	ret

00001bc8 <get_current_pulse_counter>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1bc8:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    1bca:	f8 94       	cli
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1bcc:	8f bf       	out	0x3f, r24	; 63
    uint32_t v;
    irqflags_t f = cpu_irq_save();
    v = state.current.pulse_counter[i];
    cpu_irq_restore(f);
    return v;
}
    1bce:	60 e0       	ldi	r22, 0x00	; 0
    1bd0:	70 e0       	ldi	r23, 0x00	; 0
    1bd2:	cb 01       	movw	r24, r22
    1bd4:	08 95       	ret

00001bd6 <get_midnight_pulse_counter>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1bd6:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    1bd8:	f8 94       	cli
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1bda:	8f bf       	out	0x3f, r24	; 63
    uint32_t v;
    irqflags_t f = cpu_irq_save();
    v = state.midnight_pulse_counter[i];
    cpu_irq_restore(f);
    return v;
}
    1bdc:	60 e0       	ldi	r22, 0x00	; 0
    1bde:	70 e0       	ldi	r23, 0x00	; 0
    1be0:	cb 01       	movw	r24, r22
    1be2:	08 95       	ret

00001be4 <reset_avr>:
}

void reset_avr(void);  // DO NOT CHANGE see uarte0 and uartc1

void reset_avr(void)
{
    1be4:	cf 93       	push	r28
    1be6:	df 93       	push	r29
    1be8:	cd b7       	in	r28, 0x3d	; 61
    1bea:	de b7       	in	r29, 0x3e	; 62
    1bec:	61 97       	sbiw	r28, 0x11	; 17
    1bee:	cd bf       	out	0x3d, r28	; 61
    1bf0:	de bf       	out	0x3e, r29	; 62
*/

static void eeprom_write_pulse_counters(void)
{
    eeprom_pulse_counters_0x03_t tmp;
    tmp.counter[0] = get_current_pulse_counter(0);
    1bf2:	80 e0       	ldi	r24, 0x00	; 0
    1bf4:	e9 df       	rcall	.-46     	; 0x1bc8 <get_current_pulse_counter>
    1bf6:	69 83       	std	Y+1, r22	; 0x01
    1bf8:	7a 83       	std	Y+2, r23	; 0x02
    1bfa:	8b 83       	std	Y+3, r24	; 0x03
    1bfc:	9c 83       	std	Y+4, r25	; 0x04
    tmp.counter[1] = get_current_pulse_counter(1);
    1bfe:	81 e0       	ldi	r24, 0x01	; 1
    1c00:	e3 df       	rcall	.-58     	; 0x1bc8 <get_current_pulse_counter>
    1c02:	6d 83       	std	Y+5, r22	; 0x05
    1c04:	7e 83       	std	Y+6, r23	; 0x06
    1c06:	8f 83       	std	Y+7, r24	; 0x07
    1c08:	98 87       	std	Y+8, r25	; 0x08
    tmp.midnight_counter[0] = get_midnight_pulse_counter(0);
    1c0a:	80 e0       	ldi	r24, 0x00	; 0
    1c0c:	e4 df       	rcall	.-56     	; 0x1bd6 <get_midnight_pulse_counter>
    1c0e:	69 87       	std	Y+9, r22	; 0x09
    1c10:	7a 87       	std	Y+10, r23	; 0x0a
    1c12:	8b 87       	std	Y+11, r24	; 0x0b
    1c14:	9c 87       	std	Y+12, r25	; 0x0c
    tmp.midnight_counter[1] = get_midnight_pulse_counter(1);
    1c16:	81 e0       	ldi	r24, 0x01	; 1
    1c18:	de df       	rcall	.-68     	; 0x1bd6 <get_midnight_pulse_counter>
    1c1a:	6d 87       	std	Y+13, r22	; 0x0d
    1c1c:	7e 87       	std	Y+14, r23	; 0x0e
    1c1e:	8f 87       	std	Y+15, r24	; 0x0f
    1c20:	98 8b       	std	Y+16, r25	; 0x10
    tmp.crc = crc8_compute((void*) &tmp, sizeof tmp - 1);
    1c22:	60 e1       	ldi	r22, 0x10	; 16
    1c24:	ce 01       	movw	r24, r28
    1c26:	01 96       	adiw	r24, 0x01	; 1
    1c28:	0e 94 28 01 	call	0x250	; 0x250 <crc8_compute>
    1c2c:	89 8b       	std	Y+17, r24	; 0x11
    nvm_eeprom_erase_and_write_buffer(offsetof(struct _eeprom_0x03_t, pulse_counters), &tmp, sizeof(tmp));
    1c2e:	41 e1       	ldi	r20, 0x11	; 17
    1c30:	50 e0       	ldi	r21, 0x00	; 0
    1c32:	be 01       	movw	r22, r28
    1c34:	6f 5f       	subi	r22, 0xFF	; 255
    1c36:	7f 4f       	sbci	r23, 0xFF	; 255
    1c38:	83 ec       	ldi	r24, 0xC3	; 195
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	0e 94 a7 04 	call	0x94e	; 0x94e <nvm_eeprom_erase_and_write_buffer>
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    1c40:	e0 ec       	ldi	r30, 0xC0	; 192
    1c42:	f1 e0       	ldi	r31, 0x01	; 1
    1c44:	87 85       	ldd	r24, Z+15	; 0x0f
    1c46:	88 23       	and	r24, r24
    1c48:	ec f3       	brlt	.-6      	; 0x1c44 <reset_avr+0x60>
    nvm_wait_until_ready();
    DEBUG_putcrlf(__FUNCTION__);
    1c4a:	80 e6       	ldi	r24, 0x60	; 96
    1c4c:	90 e2       	ldi	r25, 0x20	; 32
    1c4e:	0e 94 14 03 	call	0x628	; 0x628 <DEBUG_putcrlf>
void reset_avr(void);  // DO NOT CHANGE see uarte0 and uartc1

void reset_avr(void)
{
    eeprom_write_pulse_counters();
    Disable_global_interrupt();
    1c52:	f8 94       	cli
	RST.STATUS = causes;
}

static inline void reset_do_soft_reset(void)
{
	ccp_write_io((void *)&RST.CTRL, RST_SWRST_bm);
    1c54:	61 e0       	ldi	r22, 0x01	; 1
    1c56:	89 e7       	ldi	r24, 0x79	; 121
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	0e 94 1c 04 	call	0x838	; 0x838 <ccp_write_io>
    1c5e:	ff cf       	rjmp	.-2      	; 0x1c5e <reset_avr+0x7a>

00001c60 <__vector_64>:
        }
    }
}

ISR(PORTD_INT0_vect)    // GPIO_COUNT2
{
    1c60:	1f 92       	push	r1
    1c62:	0f 92       	push	r0
    1c64:	0f b6       	in	r0, 0x3f	; 63
    1c66:	0f 92       	push	r0
    1c68:	11 24       	eor	r1, r1
    1c6a:	8f 93       	push	r24
    1c6c:	ef 93       	push	r30
    1c6e:	ff 93       	push	r31
    PORTD.INTFLAGS = 0x01;
    1c70:	81 e0       	ldi	r24, 0x01	; 1
    1c72:	e0 e6       	ldi	r30, 0x60	; 96
    1c74:	f6 e0       	ldi	r31, 0x06	; 6
    1c76:	84 87       	std	Z+12, r24	; 0x0c
}
    1c78:	ff 91       	pop	r31
    1c7a:	ef 91       	pop	r30
    1c7c:	8f 91       	pop	r24
    1c7e:	0f 90       	pop	r0
    1c80:	0f be       	out	0x3f, r0	; 63
    1c82:	0f 90       	pop	r0
    1c84:	1f 90       	pop	r1
    1c86:	18 95       	reti

00001c88 <__vector_2>:

ISR(PORTC_INT0_vect)    // GPIO_COUNT1
{
    1c88:	1f 92       	push	r1
    1c8a:	0f 92       	push	r0
    1c8c:	0f b6       	in	r0, 0x3f	; 63
    1c8e:	0f 92       	push	r0
    1c90:	11 24       	eor	r1, r1
    1c92:	8f 93       	push	r24
    1c94:	ef 93       	push	r30
    1c96:	ff 93       	push	r31
    PORTC.INTFLAGS = 0x01;
    1c98:	81 e0       	ldi	r24, 0x01	; 1
    1c9a:	e0 e4       	ldi	r30, 0x40	; 64
    1c9c:	f6 e0       	ldi	r31, 0x06	; 6
    1c9e:	84 87       	std	Z+12, r24	; 0x0c
}
    1ca0:	ff 91       	pop	r31
    1ca2:	ef 91       	pop	r30
    1ca4:	8f 91       	pop	r24
    1ca6:	0f 90       	pop	r0
    1ca8:	0f be       	out	0x3f, r0	; 63
    1caa:	0f 90       	pop	r0
    1cac:	1f 90       	pop	r1
    1cae:	18 95       	reti

00001cb0 <__vector_34>:

ISR(PORTB_INT0_vect)    // GPIO_COUNT3
{
    1cb0:	1f 92       	push	r1
    1cb2:	0f 92       	push	r0
    1cb4:	0f b6       	in	r0, 0x3f	; 63
    1cb6:	0f 92       	push	r0
    1cb8:	11 24       	eor	r1, r1
    1cba:	8f 93       	push	r24
    1cbc:	ef 93       	push	r30
    1cbe:	ff 93       	push	r31
    PORTB.INTFLAGS = 0x01;
    1cc0:	81 e0       	ldi	r24, 0x01	; 1
    1cc2:	e0 e2       	ldi	r30, 0x20	; 32
    1cc4:	f6 e0       	ldi	r31, 0x06	; 6
    1cc6:	84 87       	std	Z+12, r24	; 0x0c
}
    1cc8:	ff 91       	pop	r31
    1cca:	ef 91       	pop	r30
    1ccc:	8f 91       	pop	r24
    1cce:	0f 90       	pop	r0
    1cd0:	0f be       	out	0x3f, r0	; 63
    1cd2:	0f 90       	pop	r0
    1cd4:	1f 90       	pop	r1
    1cd6:	18 95       	reti

00001cd8 <__vector_66>:

ISR(PORTA_INT0_vect)    // GPIO_COUNT4
{
    1cd8:	1f 92       	push	r1
    1cda:	0f 92       	push	r0
    1cdc:	0f b6       	in	r0, 0x3f	; 63
    1cde:	0f 92       	push	r0
    1ce0:	11 24       	eor	r1, r1
    1ce2:	8f 93       	push	r24
    1ce4:	ef 93       	push	r30
    1ce6:	ff 93       	push	r31
    PORTA.INTFLAGS = 0x01;
    1ce8:	81 e0       	ldi	r24, 0x01	; 1
    1cea:	e0 e0       	ldi	r30, 0x00	; 0
    1cec:	f6 e0       	ldi	r31, 0x06	; 6
    1cee:	84 87       	std	Z+12, r24	; 0x0c
}
    1cf0:	ff 91       	pop	r31
    1cf2:	ef 91       	pop	r30
    1cf4:	8f 91       	pop	r24
    1cf6:	0f 90       	pop	r0
    1cf8:	0f be       	out	0x3f, r0	; 63
    1cfa:	0f 90       	pop	r0
    1cfc:	1f 90       	pop	r1
    1cfe:	18 95       	reti

00001d00 <get_unsolicited_commands>:
* Rikus irrigation controller methods and decelerations
* ****************************************************************************
*/

void get_unsolicited_commands(int buf_size, char* buffer)
{
    1d00:	cf 92       	push	r12
    1d02:	df 92       	push	r13
    1d04:	ef 92       	push	r14
    1d06:	ff 92       	push	r15
    1d08:	0f 93       	push	r16
    1d0a:	1f 93       	push	r17
    1d0c:	cf 93       	push	r28
    1d0e:	df 93       	push	r29
    1d10:	6c 01       	movw	r12, r24
    1d12:	7b 01       	movw	r14, r22
    char character;
    int count = 0;
    1d14:	c0 e0       	ldi	r28, 0x00	; 0
    1d16:	d0 e0       	ldi	r29, 0x00	; 0
    while (character != '\r' && character != '\n') {
        character = MODEM_get_byte();
        if (count < (buf_size - 1)) {
    1d18:	8c 01       	movw	r16, r24
    1d1a:	01 50       	subi	r16, 0x01	; 1
    1d1c:	11 09       	sbc	r17, r1
void get_unsolicited_commands(int buf_size, char* buffer)
{
    char character;
    int count = 0;
    while (character != '\r' && character != '\n') {
        character = MODEM_get_byte();
    1d1e:	0e 94 1a 03 	call	0x634	; 0x634 <MODEM_get_byte>
        if (count < (buf_size - 1)) {
    1d22:	c0 17       	cp	r28, r16
    1d24:	d1 07       	cpc	r29, r17
    1d26:	24 f4       	brge	.+8      	; 0x1d30 <get_unsolicited_commands+0x30>
* ****************************************************************************
* Rikus irrigation controller methods and decelerations
* ****************************************************************************
*/

void get_unsolicited_commands(int buf_size, char* buffer)
    1d28:	f7 01       	movw	r30, r14
    1d2a:	ec 0f       	add	r30, r28
    1d2c:	fd 1f       	adc	r31, r29
    char character;
    int count = 0;
    while (character != '\r' && character != '\n') {
        character = MODEM_get_byte();
        if (count < (buf_size - 1)) {
            buffer [count] = character;
    1d2e:	80 83       	st	Z, r24
        }
        count++;
    1d30:	21 96       	adiw	r28, 0x01	; 1

void get_unsolicited_commands(int buf_size, char* buffer)
{
    char character;
    int count = 0;
    while (character != '\r' && character != '\n') {
    1d32:	8d 30       	cpi	r24, 0x0D	; 13
    1d34:	11 f0       	breq	.+4      	; 0x1d3a <get_unsolicited_commands+0x3a>
    1d36:	8a 30       	cpi	r24, 0x0A	; 10
    1d38:	91 f7       	brne	.-28     	; 0x1d1e <get_unsolicited_commands+0x1e>
        if (count < (buf_size - 1)) {
            buffer [count] = character;
        }
        count++;
    }//while
    buffer[buf_size - 1] = '\0';  //append null terminator
    1d3a:	ec 0c       	add	r14, r12
    1d3c:	fd 1c       	adc	r15, r13
    1d3e:	f7 01       	movw	r30, r14
    1d40:	31 97       	sbiw	r30, 0x01	; 1
    1d42:	10 82       	st	Z, r1
}
    1d44:	df 91       	pop	r29
    1d46:	cf 91       	pop	r28
    1d48:	1f 91       	pop	r17
    1d4a:	0f 91       	pop	r16
    1d4c:	ff 90       	pop	r15
    1d4e:	ef 90       	pop	r14
    1d50:	df 90       	pop	r13
    1d52:	cf 90       	pop	r12
    1d54:	08 95       	ret

00001d56 <clear_temp_string>:

void clear_temp_string(int size, char* temp_buf)
{
    1d56:	e6 2f       	mov	r30, r22
    1d58:	f7 2f       	mov	r31, r23
    int temp_counter = 0;
    1d5a:	80 e0       	ldi	r24, 0x00	; 0
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    while (temp_counter < 60) {
        temp_buf[temp_counter] = NULL;
    1d5e:	11 92       	st	Z+, r1
        temp_counter ++;
    1d60:	01 96       	adiw	r24, 0x01	; 1
}

void clear_temp_string(int size, char* temp_buf)
{
    int temp_counter = 0;
    while (temp_counter < 60) {
    1d62:	8c 33       	cpi	r24, 0x3C	; 60
    1d64:	91 05       	cpc	r25, r1
    1d66:	d9 f7       	brne	.-10     	; 0x1d5e <clear_temp_string+0x8>
        temp_buf[temp_counter] = NULL;
        temp_counter ++;
    }
}//clear_temp_string
    1d68:	08 95       	ret

00001d6a <ack_job>:

void ack_job(int job_no)
{
    1d6a:	cf 93       	push	r28
    1d6c:	df 93       	push	r29
    1d6e:	cd b7       	in	r28, 0x3d	; 61
    1d70:	de b7       	in	r29, 0x3e	; 62
    1d72:	ec 97       	sbiw	r28, 0x3c	; 60
    1d74:	cd bf       	out	0x3d, r28	; 61
    1d76:	de bf       	out	0x3e, r29	; 62
    char ack [60];
    strcpy(ack, DUMMY);
    1d78:	24 e1       	ldi	r18, 0x14	; 20
    1d7a:	e5 e1       	ldi	r30, 0x15	; 21
    1d7c:	f0 e2       	ldi	r31, 0x20	; 32
    1d7e:	de 01       	movw	r26, r28
    1d80:	11 96       	adiw	r26, 0x01	; 1
    1d82:	01 90       	ld	r0, Z+
    1d84:	0d 92       	st	X+, r0
    1d86:	2a 95       	dec	r18
    1d88:	e1 f7       	brne	.-8      	; 0x1d82 <ack_job+0x18>
    strcat(ack, job_no);
    1d8a:	bc 01       	movw	r22, r24
    1d8c:	ce 01       	movw	r24, r28
    1d8e:	01 96       	adiw	r24, 0x01	; 1
    1d90:	05 d1       	rcall	.+522    	; 0x1f9c <strcat>
    MODEM_raw_puts(ack);
    1d92:	ce 01       	movw	r24, r28
    1d94:	01 96       	adiw	r24, 0x01	; 1
    1d96:	0e 94 23 03 	call	0x646	; 0x646 <MODEM_raw_puts>
    MODEM_raw_putb('\n');
    1d9a:	8a e0       	ldi	r24, 0x0A	; 10
    1d9c:	0e 94 1c 03 	call	0x638	; 0x638 <MODEM_raw_putb>
    MODEM_raw_putb('\r');
    1da0:	8d e0       	ldi	r24, 0x0D	; 13
    1da2:	0e 94 1c 03 	call	0x638	; 0x638 <MODEM_raw_putb>

    return 0;
}
    1da6:	ec 96       	adiw	r28, 0x3c	; 60
    1da8:	cd bf       	out	0x3d, r28	; 61
    1daa:	de bf       	out	0x3e, r29	; 62
    1dac:	df 91       	pop	r29
    1dae:	cf 91       	pop	r28
    1db0:	08 95       	ret

00001db2 <decode>:

void decode(char* serial_in)
{
    1db2:	0f 93       	push	r16
    1db4:	1f 93       	push	r17
    1db6:	cf 93       	push	r28
    1db8:	df 93       	push	r29
    int delimiters_array [] = {0, 0, 0, 0, 0, 0, 0};
    int pos = 0;
    char* token = strtok(serial_in, ": ,");
    1dba:	69 e2       	ldi	r22, 0x29	; 41
    1dbc:	70 e2       	ldi	r23, 0x20	; 32
    1dbe:	eb d0       	rcall	.+470    	; 0x1f96 <strtok>

    while (token != NULL) {
    1dc0:	89 2b       	or	r24, r25
    1dc2:	79 f4       	brne	.+30     	; 0x1de2 <decode+0x30>
    1dc4:	17 c0       	rjmp	.+46     	; 0x1df4 <decode+0x42>
        token = strtok(NULL, ",");
    1dc6:	6b e2       	ldi	r22, 0x2B	; 43
    1dc8:	70 e2       	ldi	r23, 0x20	; 32
    1dca:	80 e0       	ldi	r24, 0x00	; 0
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	e3 d0       	rcall	.+454    	; 0x1f96 <strtok>
    1dd0:	8c 01       	movw	r16, r24
        if (pos == 1) { //check job_no
    1dd2:	c1 30       	cpi	r28, 0x01	; 1
    1dd4:	d1 05       	cpc	r29, r1
    1dd6:	09 f4       	brne	.+2      	; 0x1dda <decode+0x28>
            ack_job(token);
    1dd8:	c8 df       	rcall	.-112    	; 0x1d6a <ack_job>
        }
        pos++;
    1dda:	21 96       	adiw	r28, 0x01	; 1
{
    int delimiters_array [] = {0, 0, 0, 0, 0, 0, 0};
    int pos = 0;
    char* token = strtok(serial_in, ": ,");

    while (token != NULL) {
    1ddc:	01 2b       	or	r16, r17
    1dde:	99 f7       	brne	.-26     	; 0x1dc6 <decode+0x14>
    1de0:	09 c0       	rjmp	.+18     	; 0x1df4 <decode+0x42>
        token = strtok(NULL, ",");
    1de2:	6b e2       	ldi	r22, 0x2B	; 43
    1de4:	70 e2       	ldi	r23, 0x20	; 32
    1de6:	80 e0       	ldi	r24, 0x00	; 0
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	d5 d0       	rcall	.+426    	; 0x1f96 <strtok>
    1dec:	8c 01       	movw	r16, r24
}

void decode(char* serial_in)
{
    int delimiters_array [] = {0, 0, 0, 0, 0, 0, 0};
    int pos = 0;
    1dee:	c0 e0       	ldi	r28, 0x00	; 0
    1df0:	d0 e0       	ldi	r29, 0x00	; 0
    1df2:	f3 cf       	rjmp	.-26     	; 0x1dda <decode+0x28>
            ack_job(token);
        }
        pos++;
    }
    return 0;
}
    1df4:	df 91       	pop	r29
    1df6:	cf 91       	pop	r28
    1df8:	1f 91       	pop	r17
    1dfa:	0f 91       	pop	r16
    1dfc:	08 95       	ret

00001dfe <main>:

int main(void)
{
    1dfe:	cf 93       	push	r28
    1e00:	df 93       	push	r29
    1e02:	cd b7       	in	r28, 0x3d	; 61
    1e04:	de b7       	in	r29, 0x3e	; 62
    1e06:	ec 97       	sbiw	r28, 0x3c	; 60
    1e08:	cd bf       	out	0x3d, r28	; 61
    1e0a:	de bf       	out	0x3e, r29	; 62
    irq_initialize_vectors();
    1e0c:	e0 ea       	ldi	r30, 0xA0	; 160
    1e0e:	f0 e0       	ldi	r31, 0x00	; 0
    1e10:	87 e0       	ldi	r24, 0x07	; 7
    1e12:	82 83       	std	Z+2, r24	; 0x02
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    1e14:	82 83       	std	Z+2, r24	; 0x02
    pmic_init();
    sysclk_init();
    1e16:	0e 94 97 03 	call	0x72e	; 0x72e <sysclk_init>
    timeout_init();
    1e1a:	63 de       	rcall	.-826    	; 0x1ae2 <timeout_init>
    ioport_init();
    board_init();
    1e1c:	0e 94 31 03 	call	0x662	; 0x662 <board_init>
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
    1e20:	10 92 78 22 	sts	0x2278, r1
    1e24:	10 92 79 22 	sts	0x2279, r1
    1e28:	10 92 7a 22 	sts	0x227A, r1
    1e2c:	10 92 7b 22 	sts	0x227B, r1
    1e30:	10 92 7c 22 	sts	0x227C, r1
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    1e34:	81 e0       	ldi	r24, 0x01	; 1
    1e36:	80 93 7d 22 	sts	0x227D, r24
    sleepmgr_init();
    rtc_init();
    1e3a:	0e 94 42 05 	call	0xa84	; 0xa84 <rtc_init>
    cpu_irq_enable();
    1e3e:	78 94       	sei
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    1e40:	88 e0       	ldi	r24, 0x08	; 8
    1e42:	e0 e2       	ldi	r30, 0x20	; 32
    1e44:	f6 e0       	ldi	r31, 0x06	; 6
    1e46:	86 83       	std	Z+6, r24	; 0x06
    delay_init(F_CPU);


    ioport_set_pin_low(GPIO_LED1);
    _DEBUG_init();
    1e48:	0e 94 a8 01 	call	0x350	; 0x350 <_uartc1_init>
    _DEBUG_enable_interrupt(USART_INT_LVL_LO);
    1e4c:	81 e0       	ldi	r24, 0x01	; 1
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
    1e50:	0e 94 9f 01 	call	0x33e	; 0x33e <_uartc1_enable_interrupt>
    _MODEM_init();
    1e54:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_uarte0_init>
    _MODEM_enable_interrupt(USART_INT_LVL_LO);
    1e58:	81 e0       	ldi	r24, 0x01	; 1
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	0e 94 74 02 	call	0x4e8	; 0x4e8 <_uarte0_enable_interrupt>
    char unsolicited_command[60];
    char* unsolicited_command_ptr = &unsolicited_command;
    uint32_t loop_time_start;

    MODEM_raw_puts("at+awtda=c*");
    1e60:	8d e2       	ldi	r24, 0x2D	; 45
    1e62:	90 e2       	ldi	r25, 0x20	; 32
    1e64:	0e 94 23 03 	call	0x646	; 0x646 <MODEM_raw_puts>
    MODEM_raw_putb('\r');
    1e68:	8d e0       	ldi	r24, 0x0D	; 13
    1e6a:	0e 94 1c 03 	call	0x638	; 0x638 <MODEM_raw_putb>
    MODEM_raw_putb('\n');
    1e6e:	8a e0       	ldi	r24, 0x0A	; 10
    1e70:	0e 94 1c 03 	call	0x638	; 0x638 <MODEM_raw_putb>
    1e74:	80 e0       	ldi	r24, 0x00	; 0
    1e76:	92 e1       	ldi	r25, 0x12	; 18
    1e78:	aa e7       	ldi	r26, 0x7A	; 122
    1e7a:	b0 e0       	ldi	r27, 0x00	; 0
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	do { barrier(); } while (--n);
    1e7c:	01 97       	sbiw	r24, 0x01	; 1
    1e7e:	a1 09       	sbc	r26, r1
    1e80:	b1 09       	sbc	r27, r1
    1e82:	e1 f7       	brne	.-8      	; 0x1e7c <main+0x7e>
    delay_s(1.5);
    MODEM_raw_puts("at+awtda=d*");
    1e84:	89 e3       	ldi	r24, 0x39	; 57
    1e86:	90 e2       	ldi	r25, 0x20	; 32
    1e88:	0e 94 23 03 	call	0x646	; 0x646 <MODEM_raw_puts>
    MODEM_raw_putb('\r');
    1e8c:	8d e0       	ldi	r24, 0x0D	; 13
    1e8e:	0e 94 1c 03 	call	0x638	; 0x638 <MODEM_raw_putb>
    MODEM_raw_putb('\n');
    1e92:	8a e0       	ldi	r24, 0x0A	; 10
    1e94:	0e 94 1c 03 	call	0x638	; 0x638 <MODEM_raw_putb>
    1e98:	80 e0       	ldi	r24, 0x00	; 0
    1e9a:	92 e1       	ldi	r25, 0x12	; 18
    1e9c:	aa e7       	ldi	r26, 0x7A	; 122
    1e9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ea0:	01 97       	sbiw	r24, 0x01	; 1
    1ea2:	a1 09       	sbc	r26, r1
    1ea4:	b1 09       	sbc	r27, r1
    1ea6:	e1 f7       	brne	.-8      	; 0x1ea0 <main+0xa2>
    delay_s(1.5);

    loop_time_start = rtc_get_time();
    1ea8:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <rtc_get_time>
    1eac:	4b 01       	movw	r8, r22
    1eae:	5c 01       	movw	r10, r24

    while (1) {
        if ((rtc_get_time() - loop_time_start) >= 4) {
            MODEM_raw_puts(DUMMY_WRITE);
            MODEM_raw_putb('\n');
            MODEM_raw_putb('\r');
    1eb0:	0f 2e       	mov	r0, r31
    1eb2:	c1 2c       	mov	r12, r1
    1eb4:	f2 e1       	ldi	r31, 0x12	; 18
    1eb6:	df 2e       	mov	r13, r31
    1eb8:	fa e7       	ldi	r31, 0x7A	; 122
    1eba:	ef 2e       	mov	r14, r31
    1ebc:	f1 2c       	mov	r15, r1
    1ebe:	f0 2d       	mov	r31, r0
    delay_s(1.5);

    loop_time_start = rtc_get_time();

    while (1) {
        if ((rtc_get_time() - loop_time_start) >= 4) {
    1ec0:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <rtc_get_time>
    1ec4:	dc 01       	movw	r26, r24
    1ec6:	cb 01       	movw	r24, r22
    1ec8:	88 19       	sub	r24, r8
    1eca:	99 09       	sbc	r25, r9
    1ecc:	aa 09       	sbc	r26, r10
    1ece:	bb 09       	sbc	r27, r11
    1ed0:	04 97       	sbiw	r24, 0x04	; 4
    1ed2:	a1 05       	cpc	r26, r1
    1ed4:	b1 05       	cpc	r27, r1
    1ed6:	a0 f0       	brcs	.+40     	; 0x1f00 <main+0x102>
            MODEM_raw_puts(DUMMY_WRITE);
    1ed8:	85 e4       	ldi	r24, 0x45	; 69
    1eda:	90 e2       	ldi	r25, 0x20	; 32
    1edc:	0e 94 23 03 	call	0x646	; 0x646 <MODEM_raw_puts>
            MODEM_raw_putb('\n');
    1ee0:	8a e0       	ldi	r24, 0x0A	; 10
    1ee2:	0e 94 1c 03 	call	0x638	; 0x638 <MODEM_raw_putb>
            MODEM_raw_putb('\r');
    1ee6:	8d e0       	ldi	r24, 0x0D	; 13
    1ee8:	0e 94 1c 03 	call	0x638	; 0x638 <MODEM_raw_putb>
    1eec:	d7 01       	movw	r26, r14
    1eee:	c6 01       	movw	r24, r12
    1ef0:	01 97       	sbiw	r24, 0x01	; 1
    1ef2:	a1 09       	sbc	r26, r1
    1ef4:	b1 09       	sbc	r27, r1
    1ef6:	e1 f7       	brne	.-8      	; 0x1ef0 <main+0xf2>
            delay_s(1.5);
            loop_time_start = rtc_get_time();
    1ef8:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <rtc_get_time>
    1efc:	4b 01       	movw	r8, r22
    1efe:	5c 01       	movw	r10, r24
        }

        if (_uarte0_byte_available() == true) { //modem uart gets unsolicted interrupt
    1f00:	0e 94 c6 02 	call	0x58c	; 0x58c <_uarte0_byte_available>
    1f04:	88 23       	and	r24, r24
    1f06:	e1 f2       	breq	.-72     	; 0x1ec0 <main+0xc2>
            unsolicited_command_ptr = &unsolicited_command;
            get_unsolicited_commands(sizeof(unsolicited_command), unsolicited_command_ptr);
    1f08:	be 01       	movw	r22, r28
    1f0a:	6f 5f       	subi	r22, 0xFF	; 255
    1f0c:	7f 4f       	sbci	r23, 0xFF	; 255
    1f0e:	8c e3       	ldi	r24, 0x3C	; 60
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	f6 de       	rcall	.-532    	; 0x1d00 <get_unsolicited_commands>
            if (unsolicited_command[0] != '\n' && unsolicited_command[0] != '\r' && unsolicited_command[0] == '+') {
    1f14:	89 81       	ldd	r24, Y+1	; 0x01
    1f16:	8a 30       	cpi	r24, 0x0A	; 10
    1f18:	a9 f0       	breq	.+42     	; 0x1f44 <main+0x146>
    1f1a:	8b 32       	cpi	r24, 0x2B	; 43
    1f1c:	99 f4       	brne	.+38     	; 0x1f44 <main+0x146>
                DEBUG_puts(unsolicited_command);
    1f1e:	ce 01       	movw	r24, r28
    1f20:	01 96       	adiw	r24, 0x01	; 1
    1f22:	0e 94 06 03 	call	0x60c	; 0x60c <DEBUG_puts>
                _DEBUG_putc('\n');
    1f26:	8a e0       	ldi	r24, 0x0A	; 10
    1f28:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <_uartc1_putc>
                _DEBUG_putc('\r');
    1f2c:	8d e0       	ldi	r24, 0x0D	; 13
    1f2e:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <_uartc1_putc>
    1f32:	d7 01       	movw	r26, r14
    1f34:	c6 01       	movw	r24, r12
    1f36:	01 97       	sbiw	r24, 0x01	; 1
    1f38:	a1 09       	sbc	r26, r1
    1f3a:	b1 09       	sbc	r27, r1
    1f3c:	e1 f7       	brne	.-8      	; 0x1f36 <main+0x138>
                delay_s(1.5);
                decode(unsolicited_command_ptr); //testing
    1f3e:	ce 01       	movw	r24, r28
    1f40:	01 96       	adiw	r24, 0x01	; 1
    1f42:	37 df       	rcall	.-402    	; 0x1db2 <decode>
            }
            clear_temp_string(sizeof(unsolicited_command_ptr), unsolicited_command_ptr);
    1f44:	be 01       	movw	r22, r28
    1f46:	6f 5f       	subi	r22, 0xFF	; 255
    1f48:	7f 4f       	sbci	r23, 0xFF	; 255
    1f4a:	82 e0       	ldi	r24, 0x02	; 2
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	03 df       	rcall	.-506    	; 0x1d56 <clear_temp_string>
    1f50:	b7 cf       	rjmp	.-146    	; 0x1ec0 <main+0xc2>

00001f52 <__udivmodsi4>:
    1f52:	a1 e2       	ldi	r26, 0x21	; 33
    1f54:	1a 2e       	mov	r1, r26
    1f56:	aa 1b       	sub	r26, r26
    1f58:	bb 1b       	sub	r27, r27
    1f5a:	fd 01       	movw	r30, r26
    1f5c:	0d c0       	rjmp	.+26     	; 0x1f78 <__udivmodsi4_ep>

00001f5e <__udivmodsi4_loop>:
    1f5e:	aa 1f       	adc	r26, r26
    1f60:	bb 1f       	adc	r27, r27
    1f62:	ee 1f       	adc	r30, r30
    1f64:	ff 1f       	adc	r31, r31
    1f66:	a2 17       	cp	r26, r18
    1f68:	b3 07       	cpc	r27, r19
    1f6a:	e4 07       	cpc	r30, r20
    1f6c:	f5 07       	cpc	r31, r21
    1f6e:	20 f0       	brcs	.+8      	; 0x1f78 <__udivmodsi4_ep>
    1f70:	a2 1b       	sub	r26, r18
    1f72:	b3 0b       	sbc	r27, r19
    1f74:	e4 0b       	sbc	r30, r20
    1f76:	f5 0b       	sbc	r31, r21

00001f78 <__udivmodsi4_ep>:
    1f78:	66 1f       	adc	r22, r22
    1f7a:	77 1f       	adc	r23, r23
    1f7c:	88 1f       	adc	r24, r24
    1f7e:	99 1f       	adc	r25, r25
    1f80:	1a 94       	dec	r1
    1f82:	69 f7       	brne	.-38     	; 0x1f5e <__udivmodsi4_loop>
    1f84:	60 95       	com	r22
    1f86:	70 95       	com	r23
    1f88:	80 95       	com	r24
    1f8a:	90 95       	com	r25
    1f8c:	9b 01       	movw	r18, r22
    1f8e:	ac 01       	movw	r20, r24
    1f90:	bd 01       	movw	r22, r26
    1f92:	cf 01       	movw	r24, r30
    1f94:	08 95       	ret

00001f96 <strtok>:
    1f96:	4c e7       	ldi	r20, 0x7C	; 124
    1f98:	50 e2       	ldi	r21, 0x20	; 32
    1f9a:	0b c0       	rjmp	.+22     	; 0x1fb2 <strtok_r>

00001f9c <strcat>:
    1f9c:	fb 01       	movw	r30, r22
    1f9e:	dc 01       	movw	r26, r24
    1fa0:	0d 90       	ld	r0, X+
    1fa2:	00 20       	and	r0, r0
    1fa4:	e9 f7       	brne	.-6      	; 0x1fa0 <strcat+0x4>
    1fa6:	11 97       	sbiw	r26, 0x01	; 1
    1fa8:	01 90       	ld	r0, Z+
    1faa:	0d 92       	st	X+, r0
    1fac:	00 20       	and	r0, r0
    1fae:	e1 f7       	brne	.-8      	; 0x1fa8 <strcat+0xc>
    1fb0:	08 95       	ret

00001fb2 <strtok_r>:
    1fb2:	fa 01       	movw	r30, r20
    1fb4:	a1 91       	ld	r26, Z+
    1fb6:	b0 81       	ld	r27, Z
    1fb8:	00 97       	sbiw	r24, 0x00	; 0
    1fba:	19 f4       	brne	.+6      	; 0x1fc2 <strtok_r+0x10>
    1fbc:	10 97       	sbiw	r26, 0x00	; 0
    1fbe:	e1 f0       	breq	.+56     	; 0x1ff8 <strtok_r+0x46>
    1fc0:	cd 01       	movw	r24, r26
    1fc2:	dc 01       	movw	r26, r24
    1fc4:	cd 01       	movw	r24, r26
    1fc6:	0d 90       	ld	r0, X+
    1fc8:	00 20       	and	r0, r0
    1fca:	11 f4       	brne	.+4      	; 0x1fd0 <strtok_r+0x1e>
    1fcc:	c0 01       	movw	r24, r0
    1fce:	13 c0       	rjmp	.+38     	; 0x1ff6 <strtok_r+0x44>
    1fd0:	fb 01       	movw	r30, r22
    1fd2:	21 91       	ld	r18, Z+
    1fd4:	22 23       	and	r18, r18
    1fd6:	19 f0       	breq	.+6      	; 0x1fde <strtok_r+0x2c>
    1fd8:	20 15       	cp	r18, r0
    1fda:	d9 f7       	brne	.-10     	; 0x1fd2 <strtok_r+0x20>
    1fdc:	f3 cf       	rjmp	.-26     	; 0x1fc4 <strtok_r+0x12>
    1fde:	fb 01       	movw	r30, r22
    1fe0:	21 91       	ld	r18, Z+
    1fe2:	20 15       	cp	r18, r0
    1fe4:	19 f4       	brne	.+6      	; 0x1fec <strtok_r+0x3a>
    1fe6:	1e 92       	st	-X, r1
    1fe8:	11 96       	adiw	r26, 0x01	; 1
    1fea:	06 c0       	rjmp	.+12     	; 0x1ff8 <strtok_r+0x46>
    1fec:	22 23       	and	r18, r18
    1fee:	c1 f7       	brne	.-16     	; 0x1fe0 <strtok_r+0x2e>
    1ff0:	0d 90       	ld	r0, X+
    1ff2:	00 20       	and	r0, r0
    1ff4:	a1 f7       	brne	.-24     	; 0x1fde <strtok_r+0x2c>
    1ff6:	d0 01       	movw	r26, r0
    1ff8:	fa 01       	movw	r30, r20
    1ffa:	a1 93       	st	Z+, r26
    1ffc:	b0 83       	st	Z, r27
    1ffe:	08 95       	ret

00002000 <_exit>:
    2000:	f8 94       	cli

00002002 <__stop_program>:
    2002:	ff cf       	rjmp	.-2      	; 0x2002 <__stop_program>
