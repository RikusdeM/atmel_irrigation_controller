
IESM-XMEGA32A4U--IrrigationController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000222c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ec  00802000  0000222c  000022c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000020a  008020ec  008020ec  000023ac  2**0
                  ALLOC
  3 .stab         000010c8  00000000  00000000  000023ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000007a3  00000000  00000000  00003474  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00003c17  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000008a0  00000000  00000000  00003c48  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00011ca2  00000000  00000000  000044e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000039b0  00000000  00000000  0001618a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000fb85  00000000  00000000  00019b3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00002000  00000000  00000000  000296c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00028cc1  00000000  00000000  0002b6c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00008979  00000000  00000000  00054381  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000009b8  00000000  00000000  0005cd00  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0000c8e3  00000000  00000000  0005d6b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
       2:	00 00       	nop
       4:	18 c1       	rjmp	.+560    	; 0x236 <__bad_interrupt>
       6:	00 00       	nop
       8:	0c 94 68 0e 	jmp	0x1cd0	; 0x1cd0 <__vector_2>
       c:	14 c1       	rjmp	.+552    	; 0x236 <__bad_interrupt>
       e:	00 00       	nop
      10:	12 c1       	rjmp	.+548    	; 0x236 <__bad_interrupt>
      12:	00 00       	nop
      14:	10 c1       	rjmp	.+544    	; 0x236 <__bad_interrupt>
      16:	00 00       	nop
      18:	0e c1       	rjmp	.+540    	; 0x236 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	0c c1       	rjmp	.+536    	; 0x236 <__bad_interrupt>
      1e:	00 00       	nop
      20:	0a c1       	rjmp	.+532    	; 0x236 <__bad_interrupt>
      22:	00 00       	nop
      24:	08 c1       	rjmp	.+528    	; 0x236 <__bad_interrupt>
      26:	00 00       	nop
      28:	6a c5       	rjmp	.+2772   	; 0xafe <__vector_10>
      2a:	00 00       	nop
      2c:	81 c5       	rjmp	.+2818   	; 0xb30 <__vector_11>
      2e:	00 00       	nop
      30:	02 c1       	rjmp	.+516    	; 0x236 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 de 0a 	jmp	0x15bc	; 0x15bc <__vector_13>
      38:	f2 c5       	rjmp	.+3044   	; 0xc1e <__vector_14>
      3a:	00 00       	nop
      3c:	19 c6       	rjmp	.+3122   	; 0xc70 <__vector_15>
      3e:	00 00       	nop
      40:	40 c6       	rjmp	.+3200   	; 0xcc2 <__vector_16>
      42:	00 00       	nop
      44:	67 c6       	rjmp	.+3278   	; 0xd14 <__vector_17>
      46:	00 00       	nop
      48:	8e c6       	rjmp	.+3356   	; 0xd66 <__vector_18>
      4a:	00 00       	nop
      4c:	b5 c6       	rjmp	.+3434   	; 0xdb8 <__vector_19>
      4e:	00 00       	nop
      50:	dc c6       	rjmp	.+3512   	; 0xe0a <__vector_20>
      52:	00 00       	nop
      54:	03 c7       	rjmp	.+3590   	; 0xe5c <__vector_21>
      56:	00 00       	nop
      58:	2a c7       	rjmp	.+3668   	; 0xeae <__vector_22>
      5a:	00 00       	nop
      5c:	51 c7       	rjmp	.+3746   	; 0xf00 <__vector_23>
      5e:	00 00       	nop
      60:	ea c0       	rjmp	.+468    	; 0x236 <__bad_interrupt>
      62:	00 00       	nop
      64:	e8 c0       	rjmp	.+464    	; 0x236 <__bad_interrupt>
      66:	00 00       	nop
      68:	e6 c0       	rjmp	.+460    	; 0x236 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	e4 c0       	rjmp	.+456    	; 0x236 <__bad_interrupt>
      6e:	00 00       	nop
      70:	02 c1       	rjmp	.+516    	; 0x276 <__vector_28>
      72:	00 00       	nop
      74:	34 c1       	rjmp	.+616    	; 0x2de <__vector_29>
      76:	00 00       	nop
      78:	28 c1       	rjmp	.+592    	; 0x2ca <__vector_30>
      7a:	00 00       	nop
      7c:	dc c0       	rjmp	.+440    	; 0x236 <__bad_interrupt>
      7e:	00 00       	nop
      80:	da c0       	rjmp	.+436    	; 0x236 <__bad_interrupt>
      82:	00 00       	nop
      84:	d8 c0       	rjmp	.+432    	; 0x236 <__bad_interrupt>
      86:	00 00       	nop
      88:	0c 94 7c 0e 	jmp	0x1cf8	; 0x1cf8 <__vector_34>
      8c:	d4 c0       	rjmp	.+424    	; 0x236 <__bad_interrupt>
      8e:	00 00       	nop
      90:	d2 c0       	rjmp	.+420    	; 0x236 <__bad_interrupt>
      92:	00 00       	nop
      94:	d0 c0       	rjmp	.+416    	; 0x236 <__bad_interrupt>
      96:	00 00       	nop
      98:	ce c0       	rjmp	.+412    	; 0x236 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	cc c0       	rjmp	.+408    	; 0x236 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	ca c0       	rjmp	.+404    	; 0x236 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	c8 c0       	rjmp	.+400    	; 0x236 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	c6 c0       	rjmp	.+396    	; 0x236 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	c4 c0       	rjmp	.+392    	; 0x236 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	c2 c0       	rjmp	.+388    	; 0x236 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c0 c0       	rjmp	.+384    	; 0x236 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0c 94 01 0b 	jmp	0x1602	; 0x1602 <__vector_46>
      bc:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__vector_47>
      c0:	0c 94 6c 09 	jmp	0x12d8	; 0x12d8 <__vector_48>
      c4:	0c 94 95 09 	jmp	0x132a	; 0x132a <__vector_49>
      c8:	0c 94 be 09 	jmp	0x137c	; 0x137c <__vector_50>
      cc:	0c 94 e7 09 	jmp	0x13ce	; 0x13ce <__vector_51>
      d0:	0c 94 10 0a 	jmp	0x1420	; 0x1420 <__vector_52>
      d4:	b0 c0       	rjmp	.+352    	; 0x236 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	ae c0       	rjmp	.+348    	; 0x236 <__bad_interrupt>
      da:	00 00       	nop
      dc:	ac c0       	rjmp	.+344    	; 0x236 <__bad_interrupt>
      de:	00 00       	nop
      e0:	aa c0       	rjmp	.+340    	; 0x236 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	a8 c0       	rjmp	.+336    	; 0x236 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	9c c1       	rjmp	.+824    	; 0x422 <__vector_58>
      ea:	00 00       	nop
      ec:	ce c1       	rjmp	.+924    	; 0x48a <__vector_59>
      ee:	00 00       	nop
      f0:	c2 c1       	rjmp	.+900    	; 0x476 <__vector_60>
      f2:	00 00       	nop
      f4:	a0 c0       	rjmp	.+320    	; 0x236 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	9e c0       	rjmp	.+316    	; 0x236 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	9c c0       	rjmp	.+312    	; 0x236 <__bad_interrupt>
      fe:	00 00       	nop
     100:	0c 94 54 0e 	jmp	0x1ca8	; 0x1ca8 <__vector_64>
     104:	98 c0       	rjmp	.+304    	; 0x236 <__bad_interrupt>
     106:	00 00       	nop
     108:	0c 94 90 0e 	jmp	0x1d20	; 0x1d20 <__vector_66>
     10c:	94 c0       	rjmp	.+296    	; 0x236 <__bad_interrupt>
     10e:	00 00       	nop
     110:	92 c0       	rjmp	.+292    	; 0x236 <__bad_interrupt>
     112:	00 00       	nop
     114:	90 c0       	rjmp	.+288    	; 0x236 <__bad_interrupt>
     116:	00 00       	nop
     118:	8e c0       	rjmp	.+284    	; 0x236 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	8c c0       	rjmp	.+280    	; 0x236 <__bad_interrupt>
     11e:	00 00       	nop
     120:	8a c0       	rjmp	.+276    	; 0x236 <__bad_interrupt>
     122:	00 00       	nop
     124:	88 c0       	rjmp	.+272    	; 0x236 <__bad_interrupt>
     126:	00 00       	nop
     128:	86 c0       	rjmp	.+268    	; 0x236 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	84 c0       	rjmp	.+264    	; 0x236 <__bad_interrupt>
     12e:	00 00       	nop
     130:	82 c0       	rjmp	.+260    	; 0x236 <__bad_interrupt>
     132:	00 00       	nop
     134:	0e c7       	rjmp	.+3612   	; 0xf52 <__vector_77>
     136:	00 00       	nop
     138:	35 c7       	rjmp	.+3690   	; 0xfa4 <__vector_78>
     13a:	00 00       	nop
     13c:	5c c7       	rjmp	.+3768   	; 0xff6 <__vector_79>
     13e:	00 00       	nop
     140:	83 c7       	rjmp	.+3846   	; 0x1048 <__vector_80>
     142:	00 00       	nop
     144:	aa c7       	rjmp	.+3924   	; 0x109a <__vector_81>
     146:	00 00       	nop
     148:	d1 c7       	rjmp	.+4002   	; 0x10ec <__vector_82>
     14a:	00 00       	nop
     14c:	f8 c7       	rjmp	.+4080   	; 0x113e <__vector_83>
     14e:	00 00       	nop
     150:	0c 94 c8 08 	jmp	0x1190	; 0x1190 <__vector_84>
     154:	0c 94 f1 08 	jmp	0x11e2	; 0x11e2 <__vector_85>
     158:	0c 94 1a 09 	jmp	0x1234	; 0x1234 <__vector_86>
     15c:	6c c0       	rjmp	.+216    	; 0x236 <__bad_interrupt>
     15e:	00 00       	nop
     160:	6a c0       	rjmp	.+212    	; 0x236 <__bad_interrupt>
     162:	00 00       	nop
     164:	68 c0       	rjmp	.+208    	; 0x236 <__bad_interrupt>
     166:	00 00       	nop
     168:	66 c0       	rjmp	.+204    	; 0x236 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	64 c0       	rjmp	.+200    	; 0x236 <__bad_interrupt>
     16e:	00 00       	nop
     170:	62 c0       	rjmp	.+196    	; 0x236 <__bad_interrupt>
     172:	00 00       	nop
     174:	60 c0       	rjmp	.+192    	; 0x236 <__bad_interrupt>
     176:	00 00       	nop
     178:	5e c0       	rjmp	.+188    	; 0x236 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	5c c0       	rjmp	.+184    	; 0x236 <__bad_interrupt>
     17e:	00 00       	nop
     180:	5a c0       	rjmp	.+180    	; 0x236 <__bad_interrupt>
     182:	00 00       	nop
     184:	58 c0       	rjmp	.+176    	; 0x236 <__bad_interrupt>
     186:	00 00       	nop
     188:	56 c0       	rjmp	.+172    	; 0x236 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	54 c0       	rjmp	.+168    	; 0x236 <__bad_interrupt>
     18e:	00 00       	nop
     190:	52 c0       	rjmp	.+164    	; 0x236 <__bad_interrupt>
     192:	00 00       	nop
     194:	50 c0       	rjmp	.+160    	; 0x236 <__bad_interrupt>
     196:	00 00       	nop
     198:	4e c0       	rjmp	.+156    	; 0x236 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	4c c0       	rjmp	.+152    	; 0x236 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	4a c0       	rjmp	.+148    	; 0x236 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	48 c0       	rjmp	.+144    	; 0x236 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	46 c0       	rjmp	.+140    	; 0x236 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	44 c0       	rjmp	.+136    	; 0x236 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	42 c0       	rjmp	.+132    	; 0x236 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	40 c0       	rjmp	.+128    	; 0x236 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	3e c0       	rjmp	.+124    	; 0x236 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	3c c0       	rjmp	.+120    	; 0x236 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	3a c0       	rjmp	.+116    	; 0x236 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	38 c0       	rjmp	.+112    	; 0x236 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	36 c0       	rjmp	.+108    	; 0x236 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	34 c0       	rjmp	.+104    	; 0x236 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	32 c0       	rjmp	.+100    	; 0x236 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	30 c0       	rjmp	.+96     	; 0x236 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	2e c0       	rjmp	.+92     	; 0x236 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	2c c0       	rjmp	.+88     	; 0x236 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	2a c0       	rjmp	.+84     	; 0x236 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	28 c0       	rjmp	.+80     	; 0x236 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	26 c0       	rjmp	.+76     	; 0x236 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	24 c0       	rjmp	.+72     	; 0x236 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	22 c0       	rjmp	.+68     	; 0x236 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	20 c0       	rjmp	.+64     	; 0x236 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	1e c0       	rjmp	.+60     	; 0x236 <__bad_interrupt>
	...

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	df e2       	ldi	r29, 0x2F	; 47
     204:	de bf       	out	0x3e, r29	; 62
     206:	cd bf       	out	0x3d, r28	; 61

00000208 <__do_copy_data>:
     208:	10 e2       	ldi	r17, 0x20	; 32
     20a:	a0 e0       	ldi	r26, 0x00	; 0
     20c:	b0 e2       	ldi	r27, 0x20	; 32
     20e:	ec e2       	ldi	r30, 0x2C	; 44
     210:	f2 e2       	ldi	r31, 0x22	; 34
     212:	02 c0       	rjmp	.+4      	; 0x218 <__do_copy_data+0x10>
     214:	05 90       	lpm	r0, Z+
     216:	0d 92       	st	X+, r0
     218:	ac 3e       	cpi	r26, 0xEC	; 236
     21a:	b1 07       	cpc	r27, r17
     21c:	d9 f7       	brne	.-10     	; 0x214 <__do_copy_data+0xc>

0000021e <__do_clear_bss>:
     21e:	22 e2       	ldi	r18, 0x22	; 34
     220:	ac ee       	ldi	r26, 0xEC	; 236
     222:	b0 e2       	ldi	r27, 0x20	; 32
     224:	01 c0       	rjmp	.+2      	; 0x228 <.do_clear_bss_start>

00000226 <.do_clear_bss_loop>:
     226:	1d 92       	st	X+, r1

00000228 <.do_clear_bss_start>:
     228:	a6 3f       	cpi	r26, 0xF6	; 246
     22a:	b2 07       	cpc	r27, r18
     22c:	e1 f7       	brne	.-8      	; 0x226 <.do_clear_bss_loop>
     22e:	0e 94 01 10 	call	0x2002	; 0x2002 <main>
     232:	0c 94 14 11 	jmp	0x2228	; 0x2228 <_exit>

00000236 <__bad_interrupt>:
     236:	e4 ce       	rjmp	.-568    	; 0x0 <__vectors>

00000238 <crc8_update>:
    for (uint16_t counter = 0; counter < len; counter++)
    {
        seed = crc_ccitt16_update(seed, *buf++);
    }
    return seed;
}
     238:	86 27       	eor	r24, r22
     23a:	98 e0       	ldi	r25, 0x08	; 8
     23c:	2c e8       	ldi	r18, 0x8C	; 140
     23e:	80 ff       	sbrs	r24, 0
     240:	03 c0       	rjmp	.+6      	; 0x248 <crc8_update+0x10>
     242:	86 95       	lsr	r24
     244:	82 27       	eor	r24, r18
     246:	01 c0       	rjmp	.+2      	; 0x24a <crc8_update+0x12>
     248:	86 95       	lsr	r24
     24a:	91 50       	subi	r25, 0x01	; 1
     24c:	c1 f7       	brne	.-16     	; 0x23e <crc8_update+0x6>
     24e:	08 95       	ret

00000250 <crc8_compute>:

uint8_t crc8_compute(uint8_t* buffer, uint8_t buffer_length)
{
     250:	1f 93       	push	r17
     252:	cf 93       	push	r28
     254:	df 93       	push	r29
     256:	ec 01       	movw	r28, r24
    uint8_t crc8 = 0;
    while (buffer_length--)
     258:	16 2f       	mov	r17, r22
     25a:	11 50       	subi	r17, 0x01	; 1
     25c:	66 23       	and	r22, r22
     25e:	31 f0       	breq	.+12     	; 0x26c <crc8_compute+0x1c>
    return seed;
}

uint8_t crc8_compute(uint8_t* buffer, uint8_t buffer_length)
{
    uint8_t crc8 = 0;
     260:	80 e0       	ldi	r24, 0x00	; 0
    while (buffer_length--)
    {
        crc8 = crc8_update(crc8, *buffer++);
     262:	69 91       	ld	r22, Y+
     264:	e9 df       	rcall	.-46     	; 0x238 <crc8_update>
}

uint8_t crc8_compute(uint8_t* buffer, uint8_t buffer_length)
{
    uint8_t crc8 = 0;
    while (buffer_length--)
     266:	11 50       	subi	r17, 0x01	; 1
     268:	e0 f7       	brcc	.-8      	; 0x262 <crc8_compute+0x12>
     26a:	01 c0       	rjmp	.+2      	; 0x26e <crc8_compute+0x1e>
    return seed;
}

uint8_t crc8_compute(uint8_t* buffer, uint8_t buffer_length)
{
    uint8_t crc8 = 0;
     26c:	80 e0       	ldi	r24, 0x00	; 0
    while (buffer_length--)
    {
        crc8 = crc8_update(crc8, *buffer++);
    }
    return crc8;
}
     26e:	df 91       	pop	r29
     270:	cf 91       	pop	r28
     272:	1f 91       	pop	r17
     274:	08 95       	ret

00000276 <__vector_28>:
}

bool _uartc1_byte_available(void)
{
    return buffer.rx_front != buffer.rx_back;
}
     276:	1f 92       	push	r1
     278:	0f 92       	push	r0
     27a:	0f b6       	in	r0, 0x3f	; 63
     27c:	0f 92       	push	r0
     27e:	11 24       	eor	r1, r1
     280:	2f 93       	push	r18
     282:	8f 93       	push	r24
     284:	9f 93       	push	r25
     286:	af 93       	push	r26
     288:	bf 93       	push	r27
     28a:	ef 93       	push	r30
     28c:	ff 93       	push	r31
     28e:	20 91 b0 08 	lds	r18, 0x08B0
     292:	80 91 7e 21 	lds	r24, 0x217E
     296:	8f 5f       	subi	r24, 0xFF	; 255
     298:	8f 70       	andi	r24, 0x0F	; 15
     29a:	90 91 7f 21 	lds	r25, 0x217F
     29e:	98 17       	cp	r25, r24
     2a0:	41 f0       	breq	.+16     	; 0x2b2 <__vector_28+0x3c>
     2a2:	ee e7       	ldi	r30, 0x7E	; 126
     2a4:	f1 e2       	ldi	r31, 0x21	; 33
     2a6:	a0 81       	ld	r26, Z
     2a8:	b0 e0       	ldi	r27, 0x00	; 0
     2aa:	a2 51       	subi	r26, 0x12	; 18
     2ac:	bf 4d       	sbci	r27, 0xDF	; 223
     2ae:	2c 93       	st	X, r18
     2b0:	80 83       	st	Z, r24
     2b2:	ff 91       	pop	r31
     2b4:	ef 91       	pop	r30
     2b6:	bf 91       	pop	r27
     2b8:	af 91       	pop	r26
     2ba:	9f 91       	pop	r25
     2bc:	8f 91       	pop	r24
     2be:	2f 91       	pop	r18
     2c0:	0f 90       	pop	r0
     2c2:	0f be       	out	0x3f, r0	; 63
     2c4:	0f 90       	pop	r0
     2c6:	1f 90       	pop	r1
     2c8:	18 95       	reti

000002ca <__vector_30>:
     2ca:	1f 92       	push	r1
     2cc:	0f 92       	push	r0
     2ce:	0f b6       	in	r0, 0x3f	; 63
     2d0:	0f 92       	push	r0
     2d2:	11 24       	eor	r1, r1
     2d4:	0f 90       	pop	r0
     2d6:	0f be       	out	0x3f, r0	; 63
     2d8:	0f 90       	pop	r0
     2da:	1f 90       	pop	r1
     2dc:	18 95       	reti

000002de <__vector_29>:
     2de:	1f 92       	push	r1
     2e0:	0f 92       	push	r0
     2e2:	0f b6       	in	r0, 0x3f	; 63
     2e4:	0f 92       	push	r0
     2e6:	11 24       	eor	r1, r1
     2e8:	8f 93       	push	r24
     2ea:	9f 93       	push	r25
     2ec:	af 93       	push	r26
     2ee:	bf 93       	push	r27
     2f0:	ef 93       	push	r30
     2f2:	ff 93       	push	r31
     2f4:	90 91 80 21 	lds	r25, 0x2180
     2f8:	80 91 81 21 	lds	r24, 0x2181
     2fc:	98 13       	cpse	r25, r24
     2fe:	06 c0       	rjmp	.+12     	; 0x30c <__vector_29+0x2e>
     300:	e0 eb       	ldi	r30, 0xB0	; 176
     302:	f8 e0       	ldi	r31, 0x08	; 8
     304:	83 81       	ldd	r24, Z+3	; 0x03
     306:	8c 7f       	andi	r24, 0xFC	; 252
     308:	83 83       	std	Z+3, r24	; 0x03
     30a:	0e c0       	rjmp	.+28     	; 0x328 <__vector_29+0x4a>
     30c:	e1 e8       	ldi	r30, 0x81	; 129
     30e:	f1 e2       	ldi	r31, 0x21	; 33
     310:	a0 81       	ld	r26, Z
     312:	b0 e0       	ldi	r27, 0x00	; 0
     314:	a2 51       	subi	r26, 0x12	; 18
     316:	bf 4d       	sbci	r27, 0xDF	; 223
     318:	50 96       	adiw	r26, 0x10	; 16
     31a:	8c 91       	ld	r24, X
     31c:	80 93 b0 08 	sts	0x08B0, r24
     320:	80 81       	ld	r24, Z
     322:	8f 5f       	subi	r24, 0xFF	; 255
     324:	8f 77       	andi	r24, 0x7F	; 127
     326:	80 83       	st	Z, r24
     328:	ff 91       	pop	r31
     32a:	ef 91       	pop	r30
     32c:	bf 91       	pop	r27
     32e:	af 91       	pop	r26
     330:	9f 91       	pop	r25
     332:	8f 91       	pop	r24
     334:	0f 90       	pop	r0
     336:	0f be       	out	0x3f, r0	; 63
     338:	0f 90       	pop	r0
     33a:	1f 90       	pop	r1
     33c:	18 95       	reti

0000033e <_uartc1_enable_interrupt>:
     33e:	e0 eb       	ldi	r30, 0xB0	; 176
     340:	f8 e0       	ldi	r31, 0x08	; 8
     342:	93 81       	ldd	r25, Z+3	; 0x03
     344:	82 95       	swap	r24
     346:	80 7f       	andi	r24, 0xF0	; 240
     348:	9f 7c       	andi	r25, 0xCF	; 207
     34a:	98 2b       	or	r25, r24
     34c:	93 83       	std	Z+3, r25	; 0x03
     34e:	08 95       	ret

00000350 <_uartc1_init>:
     350:	cf 93       	push	r28
     352:	df 93       	push	r29
     354:	cd b7       	in	r28, 0x3d	; 61
     356:	de b7       	in	r29, 0x3e	; 62
     358:	29 97       	sbiw	r28, 0x09	; 9
     35a:	cd bf       	out	0x3d, r28	; 61
     35c:	de bf       	out	0x3e, r29	; 62
     35e:	89 e0       	ldi	r24, 0x09	; 9
     360:	e0 e0       	ldi	r30, 0x00	; 0
     362:	f0 e2       	ldi	r31, 0x20	; 32
     364:	de 01       	movw	r26, r28
     366:	11 96       	adiw	r26, 0x01	; 1
     368:	01 90       	ld	r0, Z+
     36a:	0d 92       	st	X+, r0
     36c:	8a 95       	dec	r24
     36e:	e1 f7       	brne	.-8      	; 0x368 <_uartc1_init+0x18>
     370:	10 92 7f 21 	sts	0x217F, r1
     374:	10 92 7e 21 	sts	0x217E, r1
     378:	10 92 81 21 	sts	0x2181, r1
     37c:	10 92 80 21 	sts	0x2180, r1
     380:	be 01       	movw	r22, r28
     382:	6f 5f       	subi	r22, 0xFF	; 255
     384:	7f 4f       	sbci	r23, 0xFF	; 255
     386:	80 eb       	ldi	r24, 0xB0	; 176
     388:	98 e0       	ldi	r25, 0x08	; 8
     38a:	0e 94 32 0c 	call	0x1864	; 0x1864 <usart_init_rs232>
     38e:	e0 eb       	ldi	r30, 0xB0	; 176
     390:	f8 e0       	ldi	r31, 0x08	; 8
     392:	83 81       	ldd	r24, Z+3	; 0x03
     394:	8f 7c       	andi	r24, 0xCF	; 207
     396:	83 83       	std	Z+3, r24	; 0x03
     398:	83 81       	ldd	r24, Z+3	; 0x03
     39a:	83 7f       	andi	r24, 0xF3	; 243
     39c:	83 83       	std	Z+3, r24	; 0x03
     39e:	83 81       	ldd	r24, Z+3	; 0x03
     3a0:	8c 7f       	andi	r24, 0xFC	; 252
     3a2:	81 60       	ori	r24, 0x01	; 1
     3a4:	83 83       	std	Z+3, r24	; 0x03
     3a6:	29 96       	adiw	r28, 0x09	; 9
     3a8:	cd bf       	out	0x3d, r28	; 61
     3aa:	de bf       	out	0x3e, r29	; 62
     3ac:	df 91       	pop	r29
     3ae:	cf 91       	pop	r28
     3b0:	08 95       	ret

000003b2 <_uartc1_putc>:

void reset_avr(void);

void _uartc1_putc(char ch)
{
     3b2:	ff 92       	push	r15
     3b4:	0f 93       	push	r16
     3b6:	1f 93       	push	r17
     3b8:	cf 93       	push	r28
     3ba:	df 93       	push	r29
     3bc:	f8 2e       	mov	r15, r24
    timeout_start_singleshot(TIMEOUT_UART, TIMEOUT_TICK_HZ);
     3be:	68 e0       	ldi	r22, 0x08	; 8
     3c0:	70 e0       	ldi	r23, 0x00	; 0
     3c2:	81 e0       	ldi	r24, 0x01	; 1
     3c4:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <timeout_start_singleshot>
}

static bool putb(uint8_t byte)
{
    uint8_t tx_back;
    tx_back = (buffer.tx_back + 1) & TX_BUFFER_MASK;
     3c8:	00 e8       	ldi	r16, 0x80	; 128
     3ca:	11 e2       	ldi	r17, 0x21	; 33
    if (tx_back != buffer.tx_front) {
     3cc:	c1 e8       	ldi	r28, 0x81	; 129
     3ce:	d1 e2       	ldi	r29, 0x21	; 33
void reset_avr(void);

void _uartc1_putc(char ch)
{
    timeout_start_singleshot(TIMEOUT_UART, TIMEOUT_TICK_HZ);
    while (!putb(ch)) {
     3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <_uartc1_putc+0x24>
        if (timeout_test_and_clear_expired(TIMEOUT_UART)) {
            reset_avr();
     3d2:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <reset_avr>
}

static bool putb(uint8_t byte)
{
    uint8_t tx_back;
    tx_back = (buffer.tx_back + 1) & TX_BUFFER_MASK;
     3d6:	f8 01       	movw	r30, r16
     3d8:	90 81       	ld	r25, Z
     3da:	9f 5f       	subi	r25, 0xFF	; 255
     3dc:	9f 77       	andi	r25, 0x7F	; 127
    if (tx_back != buffer.tx_front) {
     3de:	28 81       	ld	r18, Y
     3e0:	92 17       	cp	r25, r18
     3e2:	99 f0       	breq	.+38     	; 0x40a <_uartc1_putc+0x58>
        buffer.TX[buffer.tx_back] = byte;
     3e4:	e0 e8       	ldi	r30, 0x80	; 128
     3e6:	f1 e2       	ldi	r31, 0x21	; 33
     3e8:	a0 81       	ld	r26, Z
     3ea:	b0 e0       	ldi	r27, 0x00	; 0
     3ec:	a2 51       	subi	r26, 0x12	; 18
     3ee:	bf 4d       	sbci	r27, 0xDF	; 223
     3f0:	50 96       	adiw	r26, 0x10	; 16
     3f2:	fc 92       	st	X, r15
        buffer.tx_back = tx_back;
     3f4:	90 83       	st	Z, r25
 *              Use USART_DREINTLVL_t type.
 */
static inline void usart_set_dre_interrupt_level(USART_t *usart,
		enum usart_int_level_t level)
{
	(usart)->CTRLA = ((usart)->CTRLA & ~USART_DREINTLVL_gm) |
     3f6:	e0 eb       	ldi	r30, 0xB0	; 176
     3f8:	f8 e0       	ldi	r31, 0x08	; 8
     3fa:	83 81       	ldd	r24, Z+3	; 0x03
     3fc:	8c 7f       	andi	r24, 0xFC	; 252
     3fe:	81 60       	ori	r24, 0x01	; 1
     400:	83 83       	std	Z+3, r24	; 0x03
    while (!putb(ch)) {
        if (timeout_test_and_clear_expired(TIMEOUT_UART)) {
            reset_avr();
        }
    }
    timeout_stop(TIMEOUT_UART);
     402:	81 e0       	ldi	r24, 0x01	; 1
     404:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <timeout_stop>
     408:	06 c0       	rjmp	.+12     	; 0x416 <_uartc1_putc+0x64>

void _uartc1_putc(char ch)
{
    timeout_start_singleshot(TIMEOUT_UART, TIMEOUT_TICK_HZ);
    while (!putb(ch)) {
        if (timeout_test_and_clear_expired(TIMEOUT_UART)) {
     40a:	81 e0       	ldi	r24, 0x01	; 1
     40c:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <timeout_test_and_clear_expired>
     410:	88 23       	and	r24, r24
     412:	09 f3       	breq	.-62     	; 0x3d6 <_uartc1_putc+0x24>
     414:	de cf       	rjmp	.-68     	; 0x3d2 <_uartc1_putc+0x20>
            reset_avr();
        }
    }
    timeout_stop(TIMEOUT_UART);
}
     416:	df 91       	pop	r29
     418:	cf 91       	pop	r28
     41a:	1f 91       	pop	r17
     41c:	0f 91       	pop	r16
     41e:	ff 90       	pop	r15
     420:	08 95       	ret

00000422 <__vector_58>:
    volatile uint8_t tx_back;
    volatile uint8_t tx_front;
} buffer;

ISR(USARTE0_RXC_vect)
{
     422:	1f 92       	push	r1
     424:	0f 92       	push	r0
     426:	0f b6       	in	r0, 0x3f	; 63
     428:	0f 92       	push	r0
     42a:	11 24       	eor	r1, r1
     42c:	2f 93       	push	r18
     42e:	8f 93       	push	r24
     430:	9f 93       	push	r25
     432:	af 93       	push	r26
     434:	bf 93       	push	r27
     436:	ef 93       	push	r30
     438:	ff 93       	push	r31
    uint8_t data = USARTE0.DATA;
     43a:	20 91 a0 0a 	lds	r18, 0x0AA0
    uint8_t back = (buffer.rx_back + 1) & RX_BUFFER_MASK;
     43e:	80 91 82 22 	lds	r24, 0x2282
     442:	8f 5f       	subi	r24, 0xFF	; 255
     444:	8f 77       	andi	r24, 0x7F	; 127
    if (back != buffer.rx_front) {
     446:	90 91 83 22 	lds	r25, 0x2283
     44a:	98 17       	cp	r25, r24
     44c:	41 f0       	breq	.+16     	; 0x45e <__vector_58+0x3c>
        buffer.RX[buffer.rx_back] = data;
     44e:	e2 e8       	ldi	r30, 0x82	; 130
     450:	f2 e2       	ldi	r31, 0x22	; 34
     452:	a0 81       	ld	r26, Z
     454:	b0 e0       	ldi	r27, 0x00	; 0
     456:	ae 57       	subi	r26, 0x7E	; 126
     458:	be 4d       	sbci	r27, 0xDE	; 222
     45a:	2c 93       	st	X, r18
        buffer.rx_back = back;
     45c:	80 83       	st	Z, r24
    }
}
     45e:	ff 91       	pop	r31
     460:	ef 91       	pop	r30
     462:	bf 91       	pop	r27
     464:	af 91       	pop	r26
     466:	9f 91       	pop	r25
     468:	8f 91       	pop	r24
     46a:	2f 91       	pop	r18
     46c:	0f 90       	pop	r0
     46e:	0f be       	out	0x3f, r0	; 63
     470:	0f 90       	pop	r0
     472:	1f 90       	pop	r1
     474:	18 95       	reti

00000476 <__vector_60>:

ISR(USARTE0_TXC_vect)
{
     476:	1f 92       	push	r1
     478:	0f 92       	push	r0
     47a:	0f b6       	in	r0, 0x3f	; 63
     47c:	0f 92       	push	r0
     47e:	11 24       	eor	r1, r1
}
     480:	0f 90       	pop	r0
     482:	0f be       	out	0x3f, r0	; 63
     484:	0f 90       	pop	r0
     486:	1f 90       	pop	r1
     488:	18 95       	reti

0000048a <__vector_59>:

ISR(USARTE0_DRE_vect)
{
     48a:	1f 92       	push	r1
     48c:	0f 92       	push	r0
     48e:	0f b6       	in	r0, 0x3f	; 63
     490:	0f 92       	push	r0
     492:	11 24       	eor	r1, r1
     494:	8f 93       	push	r24
     496:	9f 93       	push	r25
     498:	af 93       	push	r26
     49a:	bf 93       	push	r27
     49c:	ef 93       	push	r30
     49e:	ff 93       	push	r31
    if (buffer.tx_back == buffer.tx_front) {
     4a0:	90 91 84 22 	lds	r25, 0x2284
     4a4:	80 91 85 22 	lds	r24, 0x2285
     4a8:	98 13       	cpse	r25, r24
     4aa:	06 c0       	rjmp	.+12     	; 0x4b8 <__vector_59+0x2e>
     4ac:	e0 ea       	ldi	r30, 0xA0	; 160
     4ae:	fa e0       	ldi	r31, 0x0A	; 10
     4b0:	83 81       	ldd	r24, Z+3	; 0x03
     4b2:	8c 7f       	andi	r24, 0xFC	; 252
     4b4:	83 83       	std	Z+3, r24	; 0x03
     4b6:	0d c0       	rjmp	.+26     	; 0x4d2 <__vector_59+0x48>
        usart_set_dre_interrupt_level(&USARTE0, USART_INT_LVL_OFF);
    } else {
        USARTE0.DATA = buffer.TX[buffer.tx_front];
     4b8:	e5 e8       	ldi	r30, 0x85	; 133
     4ba:	f2 e2       	ldi	r31, 0x22	; 34
     4bc:	a0 81       	ld	r26, Z
     4be:	b0 e0       	ldi	r27, 0x00	; 0
     4c0:	ae 5f       	subi	r26, 0xFE	; 254
     4c2:	bd 4d       	sbci	r27, 0xDD	; 221
     4c4:	8c 91       	ld	r24, X
     4c6:	80 93 a0 0a 	sts	0x0AA0, r24
        buffer.tx_front = (buffer.tx_front + 1) & TX_BUFFER_MASK;
     4ca:	80 81       	ld	r24, Z
     4cc:	8f 5f       	subi	r24, 0xFF	; 255
     4ce:	8f 77       	andi	r24, 0x7F	; 127
     4d0:	80 83       	st	Z, r24
    }
}
     4d2:	ff 91       	pop	r31
     4d4:	ef 91       	pop	r30
     4d6:	bf 91       	pop	r27
     4d8:	af 91       	pop	r26
     4da:	9f 91       	pop	r25
     4dc:	8f 91       	pop	r24
     4de:	0f 90       	pop	r0
     4e0:	0f be       	out	0x3f, r0	; 63
     4e2:	0f 90       	pop	r0
     4e4:	1f 90       	pop	r1
     4e6:	18 95       	reti

000004e8 <_uarte0_enable_interrupt>:
 * \param level Interrupt level of the RXD interrupt.
 */
static inline void usart_set_rx_interrupt_level(USART_t *usart,
		enum usart_int_level_t level)
{
	(usart)->CTRLA = ((usart)->CTRLA & ~USART_RXCINTLVL_gm) |
     4e8:	e0 ea       	ldi	r30, 0xA0	; 160
     4ea:	fa e0       	ldi	r31, 0x0A	; 10
     4ec:	93 81       	ldd	r25, Z+3	; 0x03
     4ee:	82 95       	swap	r24
     4f0:	80 7f       	andi	r24, 0xF0	; 240
     4f2:	9f 7c       	andi	r25, 0xCF	; 207
     4f4:	98 2b       	or	r25, r24
     4f6:	93 83       	std	Z+3, r25	; 0x03
     4f8:	08 95       	ret

000004fa <_uarte0_init>:
{
    usart_set_rx_interrupt_level(&USARTE0, level);
}

void _uarte0_init(void)
{
     4fa:	cf 93       	push	r28
     4fc:	df 93       	push	r29
     4fe:	cd b7       	in	r28, 0x3d	; 61
     500:	de b7       	in	r29, 0x3e	; 62
     502:	29 97       	sbiw	r28, 0x09	; 9
     504:	cd bf       	out	0x3d, r28	; 61
     506:	de bf       	out	0x3e, r29	; 62
    usart_rs232_options_t rs232_options = {
     508:	89 e0       	ldi	r24, 0x09	; 9
     50a:	e9 e0       	ldi	r30, 0x09	; 9
     50c:	f0 e2       	ldi	r31, 0x20	; 32
     50e:	de 01       	movw	r26, r28
     510:	11 96       	adiw	r26, 0x01	; 1
     512:	01 90       	ld	r0, Z+
     514:	0d 92       	st	X+, r0
     516:	8a 95       	dec	r24
     518:	e1 f7       	brne	.-8      	; 0x512 <_uarte0_init+0x18>
        .baudrate = 115200,
        .charlength = USART_CHSIZE_8BIT_gc,
        .paritytype = USART_PMODE_DISABLED_gc,
        .stopbits = false
    };
    buffer.rx_front = 0;
     51a:	10 92 83 22 	sts	0x2283, r1
    buffer.rx_back = 0;
     51e:	10 92 82 22 	sts	0x2282, r1
    buffer.tx_front = 0;
     522:	10 92 85 22 	sts	0x2285, r1
    buffer.tx_back = 0;
     526:	10 92 84 22 	sts	0x2284, r1
    usart_init_rs232(&USARTE0, &rs232_options);
     52a:	be 01       	movw	r22, r28
     52c:	6f 5f       	subi	r22, 0xFF	; 255
     52e:	7f 4f       	sbci	r23, 0xFF	; 255
     530:	80 ea       	ldi	r24, 0xA0	; 160
     532:	9a e0       	ldi	r25, 0x0A	; 10
     534:	0e 94 32 0c 	call	0x1864	; 0x1864 <usart_init_rs232>
     538:	e0 ea       	ldi	r30, 0xA0	; 160
     53a:	fa e0       	ldi	r31, 0x0A	; 10
     53c:	83 81       	ldd	r24, Z+3	; 0x03
     53e:	8f 7c       	andi	r24, 0xCF	; 207
     540:	83 83       	std	Z+3, r24	; 0x03
 * \param level Interrupt level of the TXD interrupt.
 */
static inline void usart_set_tx_interrupt_level(USART_t *usart,
		enum usart_int_level_t level)
{
	(usart)->CTRLA = ((usart)->CTRLA & ~USART_TXCINTLVL_gm) |
     542:	83 81       	ldd	r24, Z+3	; 0x03
     544:	83 7f       	andi	r24, 0xF3	; 243
     546:	83 83       	std	Z+3, r24	; 0x03
 *              Use USART_DREINTLVL_t type.
 */
static inline void usart_set_dre_interrupt_level(USART_t *usart,
		enum usart_int_level_t level)
{
	(usart)->CTRLA = ((usart)->CTRLA & ~USART_DREINTLVL_gm) |
     548:	83 81       	ldd	r24, Z+3	; 0x03
     54a:	8c 7f       	andi	r24, 0xFC	; 252
     54c:	81 60       	ori	r24, 0x01	; 1
     54e:	83 83       	std	Z+3, r24	; 0x03
    usart_set_rx_interrupt_level(&USARTE0, USART_INT_LVL_OFF);
    usart_set_tx_interrupt_level(&USARTE0, USART_INT_LVL_OFF);
    usart_set_dre_interrupt_level(&USARTE0, USART_INT_LVL_LO);
}
     550:	29 96       	adiw	r28, 0x09	; 9
     552:	cd bf       	out	0x3d, r28	; 61
     554:	de bf       	out	0x3e, r29	; 62
     556:	df 91       	pop	r29
     558:	cf 91       	pop	r28
     55a:	08 95       	ret

0000055c <_uarte0_getc>:

int16_t _uarte0_getc(void)
{
    uint8_t ans;
    if (buffer.rx_front == buffer.rx_back) {
     55c:	90 91 83 22 	lds	r25, 0x2283
     560:	80 91 82 22 	lds	r24, 0x2282
     564:	98 17       	cp	r25, r24
     566:	69 f0       	breq	.+26     	; 0x582 <_uarte0_getc+0x26>
        return -1;
    }
    ans = buffer.RX[buffer.rx_front];
     568:	e3 e8       	ldi	r30, 0x83	; 131
     56a:	f2 e2       	ldi	r31, 0x22	; 34
     56c:	a0 81       	ld	r26, Z
     56e:	b0 e0       	ldi	r27, 0x00	; 0
     570:	ae 57       	subi	r26, 0x7E	; 126
     572:	be 4d       	sbci	r27, 0xDE	; 222
     574:	2c 91       	ld	r18, X
    buffer.rx_front = (buffer.rx_front + 1) & RX_BUFFER_MASK;
     576:	80 81       	ld	r24, Z
     578:	8f 5f       	subi	r24, 0xFF	; 255
     57a:	8f 77       	andi	r24, 0x7F	; 127
     57c:	80 83       	st	Z, r24
    return ans;
     57e:	30 e0       	ldi	r19, 0x00	; 0
     580:	02 c0       	rjmp	.+4      	; 0x586 <_uarte0_getc+0x2a>

int16_t _uarte0_getc(void)
{
    uint8_t ans;
    if (buffer.rx_front == buffer.rx_back) {
        return -1;
     582:	2f ef       	ldi	r18, 0xFF	; 255
     584:	3f ef       	ldi	r19, 0xFF	; 255
    }
    ans = buffer.RX[buffer.rx_front];
    buffer.rx_front = (buffer.rx_front + 1) & RX_BUFFER_MASK;
    return ans;
}
     586:	82 2f       	mov	r24, r18
     588:	93 2f       	mov	r25, r19
     58a:	08 95       	ret

0000058c <_uarte0_byte_available>:

bool _uarte0_byte_available(void)
{
	return buffer.rx_front != buffer.rx_back;
     58c:	20 91 83 22 	lds	r18, 0x2283
     590:	90 91 82 22 	lds	r25, 0x2282
     594:	81 e0       	ldi	r24, 0x01	; 1
     596:	29 13       	cpse	r18, r25
     598:	01 c0       	rjmp	.+2      	; 0x59c <_uarte0_byte_available+0x10>
     59a:	80 e0       	ldi	r24, 0x00	; 0
}
     59c:	08 95       	ret

0000059e <_uarte0_putc>:

void reset_avr(void);

void _uarte0_putc(char ch)
{
     59e:	ff 92       	push	r15
     5a0:	0f 93       	push	r16
     5a2:	1f 93       	push	r17
     5a4:	cf 93       	push	r28
     5a6:	df 93       	push	r29
     5a8:	f8 2e       	mov	r15, r24
    timeout_start_singleshot(TIMEOUT_UART, TIMEOUT_TICK_HZ);
     5aa:	68 e0       	ldi	r22, 0x08	; 8
     5ac:	70 e0       	ldi	r23, 0x00	; 0
     5ae:	81 e0       	ldi	r24, 0x01	; 1
     5b0:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <timeout_start_singleshot>
}

static bool putb(uint8_t byte)
{
    uint8_t tx_back;
    tx_back = (buffer.tx_back + 1) & TX_BUFFER_MASK;
     5b4:	04 e8       	ldi	r16, 0x84	; 132
     5b6:	12 e2       	ldi	r17, 0x22	; 34
    if (tx_back != buffer.tx_front) {
     5b8:	c5 e8       	ldi	r28, 0x85	; 133
     5ba:	d2 e2       	ldi	r29, 0x22	; 34
void reset_avr(void);

void _uarte0_putc(char ch)
{
    timeout_start_singleshot(TIMEOUT_UART, TIMEOUT_TICK_HZ);
    while (!putb(ch)) {
     5bc:	02 c0       	rjmp	.+4      	; 0x5c2 <_uarte0_putc+0x24>
        if (timeout_test_and_clear_expired(TIMEOUT_UART)) {
            reset_avr();
     5be:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <reset_avr>
}

static bool putb(uint8_t byte)
{
    uint8_t tx_back;
    tx_back = (buffer.tx_back + 1) & TX_BUFFER_MASK;
     5c2:	f8 01       	movw	r30, r16
     5c4:	90 81       	ld	r25, Z
     5c6:	9f 5f       	subi	r25, 0xFF	; 255
     5c8:	9f 77       	andi	r25, 0x7F	; 127
    if (tx_back != buffer.tx_front) {
     5ca:	28 81       	ld	r18, Y
     5cc:	92 17       	cp	r25, r18
     5ce:	91 f0       	breq	.+36     	; 0x5f4 <_uarte0_putc+0x56>
        buffer.TX[buffer.tx_back] = byte;
     5d0:	e4 e8       	ldi	r30, 0x84	; 132
     5d2:	f2 e2       	ldi	r31, 0x22	; 34
     5d4:	a0 81       	ld	r26, Z
     5d6:	b0 e0       	ldi	r27, 0x00	; 0
     5d8:	ae 5f       	subi	r26, 0xFE	; 254
     5da:	bd 4d       	sbci	r27, 0xDD	; 221
     5dc:	fc 92       	st	X, r15
        buffer.tx_back = tx_back;
     5de:	90 83       	st	Z, r25
     5e0:	e0 ea       	ldi	r30, 0xA0	; 160
     5e2:	fa e0       	ldi	r31, 0x0A	; 10
     5e4:	83 81       	ldd	r24, Z+3	; 0x03
     5e6:	8c 7f       	andi	r24, 0xFC	; 252
     5e8:	81 60       	ori	r24, 0x01	; 1
     5ea:	83 83       	std	Z+3, r24	; 0x03
    while (!putb(ch)) {
        if (timeout_test_and_clear_expired(TIMEOUT_UART)) {
            reset_avr();
        }
    }
    timeout_stop(TIMEOUT_UART);
     5ec:	81 e0       	ldi	r24, 0x01	; 1
     5ee:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <timeout_stop>
     5f2:	06 c0       	rjmp	.+12     	; 0x600 <_uarte0_putc+0x62>

void _uarte0_putc(char ch)
{
    timeout_start_singleshot(TIMEOUT_UART, TIMEOUT_TICK_HZ);
    while (!putb(ch)) {
        if (timeout_test_and_clear_expired(TIMEOUT_UART)) {
     5f4:	81 e0       	ldi	r24, 0x01	; 1
     5f6:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <timeout_test_and_clear_expired>
     5fa:	88 23       	and	r24, r24
     5fc:	11 f3       	breq	.-60     	; 0x5c2 <_uarte0_putc+0x24>
     5fe:	df cf       	rjmp	.-66     	; 0x5be <_uarte0_putc+0x20>
            reset_avr();
        }
    }
    timeout_stop(TIMEOUT_UART);
}
     600:	df 91       	pop	r29
     602:	cf 91       	pop	r28
     604:	1f 91       	pop	r17
     606:	0f 91       	pop	r16
     608:	ff 90       	pop	r15
     60a:	08 95       	ret

0000060c <DEBUG_puts>:
            }
        } else {
            _DEBUG_putc(' ');
        }
    }
}
     60c:	cf 93       	push	r28
     60e:	df 93       	push	r29
     610:	ec 01       	movw	r28, r24
     612:	88 81       	ld	r24, Y
     614:	88 23       	and	r24, r24
     616:	29 f0       	breq	.+10     	; 0x622 <DEBUG_puts+0x16>
     618:	21 96       	adiw	r28, 0x01	; 1
     61a:	cb de       	rcall	.-618    	; 0x3b2 <_uartc1_putc>
     61c:	89 91       	ld	r24, Y+
     61e:	81 11       	cpse	r24, r1
     620:	fc cf       	rjmp	.-8      	; 0x61a <DEBUG_puts+0xe>
     622:	df 91       	pop	r29
     624:	cf 91       	pop	r28
     626:	08 95       	ret

00000628 <DEBUG_putcrlf>:
    }
}

void DEBUG_putcrlf(const char* str)
{
    if (str != NULL) {
     628:	00 97       	sbiw	r24, 0x00	; 0
     62a:	09 f0       	breq	.+2      	; 0x62e <DEBUG_putcrlf+0x6>
        DEBUG_puts(str);
     62c:	ef df       	rcall	.-34     	; 0x60c <DEBUG_puts>
    }
    DEBUG_puts("\r\n");
     62e:	82 e1       	ldi	r24, 0x12	; 18
     630:	90 e2       	ldi	r25, 0x20	; 32
     632:	ec cf       	rjmp	.-40     	; 0x60c <DEBUG_puts>

00000634 <DEBUG_putb>:
}

void DEBUG_putb(uint8_t b)
{
     634:	cf 93       	push	r28
     636:	c8 2f       	mov	r28, r24
#if (DEBUG_UART != UART_NONE)
    static const char hex[] = "0123456789ABCDEF";
#endif
    _DEBUG_putc(hex[b >> 4]);
     638:	a8 2f       	mov	r26, r24
     63a:	a2 95       	swap	r26
     63c:	af 70       	andi	r26, 0x0F	; 15
     63e:	b0 e0       	ldi	r27, 0x00	; 0
     640:	ab 5e       	subi	r26, 0xEB	; 235
     642:	bf 4d       	sbci	r27, 0xDF	; 223
     644:	8c 91       	ld	r24, X
     646:	b5 de       	rcall	.-662    	; 0x3b2 <_uartc1_putc>
    _DEBUG_putc(hex[b & 0x0F]);
     648:	cf 70       	andi	r28, 0x0F	; 15
     64a:	ec 2f       	mov	r30, r28
     64c:	f0 e0       	ldi	r31, 0x00	; 0
     64e:	eb 5e       	subi	r30, 0xEB	; 235
     650:	ff 4d       	sbci	r31, 0xDF	; 223
     652:	80 81       	ld	r24, Z
     654:	ae de       	rcall	.-676    	; 0x3b2 <_uartc1_putc>
}
     656:	cf 91       	pop	r28
     658:	08 95       	ret

0000065a <MODEM_get_byte>:
#include "crc.h"

int16_t MODEM_get_byte(void)
{
    int16_t ans;
    ans = _MODEM_getc();
     65a:	80 cf       	rjmp	.-256    	; 0x55c <_uarte0_getc>
    if (ans < 0) {
        return ans;
    }
    //_DEBUG_putc(ans); //eccho every byte that recieved by modem to debug serial port
    return ans;
}
     65c:	08 95       	ret

0000065e <MODEM_raw_putb>:

void MODEM_raw_putb(uint8_t byte)
{
     65e:	cf 93       	push	r28
     660:	c8 2f       	mov	r28, r24
    _MODEM_putc(byte);
     662:	9d df       	rcall	.-198    	; 0x59e <_uarte0_putc>
    _DEBUG_putc(byte);
     664:	8c 2f       	mov	r24, r28
     666:	a5 de       	rcall	.-694    	; 0x3b2 <_uartc1_putc>
}
     668:	cf 91       	pop	r28
     66a:	08 95       	ret

0000066c <MODEM_raw_puts>:

void MODEM_raw_puts(const char* data)
{
     66c:	cf 93       	push	r28
     66e:	df 93       	push	r29
     670:	ec 01       	movw	r28, r24
    while (*data != '\x00') {
     672:	88 81       	ld	r24, Y
     674:	88 23       	and	r24, r24
     676:	29 f0       	breq	.+10     	; 0x682 <MODEM_raw_puts+0x16>
{
    _MODEM_putc(byte);
    _DEBUG_putc(byte);
}

void MODEM_raw_puts(const char* data)
     678:	21 96       	adiw	r28, 0x01	; 1
{
    while (*data != '\x00') {
        MODEM_raw_putb(*data);
     67a:	f1 df       	rcall	.-30     	; 0x65e <MODEM_raw_putb>
    _DEBUG_putc(byte);
}

void MODEM_raw_puts(const char* data)
{
    while (*data != '\x00') {
     67c:	89 91       	ld	r24, Y+
     67e:	81 11       	cpse	r24, r1
     680:	fc cf       	rjmp	.-8      	; 0x67a <MODEM_raw_puts+0xe>
        MODEM_raw_putb(*data);
        data++;
    }
}
     682:	df 91       	pop	r29
     684:	cf 91       	pop	r28
     686:	08 95       	ret

00000688 <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
     688:	43 e0       	ldi	r20, 0x03	; 3
     68a:	50 e0       	ldi	r21, 0x00	; 0
     68c:	68 e0       	ldi	r22, 0x08	; 8
     68e:	80 e2       	ldi	r24, 0x20	; 32
     690:	96 e0       	ldi	r25, 0x06	; 6
     692:	bd d0       	rcall	.+378    	; 0x80e <ioport_configure_port_pin>
     694:	43 e0       	ldi	r20, 0x03	; 3
     696:	50 e0       	ldi	r21, 0x00	; 0
     698:	60 e2       	ldi	r22, 0x20	; 32
     69a:	80 e0       	ldi	r24, 0x00	; 0
     69c:	96 e0       	ldi	r25, 0x06	; 6
     69e:	b7 d0       	rcall	.+366    	; 0x80e <ioport_configure_port_pin>
     6a0:	43 e0       	ldi	r20, 0x03	; 3
     6a2:	50 e0       	ldi	r21, 0x00	; 0
     6a4:	68 e0       	ldi	r22, 0x08	; 8
     6a6:	80 e8       	ldi	r24, 0x80	; 128
     6a8:	96 e0       	ldi	r25, 0x06	; 6
     6aa:	b1 d0       	rcall	.+354    	; 0x80e <ioport_configure_port_pin>
     6ac:	40 e0       	ldi	r20, 0x00	; 0
     6ae:	50 e0       	ldi	r21, 0x00	; 0
     6b0:	64 e0       	ldi	r22, 0x04	; 4
     6b2:	80 e8       	ldi	r24, 0x80	; 128
     6b4:	96 e0       	ldi	r25, 0x06	; 6
     6b6:	ab d0       	rcall	.+342    	; 0x80e <ioport_configure_port_pin>
     6b8:	43 e0       	ldi	r20, 0x03	; 3
     6ba:	50 e0       	ldi	r21, 0x00	; 0
     6bc:	68 e0       	ldi	r22, 0x08	; 8
     6be:	80 e8       	ldi	r24, 0x80	; 128
     6c0:	96 e0       	ldi	r25, 0x06	; 6
     6c2:	a5 d0       	rcall	.+330    	; 0x80e <ioport_configure_port_pin>
     6c4:	40 e0       	ldi	r20, 0x00	; 0
     6c6:	50 e0       	ldi	r21, 0x00	; 0
     6c8:	64 e0       	ldi	r22, 0x04	; 4
     6ca:	80 e8       	ldi	r24, 0x80	; 128
     6cc:	96 e0       	ldi	r25, 0x06	; 6
     6ce:	9f d0       	rcall	.+318    	; 0x80e <ioport_configure_port_pin>
     6d0:	43 e0       	ldi	r20, 0x03	; 3
     6d2:	50 e0       	ldi	r21, 0x00	; 0
     6d4:	60 e8       	ldi	r22, 0x80	; 128
     6d6:	80 e4       	ldi	r24, 0x40	; 64
     6d8:	96 e0       	ldi	r25, 0x06	; 6
     6da:	99 d0       	rcall	.+306    	; 0x80e <ioport_configure_port_pin>
     6dc:	40 e0       	ldi	r20, 0x00	; 0
     6de:	50 e0       	ldi	r21, 0x00	; 0
     6e0:	60 e4       	ldi	r22, 0x40	; 64
     6e2:	80 e4       	ldi	r24, 0x40	; 64
     6e4:	96 e0       	ldi	r25, 0x06	; 6
     6e6:	93 d0       	rcall	.+294    	; 0x80e <ioport_configure_port_pin>
     6e8:	43 e0       	ldi	r20, 0x03	; 3
     6ea:	50 e0       	ldi	r21, 0x00	; 0
     6ec:	62 e0       	ldi	r22, 0x02	; 2
     6ee:	80 e2       	ldi	r24, 0x20	; 32
     6f0:	96 e0       	ldi	r25, 0x06	; 6
     6f2:	8d d0       	rcall	.+282    	; 0x80e <ioport_configure_port_pin>
     6f4:	43 e0       	ldi	r20, 0x03	; 3
     6f6:	50 e0       	ldi	r21, 0x00	; 0
     6f8:	60 e4       	ldi	r22, 0x40	; 64
     6fa:	80 e0       	ldi	r24, 0x00	; 0
     6fc:	96 e0       	ldi	r25, 0x06	; 6
     6fe:	87 d0       	rcall	.+270    	; 0x80e <ioport_configure_port_pin>
     700:	41 e0       	ldi	r20, 0x01	; 1
     702:	50 e0       	ldi	r21, 0x00	; 0
     704:	61 e0       	ldi	r22, 0x01	; 1
     706:	80 e6       	ldi	r24, 0x60	; 96
     708:	96 e0       	ldi	r25, 0x06	; 6
     70a:	81 d0       	rcall	.+258    	; 0x80e <ioport_configure_port_pin>
     70c:	41 e0       	ldi	r20, 0x01	; 1
     70e:	50 e0       	ldi	r21, 0x00	; 0
     710:	62 e0       	ldi	r22, 0x02	; 2
     712:	80 e6       	ldi	r24, 0x60	; 96
     714:	96 e0       	ldi	r25, 0x06	; 6
     716:	7b d0       	rcall	.+246    	; 0x80e <ioport_configure_port_pin>
     718:	43 e0       	ldi	r20, 0x03	; 3
     71a:	50 e0       	ldi	r21, 0x00	; 0
     71c:	68 e0       	ldi	r22, 0x08	; 8
     71e:	80 e6       	ldi	r24, 0x60	; 96
     720:	96 e0       	ldi	r25, 0x06	; 6
     722:	75 d0       	rcall	.+234    	; 0x80e <ioport_configure_port_pin>
     724:	40 e0       	ldi	r20, 0x00	; 0
     726:	50 e0       	ldi	r21, 0x00	; 0
     728:	64 e0       	ldi	r22, 0x04	; 4
     72a:	80 e4       	ldi	r24, 0x40	; 64
     72c:	96 e0       	ldi	r25, 0x06	; 6
     72e:	6f d0       	rcall	.+222    	; 0x80e <ioport_configure_port_pin>
     730:	40 e0       	ldi	r20, 0x00	; 0
     732:	50 e0       	ldi	r21, 0x00	; 0
     734:	64 e0       	ldi	r22, 0x04	; 4
     736:	80 e6       	ldi	r24, 0x60	; 96
     738:	96 e0       	ldi	r25, 0x06	; 6
     73a:	69 d0       	rcall	.+210    	; 0x80e <ioport_configure_port_pin>
     73c:	40 e0       	ldi	r20, 0x00	; 0
     73e:	50 e0       	ldi	r21, 0x00	; 0
     740:	64 e0       	ldi	r22, 0x04	; 4
     742:	80 e2       	ldi	r24, 0x20	; 32
     744:	96 e0       	ldi	r25, 0x06	; 6
     746:	63 d0       	rcall	.+198    	; 0x80e <ioport_configure_port_pin>
     748:	40 e0       	ldi	r20, 0x00	; 0
     74a:	50 e0       	ldi	r21, 0x00	; 0
     74c:	64 e0       	ldi	r22, 0x04	; 4
     74e:	80 e0       	ldi	r24, 0x00	; 0
     750:	96 e0       	ldi	r25, 0x06	; 6
     752:	5d c0       	rjmp	.+186    	; 0x80e <ioport_configure_port_pin>

00000754 <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
     754:	cf 93       	push	r28
     756:	df 93       	push	r29
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     758:	8f ef       	ldi	r24, 0xFF	; 255
     75a:	80 93 70 00 	sts	0x0070, r24
     75e:	80 93 71 00 	sts	0x0071, r24
     762:	80 93 72 00 	sts	0x0072, r24
     766:	80 93 73 00 	sts	0x0073, r24
     76a:	80 93 74 00 	sts	0x0074, r24
     76e:	80 93 75 00 	sts	0x0075, r24
     772:	80 93 76 00 	sts	0x0076, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     776:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     778:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     77a:	e0 e5       	ldi	r30, 0x50	; 80
     77c:	f0 e0       	ldi	r31, 0x00	; 0
     77e:	90 81       	ld	r25, Z
     780:	92 60       	ori	r25, 0x02	; 2
     782:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     784:	8f bf       	out	0x3f, r24	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     786:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     788:	81 ff       	sbrs	r24, 1
     78a:	fd cf       	rjmp	.-6      	; 0x786 <sysclk_init+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     78c:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     78e:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     790:	e0 e5       	ldi	r30, 0x50	; 80
     792:	f0 e0       	ldi	r31, 0x00	; 0
     794:	90 81       	ld	r25, Z
     796:	94 60       	ori	r25, 0x04	; 4
     798:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     79a:	8f bf       	out	0x3f, r24	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     79c:	81 81       	ldd	r24, Z+1	; 0x01
     79e:	82 ff       	sbrs	r24, 2
     7a0:	fd cf       	rjmp	.-6      	; 0x79c <sysclk_init+0x48>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     7a2:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     7a4:	f8 94       	cli
#if XMEGA_AU || XMEGA_B || XMEGA_C || XMEGA_E
		Assert((ref_id == OSC_ID_RC32KHZ)
				|| (ref_id == OSC_ID_XOSC)
				|| (ref_id == OSC_ID_USBSOF));

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
     7a6:	c0 e5       	ldi	r28, 0x50	; 80
     7a8:	d0 e0       	ldi	r29, 0x00	; 0
     7aa:	9e 81       	ldd	r25, Y+6	; 0x06
     7ac:	99 7f       	andi	r25, 0xF9	; 249
     7ae:	9e 83       	std	Y+6, r25	; 0x06
		if (ref_id == OSC_ID_XOSC) {
			osc_enable(OSC_ID_RC32KHZ);
			OSC.DFLLCTRL |= OSC_RC32MCREF_XOSC32K_gc;
		}
		else if (ref_id == OSC_ID_RC32KHZ) {
			OSC.DFLLCTRL |= OSC_RC32MCREF_RC32K_gc;
     7b0:	9e 81       	ldd	r25, Y+6	; 0x06
     7b2:	9e 83       	std	Y+6, r25	; 0x06
		}
		else if (ref_id == OSC_ID_RC32KHZ) {
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
		}
#endif
		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
     7b4:	e0 e6       	ldi	r30, 0x60	; 96
     7b6:	f0 e0       	ldi	r31, 0x00	; 0
     7b8:	90 81       	ld	r25, Z
     7ba:	91 60       	ori	r25, 0x01	; 1
     7bc:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     7be:	8f bf       	out	0x3f, r24	; 63
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
     7c0:	61 e0       	ldi	r22, 0x01	; 1
     7c2:	80 e4       	ldi	r24, 0x40	; 64
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	4b d0       	rcall	.+150    	; 0x85e <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     7c8:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     7ca:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
     7cc:	98 81       	ld	r25, Y
     7ce:	9e 7f       	andi	r25, 0xFE	; 254
     7d0:	98 83       	st	Y, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     7d2:	8f bf       	out	0x3f, r24	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     7d4:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     7d6:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     7d8:	98 81       	ld	r25, Y
     7da:	94 60       	ori	r25, 0x04	; 4
     7dc:	98 83       	st	Y, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     7de:	8f bf       	out	0x3f, r24	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     7e0:	e0 e5       	ldi	r30, 0x50	; 80
     7e2:	f0 e0       	ldi	r31, 0x00	; 0
     7e4:	81 81       	ldd	r24, Z+1	; 0x01
     7e6:	82 ff       	sbrs	r24, 2
     7e8:	fd cf       	rjmp	.-6      	; 0x7e4 <sysclk_init+0x90>
		osc_enable(OSC_ID_XOSC);
		osc_wait_ready(OSC_ID_XOSC);
		break;
	}

	CLK.RTCCTRL = id | CLK_RTCEN_bm;
     7ea:	85 e0       	ldi	r24, 0x05	; 5
     7ec:	e0 e4       	ldi	r30, 0x40	; 64
     7ee:	f0 e0       	ldi	r31, 0x00	; 0
     7f0:	83 83       	std	Z+3, r24	; 0x03
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
     7f2:	df 91       	pop	r29
     7f4:	cf 91       	pop	r28
     7f6:	08 95       	ret

000007f8 <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     7f8:	2f b7       	in	r18, 0x3f	; 63
	cpu_irq_disable();
     7fa:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     7fc:	fc 01       	movw	r30, r24
     7fe:	e0 59       	subi	r30, 0x90	; 144
     800:	ff 4f       	sbci	r31, 0xFF	; 255
     802:	60 95       	com	r22
     804:	80 81       	ld	r24, Z
     806:	68 23       	and	r22, r24
     808:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     80a:	2f bf       	out	0x3f, r18	; 63
     80c:	08 95       	ret

0000080e <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
     80e:	cf 93       	push	r28
     810:	df 93       	push	r29
 *
 */
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
     812:	fc 01       	movw	r30, r24
     814:	70 96       	adiw	r30, 0x10	; 16
     816:	20 e0       	ldi	r18, 0x00	; 0
     818:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
     81a:	c6 2f       	mov	r28, r22
     81c:	d0 e0       	ldi	r29, 0x00	; 0
     81e:	de 01       	movw	r26, r28
     820:	02 2e       	mov	r0, r18
     822:	02 c0       	rjmp	.+4      	; 0x828 <ioport_configure_port_pin+0x1a>
     824:	b5 95       	asr	r27
     826:	a7 95       	ror	r26
     828:	0a 94       	dec	r0
     82a:	e2 f7       	brpl	.-8      	; 0x824 <ioport_configure_port_pin+0x16>
     82c:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     82e:	50 83       	st	Z, r21
     830:	2f 5f       	subi	r18, 0xFF	; 255
     832:	3f 4f       	sbci	r19, 0xFF	; 255
     834:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
     836:	28 30       	cpi	r18, 0x08	; 8
     838:	31 05       	cpc	r19, r1
     83a:	89 f7       	brne	.-30     	; 0x81e <ioport_configure_port_pin+0x10>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
     83c:	40 ff       	sbrs	r20, 0
     83e:	0a c0       	rjmp	.+20     	; 0x854 <ioport_configure_port_pin+0x46>
		if (flags & IOPORT_INIT_HIGH) {
     840:	41 ff       	sbrs	r20, 1
     842:	03 c0       	rjmp	.+6      	; 0x84a <ioport_configure_port_pin+0x3c>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
     844:	fc 01       	movw	r30, r24
     846:	65 83       	std	Z+5, r22	; 0x05
     848:	02 c0       	rjmp	.+4      	; 0x84e <ioport_configure_port_pin+0x40>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
     84a:	fc 01       	movw	r30, r24
     84c:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
     84e:	fc 01       	movw	r30, r24
     850:	61 83       	std	Z+1, r22	; 0x01
     852:	02 c0       	rjmp	.+4      	; 0x858 <ioport_configure_port_pin+0x4a>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
     854:	fc 01       	movw	r30, r24
     856:	62 83       	std	Z+2, r22	; 0x02
	}
}
     858:	df 91       	pop	r29
     85a:	cf 91       	pop	r28
     85c:	08 95       	ret

0000085e <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
     85e:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
     860:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
     862:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
     864:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
     866:	60 83       	st	Z, r22
	ret                             // Return to caller
     868:	08 95       	ret

0000086a <nvm_eeprom_read_byte>:
{
	nvm_wait_until_ready();
	eeprom_enable_mapping();
	memcpy( buf,(void*)(address+MAPPED_EEPROM_START), len );
	eeprom_disable_mapping();
}
     86a:	e0 ec       	ldi	r30, 0xC0	; 192
     86c:	f1 e0       	ldi	r31, 0x01	; 1
     86e:	27 85       	ldd	r18, Z+15	; 0x0f
     870:	22 23       	and	r18, r18
     872:	ec f3       	brlt	.-6      	; 0x86e <nvm_eeprom_read_byte+0x4>
     874:	ec ec       	ldi	r30, 0xCC	; 204
     876:	f1 e0       	ldi	r31, 0x01	; 1
     878:	20 81       	ld	r18, Z
     87a:	28 60       	ori	r18, 0x08	; 8
     87c:	20 83       	st	Z, r18
     87e:	dc 01       	movw	r26, r24
     880:	b0 5f       	subi	r27, 0xF0	; 240
     882:	8c 91       	ld	r24, X
     884:	90 81       	ld	r25, Z
     886:	97 7f       	andi	r25, 0xF7	; 247
     888:	90 83       	st	Z, r25
     88a:	08 95       	ret

0000088c <nvm_eeprom_flush_buffer>:
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
     88c:	e0 ec       	ldi	r30, 0xC0	; 192
     88e:	f1 e0       	ldi	r31, 0x01	; 1
     890:	87 85       	ldd	r24, Z+15	; 0x0f
     892:	88 23       	and	r24, r24
     894:	ec f3       	brlt	.-6      	; 0x890 <nvm_eeprom_flush_buffer+0x4>
{
	// Wait until NVM is ready
	nvm_wait_until_ready();

	// Flush EEPROM page buffer if necessary
	if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
     896:	e0 ec       	ldi	r30, 0xC0	; 192
     898:	f1 e0       	ldi	r31, 0x01	; 1
     89a:	87 85       	ldd	r24, Z+15	; 0x0f
     89c:	81 ff       	sbrs	r24, 1
     89e:	06 c0       	rjmp	.+12     	; 0x8ac <nvm_eeprom_flush_buffer+0x20>
		NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
     8a0:	86 e3       	ldi	r24, 0x36	; 54
     8a2:	82 87       	std	Z+10, r24	; 0x0a
 * \note The correct NVM command must be set in the NVM.CMD register before
 *       calling this function.
 */
static inline void nvm_exec(void)
{
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
     8a4:	61 e0       	ldi	r22, 0x01	; 1
     8a6:	8b ec       	ldi	r24, 0xCB	; 203
     8a8:	91 e0       	ldi	r25, 0x01	; 1
     8aa:	d9 cf       	rjmp	.-78     	; 0x85e <ccp_write_io>
     8ac:	08 95       	ret

000008ae <nvm_eeprom_load_byte_to_buffer>:
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
     8ae:	e0 ec       	ldi	r30, 0xC0	; 192
     8b0:	f1 e0       	ldi	r31, 0x01	; 1
     8b2:	97 85       	ldd	r25, Z+15	; 0x0f
     8b4:	99 23       	and	r25, r25
     8b6:	ec f3       	brlt	.-6      	; 0x8b2 <nvm_eeprom_load_byte_to_buffer+0x4>
 *        write operations still needs to be done through IO register.
 */
static inline void eeprom_enable_mapping(void)
{
#if !XMEGA_E
	NVM_CTRLB = NVM_CTRLB | NVM_EEMAPEN_bm;
     8b8:	ec ec       	ldi	r30, 0xCC	; 204
     8ba:	f1 e0       	ldi	r31, 0x01	; 1
     8bc:	90 81       	ld	r25, Z
     8be:	98 60       	ori	r25, 0x08	; 8
     8c0:	90 83       	st	Z, r25
{
	// Wait until NVM is ready
	nvm_wait_until_ready();

	eeprom_enable_mapping();
	*(uint8_t*)(byte_addr + MAPPED_EEPROM_START) = value;
     8c2:	a8 2f       	mov	r26, r24
     8c4:	b0 e0       	ldi	r27, 0x00	; 0
     8c6:	b0 5f       	subi	r27, 0xF0	; 240
     8c8:	6c 93       	st	X, r22
 *  IO mapped access is now enabled.
 */
static inline void eeprom_disable_mapping(void)
{
#if !XMEGA_E
	NVM_CTRLB = NVM_CTRLB & ~NVM_EEMAPEN_bm;
     8ca:	80 81       	ld	r24, Z
     8cc:	87 7f       	andi	r24, 0xF7	; 247
     8ce:	80 83       	st	Z, r24
     8d0:	08 95       	ret

000008d2 <nvm_eeprom_write_byte>:
 *
 * \param  address    EEPROM address (max EEPROM_SIZE)
 * \param  value      Byte value to write to EEPROM.
 */
void nvm_eeprom_write_byte(eeprom_addr_t address, uint8_t value)
{
     8d2:	ff 92       	push	r15
     8d4:	0f 93       	push	r16
     8d6:	1f 93       	push	r17
     8d8:	cf 93       	push	r28
     8da:	df 93       	push	r29
     8dc:	18 2f       	mov	r17, r24
     8de:	f9 2e       	mov	r15, r25
     8e0:	c6 2f       	mov	r28, r22

	Assert(address <= EEPROM_SIZE);
	/*  Flush buffer to make sure no unintentional data is written and load
	 *  the "Page Load" command into the command register.
	 */
	old_cmd = NVM.CMD;
     8e2:	e0 ec       	ldi	r30, 0xC0	; 192
     8e4:	f1 e0       	ldi	r31, 0x01	; 1
     8e6:	02 85       	ldd	r16, Z+10	; 0x0a
	nvm_eeprom_flush_buffer();
     8e8:	d1 df       	rcall	.-94     	; 0x88c <nvm_eeprom_flush_buffer>
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
     8ea:	e0 ec       	ldi	r30, 0xC0	; 192
     8ec:	f1 e0       	ldi	r31, 0x01	; 1
     8ee:	27 85       	ldd	r18, Z+15	; 0x0f
     8f0:	22 23       	and	r18, r18
     8f2:	ec f3       	brlt	.-6      	; 0x8ee <nvm_eeprom_write_byte+0x1c>
	// Wait until NVM is ready
	nvm_wait_until_ready();
	nvm_eeprom_load_byte_to_buffer(address, value);
     8f4:	6c 2f       	mov	r22, r28
     8f6:	81 2f       	mov	r24, r17
     8f8:	da df       	rcall	.-76     	; 0x8ae <nvm_eeprom_load_byte_to_buffer>

	// Set address to write to
	NVM.ADDR2 = 0x00;
     8fa:	c0 ec       	ldi	r28, 0xC0	; 192
     8fc:	d1 e0       	ldi	r29, 0x01	; 1
     8fe:	1a 82       	std	Y+2, r1	; 0x02
	NVM.ADDR1 = (address >> 8) & 0xFF;
     900:	f9 82       	std	Y+1, r15	; 0x01
	NVM.ADDR0 = address & 0xFF;
     902:	18 83       	st	Y, r17

	/*  Issue EEPROM Atomic Write (Erase&Write) command. Load command, write
	 *  the protection signature and execute command.
	 */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
     904:	85 e3       	ldi	r24, 0x35	; 53
     906:	8a 87       	std	Y+10, r24	; 0x0a
 * \note The correct NVM command must be set in the NVM.CMD register before
 *       calling this function.
 */
static inline void nvm_exec(void)
{
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
     908:	61 e0       	ldi	r22, 0x01	; 1
     90a:	8b ec       	ldi	r24, 0xCB	; 203
     90c:	91 e0       	ldi	r25, 0x01	; 1
     90e:	a7 df       	rcall	.-178    	; 0x85e <ccp_write_io>
	nvm_exec();
	NVM.CMD = old_cmd;
     910:	0a 87       	std	Y+10, r16	; 0x0a
}
     912:	df 91       	pop	r29
     914:	cf 91       	pop	r28
     916:	1f 91       	pop	r17
     918:	0f 91       	pop	r16
     91a:	ff 90       	pop	r15
     91c:	08 95       	ret

0000091e <nvm_eeprom_load_page_to_buffer>:
 *       EEPROM write page operation.
 *
 * \param  values   Pointer to SRAM buffer containing an entire page.
 */
void nvm_eeprom_load_page_to_buffer(const uint8_t *values)
{
     91e:	ef 92       	push	r14
     920:	ff 92       	push	r15
     922:	0f 93       	push	r16
     924:	1f 93       	push	r17
     926:	cf 93       	push	r28
     928:	df 93       	push	r29
     92a:	8c 01       	movw	r16, r24
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
     92c:	e0 ec       	ldi	r30, 0xC0	; 192
     92e:	f1 e0       	ldi	r31, 0x01	; 1
     930:	87 85       	ldd	r24, Z+15	; 0x0f
     932:	88 23       	and	r24, r24
     934:	ec f3       	brlt	.-6      	; 0x930 <nvm_eeprom_load_page_to_buffer+0x12>
 *       is written to the EEPROM page given by the address parameter to the
 *       EEPROM write page operation.
 *
 * \param  values   Pointer to SRAM buffer containing an entire page.
 */
void nvm_eeprom_load_page_to_buffer(const uint8_t *values)
     936:	78 01       	movw	r14, r16
     938:	80 e2       	ldi	r24, 0x20	; 32
     93a:	e8 0e       	add	r14, r24
     93c:	f1 1c       	adc	r15, r1
     93e:	e8 01       	movw	r28, r16
     940:	8c 2f       	mov	r24, r28
     942:	80 1b       	sub	r24, r16
	nvm_wait_until_ready();

	// Load multiple bytes into page buffer
	uint8_t i;
	for (i = 0; i < EEPROM_PAGE_SIZE; ++i) {
		nvm_eeprom_load_byte_to_buffer(i, *values);
     944:	69 91       	ld	r22, Y+
     946:	b3 df       	rcall	.-154    	; 0x8ae <nvm_eeprom_load_byte_to_buffer>
	// Wait until NVM is ready
	nvm_wait_until_ready();

	// Load multiple bytes into page buffer
	uint8_t i;
	for (i = 0; i < EEPROM_PAGE_SIZE; ++i) {
     948:	ce 15       	cp	r28, r14
     94a:	df 05       	cpc	r29, r15
     94c:	c9 f7       	brne	.-14     	; 0x940 <nvm_eeprom_load_page_to_buffer+0x22>
		nvm_eeprom_load_byte_to_buffer(i, *values);
		++values;
	}
}
     94e:	df 91       	pop	r29
     950:	cf 91       	pop	r28
     952:	1f 91       	pop	r17
     954:	0f 91       	pop	r16
     956:	ff 90       	pop	r15
     958:	ef 90       	pop	r14
     95a:	08 95       	ret

0000095c <nvm_eeprom_atomic_write_page>:
 * locations that have not been loaded will be left untouched in EEPROM.
 *
 * \param  page_addr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGE_SIZE
 */
void nvm_eeprom_atomic_write_page(uint8_t page_addr)
{
     95c:	1f 93       	push	r17
     95e:	cf 93       	push	r28
     960:	df 93       	push	r29
     962:	e0 ec       	ldi	r30, 0xC0	; 192
     964:	f1 e0       	ldi	r31, 0x01	; 1
     966:	97 85       	ldd	r25, Z+15	; 0x0f
     968:	99 23       	and	r25, r25
     96a:	ec f3       	brlt	.-6      	; 0x966 <nvm_eeprom_atomic_write_page+0xa>
	// Wait until NVM is ready
	nvm_wait_until_ready();

	// Calculate page address
	uint16_t address = (uint16_t)(page_addr * EEPROM_PAGE_SIZE);
     96c:	20 e2       	ldi	r18, 0x20	; 32
     96e:	82 9f       	mul	r24, r18
     970:	c0 01       	movw	r24, r0
     972:	11 24       	eor	r1, r1

	Assert(address <= EEPROM_SIZE);

	// Set address
	NVM.ADDR2 = 0x00;
     974:	c0 ec       	ldi	r28, 0xC0	; 192
     976:	d1 e0       	ldi	r29, 0x01	; 1
     978:	1a 82       	std	Y+2, r1	; 0x02
	NVM.ADDR1 = (address >> 8) & 0xFF;
     97a:	99 83       	std	Y+1, r25	; 0x01
	NVM.ADDR0 = address & 0xFF;
     97c:	88 83       	st	Y, r24
 */
static inline void nvm_issue_command(NVM_CMD_t nvm_command)
{
	uint8_t old_cmd;

	old_cmd = NVM.CMD;
     97e:	1a 85       	ldd	r17, Y+10	; 0x0a
	NVM.CMD = nvm_command;
     980:	85 e3       	ldi	r24, 0x35	; 53
     982:	8a 87       	std	Y+10, r24	; 0x0a
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
     984:	61 e0       	ldi	r22, 0x01	; 1
     986:	8b ec       	ldi	r24, 0xCB	; 203
     988:	91 e0       	ldi	r25, 0x01	; 1
     98a:	69 df       	rcall	.-302    	; 0x85e <ccp_write_io>
	NVM.CMD = old_cmd;
     98c:	1a 87       	std	Y+10, r17	; 0x0a

	// Issue EEPROM Atomic Write (Erase&Write) command
	nvm_issue_command(NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc);
}
     98e:	df 91       	pop	r29
     990:	cf 91       	pop	r28
     992:	1f 91       	pop	r17
     994:	08 95       	ret

00000996 <nvm_eeprom_erase_and_write_buffer>:
 * \param address   the address to where to write
 * \param buf       pointer to the data
 * \param len       the number of bytes to write
 */
void nvm_eeprom_erase_and_write_buffer(eeprom_addr_t address, const void *buf, uint16_t len)
{
     996:	cf 92       	push	r12
     998:	df 92       	push	r13
     99a:	ef 92       	push	r14
     99c:	ff 92       	push	r15
     99e:	0f 93       	push	r16
     9a0:	1f 93       	push	r17
     9a2:	cf 93       	push	r28
     9a4:	df 93       	push	r29
     9a6:	ec 01       	movw	r28, r24
     9a8:	7b 01       	movw	r14, r22
     9aa:	8a 01       	movw	r16, r20
	while (len) {
     9ac:	41 15       	cp	r20, r1
     9ae:	51 05       	cpc	r21, r1
     9b0:	51 f1       	breq	.+84     	; 0xa06 <nvm_eeprom_erase_and_write_buffer+0x70>
		if (((address%EEPROM_PAGE_SIZE)==0) && (len>=EEPROM_PAGE_SIZE)) {
     9b2:	ce 01       	movw	r24, r28
     9b4:	8f 71       	andi	r24, 0x1F	; 31
     9b6:	99 27       	eor	r25, r25
     9b8:	89 2b       	or	r24, r25
     9ba:	b1 f4       	brne	.+44     	; 0x9e8 <nvm_eeprom_erase_and_write_buffer+0x52>
     9bc:	00 32       	cpi	r16, 0x20	; 32
     9be:	11 05       	cpc	r17, r1
     9c0:	98 f0       	brcs	.+38     	; 0x9e8 <nvm_eeprom_erase_and_write_buffer+0x52>
			// A full page can be written
			nvm_eeprom_load_page_to_buffer((uint8_t*)buf);
     9c2:	c7 01       	movw	r24, r14
     9c4:	ac df       	rcall	.-168    	; 0x91e <nvm_eeprom_load_page_to_buffer>
			nvm_eeprom_atomic_write_page(address/EEPROM_PAGE_SIZE);
     9c6:	ce 01       	movw	r24, r28
     9c8:	96 95       	lsr	r25
     9ca:	87 95       	ror	r24
     9cc:	92 95       	swap	r25
     9ce:	82 95       	swap	r24
     9d0:	8f 70       	andi	r24, 0x0F	; 15
     9d2:	89 27       	eor	r24, r25
     9d4:	9f 70       	andi	r25, 0x0F	; 15
     9d6:	89 27       	eor	r24, r25
     9d8:	c1 df       	rcall	.-126    	; 0x95c <nvm_eeprom_atomic_write_page>
			address += EEPROM_PAGE_SIZE;
     9da:	a0 96       	adiw	r28, 0x20	; 32
			buf = (uint8_t*)buf + EEPROM_PAGE_SIZE;
     9dc:	80 e2       	ldi	r24, 0x20	; 32
     9de:	e8 0e       	add	r14, r24
     9e0:	f1 1c       	adc	r15, r1
			len -= EEPROM_PAGE_SIZE;
     9e2:	00 52       	subi	r16, 0x20	; 32
     9e4:	11 09       	sbc	r17, r1
     9e6:	0c c0       	rjmp	.+24     	; 0xa00 <nvm_eeprom_erase_and_write_buffer+0x6a>
		} else {
			nvm_eeprom_write_byte(address++, *(uint8_t*)buf);
     9e8:	6e 01       	movw	r12, r28
     9ea:	ef ef       	ldi	r30, 0xFF	; 255
     9ec:	ce 1a       	sub	r12, r30
     9ee:	de 0a       	sbc	r13, r30
     9f0:	f7 01       	movw	r30, r14
     9f2:	61 91       	ld	r22, Z+
     9f4:	7f 01       	movw	r14, r30
     9f6:	ce 01       	movw	r24, r28
     9f8:	6c df       	rcall	.-296    	; 0x8d2 <nvm_eeprom_write_byte>
			buf = (uint8_t*)buf + 1;
			len--;
     9fa:	01 50       	subi	r16, 0x01	; 1
     9fc:	11 09       	sbc	r17, r1
			nvm_eeprom_atomic_write_page(address/EEPROM_PAGE_SIZE);
			address += EEPROM_PAGE_SIZE;
			buf = (uint8_t*)buf + EEPROM_PAGE_SIZE;
			len -= EEPROM_PAGE_SIZE;
		} else {
			nvm_eeprom_write_byte(address++, *(uint8_t*)buf);
     9fe:	e6 01       	movw	r28, r12
 * \param buf       pointer to the data
 * \param len       the number of bytes to write
 */
void nvm_eeprom_erase_and_write_buffer(eeprom_addr_t address, const void *buf, uint16_t len)
{
	while (len) {
     a00:	01 15       	cp	r16, r1
     a02:	11 05       	cpc	r17, r1
     a04:	b1 f6       	brne	.-84     	; 0x9b2 <nvm_eeprom_erase_and_write_buffer+0x1c>
			nvm_eeprom_write_byte(address++, *(uint8_t*)buf);
			buf = (uint8_t*)buf + 1;
			len--;
		}
	}
}
     a06:	df 91       	pop	r29
     a08:	cf 91       	pop	r28
     a0a:	1f 91       	pop	r17
     a0c:	0f 91       	pop	r16
     a0e:	ff 90       	pop	r15
     a10:	ef 90       	pop	r14
     a12:	df 90       	pop	r13
     a14:	cf 90       	pop	r12
     a16:	08 95       	ret

00000a18 <rtc_set_time>:
 *
 * \param time Time value to set
 */
void rtc_set_time(uint32_t time)
{
	RTC.CTRL = RTC_PRESCALER_OFF_gc;
     a18:	10 92 00 04 	sts	0x0400, r1
 * \brief Check if RTC is busy synchronizing
 */
__always_inline bool rtc_is_busy(void);
__always_inline bool rtc_is_busy(void)
{
	return RTC.STATUS & RTC_SYNCBUSY_bm;
     a1c:	e0 e0       	ldi	r30, 0x00	; 0
     a1e:	f4 e0       	ldi	r31, 0x04	; 4
     a20:	21 81       	ldd	r18, Z+1	; 0x01
 */
void rtc_set_time(uint32_t time)
{
	RTC.CTRL = RTC_PRESCALER_OFF_gc;

	while (rtc_is_busy());
     a22:	20 fd       	sbrc	r18, 0
     a24:	fd cf       	rjmp	.-6      	; 0xa20 <rtc_set_time+0x8>

	RTC.CNT = time;
     a26:	e0 e0       	ldi	r30, 0x00	; 0
     a28:	f4 e0       	ldi	r31, 0x04	; 4
     a2a:	60 87       	std	Z+8, r22	; 0x08
     a2c:	71 87       	std	Z+9, r23	; 0x09
	rtc_data.counter_high = time >> 16;
     a2e:	80 93 ee 22 	sts	0x22EE, r24
     a32:	90 93 ef 22 	sts	0x22EF, r25
	RTC.CTRL = CONFIG_RTC_PRESCALER;
     a36:	87 e0       	ldi	r24, 0x07	; 7
     a38:	80 83       	st	Z, r24
     a3a:	08 95       	ret

00000a3c <rtc_get_time>:
 *       sleep.
 * \note Without this errata this function can block for up to 1 RTC
 *       clock source cycle after waking up from sleep.
 */
uint32_t rtc_get_time(void)
{
     a3c:	0f 93       	push	r16
     a3e:	1f 93       	push	r17
 * \brief Check if RTC is busy synchronizing
 */
__always_inline bool rtc_is_busy(void);
__always_inline bool rtc_is_busy(void)
{
	return RTC.STATUS & RTC_SYNCBUSY_bm;
     a40:	e0 e0       	ldi	r30, 0x00	; 0
     a42:	f4 e0       	ldi	r31, 0x04	; 4
     a44:	81 81       	ldd	r24, Z+1	; 0x01
{
	irqflags_t flags;
	uint16_t   count_high;
	uint16_t   count_low;

	while (rtc_is_busy());
     a46:	80 fd       	sbrc	r24, 0
     a48:	fd cf       	rjmp	.-6      	; 0xa44 <rtc_get_time+0x8>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     a4a:	2f b7       	in	r18, 0x3f	; 63
	cpu_irq_disable();
     a4c:	f8 94       	cli

	flags = cpu_irq_save();
	count_high = rtc_data.counter_high;
     a4e:	00 91 ee 22 	lds	r16, 0x22EE
     a52:	10 91 ef 22 	lds	r17, 0x22EF
	count_low = RTC.CNT;
     a56:	e0 e0       	ldi	r30, 0x00	; 0
     a58:	f4 e0       	ldi	r31, 0x04	; 4
     a5a:	80 85       	ldd	r24, Z+8	; 0x08
     a5c:	91 85       	ldd	r25, Z+9	; 0x09
	// Test for possible pending increase of high count value
	if ((count_low == 0) && (RTC.INTFLAGS & RTC_OVFIF_bm))
     a5e:	00 97       	sbiw	r24, 0x00	; 0
     a60:	29 f4       	brne	.+10     	; 0xa6c <rtc_get_time+0x30>
     a62:	33 81       	ldd	r19, Z+3	; 0x03
     a64:	30 ff       	sbrs	r19, 0
     a66:	02 c0       	rjmp	.+4      	; 0xa6c <rtc_get_time+0x30>
		count_high++;
     a68:	0f 5f       	subi	r16, 0xFF	; 255
     a6a:	1f 4f       	sbci	r17, 0xFF	; 255
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     a6c:	2f bf       	out	0x3f, r18	; 63
	cpu_irq_restore(flags);

	return ((uint32_t)count_high << 16) | count_low;
     a6e:	20 e0       	ldi	r18, 0x00	; 0
     a70:	30 e0       	ldi	r19, 0x00	; 0
     a72:	98 01       	movw	r18, r16
     a74:	11 27       	eor	r17, r17
     a76:	00 27       	eor	r16, r16
     a78:	a0 e0       	ldi	r26, 0x00	; 0
     a7a:	b0 e0       	ldi	r27, 0x00	; 0
     a7c:	08 2b       	or	r16, r24
     a7e:	19 2b       	or	r17, r25
     a80:	2a 2b       	or	r18, r26
     a82:	3b 2b       	or	r19, r27
}
     a84:	60 2f       	mov	r22, r16
     a86:	71 2f       	mov	r23, r17
     a88:	82 2f       	mov	r24, r18
     a8a:	93 2f       	mov	r25, r19
     a8c:	1f 91       	pop	r17
     a8e:	0f 91       	pop	r16
     a90:	08 95       	ret

00000a92 <rtc_set_alarm>:
 * \param time Absolute time value. See also \ref rtc_min_alarm_time
 * \pre Needs interrupts disabled if used from several contexts
 */
void rtc_set_alarm(uint32_t time)
{
	RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
     a92:	e0 e0       	ldi	r30, 0x00	; 0
     a94:	f4 e0       	ldi	r31, 0x04	; 4
     a96:	21 e0       	ldi	r18, 0x01	; 1
     a98:	22 83       	std	Z+2, r18	; 0x02
	RTC.COMP = time;
     a9a:	64 87       	std	Z+12, r22	; 0x0c
     a9c:	75 87       	std	Z+13, r23	; 0x0d
	rtc_data.alarm_low = time;
     a9e:	60 93 f2 22 	sts	0x22F2, r22
     aa2:	70 93 f3 22 	sts	0x22F3, r23
	rtc_data.alarm_high = time >> 16;
     aa6:	80 93 f0 22 	sts	0x22F0, r24
     aaa:	90 93 f1 22 	sts	0x22F1, r25
 * \brief Check if RTC is busy synchronizing
 */
__always_inline bool rtc_is_busy(void);
__always_inline bool rtc_is_busy(void)
{
	return RTC.STATUS & RTC_SYNCBUSY_bm;
     aae:	81 81       	ldd	r24, Z+1	; 0x01
	RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
	RTC.COMP = time;
	rtc_data.alarm_low = time;
	rtc_data.alarm_high = time >> 16;

	while (rtc_is_busy());
     ab0:	80 fd       	sbrc	r24, 0
     ab2:	fd cf       	rjmp	.-6      	; 0xaae <rtc_set_alarm+0x1c>

	RTC.INTFLAGS = RTC_COMPIF_bm;
     ab4:	e0 e0       	ldi	r30, 0x00	; 0
     ab6:	f4 e0       	ldi	r31, 0x04	; 4
     ab8:	82 e0       	ldi	r24, 0x02	; 2
     aba:	83 83       	std	Z+3, r24	; 0x03
	RTC.INTCTRL = (uint8_t)RTC_COMPARE_INT_LEVEL
     abc:	85 e0       	ldi	r24, 0x05	; 5
     abe:	82 83       	std	Z+2, r24	; 0x02
     ac0:	08 95       	ret

00000ac2 <rtc_set_callback>:
 *
 * \param callback Callback function pointer
 */
void rtc_set_callback(rtc_callback_t callback)
{
	rtc_data.callback = callback;
     ac2:	80 93 f4 22 	sts	0x22F4, r24
     ac6:	90 93 f5 22 	sts	0x22F5, r25
     aca:	08 95       	ret

00000acc <rtc_init>:
 * \note The RTC clock source used by the RTC module should be set up before
 *       calling this function. 
 */
void rtc_init(void)
{
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
     acc:	64 e0       	ldi	r22, 0x04	; 4
     ace:	80 e0       	ldi	r24, 0x00	; 0
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	92 de       	rcall	.-732    	; 0x7f8 <sysclk_enable_module>
	RTC.PER = 0xffff;
     ad4:	e0 e0       	ldi	r30, 0x00	; 0
     ad6:	f4 e0       	ldi	r31, 0x04	; 4
     ad8:	8f ef       	ldi	r24, 0xFF	; 255
     ada:	9f ef       	ldi	r25, 0xFF	; 255
     adc:	82 87       	std	Z+10, r24	; 0x0a
     ade:	93 87       	std	Z+11, r25	; 0x0b
	RTC.CNT = 0;
     ae0:	10 86       	std	Z+8, r1	; 0x08
     ae2:	11 86       	std	Z+9, r1	; 0x09

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     ae4:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     ae6:	f8 94       	cli
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
     ae8:	ab ee       	ldi	r26, 0xEB	; 235
     aea:	b2 e2       	ldi	r27, 0x22	; 34
     aec:	9c 91       	ld	r25, X
     aee:	9f 5f       	subi	r25, 0xFF	; 255
     af0:	9c 93       	st	X, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     af2:	8f bf       	out	0x3f, r24	; 63
	/* Since overflow interrupt is needed all the time we limit sleep to
	 * power-save.
	 */
	sleepmgr_lock_mode(SLEEPMGR_PSAVE);
	RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
     af4:	81 e0       	ldi	r24, 0x01	; 1
     af6:	82 83       	std	Z+2, r24	; 0x02
	RTC.CTRL = CONFIG_RTC_PRESCALER;
     af8:	87 e0       	ldi	r24, 0x07	; 7
     afa:	80 83       	st	Z, r24
     afc:	08 95       	ret

00000afe <__vector_10>:
/**
 * \internal
 * \brief Overflow interrupt handling high counter
 */
ISR(RTC_OVF_vect)
{
     afe:	1f 92       	push	r1
     b00:	0f 92       	push	r0
     b02:	0f b6       	in	r0, 0x3f	; 63
     b04:	0f 92       	push	r0
     b06:	11 24       	eor	r1, r1
     b08:	8f 93       	push	r24
     b0a:	9f 93       	push	r25
     b0c:	ef 93       	push	r30
     b0e:	ff 93       	push	r31
	rtc_data.counter_high++;
     b10:	ee ee       	ldi	r30, 0xEE	; 238
     b12:	f2 e2       	ldi	r31, 0x22	; 34
     b14:	80 81       	ld	r24, Z
     b16:	91 81       	ldd	r25, Z+1	; 0x01
     b18:	01 96       	adiw	r24, 0x01	; 1
     b1a:	80 83       	st	Z, r24
     b1c:	91 83       	std	Z+1, r25	; 0x01
}
     b1e:	ff 91       	pop	r31
     b20:	ef 91       	pop	r30
     b22:	9f 91       	pop	r25
     b24:	8f 91       	pop	r24
     b26:	0f 90       	pop	r0
     b28:	0f be       	out	0x3f, r0	; 63
     b2a:	0f 90       	pop	r0
     b2c:	1f 90       	pop	r1
     b2e:	18 95       	reti

00000b30 <__vector_11>:
/**
 * \internal
 * \brief Compare interrupt used for alarm
 */
ISR(RTC_COMP_vect)
{
     b30:	1f 92       	push	r1
     b32:	0f 92       	push	r0
     b34:	0f b6       	in	r0, 0x3f	; 63
     b36:	0f 92       	push	r0
     b38:	11 24       	eor	r1, r1
     b3a:	cf 92       	push	r12
     b3c:	df 92       	push	r13
     b3e:	ef 92       	push	r14
     b40:	ff 92       	push	r15
     b42:	0f 93       	push	r16
     b44:	1f 93       	push	r17
     b46:	2f 93       	push	r18
     b48:	3f 93       	push	r19
     b4a:	4f 93       	push	r20
     b4c:	5f 93       	push	r21
     b4e:	6f 93       	push	r22
     b50:	7f 93       	push	r23
     b52:	8f 93       	push	r24
     b54:	9f 93       	push	r25
     b56:	af 93       	push	r26
     b58:	bf 93       	push	r27
     b5a:	ef 93       	push	r30
     b5c:	ff 93       	push	r31
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
     b5e:	40 91 ee 22 	lds	r20, 0x22EE
     b62:	50 91 ef 22 	lds	r21, 0x22EF
     b66:	80 91 f0 22 	lds	r24, 0x22F0
     b6a:	90 91 f1 22 	lds	r25, 0x22F1
     b6e:	48 17       	cp	r20, r24
     b70:	59 07       	cpc	r21, r25
     b72:	f0 f1       	brcs	.+124    	; 0xbf0 <__vector_11+0xc0>
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	e0 e0       	ldi	r30, 0x00	; 0
     b78:	f4 e0       	ldi	r31, 0x04	; 4
     b7a:	82 83       	std	Z+2, r24	; 0x02
		if (rtc_data.callback) {
     b7c:	e0 91 f4 22 	lds	r30, 0x22F4
     b80:	f0 91 f5 22 	lds	r31, 0x22F5
     b84:	30 97       	sbiw	r30, 0x00	; 0
     b86:	a1 f1       	breq	.+104    	; 0xbf0 <__vector_11+0xc0>
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
					| RTC.CNT;
     b88:	a0 e0       	ldi	r26, 0x00	; 0
     b8a:	b4 e0       	ldi	r27, 0x04	; 4
     b8c:	18 96       	adiw	r26, 0x08	; 8
     b8e:	8d 91       	ld	r24, X+
     b90:	9c 91       	ld	r25, X
     b92:	19 97       	sbiw	r26, 0x09	; 9
ISR(RTC_COMP_vect)
{
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
     b94:	60 e0       	ldi	r22, 0x00	; 0
     b96:	70 e0       	ldi	r23, 0x00	; 0
     b98:	ba 01       	movw	r22, r20
     b9a:	55 27       	eor	r21, r21
     b9c:	44 27       	eor	r20, r20
					| RTC.CNT;
     b9e:	a0 e0       	ldi	r26, 0x00	; 0
     ba0:	b0 e0       	ldi	r27, 0x00	; 0
ISR(RTC_COMP_vect)
{
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
     ba2:	8a 01       	movw	r16, r20
     ba4:	9b 01       	movw	r18, r22
     ba6:	08 2b       	or	r16, r24
     ba8:	19 2b       	or	r17, r25
     baa:	2a 2b       	or	r18, r26
     bac:	3b 2b       	or	r19, r27
     bae:	c9 01       	movw	r24, r18
     bb0:	b8 01       	movw	r22, r16
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
     bb2:	00 91 f0 22 	lds	r16, 0x22F0
     bb6:	10 91 f1 22 	lds	r17, 0x22F1
     bba:	20 e0       	ldi	r18, 0x00	; 0
     bbc:	30 e0       	ldi	r19, 0x00	; 0
     bbe:	98 01       	movw	r18, r16
     bc0:	11 27       	eor	r17, r17
     bc2:	00 27       	eor	r16, r16
					| rtc_data.alarm_low;
     bc4:	c0 90 f2 22 	lds	r12, 0x22F2
     bc8:	d0 90 f3 22 	lds	r13, 0x22F3
     bcc:	e1 2c       	mov	r14, r1
     bce:	f1 2c       	mov	r15, r1
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
     bd0:	0c 29       	or	r16, r12
     bd2:	1d 29       	or	r17, r13
     bd4:	2e 29       	or	r18, r14
     bd6:	3f 29       	or	r19, r15
					| rtc_data.alarm_low;
			/* Workaround for errata. Count might not be updated
			 * when waking up from sleep, so in this case use alarm
			 * time plus one.
			 */
			if (alarm >= count)
     bd8:	06 17       	cp	r16, r22
     bda:	17 07       	cpc	r17, r23
     bdc:	28 07       	cpc	r18, r24
     bde:	39 07       	cpc	r19, r25
     be0:	30 f0       	brcs	.+12     	; 0xbee <__vector_11+0xbe>
				count = alarm + 1;
     be2:	c9 01       	movw	r24, r18
     be4:	b8 01       	movw	r22, r16
     be6:	6f 5f       	subi	r22, 0xFF	; 255
     be8:	7f 4f       	sbci	r23, 0xFF	; 255
     bea:	8f 4f       	sbci	r24, 0xFF	; 255
     bec:	9f 4f       	sbci	r25, 0xFF	; 255
			rtc_data.callback(count);
     bee:	09 95       	icall
		}
	}
}
     bf0:	ff 91       	pop	r31
     bf2:	ef 91       	pop	r30
     bf4:	bf 91       	pop	r27
     bf6:	af 91       	pop	r26
     bf8:	9f 91       	pop	r25
     bfa:	8f 91       	pop	r24
     bfc:	7f 91       	pop	r23
     bfe:	6f 91       	pop	r22
     c00:	5f 91       	pop	r21
     c02:	4f 91       	pop	r20
     c04:	3f 91       	pop	r19
     c06:	2f 91       	pop	r18
     c08:	1f 91       	pop	r17
     c0a:	0f 91       	pop	r16
     c0c:	ff 90       	pop	r15
     c0e:	ef 90       	pop	r14
     c10:	df 90       	pop	r13
     c12:	cf 90       	pop	r12
     c14:	0f 90       	pop	r0
     c16:	0f be       	out	0x3f, r0	; 63
     c18:	0f 90       	pop	r0
     c1a:	1f 90       	pop	r1
     c1c:	18 95       	reti

00000c1e <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
     c1e:	1f 92       	push	r1
     c20:	0f 92       	push	r0
     c22:	0f b6       	in	r0, 0x3f	; 63
     c24:	0f 92       	push	r0
     c26:	11 24       	eor	r1, r1
     c28:	2f 93       	push	r18
     c2a:	3f 93       	push	r19
     c2c:	4f 93       	push	r20
     c2e:	5f 93       	push	r21
     c30:	6f 93       	push	r22
     c32:	7f 93       	push	r23
     c34:	8f 93       	push	r24
     c36:	9f 93       	push	r25
     c38:	af 93       	push	r26
     c3a:	bf 93       	push	r27
     c3c:	ef 93       	push	r30
     c3e:	ff 93       	push	r31
	if (tc_tcc0_ovf_callback) {
     c40:	e0 91 86 22 	lds	r30, 0x2286
     c44:	f0 91 87 22 	lds	r31, 0x2287
     c48:	30 97       	sbiw	r30, 0x00	; 0
     c4a:	09 f0       	breq	.+2      	; 0xc4e <__vector_14+0x30>
		tc_tcc0_ovf_callback();
     c4c:	09 95       	icall
	}
}
     c4e:	ff 91       	pop	r31
     c50:	ef 91       	pop	r30
     c52:	bf 91       	pop	r27
     c54:	af 91       	pop	r26
     c56:	9f 91       	pop	r25
     c58:	8f 91       	pop	r24
     c5a:	7f 91       	pop	r23
     c5c:	6f 91       	pop	r22
     c5e:	5f 91       	pop	r21
     c60:	4f 91       	pop	r20
     c62:	3f 91       	pop	r19
     c64:	2f 91       	pop	r18
     c66:	0f 90       	pop	r0
     c68:	0f be       	out	0x3f, r0	; 63
     c6a:	0f 90       	pop	r0
     c6c:	1f 90       	pop	r1
     c6e:	18 95       	reti

00000c70 <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
     c70:	1f 92       	push	r1
     c72:	0f 92       	push	r0
     c74:	0f b6       	in	r0, 0x3f	; 63
     c76:	0f 92       	push	r0
     c78:	11 24       	eor	r1, r1
     c7a:	2f 93       	push	r18
     c7c:	3f 93       	push	r19
     c7e:	4f 93       	push	r20
     c80:	5f 93       	push	r21
     c82:	6f 93       	push	r22
     c84:	7f 93       	push	r23
     c86:	8f 93       	push	r24
     c88:	9f 93       	push	r25
     c8a:	af 93       	push	r26
     c8c:	bf 93       	push	r27
     c8e:	ef 93       	push	r30
     c90:	ff 93       	push	r31
	if (tc_tcc0_err_callback) {
     c92:	e0 91 88 22 	lds	r30, 0x2288
     c96:	f0 91 89 22 	lds	r31, 0x2289
     c9a:	30 97       	sbiw	r30, 0x00	; 0
     c9c:	09 f0       	breq	.+2      	; 0xca0 <__vector_15+0x30>
		tc_tcc0_err_callback();
     c9e:	09 95       	icall
	}
}
     ca0:	ff 91       	pop	r31
     ca2:	ef 91       	pop	r30
     ca4:	bf 91       	pop	r27
     ca6:	af 91       	pop	r26
     ca8:	9f 91       	pop	r25
     caa:	8f 91       	pop	r24
     cac:	7f 91       	pop	r23
     cae:	6f 91       	pop	r22
     cb0:	5f 91       	pop	r21
     cb2:	4f 91       	pop	r20
     cb4:	3f 91       	pop	r19
     cb6:	2f 91       	pop	r18
     cb8:	0f 90       	pop	r0
     cba:	0f be       	out	0x3f, r0	; 63
     cbc:	0f 90       	pop	r0
     cbe:	1f 90       	pop	r1
     cc0:	18 95       	reti

00000cc2 <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
     cc2:	1f 92       	push	r1
     cc4:	0f 92       	push	r0
     cc6:	0f b6       	in	r0, 0x3f	; 63
     cc8:	0f 92       	push	r0
     cca:	11 24       	eor	r1, r1
     ccc:	2f 93       	push	r18
     cce:	3f 93       	push	r19
     cd0:	4f 93       	push	r20
     cd2:	5f 93       	push	r21
     cd4:	6f 93       	push	r22
     cd6:	7f 93       	push	r23
     cd8:	8f 93       	push	r24
     cda:	9f 93       	push	r25
     cdc:	af 93       	push	r26
     cde:	bf 93       	push	r27
     ce0:	ef 93       	push	r30
     ce2:	ff 93       	push	r31
	if (tc_tcc0_cca_callback) {
     ce4:	e0 91 8a 22 	lds	r30, 0x228A
     ce8:	f0 91 8b 22 	lds	r31, 0x228B
     cec:	30 97       	sbiw	r30, 0x00	; 0
     cee:	09 f0       	breq	.+2      	; 0xcf2 <__vector_16+0x30>
		tc_tcc0_cca_callback();
     cf0:	09 95       	icall
	}
}
     cf2:	ff 91       	pop	r31
     cf4:	ef 91       	pop	r30
     cf6:	bf 91       	pop	r27
     cf8:	af 91       	pop	r26
     cfa:	9f 91       	pop	r25
     cfc:	8f 91       	pop	r24
     cfe:	7f 91       	pop	r23
     d00:	6f 91       	pop	r22
     d02:	5f 91       	pop	r21
     d04:	4f 91       	pop	r20
     d06:	3f 91       	pop	r19
     d08:	2f 91       	pop	r18
     d0a:	0f 90       	pop	r0
     d0c:	0f be       	out	0x3f, r0	; 63
     d0e:	0f 90       	pop	r0
     d10:	1f 90       	pop	r1
     d12:	18 95       	reti

00000d14 <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
     d14:	1f 92       	push	r1
     d16:	0f 92       	push	r0
     d18:	0f b6       	in	r0, 0x3f	; 63
     d1a:	0f 92       	push	r0
     d1c:	11 24       	eor	r1, r1
     d1e:	2f 93       	push	r18
     d20:	3f 93       	push	r19
     d22:	4f 93       	push	r20
     d24:	5f 93       	push	r21
     d26:	6f 93       	push	r22
     d28:	7f 93       	push	r23
     d2a:	8f 93       	push	r24
     d2c:	9f 93       	push	r25
     d2e:	af 93       	push	r26
     d30:	bf 93       	push	r27
     d32:	ef 93       	push	r30
     d34:	ff 93       	push	r31
	if (tc_tcc0_ccb_callback) {
     d36:	e0 91 8c 22 	lds	r30, 0x228C
     d3a:	f0 91 8d 22 	lds	r31, 0x228D
     d3e:	30 97       	sbiw	r30, 0x00	; 0
     d40:	09 f0       	breq	.+2      	; 0xd44 <__vector_17+0x30>
		tc_tcc0_ccb_callback();
     d42:	09 95       	icall
	}
}
     d44:	ff 91       	pop	r31
     d46:	ef 91       	pop	r30
     d48:	bf 91       	pop	r27
     d4a:	af 91       	pop	r26
     d4c:	9f 91       	pop	r25
     d4e:	8f 91       	pop	r24
     d50:	7f 91       	pop	r23
     d52:	6f 91       	pop	r22
     d54:	5f 91       	pop	r21
     d56:	4f 91       	pop	r20
     d58:	3f 91       	pop	r19
     d5a:	2f 91       	pop	r18
     d5c:	0f 90       	pop	r0
     d5e:	0f be       	out	0x3f, r0	; 63
     d60:	0f 90       	pop	r0
     d62:	1f 90       	pop	r1
     d64:	18 95       	reti

00000d66 <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
     d66:	1f 92       	push	r1
     d68:	0f 92       	push	r0
     d6a:	0f b6       	in	r0, 0x3f	; 63
     d6c:	0f 92       	push	r0
     d6e:	11 24       	eor	r1, r1
     d70:	2f 93       	push	r18
     d72:	3f 93       	push	r19
     d74:	4f 93       	push	r20
     d76:	5f 93       	push	r21
     d78:	6f 93       	push	r22
     d7a:	7f 93       	push	r23
     d7c:	8f 93       	push	r24
     d7e:	9f 93       	push	r25
     d80:	af 93       	push	r26
     d82:	bf 93       	push	r27
     d84:	ef 93       	push	r30
     d86:	ff 93       	push	r31
	if (tc_tcc0_ccc_callback) {
     d88:	e0 91 8e 22 	lds	r30, 0x228E
     d8c:	f0 91 8f 22 	lds	r31, 0x228F
     d90:	30 97       	sbiw	r30, 0x00	; 0
     d92:	09 f0       	breq	.+2      	; 0xd96 <__vector_18+0x30>
		tc_tcc0_ccc_callback();
     d94:	09 95       	icall
	}
}
     d96:	ff 91       	pop	r31
     d98:	ef 91       	pop	r30
     d9a:	bf 91       	pop	r27
     d9c:	af 91       	pop	r26
     d9e:	9f 91       	pop	r25
     da0:	8f 91       	pop	r24
     da2:	7f 91       	pop	r23
     da4:	6f 91       	pop	r22
     da6:	5f 91       	pop	r21
     da8:	4f 91       	pop	r20
     daa:	3f 91       	pop	r19
     dac:	2f 91       	pop	r18
     dae:	0f 90       	pop	r0
     db0:	0f be       	out	0x3f, r0	; 63
     db2:	0f 90       	pop	r0
     db4:	1f 90       	pop	r1
     db6:	18 95       	reti

00000db8 <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
     db8:	1f 92       	push	r1
     dba:	0f 92       	push	r0
     dbc:	0f b6       	in	r0, 0x3f	; 63
     dbe:	0f 92       	push	r0
     dc0:	11 24       	eor	r1, r1
     dc2:	2f 93       	push	r18
     dc4:	3f 93       	push	r19
     dc6:	4f 93       	push	r20
     dc8:	5f 93       	push	r21
     dca:	6f 93       	push	r22
     dcc:	7f 93       	push	r23
     dce:	8f 93       	push	r24
     dd0:	9f 93       	push	r25
     dd2:	af 93       	push	r26
     dd4:	bf 93       	push	r27
     dd6:	ef 93       	push	r30
     dd8:	ff 93       	push	r31
	if (tc_tcc0_ccd_callback) {
     dda:	e0 91 90 22 	lds	r30, 0x2290
     dde:	f0 91 91 22 	lds	r31, 0x2291
     de2:	30 97       	sbiw	r30, 0x00	; 0
     de4:	09 f0       	breq	.+2      	; 0xde8 <__vector_19+0x30>
		tc_tcc0_ccd_callback();
     de6:	09 95       	icall
	}
}
     de8:	ff 91       	pop	r31
     dea:	ef 91       	pop	r30
     dec:	bf 91       	pop	r27
     dee:	af 91       	pop	r26
     df0:	9f 91       	pop	r25
     df2:	8f 91       	pop	r24
     df4:	7f 91       	pop	r23
     df6:	6f 91       	pop	r22
     df8:	5f 91       	pop	r21
     dfa:	4f 91       	pop	r20
     dfc:	3f 91       	pop	r19
     dfe:	2f 91       	pop	r18
     e00:	0f 90       	pop	r0
     e02:	0f be       	out	0x3f, r0	; 63
     e04:	0f 90       	pop	r0
     e06:	1f 90       	pop	r1
     e08:	18 95       	reti

00000e0a <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
     e0a:	1f 92       	push	r1
     e0c:	0f 92       	push	r0
     e0e:	0f b6       	in	r0, 0x3f	; 63
     e10:	0f 92       	push	r0
     e12:	11 24       	eor	r1, r1
     e14:	2f 93       	push	r18
     e16:	3f 93       	push	r19
     e18:	4f 93       	push	r20
     e1a:	5f 93       	push	r21
     e1c:	6f 93       	push	r22
     e1e:	7f 93       	push	r23
     e20:	8f 93       	push	r24
     e22:	9f 93       	push	r25
     e24:	af 93       	push	r26
     e26:	bf 93       	push	r27
     e28:	ef 93       	push	r30
     e2a:	ff 93       	push	r31
	if (tc_tcc1_ovf_callback) {
     e2c:	e0 91 92 22 	lds	r30, 0x2292
     e30:	f0 91 93 22 	lds	r31, 0x2293
     e34:	30 97       	sbiw	r30, 0x00	; 0
     e36:	09 f0       	breq	.+2      	; 0xe3a <__vector_20+0x30>
		tc_tcc1_ovf_callback();
     e38:	09 95       	icall
	}
}
     e3a:	ff 91       	pop	r31
     e3c:	ef 91       	pop	r30
     e3e:	bf 91       	pop	r27
     e40:	af 91       	pop	r26
     e42:	9f 91       	pop	r25
     e44:	8f 91       	pop	r24
     e46:	7f 91       	pop	r23
     e48:	6f 91       	pop	r22
     e4a:	5f 91       	pop	r21
     e4c:	4f 91       	pop	r20
     e4e:	3f 91       	pop	r19
     e50:	2f 91       	pop	r18
     e52:	0f 90       	pop	r0
     e54:	0f be       	out	0x3f, r0	; 63
     e56:	0f 90       	pop	r0
     e58:	1f 90       	pop	r1
     e5a:	18 95       	reti

00000e5c <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
     e5c:	1f 92       	push	r1
     e5e:	0f 92       	push	r0
     e60:	0f b6       	in	r0, 0x3f	; 63
     e62:	0f 92       	push	r0
     e64:	11 24       	eor	r1, r1
     e66:	2f 93       	push	r18
     e68:	3f 93       	push	r19
     e6a:	4f 93       	push	r20
     e6c:	5f 93       	push	r21
     e6e:	6f 93       	push	r22
     e70:	7f 93       	push	r23
     e72:	8f 93       	push	r24
     e74:	9f 93       	push	r25
     e76:	af 93       	push	r26
     e78:	bf 93       	push	r27
     e7a:	ef 93       	push	r30
     e7c:	ff 93       	push	r31
	if (tc_tcc1_err_callback) {
     e7e:	e0 91 94 22 	lds	r30, 0x2294
     e82:	f0 91 95 22 	lds	r31, 0x2295
     e86:	30 97       	sbiw	r30, 0x00	; 0
     e88:	09 f0       	breq	.+2      	; 0xe8c <__vector_21+0x30>
		tc_tcc1_err_callback();
     e8a:	09 95       	icall
	}
}
     e8c:	ff 91       	pop	r31
     e8e:	ef 91       	pop	r30
     e90:	bf 91       	pop	r27
     e92:	af 91       	pop	r26
     e94:	9f 91       	pop	r25
     e96:	8f 91       	pop	r24
     e98:	7f 91       	pop	r23
     e9a:	6f 91       	pop	r22
     e9c:	5f 91       	pop	r21
     e9e:	4f 91       	pop	r20
     ea0:	3f 91       	pop	r19
     ea2:	2f 91       	pop	r18
     ea4:	0f 90       	pop	r0
     ea6:	0f be       	out	0x3f, r0	; 63
     ea8:	0f 90       	pop	r0
     eaa:	1f 90       	pop	r1
     eac:	18 95       	reti

00000eae <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
     eae:	1f 92       	push	r1
     eb0:	0f 92       	push	r0
     eb2:	0f b6       	in	r0, 0x3f	; 63
     eb4:	0f 92       	push	r0
     eb6:	11 24       	eor	r1, r1
     eb8:	2f 93       	push	r18
     eba:	3f 93       	push	r19
     ebc:	4f 93       	push	r20
     ebe:	5f 93       	push	r21
     ec0:	6f 93       	push	r22
     ec2:	7f 93       	push	r23
     ec4:	8f 93       	push	r24
     ec6:	9f 93       	push	r25
     ec8:	af 93       	push	r26
     eca:	bf 93       	push	r27
     ecc:	ef 93       	push	r30
     ece:	ff 93       	push	r31
	if (tc_tcc1_cca_callback) {
     ed0:	e0 91 96 22 	lds	r30, 0x2296
     ed4:	f0 91 97 22 	lds	r31, 0x2297
     ed8:	30 97       	sbiw	r30, 0x00	; 0
     eda:	09 f0       	breq	.+2      	; 0xede <__vector_22+0x30>
		tc_tcc1_cca_callback();
     edc:	09 95       	icall
	}
}
     ede:	ff 91       	pop	r31
     ee0:	ef 91       	pop	r30
     ee2:	bf 91       	pop	r27
     ee4:	af 91       	pop	r26
     ee6:	9f 91       	pop	r25
     ee8:	8f 91       	pop	r24
     eea:	7f 91       	pop	r23
     eec:	6f 91       	pop	r22
     eee:	5f 91       	pop	r21
     ef0:	4f 91       	pop	r20
     ef2:	3f 91       	pop	r19
     ef4:	2f 91       	pop	r18
     ef6:	0f 90       	pop	r0
     ef8:	0f be       	out	0x3f, r0	; 63
     efa:	0f 90       	pop	r0
     efc:	1f 90       	pop	r1
     efe:	18 95       	reti

00000f00 <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
     f00:	1f 92       	push	r1
     f02:	0f 92       	push	r0
     f04:	0f b6       	in	r0, 0x3f	; 63
     f06:	0f 92       	push	r0
     f08:	11 24       	eor	r1, r1
     f0a:	2f 93       	push	r18
     f0c:	3f 93       	push	r19
     f0e:	4f 93       	push	r20
     f10:	5f 93       	push	r21
     f12:	6f 93       	push	r22
     f14:	7f 93       	push	r23
     f16:	8f 93       	push	r24
     f18:	9f 93       	push	r25
     f1a:	af 93       	push	r26
     f1c:	bf 93       	push	r27
     f1e:	ef 93       	push	r30
     f20:	ff 93       	push	r31
	if (tc_tcc1_ccb_callback) {
     f22:	e0 91 98 22 	lds	r30, 0x2298
     f26:	f0 91 99 22 	lds	r31, 0x2299
     f2a:	30 97       	sbiw	r30, 0x00	; 0
     f2c:	09 f0       	breq	.+2      	; 0xf30 <__vector_23+0x30>
		tc_tcc1_ccb_callback();
     f2e:	09 95       	icall
	}
}
     f30:	ff 91       	pop	r31
     f32:	ef 91       	pop	r30
     f34:	bf 91       	pop	r27
     f36:	af 91       	pop	r26
     f38:	9f 91       	pop	r25
     f3a:	8f 91       	pop	r24
     f3c:	7f 91       	pop	r23
     f3e:	6f 91       	pop	r22
     f40:	5f 91       	pop	r21
     f42:	4f 91       	pop	r20
     f44:	3f 91       	pop	r19
     f46:	2f 91       	pop	r18
     f48:	0f 90       	pop	r0
     f4a:	0f be       	out	0x3f, r0	; 63
     f4c:	0f 90       	pop	r0
     f4e:	1f 90       	pop	r1
     f50:	18 95       	reti

00000f52 <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
     f52:	1f 92       	push	r1
     f54:	0f 92       	push	r0
     f56:	0f b6       	in	r0, 0x3f	; 63
     f58:	0f 92       	push	r0
     f5a:	11 24       	eor	r1, r1
     f5c:	2f 93       	push	r18
     f5e:	3f 93       	push	r19
     f60:	4f 93       	push	r20
     f62:	5f 93       	push	r21
     f64:	6f 93       	push	r22
     f66:	7f 93       	push	r23
     f68:	8f 93       	push	r24
     f6a:	9f 93       	push	r25
     f6c:	af 93       	push	r26
     f6e:	bf 93       	push	r27
     f70:	ef 93       	push	r30
     f72:	ff 93       	push	r31
	if (tc_tcd0_ovf_callback) {
     f74:	e0 91 9a 22 	lds	r30, 0x229A
     f78:	f0 91 9b 22 	lds	r31, 0x229B
     f7c:	30 97       	sbiw	r30, 0x00	; 0
     f7e:	09 f0       	breq	.+2      	; 0xf82 <__vector_77+0x30>
		tc_tcd0_ovf_callback();
     f80:	09 95       	icall
	}
}
     f82:	ff 91       	pop	r31
     f84:	ef 91       	pop	r30
     f86:	bf 91       	pop	r27
     f88:	af 91       	pop	r26
     f8a:	9f 91       	pop	r25
     f8c:	8f 91       	pop	r24
     f8e:	7f 91       	pop	r23
     f90:	6f 91       	pop	r22
     f92:	5f 91       	pop	r21
     f94:	4f 91       	pop	r20
     f96:	3f 91       	pop	r19
     f98:	2f 91       	pop	r18
     f9a:	0f 90       	pop	r0
     f9c:	0f be       	out	0x3f, r0	; 63
     f9e:	0f 90       	pop	r0
     fa0:	1f 90       	pop	r1
     fa2:	18 95       	reti

00000fa4 <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
     fa4:	1f 92       	push	r1
     fa6:	0f 92       	push	r0
     fa8:	0f b6       	in	r0, 0x3f	; 63
     faa:	0f 92       	push	r0
     fac:	11 24       	eor	r1, r1
     fae:	2f 93       	push	r18
     fb0:	3f 93       	push	r19
     fb2:	4f 93       	push	r20
     fb4:	5f 93       	push	r21
     fb6:	6f 93       	push	r22
     fb8:	7f 93       	push	r23
     fba:	8f 93       	push	r24
     fbc:	9f 93       	push	r25
     fbe:	af 93       	push	r26
     fc0:	bf 93       	push	r27
     fc2:	ef 93       	push	r30
     fc4:	ff 93       	push	r31
	if (tc_tcd0_err_callback) {
     fc6:	e0 91 9c 22 	lds	r30, 0x229C
     fca:	f0 91 9d 22 	lds	r31, 0x229D
     fce:	30 97       	sbiw	r30, 0x00	; 0
     fd0:	09 f0       	breq	.+2      	; 0xfd4 <__vector_78+0x30>
		tc_tcd0_err_callback();
     fd2:	09 95       	icall
	}
}
     fd4:	ff 91       	pop	r31
     fd6:	ef 91       	pop	r30
     fd8:	bf 91       	pop	r27
     fda:	af 91       	pop	r26
     fdc:	9f 91       	pop	r25
     fde:	8f 91       	pop	r24
     fe0:	7f 91       	pop	r23
     fe2:	6f 91       	pop	r22
     fe4:	5f 91       	pop	r21
     fe6:	4f 91       	pop	r20
     fe8:	3f 91       	pop	r19
     fea:	2f 91       	pop	r18
     fec:	0f 90       	pop	r0
     fee:	0f be       	out	0x3f, r0	; 63
     ff0:	0f 90       	pop	r0
     ff2:	1f 90       	pop	r1
     ff4:	18 95       	reti

00000ff6 <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
     ff6:	1f 92       	push	r1
     ff8:	0f 92       	push	r0
     ffa:	0f b6       	in	r0, 0x3f	; 63
     ffc:	0f 92       	push	r0
     ffe:	11 24       	eor	r1, r1
    1000:	2f 93       	push	r18
    1002:	3f 93       	push	r19
    1004:	4f 93       	push	r20
    1006:	5f 93       	push	r21
    1008:	6f 93       	push	r22
    100a:	7f 93       	push	r23
    100c:	8f 93       	push	r24
    100e:	9f 93       	push	r25
    1010:	af 93       	push	r26
    1012:	bf 93       	push	r27
    1014:	ef 93       	push	r30
    1016:	ff 93       	push	r31
	if (tc_tcd0_cca_callback) {
    1018:	e0 91 9e 22 	lds	r30, 0x229E
    101c:	f0 91 9f 22 	lds	r31, 0x229F
    1020:	30 97       	sbiw	r30, 0x00	; 0
    1022:	09 f0       	breq	.+2      	; 0x1026 <__vector_79+0x30>
		tc_tcd0_cca_callback();
    1024:	09 95       	icall
	}
}
    1026:	ff 91       	pop	r31
    1028:	ef 91       	pop	r30
    102a:	bf 91       	pop	r27
    102c:	af 91       	pop	r26
    102e:	9f 91       	pop	r25
    1030:	8f 91       	pop	r24
    1032:	7f 91       	pop	r23
    1034:	6f 91       	pop	r22
    1036:	5f 91       	pop	r21
    1038:	4f 91       	pop	r20
    103a:	3f 91       	pop	r19
    103c:	2f 91       	pop	r18
    103e:	0f 90       	pop	r0
    1040:	0f be       	out	0x3f, r0	; 63
    1042:	0f 90       	pop	r0
    1044:	1f 90       	pop	r1
    1046:	18 95       	reti

00001048 <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
    1048:	1f 92       	push	r1
    104a:	0f 92       	push	r0
    104c:	0f b6       	in	r0, 0x3f	; 63
    104e:	0f 92       	push	r0
    1050:	11 24       	eor	r1, r1
    1052:	2f 93       	push	r18
    1054:	3f 93       	push	r19
    1056:	4f 93       	push	r20
    1058:	5f 93       	push	r21
    105a:	6f 93       	push	r22
    105c:	7f 93       	push	r23
    105e:	8f 93       	push	r24
    1060:	9f 93       	push	r25
    1062:	af 93       	push	r26
    1064:	bf 93       	push	r27
    1066:	ef 93       	push	r30
    1068:	ff 93       	push	r31
	if (tc_tcd0_ccb_callback) {
    106a:	e0 91 a0 22 	lds	r30, 0x22A0
    106e:	f0 91 a1 22 	lds	r31, 0x22A1
    1072:	30 97       	sbiw	r30, 0x00	; 0
    1074:	09 f0       	breq	.+2      	; 0x1078 <__vector_80+0x30>
		tc_tcd0_ccb_callback();
    1076:	09 95       	icall
	}
}
    1078:	ff 91       	pop	r31
    107a:	ef 91       	pop	r30
    107c:	bf 91       	pop	r27
    107e:	af 91       	pop	r26
    1080:	9f 91       	pop	r25
    1082:	8f 91       	pop	r24
    1084:	7f 91       	pop	r23
    1086:	6f 91       	pop	r22
    1088:	5f 91       	pop	r21
    108a:	4f 91       	pop	r20
    108c:	3f 91       	pop	r19
    108e:	2f 91       	pop	r18
    1090:	0f 90       	pop	r0
    1092:	0f be       	out	0x3f, r0	; 63
    1094:	0f 90       	pop	r0
    1096:	1f 90       	pop	r1
    1098:	18 95       	reti

0000109a <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
    109a:	1f 92       	push	r1
    109c:	0f 92       	push	r0
    109e:	0f b6       	in	r0, 0x3f	; 63
    10a0:	0f 92       	push	r0
    10a2:	11 24       	eor	r1, r1
    10a4:	2f 93       	push	r18
    10a6:	3f 93       	push	r19
    10a8:	4f 93       	push	r20
    10aa:	5f 93       	push	r21
    10ac:	6f 93       	push	r22
    10ae:	7f 93       	push	r23
    10b0:	8f 93       	push	r24
    10b2:	9f 93       	push	r25
    10b4:	af 93       	push	r26
    10b6:	bf 93       	push	r27
    10b8:	ef 93       	push	r30
    10ba:	ff 93       	push	r31
	if (tc_tcd0_ccc_callback) {
    10bc:	e0 91 a2 22 	lds	r30, 0x22A2
    10c0:	f0 91 a3 22 	lds	r31, 0x22A3
    10c4:	30 97       	sbiw	r30, 0x00	; 0
    10c6:	09 f0       	breq	.+2      	; 0x10ca <__vector_81+0x30>
		tc_tcd0_ccc_callback();
    10c8:	09 95       	icall
	}
}
    10ca:	ff 91       	pop	r31
    10cc:	ef 91       	pop	r30
    10ce:	bf 91       	pop	r27
    10d0:	af 91       	pop	r26
    10d2:	9f 91       	pop	r25
    10d4:	8f 91       	pop	r24
    10d6:	7f 91       	pop	r23
    10d8:	6f 91       	pop	r22
    10da:	5f 91       	pop	r21
    10dc:	4f 91       	pop	r20
    10de:	3f 91       	pop	r19
    10e0:	2f 91       	pop	r18
    10e2:	0f 90       	pop	r0
    10e4:	0f be       	out	0x3f, r0	; 63
    10e6:	0f 90       	pop	r0
    10e8:	1f 90       	pop	r1
    10ea:	18 95       	reti

000010ec <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
    10ec:	1f 92       	push	r1
    10ee:	0f 92       	push	r0
    10f0:	0f b6       	in	r0, 0x3f	; 63
    10f2:	0f 92       	push	r0
    10f4:	11 24       	eor	r1, r1
    10f6:	2f 93       	push	r18
    10f8:	3f 93       	push	r19
    10fa:	4f 93       	push	r20
    10fc:	5f 93       	push	r21
    10fe:	6f 93       	push	r22
    1100:	7f 93       	push	r23
    1102:	8f 93       	push	r24
    1104:	9f 93       	push	r25
    1106:	af 93       	push	r26
    1108:	bf 93       	push	r27
    110a:	ef 93       	push	r30
    110c:	ff 93       	push	r31
	if (tc_tcd0_ccd_callback) {
    110e:	e0 91 a4 22 	lds	r30, 0x22A4
    1112:	f0 91 a5 22 	lds	r31, 0x22A5
    1116:	30 97       	sbiw	r30, 0x00	; 0
    1118:	09 f0       	breq	.+2      	; 0x111c <__vector_82+0x30>
		tc_tcd0_ccd_callback();
    111a:	09 95       	icall
	}
}
    111c:	ff 91       	pop	r31
    111e:	ef 91       	pop	r30
    1120:	bf 91       	pop	r27
    1122:	af 91       	pop	r26
    1124:	9f 91       	pop	r25
    1126:	8f 91       	pop	r24
    1128:	7f 91       	pop	r23
    112a:	6f 91       	pop	r22
    112c:	5f 91       	pop	r21
    112e:	4f 91       	pop	r20
    1130:	3f 91       	pop	r19
    1132:	2f 91       	pop	r18
    1134:	0f 90       	pop	r0
    1136:	0f be       	out	0x3f, r0	; 63
    1138:	0f 90       	pop	r0
    113a:	1f 90       	pop	r1
    113c:	18 95       	reti

0000113e <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
    113e:	1f 92       	push	r1
    1140:	0f 92       	push	r0
    1142:	0f b6       	in	r0, 0x3f	; 63
    1144:	0f 92       	push	r0
    1146:	11 24       	eor	r1, r1
    1148:	2f 93       	push	r18
    114a:	3f 93       	push	r19
    114c:	4f 93       	push	r20
    114e:	5f 93       	push	r21
    1150:	6f 93       	push	r22
    1152:	7f 93       	push	r23
    1154:	8f 93       	push	r24
    1156:	9f 93       	push	r25
    1158:	af 93       	push	r26
    115a:	bf 93       	push	r27
    115c:	ef 93       	push	r30
    115e:	ff 93       	push	r31
	if (tc_tcd1_ovf_callback) {
    1160:	e0 91 a6 22 	lds	r30, 0x22A6
    1164:	f0 91 a7 22 	lds	r31, 0x22A7
    1168:	30 97       	sbiw	r30, 0x00	; 0
    116a:	09 f0       	breq	.+2      	; 0x116e <__vector_83+0x30>
		tc_tcd1_ovf_callback();
    116c:	09 95       	icall
	}
}
    116e:	ff 91       	pop	r31
    1170:	ef 91       	pop	r30
    1172:	bf 91       	pop	r27
    1174:	af 91       	pop	r26
    1176:	9f 91       	pop	r25
    1178:	8f 91       	pop	r24
    117a:	7f 91       	pop	r23
    117c:	6f 91       	pop	r22
    117e:	5f 91       	pop	r21
    1180:	4f 91       	pop	r20
    1182:	3f 91       	pop	r19
    1184:	2f 91       	pop	r18
    1186:	0f 90       	pop	r0
    1188:	0f be       	out	0x3f, r0	; 63
    118a:	0f 90       	pop	r0
    118c:	1f 90       	pop	r1
    118e:	18 95       	reti

00001190 <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
    1190:	1f 92       	push	r1
    1192:	0f 92       	push	r0
    1194:	0f b6       	in	r0, 0x3f	; 63
    1196:	0f 92       	push	r0
    1198:	11 24       	eor	r1, r1
    119a:	2f 93       	push	r18
    119c:	3f 93       	push	r19
    119e:	4f 93       	push	r20
    11a0:	5f 93       	push	r21
    11a2:	6f 93       	push	r22
    11a4:	7f 93       	push	r23
    11a6:	8f 93       	push	r24
    11a8:	9f 93       	push	r25
    11aa:	af 93       	push	r26
    11ac:	bf 93       	push	r27
    11ae:	ef 93       	push	r30
    11b0:	ff 93       	push	r31
	if (tc_tcd1_err_callback) {
    11b2:	e0 91 a8 22 	lds	r30, 0x22A8
    11b6:	f0 91 a9 22 	lds	r31, 0x22A9
    11ba:	30 97       	sbiw	r30, 0x00	; 0
    11bc:	09 f0       	breq	.+2      	; 0x11c0 <__vector_84+0x30>
		tc_tcd1_err_callback();
    11be:	09 95       	icall
	}
}
    11c0:	ff 91       	pop	r31
    11c2:	ef 91       	pop	r30
    11c4:	bf 91       	pop	r27
    11c6:	af 91       	pop	r26
    11c8:	9f 91       	pop	r25
    11ca:	8f 91       	pop	r24
    11cc:	7f 91       	pop	r23
    11ce:	6f 91       	pop	r22
    11d0:	5f 91       	pop	r21
    11d2:	4f 91       	pop	r20
    11d4:	3f 91       	pop	r19
    11d6:	2f 91       	pop	r18
    11d8:	0f 90       	pop	r0
    11da:	0f be       	out	0x3f, r0	; 63
    11dc:	0f 90       	pop	r0
    11de:	1f 90       	pop	r1
    11e0:	18 95       	reti

000011e2 <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
    11e2:	1f 92       	push	r1
    11e4:	0f 92       	push	r0
    11e6:	0f b6       	in	r0, 0x3f	; 63
    11e8:	0f 92       	push	r0
    11ea:	11 24       	eor	r1, r1
    11ec:	2f 93       	push	r18
    11ee:	3f 93       	push	r19
    11f0:	4f 93       	push	r20
    11f2:	5f 93       	push	r21
    11f4:	6f 93       	push	r22
    11f6:	7f 93       	push	r23
    11f8:	8f 93       	push	r24
    11fa:	9f 93       	push	r25
    11fc:	af 93       	push	r26
    11fe:	bf 93       	push	r27
    1200:	ef 93       	push	r30
    1202:	ff 93       	push	r31
	if (tc_tcd1_cca_callback) {
    1204:	e0 91 aa 22 	lds	r30, 0x22AA
    1208:	f0 91 ab 22 	lds	r31, 0x22AB
    120c:	30 97       	sbiw	r30, 0x00	; 0
    120e:	09 f0       	breq	.+2      	; 0x1212 <__vector_85+0x30>
		tc_tcd1_cca_callback();
    1210:	09 95       	icall
	}
}
    1212:	ff 91       	pop	r31
    1214:	ef 91       	pop	r30
    1216:	bf 91       	pop	r27
    1218:	af 91       	pop	r26
    121a:	9f 91       	pop	r25
    121c:	8f 91       	pop	r24
    121e:	7f 91       	pop	r23
    1220:	6f 91       	pop	r22
    1222:	5f 91       	pop	r21
    1224:	4f 91       	pop	r20
    1226:	3f 91       	pop	r19
    1228:	2f 91       	pop	r18
    122a:	0f 90       	pop	r0
    122c:	0f be       	out	0x3f, r0	; 63
    122e:	0f 90       	pop	r0
    1230:	1f 90       	pop	r1
    1232:	18 95       	reti

00001234 <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
    1234:	1f 92       	push	r1
    1236:	0f 92       	push	r0
    1238:	0f b6       	in	r0, 0x3f	; 63
    123a:	0f 92       	push	r0
    123c:	11 24       	eor	r1, r1
    123e:	2f 93       	push	r18
    1240:	3f 93       	push	r19
    1242:	4f 93       	push	r20
    1244:	5f 93       	push	r21
    1246:	6f 93       	push	r22
    1248:	7f 93       	push	r23
    124a:	8f 93       	push	r24
    124c:	9f 93       	push	r25
    124e:	af 93       	push	r26
    1250:	bf 93       	push	r27
    1252:	ef 93       	push	r30
    1254:	ff 93       	push	r31
	if (tc_tcd1_ccb_callback) {
    1256:	e0 91 ac 22 	lds	r30, 0x22AC
    125a:	f0 91 ad 22 	lds	r31, 0x22AD
    125e:	30 97       	sbiw	r30, 0x00	; 0
    1260:	09 f0       	breq	.+2      	; 0x1264 <__vector_86+0x30>
		tc_tcd1_ccb_callback();
    1262:	09 95       	icall
	}
}
    1264:	ff 91       	pop	r31
    1266:	ef 91       	pop	r30
    1268:	bf 91       	pop	r27
    126a:	af 91       	pop	r26
    126c:	9f 91       	pop	r25
    126e:	8f 91       	pop	r24
    1270:	7f 91       	pop	r23
    1272:	6f 91       	pop	r22
    1274:	5f 91       	pop	r21
    1276:	4f 91       	pop	r20
    1278:	3f 91       	pop	r19
    127a:	2f 91       	pop	r18
    127c:	0f 90       	pop	r0
    127e:	0f be       	out	0x3f, r0	; 63
    1280:	0f 90       	pop	r0
    1282:	1f 90       	pop	r1
    1284:	18 95       	reti

00001286 <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
    1286:	1f 92       	push	r1
    1288:	0f 92       	push	r0
    128a:	0f b6       	in	r0, 0x3f	; 63
    128c:	0f 92       	push	r0
    128e:	11 24       	eor	r1, r1
    1290:	2f 93       	push	r18
    1292:	3f 93       	push	r19
    1294:	4f 93       	push	r20
    1296:	5f 93       	push	r21
    1298:	6f 93       	push	r22
    129a:	7f 93       	push	r23
    129c:	8f 93       	push	r24
    129e:	9f 93       	push	r25
    12a0:	af 93       	push	r26
    12a2:	bf 93       	push	r27
    12a4:	ef 93       	push	r30
    12a6:	ff 93       	push	r31
	if (tc_tce0_ovf_callback) {
    12a8:	e0 91 ae 22 	lds	r30, 0x22AE
    12ac:	f0 91 af 22 	lds	r31, 0x22AF
    12b0:	30 97       	sbiw	r30, 0x00	; 0
    12b2:	09 f0       	breq	.+2      	; 0x12b6 <__vector_47+0x30>
		tc_tce0_ovf_callback();
    12b4:	09 95       	icall
	}
}
    12b6:	ff 91       	pop	r31
    12b8:	ef 91       	pop	r30
    12ba:	bf 91       	pop	r27
    12bc:	af 91       	pop	r26
    12be:	9f 91       	pop	r25
    12c0:	8f 91       	pop	r24
    12c2:	7f 91       	pop	r23
    12c4:	6f 91       	pop	r22
    12c6:	5f 91       	pop	r21
    12c8:	4f 91       	pop	r20
    12ca:	3f 91       	pop	r19
    12cc:	2f 91       	pop	r18
    12ce:	0f 90       	pop	r0
    12d0:	0f be       	out	0x3f, r0	; 63
    12d2:	0f 90       	pop	r0
    12d4:	1f 90       	pop	r1
    12d6:	18 95       	reti

000012d8 <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
    12d8:	1f 92       	push	r1
    12da:	0f 92       	push	r0
    12dc:	0f b6       	in	r0, 0x3f	; 63
    12de:	0f 92       	push	r0
    12e0:	11 24       	eor	r1, r1
    12e2:	2f 93       	push	r18
    12e4:	3f 93       	push	r19
    12e6:	4f 93       	push	r20
    12e8:	5f 93       	push	r21
    12ea:	6f 93       	push	r22
    12ec:	7f 93       	push	r23
    12ee:	8f 93       	push	r24
    12f0:	9f 93       	push	r25
    12f2:	af 93       	push	r26
    12f4:	bf 93       	push	r27
    12f6:	ef 93       	push	r30
    12f8:	ff 93       	push	r31
	if (tc_tce0_err_callback) {
    12fa:	e0 91 b0 22 	lds	r30, 0x22B0
    12fe:	f0 91 b1 22 	lds	r31, 0x22B1
    1302:	30 97       	sbiw	r30, 0x00	; 0
    1304:	09 f0       	breq	.+2      	; 0x1308 <__vector_48+0x30>
		tc_tce0_err_callback();
    1306:	09 95       	icall
	}
}
    1308:	ff 91       	pop	r31
    130a:	ef 91       	pop	r30
    130c:	bf 91       	pop	r27
    130e:	af 91       	pop	r26
    1310:	9f 91       	pop	r25
    1312:	8f 91       	pop	r24
    1314:	7f 91       	pop	r23
    1316:	6f 91       	pop	r22
    1318:	5f 91       	pop	r21
    131a:	4f 91       	pop	r20
    131c:	3f 91       	pop	r19
    131e:	2f 91       	pop	r18
    1320:	0f 90       	pop	r0
    1322:	0f be       	out	0x3f, r0	; 63
    1324:	0f 90       	pop	r0
    1326:	1f 90       	pop	r1
    1328:	18 95       	reti

0000132a <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
    132a:	1f 92       	push	r1
    132c:	0f 92       	push	r0
    132e:	0f b6       	in	r0, 0x3f	; 63
    1330:	0f 92       	push	r0
    1332:	11 24       	eor	r1, r1
    1334:	2f 93       	push	r18
    1336:	3f 93       	push	r19
    1338:	4f 93       	push	r20
    133a:	5f 93       	push	r21
    133c:	6f 93       	push	r22
    133e:	7f 93       	push	r23
    1340:	8f 93       	push	r24
    1342:	9f 93       	push	r25
    1344:	af 93       	push	r26
    1346:	bf 93       	push	r27
    1348:	ef 93       	push	r30
    134a:	ff 93       	push	r31
	if (tc_tce0_cca_callback) {
    134c:	e0 91 b2 22 	lds	r30, 0x22B2
    1350:	f0 91 b3 22 	lds	r31, 0x22B3
    1354:	30 97       	sbiw	r30, 0x00	; 0
    1356:	09 f0       	breq	.+2      	; 0x135a <__vector_49+0x30>
		tc_tce0_cca_callback();
    1358:	09 95       	icall
	}
}
    135a:	ff 91       	pop	r31
    135c:	ef 91       	pop	r30
    135e:	bf 91       	pop	r27
    1360:	af 91       	pop	r26
    1362:	9f 91       	pop	r25
    1364:	8f 91       	pop	r24
    1366:	7f 91       	pop	r23
    1368:	6f 91       	pop	r22
    136a:	5f 91       	pop	r21
    136c:	4f 91       	pop	r20
    136e:	3f 91       	pop	r19
    1370:	2f 91       	pop	r18
    1372:	0f 90       	pop	r0
    1374:	0f be       	out	0x3f, r0	; 63
    1376:	0f 90       	pop	r0
    1378:	1f 90       	pop	r1
    137a:	18 95       	reti

0000137c <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
    137c:	1f 92       	push	r1
    137e:	0f 92       	push	r0
    1380:	0f b6       	in	r0, 0x3f	; 63
    1382:	0f 92       	push	r0
    1384:	11 24       	eor	r1, r1
    1386:	2f 93       	push	r18
    1388:	3f 93       	push	r19
    138a:	4f 93       	push	r20
    138c:	5f 93       	push	r21
    138e:	6f 93       	push	r22
    1390:	7f 93       	push	r23
    1392:	8f 93       	push	r24
    1394:	9f 93       	push	r25
    1396:	af 93       	push	r26
    1398:	bf 93       	push	r27
    139a:	ef 93       	push	r30
    139c:	ff 93       	push	r31
	if (tc_tce0_ccb_callback) {
    139e:	e0 91 b4 22 	lds	r30, 0x22B4
    13a2:	f0 91 b5 22 	lds	r31, 0x22B5
    13a6:	30 97       	sbiw	r30, 0x00	; 0
    13a8:	09 f0       	breq	.+2      	; 0x13ac <__vector_50+0x30>
		tc_tce0_ccb_callback();
    13aa:	09 95       	icall
	}
}
    13ac:	ff 91       	pop	r31
    13ae:	ef 91       	pop	r30
    13b0:	bf 91       	pop	r27
    13b2:	af 91       	pop	r26
    13b4:	9f 91       	pop	r25
    13b6:	8f 91       	pop	r24
    13b8:	7f 91       	pop	r23
    13ba:	6f 91       	pop	r22
    13bc:	5f 91       	pop	r21
    13be:	4f 91       	pop	r20
    13c0:	3f 91       	pop	r19
    13c2:	2f 91       	pop	r18
    13c4:	0f 90       	pop	r0
    13c6:	0f be       	out	0x3f, r0	; 63
    13c8:	0f 90       	pop	r0
    13ca:	1f 90       	pop	r1
    13cc:	18 95       	reti

000013ce <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
    13ce:	1f 92       	push	r1
    13d0:	0f 92       	push	r0
    13d2:	0f b6       	in	r0, 0x3f	; 63
    13d4:	0f 92       	push	r0
    13d6:	11 24       	eor	r1, r1
    13d8:	2f 93       	push	r18
    13da:	3f 93       	push	r19
    13dc:	4f 93       	push	r20
    13de:	5f 93       	push	r21
    13e0:	6f 93       	push	r22
    13e2:	7f 93       	push	r23
    13e4:	8f 93       	push	r24
    13e6:	9f 93       	push	r25
    13e8:	af 93       	push	r26
    13ea:	bf 93       	push	r27
    13ec:	ef 93       	push	r30
    13ee:	ff 93       	push	r31
	if (tc_tce0_ccc_callback) {
    13f0:	e0 91 b6 22 	lds	r30, 0x22B6
    13f4:	f0 91 b7 22 	lds	r31, 0x22B7
    13f8:	30 97       	sbiw	r30, 0x00	; 0
    13fa:	09 f0       	breq	.+2      	; 0x13fe <__vector_51+0x30>
		tc_tce0_ccc_callback();
    13fc:	09 95       	icall
	}
}
    13fe:	ff 91       	pop	r31
    1400:	ef 91       	pop	r30
    1402:	bf 91       	pop	r27
    1404:	af 91       	pop	r26
    1406:	9f 91       	pop	r25
    1408:	8f 91       	pop	r24
    140a:	7f 91       	pop	r23
    140c:	6f 91       	pop	r22
    140e:	5f 91       	pop	r21
    1410:	4f 91       	pop	r20
    1412:	3f 91       	pop	r19
    1414:	2f 91       	pop	r18
    1416:	0f 90       	pop	r0
    1418:	0f be       	out	0x3f, r0	; 63
    141a:	0f 90       	pop	r0
    141c:	1f 90       	pop	r1
    141e:	18 95       	reti

00001420 <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
    1420:	1f 92       	push	r1
    1422:	0f 92       	push	r0
    1424:	0f b6       	in	r0, 0x3f	; 63
    1426:	0f 92       	push	r0
    1428:	11 24       	eor	r1, r1
    142a:	2f 93       	push	r18
    142c:	3f 93       	push	r19
    142e:	4f 93       	push	r20
    1430:	5f 93       	push	r21
    1432:	6f 93       	push	r22
    1434:	7f 93       	push	r23
    1436:	8f 93       	push	r24
    1438:	9f 93       	push	r25
    143a:	af 93       	push	r26
    143c:	bf 93       	push	r27
    143e:	ef 93       	push	r30
    1440:	ff 93       	push	r31
	if (tc_tce0_ccd_callback) {
    1442:	e0 91 b8 22 	lds	r30, 0x22B8
    1446:	f0 91 b9 22 	lds	r31, 0x22B9
    144a:	30 97       	sbiw	r30, 0x00	; 0
    144c:	09 f0       	breq	.+2      	; 0x1450 <__vector_52+0x30>
		tc_tce0_ccd_callback();
    144e:	09 95       	icall
	}
}
    1450:	ff 91       	pop	r31
    1452:	ef 91       	pop	r30
    1454:	bf 91       	pop	r27
    1456:	af 91       	pop	r26
    1458:	9f 91       	pop	r25
    145a:	8f 91       	pop	r24
    145c:	7f 91       	pop	r23
    145e:	6f 91       	pop	r22
    1460:	5f 91       	pop	r21
    1462:	4f 91       	pop	r20
    1464:	3f 91       	pop	r19
    1466:	2f 91       	pop	r18
    1468:	0f 90       	pop	r0
    146a:	0f be       	out	0x3f, r0	; 63
    146c:	0f 90       	pop	r0
    146e:	1f 90       	pop	r1
    1470:	18 95       	reti

00001472 <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
    1472:	cf 93       	push	r28
    1474:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
    1476:	e0 91 ba 22 	lds	r30, 0x22BA
    147a:	f0 91 bb 22 	lds	r31, 0x22BB
    147e:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
    1480:	83 ff       	sbrs	r24, 3
    1482:	0b c0       	rjmp	.+22     	; 0x149a <twim_interrupt_handler+0x28>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
    1484:	88 60       	ori	r24, 0x08	; 8
    1486:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
    1488:	83 e0       	ldi	r24, 0x03	; 3
    148a:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
    148c:	86 ef       	ldi	r24, 0xF6	; 246
    148e:	9f ef       	ldi	r25, 0xFF	; 255
    1490:	80 93 c4 22 	sts	0x22C4, r24
    1494:	90 93 c5 22 	sts	0x22C5, r25
    1498:	8e c0       	rjmp	.+284    	; 0x15b6 <twim_interrupt_handler+0x144>
 *
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
    149a:	98 2f       	mov	r25, r24
    149c:	94 71       	andi	r25, 0x14	; 20

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
		transfer.status = ERR_BUSY;

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    149e:	49 f0       	breq	.+18     	; 0x14b2 <twim_interrupt_handler+0x40>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    14a0:	83 e0       	ldi	r24, 0x03	; 3
    14a2:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
    14a4:	8f ef       	ldi	r24, 0xFF	; 255
    14a6:	9f ef       	ldi	r25, 0xFF	; 255
    14a8:	80 93 c4 22 	sts	0x22C4, r24
    14ac:	90 93 c5 22 	sts	0x22C5, r25
    14b0:	82 c0       	rjmp	.+260    	; 0x15b6 <twim_interrupt_handler+0x144>

	} else if (master_status & TWI_MASTER_WIF_bm) {
    14b2:	86 ff       	sbrs	r24, 6
    14b4:	42 c0       	rjmp	.+132    	; 0x153a <twim_interrupt_handler+0xc8>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    14b6:	a0 91 bc 22 	lds	r26, 0x22BC
    14ba:	b0 91 bd 22 	lds	r27, 0x22BD

	if (transfer.addr_count < pkg->addr_length) {
    14be:	80 91 be 22 	lds	r24, 0x22BE
    14c2:	90 91 bf 22 	lds	r25, 0x22BF
    14c6:	14 96       	adiw	r26, 0x04	; 4
    14c8:	2d 91       	ld	r18, X+
    14ca:	3c 91       	ld	r19, X
    14cc:	15 97       	sbiw	r26, 0x05	; 5
    14ce:	82 17       	cp	r24, r18
    14d0:	93 07       	cpc	r25, r19
    14d2:	5c f4       	brge	.+22     	; 0x14ea <twim_interrupt_handler+0x78>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
    14d4:	a8 0f       	add	r26, r24
    14d6:	b9 1f       	adc	r27, r25
    14d8:	11 96       	adiw	r26, 0x01	; 1
    14da:	2c 91       	ld	r18, X
    14dc:	27 83       	std	Z+7, r18	; 0x07
    14de:	01 96       	adiw	r24, 0x01	; 1
    14e0:	80 93 be 22 	sts	0x22BE, r24
    14e4:	90 93 bf 22 	sts	0x22BF, r25
    14e8:	66 c0       	rjmp	.+204    	; 0x15b6 <twim_interrupt_handler+0x144>

	} else if (transfer.data_count < pkg->length) {
    14ea:	80 91 c0 22 	lds	r24, 0x22C0
    14ee:	90 91 c1 22 	lds	r25, 0x22C1
    14f2:	18 96       	adiw	r26, 0x08	; 8
    14f4:	2d 91       	ld	r18, X+
    14f6:	3c 91       	ld	r19, X
    14f8:	19 97       	sbiw	r26, 0x09	; 9
    14fa:	82 17       	cp	r24, r18
    14fc:	93 07       	cpc	r25, r19
    14fe:	b0 f4       	brcc	.+44     	; 0x152c <twim_interrupt_handler+0xba>

		if (transfer.read) {
    1500:	20 91 c2 22 	lds	r18, 0x22C2
    1504:	22 23       	and	r18, r18
    1506:	21 f0       	breq	.+8      	; 0x1510 <twim_interrupt_handler+0x9e>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
    1508:	86 81       	ldd	r24, Z+6	; 0x06
    150a:	81 60       	ori	r24, 0x01	; 1
    150c:	86 83       	std	Z+6, r24	; 0x06
    150e:	53 c0       	rjmp	.+166    	; 0x15b6 <twim_interrupt_handler+0x144>

		} else {
			const uint8_t * const data = pkg->buffer;
			bus->MASTER.DATA = data[transfer.data_count++];
    1510:	16 96       	adiw	r26, 0x06	; 6
    1512:	0d 90       	ld	r0, X+
    1514:	bc 91       	ld	r27, X
    1516:	a0 2d       	mov	r26, r0
    1518:	a8 0f       	add	r26, r24
    151a:	b9 1f       	adc	r27, r25
    151c:	2c 91       	ld	r18, X
    151e:	27 83       	std	Z+7, r18	; 0x07
    1520:	01 96       	adiw	r24, 0x01	; 1
    1522:	80 93 c0 22 	sts	0x22C0, r24
    1526:	90 93 c1 22 	sts	0x22C1, r25
    152a:	45 c0       	rjmp	.+138    	; 0x15b6 <twim_interrupt_handler+0x144>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    152c:	83 e0       	ldi	r24, 0x03	; 3
    152e:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
    1530:	10 92 c4 22 	sts	0x22C4, r1
    1534:	10 92 c5 22 	sts	0x22C5, r1
    1538:	3e c0       	rjmp	.+124    	; 0x15b6 <twim_interrupt_handler+0x144>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
    153a:	88 23       	and	r24, r24
    153c:	b4 f5       	brge	.+108    	; 0x15aa <twim_interrupt_handler+0x138>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    153e:	a0 91 bc 22 	lds	r26, 0x22BC
    1542:	b0 91 bd 22 	lds	r27, 0x22BD

	if (transfer.data_count < pkg->length) {
    1546:	80 91 c0 22 	lds	r24, 0x22C0
    154a:	90 91 c1 22 	lds	r25, 0x22C1
    154e:	18 96       	adiw	r26, 0x08	; 8
    1550:	2d 91       	ld	r18, X+
    1552:	3c 91       	ld	r19, X
    1554:	19 97       	sbiw	r26, 0x09	; 9
    1556:	82 17       	cp	r24, r18
    1558:	93 07       	cpc	r25, r19
    155a:	f0 f4       	brcc	.+60     	; 0x1598 <twim_interrupt_handler+0x126>

		uint8_t * const data = pkg->buffer;
		data[transfer.data_count++] = bus->MASTER.DATA;
    155c:	27 81       	ldd	r18, Z+7	; 0x07
    155e:	16 96       	adiw	r26, 0x06	; 6
    1560:	cd 91       	ld	r28, X+
    1562:	dc 91       	ld	r29, X
    1564:	17 97       	sbiw	r26, 0x07	; 7
    1566:	c8 0f       	add	r28, r24
    1568:	d9 1f       	adc	r29, r25
    156a:	28 83       	st	Y, r18
    156c:	01 96       	adiw	r24, 0x01	; 1
    156e:	80 93 c0 22 	sts	0x22C0, r24
    1572:	90 93 c1 22 	sts	0x22C1, r25

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
    1576:	18 96       	adiw	r26, 0x08	; 8
    1578:	2d 91       	ld	r18, X+
    157a:	3c 91       	ld	r19, X
    157c:	19 97       	sbiw	r26, 0x09	; 9
    157e:	82 17       	cp	r24, r18
    1580:	93 07       	cpc	r25, r19
    1582:	18 f4       	brcc	.+6      	; 0x158a <twim_interrupt_handler+0x118>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    1584:	82 e0       	ldi	r24, 0x02	; 2
    1586:	83 83       	std	Z+3, r24	; 0x03
    1588:	16 c0       	rjmp	.+44     	; 0x15b6 <twim_interrupt_handler+0x144>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    158a:	87 e0       	ldi	r24, 0x07	; 7
    158c:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
    158e:	10 92 c4 22 	sts	0x22C4, r1
    1592:	10 92 c5 22 	sts	0x22C5, r1
    1596:	0f c0       	rjmp	.+30     	; 0x15b6 <twim_interrupt_handler+0x144>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1598:	83 e0       	ldi	r24, 0x03	; 3
    159a:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
    159c:	89 ef       	ldi	r24, 0xF9	; 249
    159e:	9f ef       	ldi	r25, 0xFF	; 255
    15a0:	80 93 c4 22 	sts	0x22C4, r24
    15a4:	90 93 c5 22 	sts	0x22C5, r25
    15a8:	06 c0       	rjmp	.+12     	; 0x15b6 <twim_interrupt_handler+0x144>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
    15aa:	8b ef       	ldi	r24, 0xFB	; 251
    15ac:	9f ef       	ldi	r25, 0xFF	; 255
    15ae:	80 93 c4 22 	sts	0x22C4, r24
    15b2:	90 93 c5 22 	sts	0x22C5, r25
	}
}
    15b6:	df 91       	pop	r29
    15b8:	cf 91       	pop	r28
    15ba:	08 95       	ret

000015bc <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
    15bc:	1f 92       	push	r1
    15be:	0f 92       	push	r0
    15c0:	0f b6       	in	r0, 0x3f	; 63
    15c2:	0f 92       	push	r0
    15c4:	11 24       	eor	r1, r1
    15c6:	2f 93       	push	r18
    15c8:	3f 93       	push	r19
    15ca:	4f 93       	push	r20
    15cc:	5f 93       	push	r21
    15ce:	6f 93       	push	r22
    15d0:	7f 93       	push	r23
    15d2:	8f 93       	push	r24
    15d4:	9f 93       	push	r25
    15d6:	af 93       	push	r26
    15d8:	bf 93       	push	r27
    15da:	ef 93       	push	r30
    15dc:	ff 93       	push	r31
    15de:	49 df       	rcall	.-366    	; 0x1472 <twim_interrupt_handler>
    15e0:	ff 91       	pop	r31
    15e2:	ef 91       	pop	r30
    15e4:	bf 91       	pop	r27
    15e6:	af 91       	pop	r26
    15e8:	9f 91       	pop	r25
    15ea:	8f 91       	pop	r24
    15ec:	7f 91       	pop	r23
    15ee:	6f 91       	pop	r22
    15f0:	5f 91       	pop	r21
    15f2:	4f 91       	pop	r20
    15f4:	3f 91       	pop	r19
    15f6:	2f 91       	pop	r18
    15f8:	0f 90       	pop	r0
    15fa:	0f be       	out	0x3f, r0	; 63
    15fc:	0f 90       	pop	r0
    15fe:	1f 90       	pop	r1
    1600:	18 95       	reti

00001602 <__vector_46>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
    1602:	1f 92       	push	r1
    1604:	0f 92       	push	r0
    1606:	0f b6       	in	r0, 0x3f	; 63
    1608:	0f 92       	push	r0
    160a:	11 24       	eor	r1, r1
    160c:	2f 93       	push	r18
    160e:	3f 93       	push	r19
    1610:	4f 93       	push	r20
    1612:	5f 93       	push	r21
    1614:	6f 93       	push	r22
    1616:	7f 93       	push	r23
    1618:	8f 93       	push	r24
    161a:	9f 93       	push	r25
    161c:	af 93       	push	r26
    161e:	bf 93       	push	r27
    1620:	ef 93       	push	r30
    1622:	ff 93       	push	r31
    1624:	26 df       	rcall	.-436    	; 0x1472 <twim_interrupt_handler>
    1626:	ff 91       	pop	r31
    1628:	ef 91       	pop	r30
    162a:	bf 91       	pop	r27
    162c:	af 91       	pop	r26
    162e:	9f 91       	pop	r25
    1630:	8f 91       	pop	r24
    1632:	7f 91       	pop	r23
    1634:	6f 91       	pop	r22
    1636:	5f 91       	pop	r21
    1638:	4f 91       	pop	r20
    163a:	3f 91       	pop	r19
    163c:	2f 91       	pop	r18
    163e:	0f 90       	pop	r0
    1640:	0f be       	out	0x3f, r0	; 63
    1642:	0f 90       	pop	r0
    1644:	1f 90       	pop	r1
    1646:	18 95       	reti

00001648 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    1648:	4f 92       	push	r4
    164a:	5f 92       	push	r5
    164c:	6f 92       	push	r6
    164e:	7f 92       	push	r7
    1650:	8f 92       	push	r8
    1652:	9f 92       	push	r9
    1654:	af 92       	push	r10
    1656:	bf 92       	push	r11
    1658:	cf 92       	push	r12
    165a:	df 92       	push	r13
    165c:	ef 92       	push	r14
    165e:	ff 92       	push	r15
    1660:	0f 93       	push	r16
    1662:	1f 93       	push	r17
    1664:	cf 93       	push	r28
    1666:	df 93       	push	r29
    1668:	ec 01       	movw	r28, r24
    166a:	4a 01       	movw	r8, r20
    166c:	5b 01       	movw	r10, r22
    166e:	28 01       	movw	r4, r16
    1670:	39 01       	movw	r6, r18

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    1672:	d9 01       	movw	r26, r18
    1674:	c8 01       	movw	r24, r16
    1676:	68 94       	set
    1678:	12 f8       	bld	r1, 2
    167a:	b6 95       	lsr	r27
    167c:	a7 95       	ror	r26
    167e:	97 95       	ror	r25
    1680:	87 95       	ror	r24
    1682:	16 94       	lsr	r1
    1684:	d1 f7       	brne	.-12     	; 0x167a <usart_set_baudrate+0x32>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    1686:	b9 01       	movw	r22, r18
    1688:	a8 01       	movw	r20, r16
    168a:	03 2e       	mov	r0, r19
    168c:	36 e1       	ldi	r19, 0x16	; 22
    168e:	76 95       	lsr	r23
    1690:	67 95       	ror	r22
    1692:	57 95       	ror	r21
    1694:	47 95       	ror	r20
    1696:	3a 95       	dec	r19
    1698:	d1 f7       	brne	.-12     	; 0x168e <usart_set_baudrate+0x46>
    169a:	30 2d       	mov	r19, r0

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    169c:	2c 81       	ldd	r18, Y+4	; 0x04
    169e:	22 fd       	sbrc	r18, 2
    16a0:	08 c0       	rjmp	.+16     	; 0x16b2 <usart_set_baudrate+0x6a>
		max_rate /= 2;
    16a2:	b6 95       	lsr	r27
    16a4:	a7 95       	ror	r26
    16a6:	97 95       	ror	r25
    16a8:	87 95       	ror	r24
		min_rate /= 2;
    16aa:	76 95       	lsr	r23
    16ac:	67 95       	ror	r22
    16ae:	57 95       	ror	r21
    16b0:	47 95       	ror	r20
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    16b2:	88 15       	cp	r24, r8
    16b4:	99 05       	cpc	r25, r9
    16b6:	aa 05       	cpc	r26, r10
    16b8:	bb 05       	cpc	r27, r11
    16ba:	08 f4       	brcc	.+2      	; 0x16be <usart_set_baudrate+0x76>
    16bc:	aa c0       	rjmp	.+340    	; 0x1812 <usart_set_baudrate+0x1ca>
    16be:	84 16       	cp	r8, r20
    16c0:	95 06       	cpc	r9, r21
    16c2:	a6 06       	cpc	r10, r22
    16c4:	b7 06       	cpc	r11, r23
    16c6:	08 f4       	brcc	.+2      	; 0x16ca <usart_set_baudrate+0x82>
    16c8:	a6 c0       	rjmp	.+332    	; 0x1816 <usart_set_baudrate+0x1ce>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    16ca:	8c 81       	ldd	r24, Y+4	; 0x04
    16cc:	82 fd       	sbrc	r24, 2
    16ce:	04 c0       	rjmp	.+8      	; 0x16d8 <usart_set_baudrate+0x90>
		baud *= 2;
    16d0:	88 0c       	add	r8, r8
    16d2:	99 1c       	adc	r9, r9
    16d4:	aa 1c       	adc	r10, r10
    16d6:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
    16d8:	c3 01       	movw	r24, r6
    16da:	b2 01       	movw	r22, r4
    16dc:	a5 01       	movw	r20, r10
    16de:	94 01       	movw	r18, r8
    16e0:	3c d5       	rcall	.+2680   	; 0x215a <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
    16e2:	2f 3f       	cpi	r18, 0xFF	; 255
    16e4:	31 05       	cpc	r19, r1
    16e6:	41 05       	cpc	r20, r1
    16e8:	51 05       	cpc	r21, r1
    16ea:	08 f4       	brcc	.+2      	; 0x16ee <usart_set_baudrate+0xa6>
    16ec:	96 c0       	rjmp	.+300    	; 0x181a <usart_set_baudrate+0x1d2>
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		baud *= 2;
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
    16ee:	c1 2c       	mov	r12, r1
    16f0:	d1 2c       	mov	r13, r1
    16f2:	76 01       	movw	r14, r12
    16f4:	ca 94       	dec	r12
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    16f6:	19 ef       	ldi	r17, 0xF9	; 249
    16f8:	05 c0       	rjmp	.+10     	; 0x1704 <usart_set_baudrate+0xbc>
		if (ratio < limit) {
    16fa:	2c 15       	cp	r18, r12
    16fc:	3d 05       	cpc	r19, r13
    16fe:	4e 05       	cpc	r20, r14
    1700:	5f 05       	cpc	r21, r15
    1702:	68 f0       	brcs	.+26     	; 0x171e <usart_set_baudrate+0xd6>
			break;
		}

		limit <<= 1;
    1704:	cc 0c       	add	r12, r12
    1706:	dd 1c       	adc	r13, r13
    1708:	ee 1c       	adc	r14, r14
    170a:	ff 1c       	adc	r15, r15

		if (exp < -3) {
    170c:	1d 3f       	cpi	r17, 0xFD	; 253
    170e:	14 f4       	brge	.+4      	; 0x1714 <usart_set_baudrate+0xcc>
			limit |= 1;
    1710:	68 94       	set
    1712:	c0 f8       	bld	r12, 0

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    1714:	1f 5f       	subi	r17, 0xFF	; 255
    1716:	17 30       	cpi	r17, 0x07	; 7
    1718:	81 f7       	brne	.-32     	; 0x16fa <usart_set_baudrate+0xb2>
    171a:	21 2f       	mov	r18, r17
    171c:	52 c0       	rjmp	.+164    	; 0x17c2 <usart_set_baudrate+0x17a>
    171e:	21 2f       	mov	r18, r17
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    1720:	11 23       	and	r17, r17
    1722:	0c f0       	brlt	.+2      	; 0x1726 <usart_set_baudrate+0xde>
    1724:	4e c0       	rjmp	.+156    	; 0x17c2 <usart_set_baudrate+0x17a>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    1726:	d5 01       	movw	r26, r10
    1728:	c4 01       	movw	r24, r8
    172a:	88 0f       	add	r24, r24
    172c:	99 1f       	adc	r25, r25
    172e:	aa 1f       	adc	r26, r26
    1730:	bb 1f       	adc	r27, r27
    1732:	88 0f       	add	r24, r24
    1734:	99 1f       	adc	r25, r25
    1736:	aa 1f       	adc	r26, r26
    1738:	bb 1f       	adc	r27, r27
    173a:	88 0f       	add	r24, r24
    173c:	99 1f       	adc	r25, r25
    173e:	aa 1f       	adc	r26, r26
    1740:	bb 1f       	adc	r27, r27
    1742:	48 1a       	sub	r4, r24
    1744:	59 0a       	sbc	r5, r25
    1746:	6a 0a       	sbc	r6, r26
    1748:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    174a:	1e 3f       	cpi	r17, 0xFE	; 254
    174c:	ec f4       	brge	.+58     	; 0x1788 <usart_set_baudrate+0x140>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    174e:	6d ef       	ldi	r22, 0xFD	; 253
    1750:	7f ef       	ldi	r23, 0xFF	; 255
    1752:	61 1b       	sub	r22, r17
    1754:	71 09       	sbc	r23, r1
    1756:	17 fd       	sbrc	r17, 7
    1758:	73 95       	inc	r23
    175a:	04 c0       	rjmp	.+8      	; 0x1764 <usart_set_baudrate+0x11c>
    175c:	44 0c       	add	r4, r4
    175e:	55 1c       	adc	r5, r5
    1760:	66 1c       	adc	r6, r6
    1762:	77 1c       	adc	r7, r7
    1764:	6a 95       	dec	r22
    1766:	d2 f7       	brpl	.-12     	; 0x175c <usart_set_baudrate+0x114>
    1768:	d5 01       	movw	r26, r10
    176a:	c4 01       	movw	r24, r8
    176c:	b6 95       	lsr	r27
    176e:	a7 95       	ror	r26
    1770:	97 95       	ror	r25
    1772:	87 95       	ror	r24
    1774:	bc 01       	movw	r22, r24
    1776:	cd 01       	movw	r24, r26
    1778:	64 0d       	add	r22, r4
    177a:	75 1d       	adc	r23, r5
    177c:	86 1d       	adc	r24, r6
    177e:	97 1d       	adc	r25, r7
    1780:	a5 01       	movw	r20, r10
    1782:	94 01       	movw	r18, r8
    1784:	ea d4       	rcall	.+2516   	; 0x215a <__udivmodsi4>
    1786:	3c c0       	rjmp	.+120    	; 0x1800 <usart_set_baudrate+0x1b8>
		} else {
			baud <<= exp + 3;
    1788:	21 2f       	mov	r18, r17
    178a:	33 27       	eor	r19, r19
    178c:	27 fd       	sbrc	r18, 7
    178e:	30 95       	com	r19
    1790:	2d 5f       	subi	r18, 0xFD	; 253
    1792:	3f 4f       	sbci	r19, 0xFF	; 255
    1794:	d5 01       	movw	r26, r10
    1796:	c4 01       	movw	r24, r8
    1798:	04 c0       	rjmp	.+8      	; 0x17a2 <usart_set_baudrate+0x15a>
    179a:	88 0f       	add	r24, r24
    179c:	99 1f       	adc	r25, r25
    179e:	aa 1f       	adc	r26, r26
    17a0:	bb 1f       	adc	r27, r27
    17a2:	2a 95       	dec	r18
    17a4:	d2 f7       	brpl	.-12     	; 0x179a <usart_set_baudrate+0x152>
    17a6:	9c 01       	movw	r18, r24
    17a8:	ad 01       	movw	r20, r26
			div = (cpu_hz + baud / 2) / baud;
    17aa:	b6 95       	lsr	r27
    17ac:	a7 95       	ror	r26
    17ae:	97 95       	ror	r25
    17b0:	87 95       	ror	r24
    17b2:	bc 01       	movw	r22, r24
    17b4:	cd 01       	movw	r24, r26
    17b6:	64 0d       	add	r22, r4
    17b8:	75 1d       	adc	r23, r5
    17ba:	86 1d       	adc	r24, r6
    17bc:	97 1d       	adc	r25, r7
    17be:	cd d4       	rcall	.+2458   	; 0x215a <__udivmodsi4>
    17c0:	1f c0       	rjmp	.+62     	; 0x1800 <usart_set_baudrate+0x1b8>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    17c2:	33 27       	eor	r19, r19
    17c4:	27 fd       	sbrc	r18, 7
    17c6:	30 95       	com	r19
    17c8:	2d 5f       	subi	r18, 0xFD	; 253
    17ca:	3f 4f       	sbci	r19, 0xFF	; 255
    17cc:	d5 01       	movw	r26, r10
    17ce:	c4 01       	movw	r24, r8
    17d0:	04 c0       	rjmp	.+8      	; 0x17da <usart_set_baudrate+0x192>
    17d2:	88 0f       	add	r24, r24
    17d4:	99 1f       	adc	r25, r25
    17d6:	aa 1f       	adc	r26, r26
    17d8:	bb 1f       	adc	r27, r27
    17da:	2a 95       	dec	r18
    17dc:	d2 f7       	brpl	.-12     	; 0x17d2 <usart_set_baudrate+0x18a>
    17de:	9c 01       	movw	r18, r24
    17e0:	ad 01       	movw	r20, r26
		div = (cpu_hz + baud / 2) / baud - 1;
    17e2:	b6 95       	lsr	r27
    17e4:	a7 95       	ror	r26
    17e6:	97 95       	ror	r25
    17e8:	87 95       	ror	r24
    17ea:	bc 01       	movw	r22, r24
    17ec:	cd 01       	movw	r24, r26
    17ee:	64 0d       	add	r22, r4
    17f0:	75 1d       	adc	r23, r5
    17f2:	86 1d       	adc	r24, r6
    17f4:	97 1d       	adc	r25, r7
    17f6:	b1 d4       	rcall	.+2402   	; 0x215a <__udivmodsi4>
    17f8:	21 50       	subi	r18, 0x01	; 1
    17fa:	31 09       	sbc	r19, r1
    17fc:	41 09       	sbc	r20, r1
    17fe:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    1800:	83 2f       	mov	r24, r19
    1802:	8f 70       	andi	r24, 0x0F	; 15
    1804:	12 95       	swap	r17
    1806:	10 7f       	andi	r17, 0xF0	; 240
    1808:	18 2b       	or	r17, r24
    180a:	1f 83       	std	Y+7, r17	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    180c:	2e 83       	std	Y+6, r18	; 0x06

	return true;
    180e:	81 e0       	ldi	r24, 0x01	; 1
    1810:	18 c0       	rjmp	.+48     	; 0x1842 <usart_set_baudrate+0x1fa>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    1812:	80 e0       	ldi	r24, 0x00	; 0
    1814:	16 c0       	rjmp	.+44     	; 0x1842 <usart_set_baudrate+0x1fa>
    1816:	80 e0       	ldi	r24, 0x00	; 0
    1818:	14 c0       	rjmp	.+40     	; 0x1842 <usart_set_baudrate+0x1fa>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    181a:	d5 01       	movw	r26, r10
    181c:	c4 01       	movw	r24, r8
    181e:	88 0f       	add	r24, r24
    1820:	99 1f       	adc	r25, r25
    1822:	aa 1f       	adc	r26, r26
    1824:	bb 1f       	adc	r27, r27
    1826:	88 0f       	add	r24, r24
    1828:	99 1f       	adc	r25, r25
    182a:	aa 1f       	adc	r26, r26
    182c:	bb 1f       	adc	r27, r27
    182e:	88 0f       	add	r24, r24
    1830:	99 1f       	adc	r25, r25
    1832:	aa 1f       	adc	r26, r26
    1834:	bb 1f       	adc	r27, r27
    1836:	48 1a       	sub	r4, r24
    1838:	59 0a       	sbc	r5, r25
    183a:	6a 0a       	sbc	r6, r26
    183c:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    183e:	19 ef       	ldi	r17, 0xF9	; 249
    1840:	86 cf       	rjmp	.-244    	; 0x174e <usart_set_baudrate+0x106>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
    1842:	df 91       	pop	r29
    1844:	cf 91       	pop	r28
    1846:	1f 91       	pop	r17
    1848:	0f 91       	pop	r16
    184a:	ff 90       	pop	r15
    184c:	ef 90       	pop	r14
    184e:	df 90       	pop	r13
    1850:	cf 90       	pop	r12
    1852:	bf 90       	pop	r11
    1854:	af 90       	pop	r10
    1856:	9f 90       	pop	r9
    1858:	8f 90       	pop	r8
    185a:	7f 90       	pop	r7
    185c:	6f 90       	pop	r6
    185e:	5f 90       	pop	r5
    1860:	4f 90       	pop	r4
    1862:	08 95       	ret

00001864 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
    1864:	0f 93       	push	r16
    1866:	1f 93       	push	r17
    1868:	cf 93       	push	r28
    186a:	df 93       	push	r29
    186c:	ec 01       	movw	r28, r24
    186e:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    1870:	00 97       	sbiw	r24, 0x00	; 0
    1872:	09 f4       	brne	.+2      	; 0x1876 <usart_init_rs232+0x12>
    1874:	ee c0       	rjmp	.+476    	; 0x1a52 <usart_init_rs232+0x1ee>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    1876:	80 3c       	cpi	r24, 0xC0	; 192
    1878:	91 05       	cpc	r25, r1
    187a:	31 f4       	brne	.+12     	; 0x1888 <usart_init_rs232+0x24>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    187c:	60 e1       	ldi	r22, 0x10	; 16
    187e:	80 e0       	ldi	r24, 0x00	; 0
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <sysclk_enable_module>
    1886:	e5 c0       	rjmp	.+458    	; 0x1a52 <usart_init_rs232+0x1ee>
	else if (module == &EBI) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    1888:	c1 15       	cp	r28, r1
    188a:	84 e0       	ldi	r24, 0x04	; 4
    188c:	d8 07       	cpc	r29, r24
    188e:	31 f4       	brne	.+12     	; 0x189c <usart_init_rs232+0x38>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    1890:	64 e0       	ldi	r22, 0x04	; 4
    1892:	80 e0       	ldi	r24, 0x00	; 0
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <sysclk_enable_module>
    189a:	db c0       	rjmp	.+438    	; 0x1a52 <usart_init_rs232+0x1ee>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    189c:	c0 38       	cpi	r28, 0x80	; 128
    189e:	e1 e0       	ldi	r30, 0x01	; 1
    18a0:	de 07       	cpc	r29, r30
    18a2:	31 f4       	brne	.+12     	; 0x18b0 <usart_init_rs232+0x4c>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    18a4:	62 e0       	ldi	r22, 0x02	; 2
    18a6:	80 e0       	ldi	r24, 0x00	; 0
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <sysclk_enable_module>
    18ae:	d1 c0       	rjmp	.+418    	; 0x1a52 <usart_init_rs232+0x1ee>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    18b0:	c1 15       	cp	r28, r1
    18b2:	f1 e0       	ldi	r31, 0x01	; 1
    18b4:	df 07       	cpc	r29, r31
    18b6:	31 f4       	brne	.+12     	; 0x18c4 <usart_init_rs232+0x60>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    18b8:	61 e0       	ldi	r22, 0x01	; 1
    18ba:	80 e0       	ldi	r24, 0x00	; 0
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <sysclk_enable_module>
    18c2:	c7 c0       	rjmp	.+398    	; 0x1a52 <usart_init_rs232+0x1ee>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    18c4:	c0 38       	cpi	r28, 0x80	; 128
    18c6:	83 e0       	ldi	r24, 0x03	; 3
    18c8:	d8 07       	cpc	r29, r24
    18ca:	31 f4       	brne	.+12     	; 0x18d8 <usart_init_rs232+0x74>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    18cc:	61 e0       	ldi	r22, 0x01	; 1
    18ce:	81 e0       	ldi	r24, 0x01	; 1
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <sysclk_enable_module>
    18d6:	bd c0       	rjmp	.+378    	; 0x1a52 <usart_init_rs232+0x1ee>
	else if (module == &ACB) {
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    18d8:	c1 15       	cp	r28, r1
    18da:	e2 e0       	ldi	r30, 0x02	; 2
    18dc:	de 07       	cpc	r29, r30
    18de:	31 f4       	brne	.+12     	; 0x18ec <usart_init_rs232+0x88>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    18e0:	62 e0       	ldi	r22, 0x02	; 2
    18e2:	81 e0       	ldi	r24, 0x01	; 1
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <sysclk_enable_module>
    18ea:	b3 c0       	rjmp	.+358    	; 0x1a52 <usart_init_rs232+0x1ee>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    18ec:	c0 32       	cpi	r28, 0x20	; 32
    18ee:	f3 e0       	ldi	r31, 0x03	; 3
    18f0:	df 07       	cpc	r29, r31
    18f2:	31 f4       	brne	.+12     	; 0x1900 <usart_init_rs232+0x9c>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    18f4:	64 e0       	ldi	r22, 0x04	; 4
    18f6:	82 e0       	ldi	r24, 0x02	; 2
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <sysclk_enable_module>
    18fe:	a9 c0       	rjmp	.+338    	; 0x1a52 <usart_init_rs232+0x1ee>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    1900:	c1 15       	cp	r28, r1
    1902:	88 e0       	ldi	r24, 0x08	; 8
    1904:	d8 07       	cpc	r29, r24
    1906:	31 f4       	brne	.+12     	; 0x1914 <usart_init_rs232+0xb0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    1908:	61 e0       	ldi	r22, 0x01	; 1
    190a:	83 e0       	ldi	r24, 0x03	; 3
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <sysclk_enable_module>
    1912:	9f c0       	rjmp	.+318    	; 0x1a52 <usart_init_rs232+0x1ee>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    1914:	c1 15       	cp	r28, r1
    1916:	e9 e0       	ldi	r30, 0x09	; 9
    1918:	de 07       	cpc	r29, r30
    191a:	31 f4       	brne	.+12     	; 0x1928 <usart_init_rs232+0xc4>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    191c:	61 e0       	ldi	r22, 0x01	; 1
    191e:	84 e0       	ldi	r24, 0x04	; 4
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <sysclk_enable_module>
    1926:	95 c0       	rjmp	.+298    	; 0x1a52 <usart_init_rs232+0x1ee>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    1928:	c1 15       	cp	r28, r1
    192a:	fa e0       	ldi	r31, 0x0A	; 10
    192c:	df 07       	cpc	r29, r31
    192e:	31 f4       	brne	.+12     	; 0x193c <usart_init_rs232+0xd8>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    1930:	61 e0       	ldi	r22, 0x01	; 1
    1932:	85 e0       	ldi	r24, 0x05	; 5
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <sysclk_enable_module>
    193a:	8b c0       	rjmp	.+278    	; 0x1a52 <usart_init_rs232+0x1ee>
	else if (module == &TCF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    193c:	c0 34       	cpi	r28, 0x40	; 64
    193e:	88 e0       	ldi	r24, 0x08	; 8
    1940:	d8 07       	cpc	r29, r24
    1942:	31 f4       	brne	.+12     	; 0x1950 <usart_init_rs232+0xec>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    1944:	62 e0       	ldi	r22, 0x02	; 2
    1946:	83 e0       	ldi	r24, 0x03	; 3
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <sysclk_enable_module>
    194e:	81 c0       	rjmp	.+258    	; 0x1a52 <usart_init_rs232+0x1ee>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    1950:	c0 34       	cpi	r28, 0x40	; 64
    1952:	e9 e0       	ldi	r30, 0x09	; 9
    1954:	de 07       	cpc	r29, r30
    1956:	31 f4       	brne	.+12     	; 0x1964 <usart_init_rs232+0x100>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    1958:	62 e0       	ldi	r22, 0x02	; 2
    195a:	84 e0       	ldi	r24, 0x04	; 4
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <sysclk_enable_module>
    1962:	77 c0       	rjmp	.+238    	; 0x1a52 <usart_init_rs232+0x1ee>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    1964:	c0 39       	cpi	r28, 0x90	; 144
    1966:	f8 e0       	ldi	r31, 0x08	; 8
    1968:	df 07       	cpc	r29, r31
    196a:	31 f4       	brne	.+12     	; 0x1978 <usart_init_rs232+0x114>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    196c:	64 e0       	ldi	r22, 0x04	; 4
    196e:	83 e0       	ldi	r24, 0x03	; 3
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <sysclk_enable_module>
    1976:	6d c0       	rjmp	.+218    	; 0x1a52 <usart_init_rs232+0x1ee>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    1978:	c0 39       	cpi	r28, 0x90	; 144
    197a:	89 e0       	ldi	r24, 0x09	; 9
    197c:	d8 07       	cpc	r29, r24
    197e:	31 f4       	brne	.+12     	; 0x198c <usart_init_rs232+0x128>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1980:	64 e0       	ldi	r22, 0x04	; 4
    1982:	84 e0       	ldi	r24, 0x04	; 4
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <sysclk_enable_module>
    198a:	63 c0       	rjmp	.+198    	; 0x1a52 <usart_init_rs232+0x1ee>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    198c:	c0 39       	cpi	r28, 0x90	; 144
    198e:	ea e0       	ldi	r30, 0x0A	; 10
    1990:	de 07       	cpc	r29, r30
    1992:	31 f4       	brne	.+12     	; 0x19a0 <usart_init_rs232+0x13c>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1994:	64 e0       	ldi	r22, 0x04	; 4
    1996:	85 e0       	ldi	r24, 0x05	; 5
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <sysclk_enable_module>
    199e:	59 c0       	rjmp	.+178    	; 0x1a52 <usart_init_rs232+0x1ee>
	else if (module == &HIRESF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    19a0:	c0 3c       	cpi	r28, 0xC0	; 192
    19a2:	f8 e0       	ldi	r31, 0x08	; 8
    19a4:	df 07       	cpc	r29, r31
    19a6:	31 f4       	brne	.+12     	; 0x19b4 <usart_init_rs232+0x150>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    19a8:	68 e0       	ldi	r22, 0x08	; 8
    19aa:	83 e0       	ldi	r24, 0x03	; 3
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <sysclk_enable_module>
    19b2:	4f c0       	rjmp	.+158    	; 0x1a52 <usart_init_rs232+0x1ee>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    19b4:	c0 3c       	cpi	r28, 0xC0	; 192
    19b6:	89 e0       	ldi	r24, 0x09	; 9
    19b8:	d8 07       	cpc	r29, r24
    19ba:	31 f4       	brne	.+12     	; 0x19c8 <usart_init_rs232+0x164>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    19bc:	68 e0       	ldi	r22, 0x08	; 8
    19be:	84 e0       	ldi	r24, 0x04	; 4
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <sysclk_enable_module>
    19c6:	45 c0       	rjmp	.+138    	; 0x1a52 <usart_init_rs232+0x1ee>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    19c8:	c0 3a       	cpi	r28, 0xA0	; 160
    19ca:	e8 e0       	ldi	r30, 0x08	; 8
    19cc:	de 07       	cpc	r29, r30
    19ce:	31 f4       	brne	.+12     	; 0x19dc <usart_init_rs232+0x178>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    19d0:	60 e1       	ldi	r22, 0x10	; 16
    19d2:	83 e0       	ldi	r24, 0x03	; 3
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <sysclk_enable_module>
    19da:	3b c0       	rjmp	.+118    	; 0x1a52 <usart_init_rs232+0x1ee>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    19dc:	c0 3a       	cpi	r28, 0xA0	; 160
    19de:	f9 e0       	ldi	r31, 0x09	; 9
    19e0:	df 07       	cpc	r29, r31
    19e2:	31 f4       	brne	.+12     	; 0x19f0 <usart_init_rs232+0x18c>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    19e4:	60 e1       	ldi	r22, 0x10	; 16
    19e6:	84 e0       	ldi	r24, 0x04	; 4
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <sysclk_enable_module>
    19ee:	31 c0       	rjmp	.+98     	; 0x1a52 <usart_init_rs232+0x1ee>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    19f0:	c0 3a       	cpi	r28, 0xA0	; 160
    19f2:	8a e0       	ldi	r24, 0x0A	; 10
    19f4:	d8 07       	cpc	r29, r24
    19f6:	31 f4       	brne	.+12     	; 0x1a04 <usart_init_rs232+0x1a0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    19f8:	60 e1       	ldi	r22, 0x10	; 16
    19fa:	85 e0       	ldi	r24, 0x05	; 5
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <sysclk_enable_module>
    1a02:	27 c0       	rjmp	.+78     	; 0x1a52 <usart_init_rs232+0x1ee>
	else if (module == &USARTF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    1a04:	c0 3b       	cpi	r28, 0xB0	; 176
    1a06:	e8 e0       	ldi	r30, 0x08	; 8
    1a08:	de 07       	cpc	r29, r30
    1a0a:	31 f4       	brne	.+12     	; 0x1a18 <usart_init_rs232+0x1b4>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    1a0c:	60 e2       	ldi	r22, 0x20	; 32
    1a0e:	83 e0       	ldi	r24, 0x03	; 3
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <sysclk_enable_module>
    1a16:	1d c0       	rjmp	.+58     	; 0x1a52 <usart_init_rs232+0x1ee>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    1a18:	c0 3b       	cpi	r28, 0xB0	; 176
    1a1a:	f9 e0       	ldi	r31, 0x09	; 9
    1a1c:	df 07       	cpc	r29, r31
    1a1e:	31 f4       	brne	.+12     	; 0x1a2c <usart_init_rs232+0x1c8>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    1a20:	60 e2       	ldi	r22, 0x20	; 32
    1a22:	84 e0       	ldi	r24, 0x04	; 4
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <sysclk_enable_module>
    1a2a:	13 c0       	rjmp	.+38     	; 0x1a52 <usart_init_rs232+0x1ee>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    1a2c:	c0 38       	cpi	r28, 0x80	; 128
    1a2e:	84 e0       	ldi	r24, 0x04	; 4
    1a30:	d8 07       	cpc	r29, r24
    1a32:	31 f4       	brne	.+12     	; 0x1a40 <usart_init_rs232+0x1dc>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    1a34:	60 e4       	ldi	r22, 0x40	; 64
    1a36:	83 e0       	ldi	r24, 0x03	; 3
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <sysclk_enable_module>
    1a3e:	09 c0       	rjmp	.+18     	; 0x1a52 <usart_init_rs232+0x1ee>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    1a40:	c0 3a       	cpi	r28, 0xA0	; 160
    1a42:	e4 e0       	ldi	r30, 0x04	; 4
    1a44:	de 07       	cpc	r29, r30
    1a46:	29 f4       	brne	.+10     	; 0x1a52 <usart_init_rs232+0x1ee>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    1a48:	60 e4       	ldi	r22, 0x40	; 64
    1a4a:	85 e0       	ldi	r24, 0x05	; 5
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    1a52:	8d 81       	ldd	r24, Y+5	; 0x05
    1a54:	8f 73       	andi	r24, 0x3F	; 63
    1a56:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    1a58:	f8 01       	movw	r30, r16
    1a5a:	96 81       	ldd	r25, Z+6	; 0x06
    1a5c:	84 81       	ldd	r24, Z+4	; 0x04
    1a5e:	89 2b       	or	r24, r25
    1a60:	90 85       	ldd	r25, Z+8	; 0x08
    1a62:	99 23       	and	r25, r25
    1a64:	11 f0       	breq	.+4      	; 0x1a6a <usart_init_rs232+0x206>
    1a66:	98 e0       	ldi	r25, 0x08	; 8
    1a68:	01 c0       	rjmp	.+2      	; 0x1a6c <usart_init_rs232+0x208>
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	89 2b       	or	r24, r25
    1a6e:	8d 83       	std	Y+5, r24	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    1a70:	f8 01       	movw	r30, r16
    1a72:	40 81       	ld	r20, Z
    1a74:	51 81       	ldd	r21, Z+1	; 0x01
    1a76:	62 81       	ldd	r22, Z+2	; 0x02
    1a78:	73 81       	ldd	r23, Z+3	; 0x03
    1a7a:	00 e0       	ldi	r16, 0x00	; 0
    1a7c:	18 e4       	ldi	r17, 0x48	; 72
    1a7e:	28 ee       	ldi	r18, 0xE8	; 232
    1a80:	31 e0       	ldi	r19, 0x01	; 1
    1a82:	ce 01       	movw	r24, r28
    1a84:	e1 dd       	rcall	.-1086   	; 0x1648 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    1a86:	9c 81       	ldd	r25, Y+4	; 0x04
    1a88:	98 60       	ori	r25, 0x08	; 8
    1a8a:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    1a8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a8e:	90 61       	ori	r25, 0x10	; 16
    1a90:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
    1a92:	df 91       	pop	r29
    1a94:	cf 91       	pop	r28
    1a96:	1f 91       	pop	r17
    1a98:	0f 91       	pop	r16
    1a9a:	08 95       	ret

00001a9c <tick_handler>:
 * \param id      \ref timeout_id_t
 * \param period  Time period in number of ticks
 */
void timeout_start_periodic(timeout_id_t id, uint16_t period)
{
	timeout_start_offset(id, period, period);
    1a9c:	cf 93       	push	r28
    1a9e:	df 93       	push	r29
    1aa0:	c0 91 c6 22 	lds	r28, 0x22C6
    1aa4:	d0 91 e7 22 	lds	r29, 0x22E7
    1aa8:	e7 ec       	ldi	r30, 0xC7	; 199
    1aaa:	f2 e2       	ldi	r31, 0x22	; 34
    1aac:	80 e0       	ldi	r24, 0x00	; 0
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	61 e0       	ldi	r22, 0x01	; 1
    1ab2:	70 e0       	ldi	r23, 0x00	; 0
    1ab4:	2c 2f       	mov	r18, r28
    1ab6:	30 e0       	ldi	r19, 0x00	; 0
    1ab8:	08 2e       	mov	r0, r24
    1aba:	02 c0       	rjmp	.+4      	; 0x1ac0 <tick_handler+0x24>
    1abc:	35 95       	asr	r19
    1abe:	27 95       	ror	r18
    1ac0:	0a 94       	dec	r0
    1ac2:	e2 f7       	brpl	.-8      	; 0x1abc <tick_handler+0x20>
    1ac4:	20 ff       	sbrs	r18, 0
    1ac6:	1a c0       	rjmp	.+52     	; 0x1afc <tick_handler+0x60>
    1ac8:	20 81       	ld	r18, Z
    1aca:	31 81       	ldd	r19, Z+1	; 0x01
    1acc:	21 50       	subi	r18, 0x01	; 1
    1ace:	31 09       	sbc	r19, r1
    1ad0:	20 83       	st	Z, r18
    1ad2:	31 83       	std	Z+1, r19	; 0x01
    1ad4:	23 2b       	or	r18, r19
    1ad6:	91 f4       	brne	.+36     	; 0x1afc <tick_handler+0x60>
    1ad8:	9b 01       	movw	r18, r22
    1ada:	08 2e       	mov	r0, r24
    1adc:	02 c0       	rjmp	.+4      	; 0x1ae2 <tick_handler+0x46>
    1ade:	22 0f       	add	r18, r18
    1ae0:	33 1f       	adc	r19, r19
    1ae2:	0a 94       	dec	r0
    1ae4:	e2 f7       	brpl	.-8      	; 0x1ade <tick_handler+0x42>
    1ae6:	d2 2b       	or	r29, r18
    1ae8:	42 81       	ldd	r20, Z+2	; 0x02
    1aea:	53 81       	ldd	r21, Z+3	; 0x03
    1aec:	41 15       	cp	r20, r1
    1aee:	51 05       	cpc	r21, r1
    1af0:	19 f0       	breq	.+6      	; 0x1af8 <tick_handler+0x5c>
    1af2:	40 83       	st	Z, r20
    1af4:	51 83       	std	Z+1, r21	; 0x01
    1af6:	02 c0       	rjmp	.+4      	; 0x1afc <tick_handler+0x60>
    1af8:	20 95       	com	r18
    1afa:	c2 23       	and	r28, r18
    1afc:	01 96       	adiw	r24, 0x01	; 1
    1afe:	34 96       	adiw	r30, 0x04	; 4
    1b00:	88 30       	cpi	r24, 0x08	; 8
    1b02:	91 05       	cpc	r25, r1
    1b04:	b9 f6       	brne	.-82     	; 0x1ab4 <tick_handler+0x18>
    1b06:	c0 93 c6 22 	sts	0x22C6, r28
    1b0a:	d0 93 e7 22 	sts	0x22E7, r29
    1b0e:	60 e0       	ldi	r22, 0x00	; 0
    1b10:	70 e0       	ldi	r23, 0x00	; 0
    1b12:	cb 01       	movw	r24, r22
    1b14:	0e 94 0c 05 	call	0xa18	; 0xa18 <rtc_set_time>
    1b18:	60 e8       	ldi	r22, 0x80	; 128
    1b1a:	70 e0       	ldi	r23, 0x00	; 0
    1b1c:	80 e0       	ldi	r24, 0x00	; 0
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	0e 94 49 05 	call	0xa92	; 0xa92 <rtc_set_alarm>
    1b24:	df 91       	pop	r29
    1b26:	cf 91       	pop	r28
    1b28:	08 95       	ret

00001b2a <timeout_init>:
    1b2a:	0e 94 66 05 	call	0xacc	; 0xacc <rtc_init>
    1b2e:	8e e4       	ldi	r24, 0x4E	; 78
    1b30:	9d e0       	ldi	r25, 0x0D	; 13
    1b32:	0e 94 61 05 	call	0xac2	; 0xac2 <rtc_set_callback>
    1b36:	60 e0       	ldi	r22, 0x00	; 0
    1b38:	70 e0       	ldi	r23, 0x00	; 0
    1b3a:	cb 01       	movw	r24, r22
    1b3c:	0e 94 0c 05 	call	0xa18	; 0xa18 <rtc_set_time>
    1b40:	60 e8       	ldi	r22, 0x80	; 128
    1b42:	70 e0       	ldi	r23, 0x00	; 0
    1b44:	80 e0       	ldi	r24, 0x00	; 0
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	0c 94 49 05 	jmp	0xa92	; 0xa92 <rtc_set_alarm>

00001b4c <timeout_start_offset>:
    1b4c:	88 30       	cpi	r24, 0x08	; 8
    1b4e:	18 f5       	brcc	.+70     	; 0x1b96 <timeout_start_offset+0x4a>
    1b50:	af b7       	in	r26, 0x3f	; 63
    1b52:	f8 94       	cli
    1b54:	e8 2f       	mov	r30, r24
    1b56:	f0 e0       	ldi	r31, 0x00	; 0
    1b58:	ee 0f       	add	r30, r30
    1b5a:	ff 1f       	adc	r31, r31
    1b5c:	ee 0f       	add	r30, r30
    1b5e:	ff 1f       	adc	r31, r31
    1b60:	e9 53       	subi	r30, 0x39	; 57
    1b62:	fd 4d       	sbci	r31, 0xDD	; 221
    1b64:	40 83       	st	Z, r20
    1b66:	51 83       	std	Z+1, r21	; 0x01
    1b68:	62 83       	std	Z+2, r22	; 0x02
    1b6a:	73 83       	std	Z+3, r23	; 0x03
    1b6c:	21 e0       	ldi	r18, 0x01	; 1
    1b6e:	30 e0       	ldi	r19, 0x00	; 0
    1b70:	a9 01       	movw	r20, r18
    1b72:	02 c0       	rjmp	.+4      	; 0x1b78 <timeout_start_offset+0x2c>
    1b74:	44 0f       	add	r20, r20
    1b76:	55 1f       	adc	r21, r21
    1b78:	8a 95       	dec	r24
    1b7a:	e2 f7       	brpl	.-8      	; 0x1b74 <timeout_start_offset+0x28>
    1b7c:	ca 01       	movw	r24, r20
    1b7e:	90 91 c6 22 	lds	r25, 0x22C6
    1b82:	98 2b       	or	r25, r24
    1b84:	90 93 c6 22 	sts	0x22C6, r25
    1b88:	80 95       	com	r24
    1b8a:	90 91 e7 22 	lds	r25, 0x22E7
    1b8e:	89 23       	and	r24, r25
    1b90:	80 93 e7 22 	sts	0x22E7, r24
    1b94:	af bf       	out	0x3f, r26	; 63
    1b96:	08 95       	ret

00001b98 <timeout_start_singleshot>:
    1b98:	ab 01       	movw	r20, r22
    1b9a:	60 e0       	ldi	r22, 0x00	; 0
    1b9c:	70 e0       	ldi	r23, 0x00	; 0
    1b9e:	d6 cf       	rjmp	.-84     	; 0x1b4c <timeout_start_offset>

00001ba0 <timeout_test_and_clear_expired>:
 * \retval false  Timer still running
 */
bool timeout_test_and_clear_expired(timeout_id_t id)
{
	/* Check that ID within the TIMEOUT_COUNT range */
	if (id < TIMEOUT_COUNT) {
    1ba0:	88 30       	cpi	r24, 0x08	; 8
    1ba2:	f8 f4       	brcc	.+62     	; 0x1be2 <timeout_test_and_clear_expired+0x42>
		irqflags_t flags;

		/* Check if timeout has expired */
		if (timeout_expired & (1 << id)) {
    1ba4:	20 91 e7 22 	lds	r18, 0x22E7
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
    1baa:	08 2e       	mov	r0, r24
    1bac:	02 c0       	rjmp	.+4      	; 0x1bb2 <timeout_test_and_clear_expired+0x12>
    1bae:	35 95       	asr	r19
    1bb0:	27 95       	ror	r18
    1bb2:	0a 94       	dec	r0
    1bb4:	e2 f7       	brpl	.-8      	; 0x1bae <timeout_test_and_clear_expired+0xe>
    1bb6:	20 ff       	sbrs	r18, 0
    1bb8:	16 c0       	rjmp	.+44     	; 0x1be6 <timeout_test_and_clear_expired+0x46>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1bba:	4f b7       	in	r20, 0x3f	; 63
	cpu_irq_disable();
    1bbc:	f8 94       	cli
			flags = cpu_irq_save();
			timeout_expired &= ~(1 << id);
    1bbe:	21 e0       	ldi	r18, 0x01	; 1
    1bc0:	30 e0       	ldi	r19, 0x00	; 0
    1bc2:	b9 01       	movw	r22, r18
    1bc4:	02 c0       	rjmp	.+4      	; 0x1bca <timeout_test_and_clear_expired+0x2a>
    1bc6:	66 0f       	add	r22, r22
    1bc8:	77 1f       	adc	r23, r23
    1bca:	8a 95       	dec	r24
    1bcc:	e2 f7       	brpl	.-8      	; 0x1bc6 <timeout_test_and_clear_expired+0x26>
    1bce:	cb 01       	movw	r24, r22
    1bd0:	80 95       	com	r24
    1bd2:	90 91 e7 22 	lds	r25, 0x22E7
    1bd6:	89 23       	and	r24, r25
    1bd8:	80 93 e7 22 	sts	0x22E7, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1bdc:	4f bf       	out	0x3f, r20	; 63
			cpu_irq_restore(flags);
			return true;
    1bde:	81 e0       	ldi	r24, 0x01	; 1
    1be0:	08 95       	ret
		}
	}

	return false;
    1be2:	80 e0       	ldi	r24, 0x00	; 0
    1be4:	08 95       	ret
    1be6:	80 e0       	ldi	r24, 0x00	; 0
}
    1be8:	08 95       	ret

00001bea <timeout_stop>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1bea:	4f b7       	in	r20, 0x3f	; 63
	cpu_irq_disable();
    1bec:	f8 94       	cli
 */
void timeout_stop(timeout_id_t id)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	timeout_active &= ~(1 << id);
    1bee:	21 e0       	ldi	r18, 0x01	; 1
    1bf0:	30 e0       	ldi	r19, 0x00	; 0
    1bf2:	b9 01       	movw	r22, r18
    1bf4:	02 c0       	rjmp	.+4      	; 0x1bfa <timeout_stop+0x10>
    1bf6:	66 0f       	add	r22, r22
    1bf8:	77 1f       	adc	r23, r23
    1bfa:	8a 95       	dec	r24
    1bfc:	e2 f7       	brpl	.-8      	; 0x1bf6 <timeout_stop+0xc>
    1bfe:	cb 01       	movw	r24, r22
    1c00:	80 95       	com	r24
    1c02:	90 91 c6 22 	lds	r25, 0x22C6
    1c06:	89 23       	and	r24, r25
    1c08:	80 93 c6 22 	sts	0x22C6, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1c0c:	4f bf       	out	0x3f, r20	; 63
    1c0e:	08 95       	ret

00001c10 <get_current_pulse_counter>:
    } else {
        pwm_stop(&pwm_cfg);
    }

    return 0;
}
    1c10:	8f b7       	in	r24, 0x3f	; 63
    1c12:	f8 94       	cli
    1c14:	8f bf       	out	0x3f, r24	; 63
    1c16:	60 e0       	ldi	r22, 0x00	; 0
    1c18:	70 e0       	ldi	r23, 0x00	; 0
    1c1a:	cb 01       	movw	r24, r22
    1c1c:	08 95       	ret

00001c1e <get_midnight_pulse_counter>:
    1c1e:	8f b7       	in	r24, 0x3f	; 63
    1c20:	f8 94       	cli
    1c22:	8f bf       	out	0x3f, r24	; 63
    1c24:	60 e0       	ldi	r22, 0x00	; 0
    1c26:	70 e0       	ldi	r23, 0x00	; 0
    1c28:	cb 01       	movw	r24, r22
    1c2a:	08 95       	ret

00001c2c <reset_avr>:
    1c2c:	cf 93       	push	r28
    1c2e:	df 93       	push	r29
    1c30:	cd b7       	in	r28, 0x3d	; 61
    1c32:	de b7       	in	r29, 0x3e	; 62
    1c34:	61 97       	sbiw	r28, 0x11	; 17
    1c36:	cd bf       	out	0x3d, r28	; 61
    1c38:	de bf       	out	0x3e, r29	; 62
    1c3a:	80 e0       	ldi	r24, 0x00	; 0
    1c3c:	e9 df       	rcall	.-46     	; 0x1c10 <get_current_pulse_counter>
    1c3e:	69 83       	std	Y+1, r22	; 0x01
    1c40:	7a 83       	std	Y+2, r23	; 0x02
    1c42:	8b 83       	std	Y+3, r24	; 0x03
    1c44:	9c 83       	std	Y+4, r25	; 0x04
    1c46:	81 e0       	ldi	r24, 0x01	; 1
    1c48:	e3 df       	rcall	.-58     	; 0x1c10 <get_current_pulse_counter>
    1c4a:	6d 83       	std	Y+5, r22	; 0x05
    1c4c:	7e 83       	std	Y+6, r23	; 0x06
    1c4e:	8f 83       	std	Y+7, r24	; 0x07
    1c50:	98 87       	std	Y+8, r25	; 0x08
    1c52:	80 e0       	ldi	r24, 0x00	; 0
    1c54:	e4 df       	rcall	.-56     	; 0x1c1e <get_midnight_pulse_counter>
    1c56:	69 87       	std	Y+9, r22	; 0x09
    1c58:	7a 87       	std	Y+10, r23	; 0x0a
    1c5a:	8b 87       	std	Y+11, r24	; 0x0b
    1c5c:	9c 87       	std	Y+12, r25	; 0x0c
    1c5e:	81 e0       	ldi	r24, 0x01	; 1
    1c60:	de df       	rcall	.-68     	; 0x1c1e <get_midnight_pulse_counter>
    1c62:	6d 87       	std	Y+13, r22	; 0x0d
    1c64:	7e 87       	std	Y+14, r23	; 0x0e
    1c66:	8f 87       	std	Y+15, r24	; 0x0f
    1c68:	98 8b       	std	Y+16, r25	; 0x10
    1c6a:	60 e1       	ldi	r22, 0x10	; 16
    1c6c:	ce 01       	movw	r24, r28
    1c6e:	01 96       	adiw	r24, 0x01	; 1
    1c70:	0e 94 28 01 	call	0x250	; 0x250 <crc8_compute>
    1c74:	89 8b       	std	Y+17, r24	; 0x11
    1c76:	41 e1       	ldi	r20, 0x11	; 17
    1c78:	50 e0       	ldi	r21, 0x00	; 0
    1c7a:	be 01       	movw	r22, r28
    1c7c:	6f 5f       	subi	r22, 0xFF	; 255
    1c7e:	7f 4f       	sbci	r23, 0xFF	; 255
    1c80:	83 ec       	ldi	r24, 0xC3	; 195
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	0e 94 cb 04 	call	0x996	; 0x996 <nvm_eeprom_erase_and_write_buffer>
    1c88:	e0 ec       	ldi	r30, 0xC0	; 192
    1c8a:	f1 e0       	ldi	r31, 0x01	; 1
    1c8c:	87 85       	ldd	r24, Z+15	; 0x0f
    1c8e:	88 23       	and	r24, r24
    1c90:	ec f3       	brlt	.-6      	; 0x1c8c <reset_avr+0x60>
    1c92:	80 ed       	ldi	r24, 0xD0	; 208
    1c94:	90 e2       	ldi	r25, 0x20	; 32
    1c96:	0e 94 14 03 	call	0x628	; 0x628 <DEBUG_putcrlf>
    1c9a:	f8 94       	cli
    1c9c:	61 e0       	ldi	r22, 0x01	; 1
    1c9e:	89 e7       	ldi	r24, 0x79	; 121
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	0e 94 2f 04 	call	0x85e	; 0x85e <ccp_write_io>
    1ca6:	ff cf       	rjmp	.-2      	; 0x1ca6 <reset_avr+0x7a>

00001ca8 <__vector_64>:
    1ca8:	1f 92       	push	r1
    1caa:	0f 92       	push	r0
    1cac:	0f b6       	in	r0, 0x3f	; 63
    1cae:	0f 92       	push	r0
    1cb0:	11 24       	eor	r1, r1
    1cb2:	8f 93       	push	r24
    1cb4:	ef 93       	push	r30
    1cb6:	ff 93       	push	r31
    1cb8:	81 e0       	ldi	r24, 0x01	; 1
    1cba:	e0 e6       	ldi	r30, 0x60	; 96
    1cbc:	f6 e0       	ldi	r31, 0x06	; 6
    1cbe:	84 87       	std	Z+12, r24	; 0x0c
    1cc0:	ff 91       	pop	r31
    1cc2:	ef 91       	pop	r30
    1cc4:	8f 91       	pop	r24
    1cc6:	0f 90       	pop	r0
    1cc8:	0f be       	out	0x3f, r0	; 63
    1cca:	0f 90       	pop	r0
    1ccc:	1f 90       	pop	r1
    1cce:	18 95       	reti

00001cd0 <__vector_2>:
    1cd0:	1f 92       	push	r1
    1cd2:	0f 92       	push	r0
    1cd4:	0f b6       	in	r0, 0x3f	; 63
    1cd6:	0f 92       	push	r0
    1cd8:	11 24       	eor	r1, r1
    1cda:	8f 93       	push	r24
    1cdc:	ef 93       	push	r30
    1cde:	ff 93       	push	r31
    1ce0:	81 e0       	ldi	r24, 0x01	; 1
    1ce2:	e0 e4       	ldi	r30, 0x40	; 64
    1ce4:	f6 e0       	ldi	r31, 0x06	; 6
    1ce6:	84 87       	std	Z+12, r24	; 0x0c
    1ce8:	ff 91       	pop	r31
    1cea:	ef 91       	pop	r30
    1cec:	8f 91       	pop	r24
    1cee:	0f 90       	pop	r0
    1cf0:	0f be       	out	0x3f, r0	; 63
    1cf2:	0f 90       	pop	r0
    1cf4:	1f 90       	pop	r1
    1cf6:	18 95       	reti

00001cf8 <__vector_34>:
    1cf8:	1f 92       	push	r1
    1cfa:	0f 92       	push	r0
    1cfc:	0f b6       	in	r0, 0x3f	; 63
    1cfe:	0f 92       	push	r0
    1d00:	11 24       	eor	r1, r1
    1d02:	8f 93       	push	r24
    1d04:	ef 93       	push	r30
    1d06:	ff 93       	push	r31
    1d08:	81 e0       	ldi	r24, 0x01	; 1
    1d0a:	e0 e2       	ldi	r30, 0x20	; 32
    1d0c:	f6 e0       	ldi	r31, 0x06	; 6
    1d0e:	84 87       	std	Z+12, r24	; 0x0c
    1d10:	ff 91       	pop	r31
    1d12:	ef 91       	pop	r30
    1d14:	8f 91       	pop	r24
    1d16:	0f 90       	pop	r0
    1d18:	0f be       	out	0x3f, r0	; 63
    1d1a:	0f 90       	pop	r0
    1d1c:	1f 90       	pop	r1
    1d1e:	18 95       	reti

00001d20 <__vector_66>:
    1d20:	1f 92       	push	r1
    1d22:	0f 92       	push	r0
    1d24:	0f b6       	in	r0, 0x3f	; 63
    1d26:	0f 92       	push	r0
    1d28:	11 24       	eor	r1, r1
    1d2a:	8f 93       	push	r24
    1d2c:	ef 93       	push	r30
    1d2e:	ff 93       	push	r31
    1d30:	81 e0       	ldi	r24, 0x01	; 1
    1d32:	e0 e0       	ldi	r30, 0x00	; 0
    1d34:	f6 e0       	ldi	r31, 0x06	; 6
    1d36:	84 87       	std	Z+12, r24	; 0x0c
    1d38:	ff 91       	pop	r31
    1d3a:	ef 91       	pop	r30
    1d3c:	8f 91       	pop	r24
    1d3e:	0f 90       	pop	r0
    1d40:	0f be       	out	0x3f, r0	; 63
    1d42:	0f 90       	pop	r0
    1d44:	1f 90       	pop	r1
    1d46:	18 95       	reti

00001d48 <get_unsolicited_commands>:
    1d48:	cf 92       	push	r12
    1d4a:	df 92       	push	r13
    1d4c:	ef 92       	push	r14
    1d4e:	ff 92       	push	r15
    1d50:	0f 93       	push	r16
    1d52:	1f 93       	push	r17
    1d54:	cf 93       	push	r28
    1d56:	df 93       	push	r29
    1d58:	6c 01       	movw	r12, r24
    1d5a:	7b 01       	movw	r14, r22
    1d5c:	c0 e0       	ldi	r28, 0x00	; 0
    1d5e:	d0 e0       	ldi	r29, 0x00	; 0
    1d60:	8c 01       	movw	r16, r24
    1d62:	01 50       	subi	r16, 0x01	; 1
    1d64:	11 09       	sbc	r17, r1
    1d66:	0e 94 2d 03 	call	0x65a	; 0x65a <MODEM_get_byte>
    1d6a:	c0 17       	cp	r28, r16
    1d6c:	d1 07       	cpc	r29, r17
    1d6e:	24 f4       	brge	.+8      	; 0x1d78 <get_unsolicited_commands+0x30>
    1d70:	f7 01       	movw	r30, r14
    1d72:	ec 0f       	add	r30, r28
    1d74:	fd 1f       	adc	r31, r29
    1d76:	80 83       	st	Z, r24
    1d78:	21 96       	adiw	r28, 0x01	; 1
    1d7a:	8d 30       	cpi	r24, 0x0D	; 13
    1d7c:	11 f0       	breq	.+4      	; 0x1d82 <get_unsolicited_commands+0x3a>
    1d7e:	8a 30       	cpi	r24, 0x0A	; 10
    1d80:	91 f7       	brne	.-28     	; 0x1d66 <get_unsolicited_commands+0x1e>
    1d82:	ec 0c       	add	r14, r12
    1d84:	fd 1c       	adc	r15, r13
    1d86:	f7 01       	movw	r30, r14
    1d88:	31 97       	sbiw	r30, 0x01	; 1
    1d8a:	10 82       	st	Z, r1
    1d8c:	df 91       	pop	r29
    1d8e:	cf 91       	pop	r28
    1d90:	1f 91       	pop	r17
    1d92:	0f 91       	pop	r16
    1d94:	ff 90       	pop	r15
    1d96:	ef 90       	pop	r14
    1d98:	df 90       	pop	r13
    1d9a:	cf 90       	pop	r12
    1d9c:	08 95       	ret

00001d9e <clear_temp_string>:
    1d9e:	e6 2f       	mov	r30, r22
    1da0:	f7 2f       	mov	r31, r23
    1da2:	80 e0       	ldi	r24, 0x00	; 0
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	11 92       	st	Z+, r1
    1da8:	01 96       	adiw	r24, 0x01	; 1
    1daa:	8c 33       	cpi	r24, 0x3C	; 60
    1dac:	91 05       	cpc	r25, r1
    1dae:	d9 f7       	brne	.-10     	; 0x1da6 <clear_temp_string+0x8>
    1db0:	08 95       	ret

00001db2 <ack_job>:
    1db2:	cf 93       	push	r28
    1db4:	df 93       	push	r29
    1db6:	cd b7       	in	r28, 0x3d	; 61
    1db8:	de b7       	in	r29, 0x3e	; 62
    1dba:	ec 97       	sbiw	r28, 0x3c	; 60
    1dbc:	cd bf       	out	0x3d, r28	; 61
    1dbe:	de bf       	out	0x3e, r29	; 62
    1dc0:	23 e1       	ldi	r18, 0x13	; 19
    1dc2:	e6 e2       	ldi	r30, 0x26	; 38
    1dc4:	f0 e2       	ldi	r31, 0x20	; 32
    1dc6:	de 01       	movw	r26, r28
    1dc8:	11 96       	adiw	r26, 0x01	; 1
    1dca:	01 90       	ld	r0, Z+
    1dcc:	0d 92       	st	X+, r0
    1dce:	2a 95       	dec	r18
    1dd0:	e1 f7       	brne	.-8      	; 0x1dca <ack_job+0x18>
    1dd2:	bc 01       	movw	r22, r24
    1dd4:	ce 01       	movw	r24, r28
    1dd6:	01 96       	adiw	r24, 0x01	; 1
    1dd8:	e5 d1       	rcall	.+970    	; 0x21a4 <strcat>
    1dda:	ce 01       	movw	r24, r28
    1ddc:	01 96       	adiw	r24, 0x01	; 1
    1dde:	0e 94 36 03 	call	0x66c	; 0x66c <MODEM_raw_puts>
    1de2:	8a e0       	ldi	r24, 0x0A	; 10
    1de4:	0e 94 2f 03 	call	0x65e	; 0x65e <MODEM_raw_putb>
    1de8:	8d e0       	ldi	r24, 0x0D	; 13
    1dea:	0e 94 2f 03 	call	0x65e	; 0x65e <MODEM_raw_putb>
    1dee:	80 e0       	ldi	r24, 0x00	; 0
    1df0:	92 e1       	ldi	r25, 0x12	; 18
    1df2:	aa e7       	ldi	r26, 0x7A	; 122
    1df4:	b0 e0       	ldi	r27, 0x00	; 0
    1df6:	01 97       	sbiw	r24, 0x01	; 1
    1df8:	a1 09       	sbc	r26, r1
    1dfa:	b1 09       	sbc	r27, r1
    1dfc:	e1 f7       	brne	.-8      	; 0x1df6 <ack_job+0x44>
    1dfe:	ec 96       	adiw	r28, 0x3c	; 60
    1e00:	cd bf       	out	0x3d, r28	; 61
    1e02:	de bf       	out	0x3e, r29	; 62
    1e04:	df 91       	pop	r29
    1e06:	cf 91       	pop	r28
    1e08:	08 95       	ret

00001e0a <decode>:

asset_model* decode(char* serial_in)
{
    1e0a:	ef 92       	push	r14
    1e0c:	ff 92       	push	r15
    1e0e:	0f 93       	push	r16
    1e10:	1f 93       	push	r17
    1e12:	cf 93       	push	r28
    1e14:	df 93       	push	r29
    1e16:	cd b7       	in	r28, 0x3d	; 61
    1e18:	de b7       	in	r29, 0x3e	; 62
    1e1a:	61 97       	sbiw	r28, 0x11	; 17
    1e1c:	cd bf       	out	0x3d, r28	; 61
    1e1e:	de bf       	out	0x3e, r29	; 62
    int delimiters_array [] = {0, 0, 0, 0, 0, 0, 0};
    int pos = 0;
    char* token = strtok(serial_in, ": ,");
    1e20:	69 e3       	ldi	r22, 0x39	; 57
    1e22:	70 e2       	ldi	r23, 0x20	; 32
    1e24:	bc d1       	rcall	.+888    	; 0x219e <strtok>
    asset_model model;

    while (token != NULL) {
    1e26:	89 2b       	or	r24, r25
    1e28:	09 f4       	brne	.+2      	; 0x1e2c <decode+0x22>
    1e2a:	43 c0       	rjmp	.+134    	; 0x1eb2 <decode+0xa8>
}

asset_model* decode(char* serial_in)
{
    int delimiters_array [] = {0, 0, 0, 0, 0, 0, 0};
    int pos = 0;
    1e2c:	00 e0       	ldi	r16, 0x00	; 0
    1e2e:	10 e0       	ldi	r17, 0x00	; 0
    char* token = strtok(serial_in, ": ,");
    asset_model model;

    while (token != NULL) {
        token = strtok(NULL, ",");
    1e30:	6b e3       	ldi	r22, 0x3B	; 59
    1e32:	70 e2       	ldi	r23, 0x20	; 32
    1e34:	80 e0       	ldi	r24, 0x00	; 0
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	b2 d1       	rcall	.+868    	; 0x219e <strtok>
    1e3a:	7c 01       	movw	r14, r24
        switch (pos) {
    1e3c:	03 30       	cpi	r16, 0x03	; 3
    1e3e:	11 05       	cpc	r17, r1
    1e40:	09 f1       	breq	.+66     	; 0x1e84 <decode+0x7a>
    1e42:	44 f4       	brge	.+16     	; 0x1e54 <decode+0x4a>
    1e44:	01 30       	cpi	r16, 0x01	; 1
    1e46:	11 05       	cpc	r17, r1
    1e48:	79 f0       	breq	.+30     	; 0x1e68 <decode+0x5e>
    1e4a:	cc f4       	brge	.+50     	; 0x1e7e <decode+0x74>
    1e4c:	01 15       	cp	r16, r1
    1e4e:	11 05       	cpc	r17, r1
    1e50:	49 f0       	breq	.+18     	; 0x1e64 <decode+0x5a>
    1e52:	2a c0       	rjmp	.+84     	; 0x1ea8 <decode+0x9e>
    1e54:	05 30       	cpi	r16, 0x05	; 5
    1e56:	11 05       	cpc	r17, r1
    1e58:	d9 f0       	breq	.+54     	; 0x1e90 <decode+0x86>
    1e5a:	bc f0       	brlt	.+46     	; 0x1e8a <decode+0x80>
    1e5c:	06 30       	cpi	r16, 0x06	; 6
    1e5e:	11 05       	cpc	r17, r1
    1e60:	19 f5       	brne	.+70     	; 0x1ea8 <decode+0x9e>
    1e62:	20 c0       	rjmp	.+64     	; 0x1ea4 <decode+0x9a>
        case 0:
            model.job_type = token;
    1e64:	89 83       	std	Y+1, r24	; 0x01
            break;
    1e66:	20 c0       	rjmp	.+64     	; 0x1ea8 <decode+0x9e>
        case 1:
            ack_job(token);
    1e68:	a4 df       	rcall	.-184    	; 0x1db2 <ack_job>
            model.job_id = (int32_t) token;
    1e6a:	c7 01       	movw	r24, r14
    1e6c:	aa 27       	eor	r26, r26
    1e6e:	97 fd       	sbrc	r25, 7
    1e70:	a0 95       	com	r26
    1e72:	ba 2f       	mov	r27, r26
    1e74:	8a 83       	std	Y+2, r24	; 0x02
    1e76:	9b 83       	std	Y+3, r25	; 0x03
    1e78:	ac 83       	std	Y+4, r26	; 0x04
    1e7a:	bd 83       	std	Y+5, r27	; 0x05
            break;
    1e7c:	15 c0       	rjmp	.+42     	; 0x1ea8 <decode+0x9e>
        case 2:
            model.asset_id = token;
    1e7e:	8e 83       	std	Y+6, r24	; 0x06
    1e80:	9f 83       	std	Y+7, r25	; 0x07
            break;
    1e82:	12 c0       	rjmp	.+36     	; 0x1ea8 <decode+0x9e>
        case 3:
            model.job_desc = token;
    1e84:	88 87       	std	Y+8, r24	; 0x08
    1e86:	99 87       	std	Y+9, r25	; 0x09
            break;
    1e88:	0f c0       	rjmp	.+30     	; 0x1ea8 <decode+0x9e>
        case 4:
            model.data_type = token;
    1e8a:	8a 87       	std	Y+10, r24	; 0x0a
    1e8c:	9b 87       	std	Y+11, r25	; 0x0b
            break;
    1e8e:	0c c0       	rjmp	.+24     	; 0x1ea8 <decode+0x9e>
        case 5:
            model.job_value = (int32_t) token;
    1e90:	ac 01       	movw	r20, r24
    1e92:	66 27       	eor	r22, r22
    1e94:	57 fd       	sbrc	r21, 7
    1e96:	60 95       	com	r22
    1e98:	76 2f       	mov	r23, r22
    1e9a:	4c 87       	std	Y+12, r20	; 0x0c
    1e9c:	5d 87       	std	Y+13, r21	; 0x0d
    1e9e:	6e 87       	std	Y+14, r22	; 0x0e
    1ea0:	7f 87       	std	Y+15, r23	; 0x0f
            break;
    1ea2:	02 c0       	rjmp	.+4      	; 0x1ea8 <decode+0x9e>
        case 6:
            model.crc = token;
    1ea4:	88 8b       	std	Y+16, r24	; 0x10
    1ea6:	99 8b       	std	Y+17, r25	; 0x11
            break;
        }
        pos++;
    1ea8:	0f 5f       	subi	r16, 0xFF	; 255
    1eaa:	1f 4f       	sbci	r17, 0xFF	; 255
    int delimiters_array [] = {0, 0, 0, 0, 0, 0, 0};
    int pos = 0;
    char* token = strtok(serial_in, ": ,");
    asset_model model;

    while (token != NULL) {
    1eac:	ef 28       	or	r14, r15
    1eae:	09 f0       	breq	.+2      	; 0x1eb2 <decode+0xa8>
    1eb0:	bf cf       	rjmp	.-130    	; 0x1e30 <decode+0x26>
            break;
        }
        pos++;
    }
    return &model; //return address of the model struct
}
    1eb2:	ce 01       	movw	r24, r28
    1eb4:	01 96       	adiw	r24, 0x01	; 1
    1eb6:	61 96       	adiw	r28, 0x11	; 17
    1eb8:	cd bf       	out	0x3d, r28	; 61
    1eba:	de bf       	out	0x3e, r29	; 62
    1ebc:	df 91       	pop	r29
    1ebe:	cf 91       	pop	r28
    1ec0:	1f 91       	pop	r17
    1ec2:	0f 91       	pop	r16
    1ec4:	ff 90       	pop	r15
    1ec6:	ef 90       	pop	r14
    1ec8:	08 95       	ret

00001eca <schedule_job>:

void schedule_job(asset_model* model)
{
    1eca:	cf 92       	push	r12
    1ecc:	df 92       	push	r13
    1ece:	ef 92       	push	r14
    1ed0:	ff 92       	push	r15
    1ed2:	0f 93       	push	r16
    1ed4:	1f 93       	push	r17
    1ed6:	cf 93       	push	r28
    1ed8:	df 93       	push	r29
    1eda:	cd b7       	in	r28, 0x3d	; 61
    1edc:	de b7       	in	r29, 0x3e	; 62
    1ede:	2f 97       	sbiw	r28, 0x0f	; 15
    1ee0:	cd bf       	out	0x3d, r28	; 61
    1ee2:	de bf       	out	0x3e, r29	; 62
    1ee4:	8c 01       	movw	r16, r24
    */
    int count = 0;
    int address_count = 0x0000;
    char job_value_buffer[15];

    if (strcmp(model->asset_id, "ICA1") == 0) {
    1ee6:	6d e3       	ldi	r22, 0x3D	; 61
    1ee8:	70 e2       	ldi	r23, 0x20	; 32
    1eea:	fc 01       	movw	r30, r24
    1eec:	85 81       	ldd	r24, Z+5	; 0x05
    1eee:	96 81       	ldd	r25, Z+6	; 0x06
    1ef0:	64 d1       	rcall	.+712    	; 0x21ba <strcmp>
    1ef2:	28 2f       	mov	r18, r24
    1ef4:	39 2f       	mov	r19, r25
    1ef6:	23 2b       	or	r18, r19
    1ef8:	09 f0       	breq	.+2      	; 0x1efc <schedule_job+0x32>
    1efa:	69 c0       	rjmp	.+210    	; 0x1fce <schedule_job+0x104>
        DEBUG_puts("jooooooooooooooooooooooooooooooooooooooooooooooooooooooo");
    1efc:	82 e4       	ldi	r24, 0x42	; 66
    1efe:	90 e2       	ldi	r25, 0x20	; 32
    1f00:	0e 94 06 03 	call	0x60c	; 0x60c <DEBUG_puts>
        if (model->job_desc == "TV_ts0") {
    1f04:	f8 01       	movw	r30, r16
    1f06:	87 81       	ldd	r24, Z+7	; 0x07
    1f08:	90 85       	ldd	r25, Z+8	; 0x08
    1f0a:	8b 57       	subi	r24, 0x7B	; 123
    1f0c:	90 42       	sbci	r25, 0x20	; 32
    1f0e:	f1 f4       	brne	.+60     	; 0x1f4c <schedule_job+0x82>
            strcpy(job_value_buffer, model->job_value);
    1f10:	f8 01       	movw	r30, r16
    1f12:	63 85       	ldd	r22, Z+11	; 0x0b
    1f14:	74 85       	ldd	r23, Z+12	; 0x0c
    1f16:	ce 01       	movw	r24, r28
    1f18:	01 96       	adiw	r24, 0x01	; 1
    1f1a:	58 d1       	rcall	.+688    	; 0x21cc <strcpy>
            DEBUG_puts("jooooooooooooooooooooooooooooooooooooooooooooooooooooooo");
    1f1c:	82 e4       	ldi	r24, 0x42	; 66
    1f1e:	90 e2       	ldi	r25, 0x20	; 32
    1f20:	0e 94 06 03 	call	0x60c	; 0x60c <DEBUG_puts>
            while (job_value_buffer[count] != NULL) {
    1f24:	69 81       	ldd	r22, Y+1	; 0x01
    1f26:	66 23       	and	r22, r22
    1f28:	89 f0       	breq	.+34     	; 0x1f4c <schedule_job+0x82>
    1f2a:	6e 01       	movw	r12, r28
    1f2c:	f2 e0       	ldi	r31, 0x02	; 2
    1f2e:	cf 0e       	add	r12, r31
    1f30:	d1 1c       	adc	r13, r1
    DEBUG_puts("type: ");
    DEBUG_puts(buffer);
    DEBUG_puts("\n \r");
    nvm_eeprom_write_byte(0x0000, 101);
    */
    int count = 0;
    1f32:	e1 2c       	mov	r14, r1
    1f34:	f1 2c       	mov	r15, r1
        DEBUG_puts("jooooooooooooooooooooooooooooooooooooooooooooooooooooooo");
        if (model->job_desc == "TV_ts0") {
            strcpy(job_value_buffer, model->job_value);
            DEBUG_puts("jooooooooooooooooooooooooooooooooooooooooooooooooooooooo");
            while (job_value_buffer[count] != NULL) {
                nvm_eeprom_write_byte(address_count, job_value_buffer[count]);
    1f36:	c7 01       	movw	r24, r14
    1f38:	0e 94 69 04 	call	0x8d2	; 0x8d2 <nvm_eeprom_write_byte>
                count++;
    1f3c:	2f ef       	ldi	r18, 0xFF	; 255
    1f3e:	e2 1a       	sub	r14, r18
    1f40:	f2 0a       	sbc	r15, r18
    if (strcmp(model->asset_id, "ICA1") == 0) {
        DEBUG_puts("jooooooooooooooooooooooooooooooooooooooooooooooooooooooo");
        if (model->job_desc == "TV_ts0") {
            strcpy(job_value_buffer, model->job_value);
            DEBUG_puts("jooooooooooooooooooooooooooooooooooooooooooooooooooooooo");
            while (job_value_buffer[count] != NULL) {
    1f42:	f6 01       	movw	r30, r12
    1f44:	61 91       	ld	r22, Z+
    1f46:	6f 01       	movw	r12, r30
    1f48:	61 11       	cpse	r22, r1
    1f4a:	f5 cf       	rjmp	.-22     	; 0x1f36 <schedule_job+0x6c>
                count++;
                address_count++;
            }
            count = 0;
        }
        if (model->job_desc == "TV_ts1") {
    1f4c:	f8 01       	movw	r30, r16
    1f4e:	87 81       	ldd	r24, Z+7	; 0x07
    1f50:	90 85       	ldd	r25, Z+8	; 0x08
    1f52:	82 58       	subi	r24, 0x82	; 130
    1f54:	90 42       	sbci	r25, 0x20	; 32
    1f56:	e1 f4       	brne	.+56     	; 0x1f90 <schedule_job+0xc6>
            address_count = 0x0010;
            strcpy(job_value_buffer, model->job_value);
    1f58:	f8 01       	movw	r30, r16
    1f5a:	63 85       	ldd	r22, Z+11	; 0x0b
    1f5c:	74 85       	ldd	r23, Z+12	; 0x0c
    1f5e:	ce 01       	movw	r24, r28
    1f60:	01 96       	adiw	r24, 0x01	; 1
    1f62:	34 d1       	rcall	.+616    	; 0x21cc <strcpy>
            while (job_value_buffer[count] != NULL) {
    1f64:	69 81       	ldd	r22, Y+1	; 0x01
    1f66:	66 23       	and	r22, r22
    1f68:	99 f0       	breq	.+38     	; 0x1f90 <schedule_job+0xc6>
    1f6a:	6e 01       	movw	r12, r28
    1f6c:	f2 e0       	ldi	r31, 0x02	; 2
    1f6e:	cf 0e       	add	r12, r31
    1f70:	d1 1c       	adc	r13, r1
                address_count++;
            }
            count = 0;
        }
        if (model->job_desc == "TV_ts1") {
            address_count = 0x0010;
    1f72:	68 94       	set
    1f74:	ee 24       	eor	r14, r14
    1f76:	e4 f8       	bld	r14, 4
    1f78:	f1 2c       	mov	r15, r1
            strcpy(job_value_buffer, model->job_value);
            while (job_value_buffer[count] != NULL) {
                nvm_eeprom_write_byte(address_count, job_value_buffer[count]);
    1f7a:	c7 01       	movw	r24, r14
    1f7c:	0e 94 69 04 	call	0x8d2	; 0x8d2 <nvm_eeprom_write_byte>
                count++;
                address_count++;
    1f80:	2f ef       	ldi	r18, 0xFF	; 255
    1f82:	e2 1a       	sub	r14, r18
    1f84:	f2 0a       	sbc	r15, r18
            count = 0;
        }
        if (model->job_desc == "TV_ts1") {
            address_count = 0x0010;
            strcpy(job_value_buffer, model->job_value);
            while (job_value_buffer[count] != NULL) {
    1f86:	f6 01       	movw	r30, r12
    1f88:	61 91       	ld	r22, Z+
    1f8a:	6f 01       	movw	r12, r30
    1f8c:	61 11       	cpse	r22, r1
    1f8e:	f5 cf       	rjmp	.-22     	; 0x1f7a <schedule_job+0xb0>
                count++;
                address_count++;
            }
            count = 0;
        }
        if (model->job_desc == "TV_ts2") {
    1f90:	f8 01       	movw	r30, r16
    1f92:	87 81       	ldd	r24, Z+7	; 0x07
    1f94:	90 85       	ldd	r25, Z+8	; 0x08
    1f96:	89 58       	subi	r24, 0x89	; 137
    1f98:	90 42       	sbci	r25, 0x20	; 32
    1f9a:	c9 f4       	brne	.+50     	; 0x1fce <schedule_job+0x104>
            address_count = 0x0020;
            strcpy(job_value_buffer, model->job_value);
    1f9c:	f8 01       	movw	r30, r16
    1f9e:	63 85       	ldd	r22, Z+11	; 0x0b
    1fa0:	74 85       	ldd	r23, Z+12	; 0x0c
    1fa2:	ce 01       	movw	r24, r28
    1fa4:	01 96       	adiw	r24, 0x01	; 1
    1fa6:	12 d1       	rcall	.+548    	; 0x21cc <strcpy>
            while (job_value_buffer[count] != NULL) {
    1fa8:	69 81       	ldd	r22, Y+1	; 0x01
    1faa:	66 23       	and	r22, r22
    1fac:	81 f0       	breq	.+32     	; 0x1fce <schedule_job+0x104>
    1fae:	7e 01       	movw	r14, r28
    1fb0:	f2 e0       	ldi	r31, 0x02	; 2
    1fb2:	ef 0e       	add	r14, r31
    1fb4:	f1 1c       	adc	r15, r1
                address_count++;
            }
            count = 0;
        }
        if (model->job_desc == "TV_ts2") {
            address_count = 0x0020;
    1fb6:	00 e2       	ldi	r16, 0x20	; 32
    1fb8:	10 e0       	ldi	r17, 0x00	; 0
            strcpy(job_value_buffer, model->job_value);
            while (job_value_buffer[count] != NULL) {
                nvm_eeprom_write_byte(address_count, job_value_buffer[count]);
    1fba:	c8 01       	movw	r24, r16
    1fbc:	0e 94 69 04 	call	0x8d2	; 0x8d2 <nvm_eeprom_write_byte>
                count++;
                address_count++;
    1fc0:	0f 5f       	subi	r16, 0xFF	; 255
    1fc2:	1f 4f       	sbci	r17, 0xFF	; 255
            count = 0;
        }
        if (model->job_desc == "TV_ts2") {
            address_count = 0x0020;
            strcpy(job_value_buffer, model->job_value);
            while (job_value_buffer[count] != NULL) {
    1fc4:	f7 01       	movw	r30, r14
    1fc6:	61 91       	ld	r22, Z+
    1fc8:	7f 01       	movw	r14, r30
    1fca:	61 11       	cpse	r22, r1
    1fcc:	f6 cf       	rjmp	.-20     	; 0x1fba <schedule_job+0xf0>
            count = 0;
        }
    }

    return 0;
}
    1fce:	2f 96       	adiw	r28, 0x0f	; 15
    1fd0:	cd bf       	out	0x3d, r28	; 61
    1fd2:	de bf       	out	0x3e, r29	; 62
    1fd4:	df 91       	pop	r29
    1fd6:	cf 91       	pop	r28
    1fd8:	1f 91       	pop	r17
    1fda:	0f 91       	pop	r16
    1fdc:	ff 90       	pop	r15
    1fde:	ef 90       	pop	r14
    1fe0:	df 90       	pop	r13
    1fe2:	cf 90       	pop	r12
    1fe4:	08 95       	ret

00001fe6 <print_eeprom>:

void print_eeprom(void)
{
    int addr = 0x0000;
    DEBUG_puts("eeprom : ");
    1fe6:	80 e9       	ldi	r24, 0x90	; 144
    1fe8:	90 e2       	ldi	r25, 0x20	; 32
    1fea:	0e 94 06 03 	call	0x60c	; 0x60c <DEBUG_puts>
    DEBUG_putb(nvm_eeprom_read_byte(addr));
    1fee:	80 e0       	ldi	r24, 0x00	; 0
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	0e 94 35 04 	call	0x86a	; 0x86a <nvm_eeprom_read_byte>
    1ff6:	0e 94 1a 03 	call	0x634	; 0x634 <DEBUG_putb>
    DEBUG_puts("\n \r");
    1ffa:	8a e9       	ldi	r24, 0x9A	; 154
    1ffc:	90 e2       	ldi	r25, 0x20	; 32
    1ffe:	0c 94 06 03 	jmp	0x60c	; 0x60c <DEBUG_puts>

00002002 <main>:


}

int main(void)
{
    2002:	cf 93       	push	r28
    2004:	df 93       	push	r29
    2006:	cd b7       	in	r28, 0x3d	; 61
    2008:	de b7       	in	r29, 0x3e	; 62
    200a:	ec 97       	sbiw	r28, 0x3c	; 60
    200c:	cd bf       	out	0x3d, r28	; 61
    200e:	de bf       	out	0x3e, r29	; 62
    irq_initialize_vectors();
    2010:	e0 ea       	ldi	r30, 0xA0	; 160
    2012:	f0 e0       	ldi	r31, 0x00	; 0
    2014:	87 e0       	ldi	r24, 0x07	; 7
    2016:	82 83       	std	Z+2, r24	; 0x02
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    2018:	82 83       	std	Z+2, r24	; 0x02
    pmic_init();
    sysclk_init();
    201a:	0e 94 aa 03 	call	0x754	; 0x754 <sysclk_init>
    timeout_init();
    201e:	85 dd       	rcall	.-1270   	; 0x1b2a <timeout_init>
    ioport_init();
    board_init();
    2020:	0e 94 44 03 	call	0x688	; 0x688 <board_init>
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
    2024:	10 92 e8 22 	sts	0x22E8, r1
    2028:	10 92 e9 22 	sts	0x22E9, r1
    202c:	10 92 ea 22 	sts	0x22EA, r1
    2030:	10 92 eb 22 	sts	0x22EB, r1
    2034:	10 92 ec 22 	sts	0x22EC, r1
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    2038:	81 e0       	ldi	r24, 0x01	; 1
    203a:	80 93 ed 22 	sts	0x22ED, r24
    sleepmgr_init();
    rtc_init();
    203e:	0e 94 66 05 	call	0xacc	; 0xacc <rtc_init>
    cpu_irq_enable();
    2042:	78 94       	sei
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    2044:	88 e0       	ldi	r24, 0x08	; 8
    2046:	e0 e2       	ldi	r30, 0x20	; 32
    2048:	f6 e0       	ldi	r31, 0x06	; 6
    204a:	86 83       	std	Z+6, r24	; 0x06
    delay_init(F_CPU);

    ioport_set_pin_low(GPIO_LED1);
    _DEBUG_init();
    204c:	0e 94 a8 01 	call	0x350	; 0x350 <_uartc1_init>
    _DEBUG_enable_interrupt(USART_INT_LVL_LO);
    2050:	81 e0       	ldi	r24, 0x01	; 1
    2052:	90 e0       	ldi	r25, 0x00	; 0
    2054:	0e 94 9f 01 	call	0x33e	; 0x33e <_uartc1_enable_interrupt>
    _MODEM_init();
    2058:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_uarte0_init>
    _MODEM_enable_interrupt(USART_INT_LVL_LO);
    205c:	81 e0       	ldi	r24, 0x01	; 1
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	0e 94 74 02 	call	0x4e8	; 0x4e8 <_uarte0_enable_interrupt>
    char unsolicited_command[60];
    char* unsolicited_command_ptr = &unsolicited_command;
    uint32_t loop_time_start;

    MODEM_raw_puts("at+awtda=c*");
    2064:	8e e9       	ldi	r24, 0x9E	; 158
    2066:	90 e2       	ldi	r25, 0x20	; 32
    2068:	0e 94 36 03 	call	0x66c	; 0x66c <MODEM_raw_puts>
    MODEM_raw_putb('\r');
    206c:	8d e0       	ldi	r24, 0x0D	; 13
    206e:	0e 94 2f 03 	call	0x65e	; 0x65e <MODEM_raw_putb>
    MODEM_raw_putb('\n');
    2072:	8a e0       	ldi	r24, 0x0A	; 10
    2074:	0e 94 2f 03 	call	0x65e	; 0x65e <MODEM_raw_putb>
    2078:	80 e0       	ldi	r24, 0x00	; 0
    207a:	92 e1       	ldi	r25, 0x12	; 18
    207c:	aa e7       	ldi	r26, 0x7A	; 122
    207e:	b0 e0       	ldi	r27, 0x00	; 0
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	do { barrier(); } while (--n);
    2080:	01 97       	sbiw	r24, 0x01	; 1
    2082:	a1 09       	sbc	r26, r1
    2084:	b1 09       	sbc	r27, r1
    2086:	e1 f7       	brne	.-8      	; 0x2080 <main+0x7e>
    delay_s(1.5);
    MODEM_raw_puts("at+awtda=d*");
    2088:	8a ea       	ldi	r24, 0xAA	; 170
    208a:	90 e2       	ldi	r25, 0x20	; 32
    208c:	0e 94 36 03 	call	0x66c	; 0x66c <MODEM_raw_puts>
    MODEM_raw_putb('\r');
    2090:	8d e0       	ldi	r24, 0x0D	; 13
    2092:	0e 94 2f 03 	call	0x65e	; 0x65e <MODEM_raw_putb>
    MODEM_raw_putb('\n');
    2096:	8a e0       	ldi	r24, 0x0A	; 10
    2098:	0e 94 2f 03 	call	0x65e	; 0x65e <MODEM_raw_putb>
    209c:	80 e0       	ldi	r24, 0x00	; 0
    209e:	92 e1       	ldi	r25, 0x12	; 18
    20a0:	aa e7       	ldi	r26, 0x7A	; 122
    20a2:	b0 e0       	ldi	r27, 0x00	; 0
    20a4:	01 97       	sbiw	r24, 0x01	; 1
    20a6:	a1 09       	sbc	r26, r1
    20a8:	b1 09       	sbc	r27, r1
    20aa:	e1 f7       	brne	.-8      	; 0x20a4 <main+0xa2>
    delay_s(1.5);

    loop_time_start = rtc_get_time();
    20ac:	0e 94 1e 05 	call	0xa3c	; 0xa3c <rtc_get_time>
    20b0:	4b 01       	movw	r8, r22
    20b2:	5c 01       	movw	r10, r24

    while (1) {
        if ((rtc_get_time() - loop_time_start) >= 4) {
            MODEM_raw_puts(DUMMY_WRITE);
            MODEM_raw_putb('\n');
            MODEM_raw_putb('\r');
    20b4:	0f 2e       	mov	r0, r31
    20b6:	c1 2c       	mov	r12, r1
    20b8:	f2 e1       	ldi	r31, 0x12	; 18
    20ba:	df 2e       	mov	r13, r31
    20bc:	fa e7       	ldi	r31, 0x7A	; 122
    20be:	ef 2e       	mov	r14, r31
    20c0:	f1 2c       	mov	r15, r1
    20c2:	f0 2d       	mov	r31, r0
    pwm_toggle(false, 0, 0);
    nvm_eeprom_write_byte(0x0001, 101);
    */

    while (1) {
        if ((rtc_get_time() - loop_time_start) >= 4) {
    20c4:	0e 94 1e 05 	call	0xa3c	; 0xa3c <rtc_get_time>
    20c8:	dc 01       	movw	r26, r24
    20ca:	cb 01       	movw	r24, r22
    20cc:	88 19       	sub	r24, r8
    20ce:	99 09       	sbc	r25, r9
    20d0:	aa 09       	sbc	r26, r10
    20d2:	bb 09       	sbc	r27, r11
    20d4:	04 97       	sbiw	r24, 0x04	; 4
    20d6:	a1 05       	cpc	r26, r1
    20d8:	b1 05       	cpc	r27, r1
    20da:	a0 f0       	brcs	.+40     	; 0x2104 <main+0x102>
            MODEM_raw_puts(DUMMY_WRITE);
    20dc:	86 eb       	ldi	r24, 0xB6	; 182
    20de:	90 e2       	ldi	r25, 0x20	; 32
    20e0:	0e 94 36 03 	call	0x66c	; 0x66c <MODEM_raw_puts>
            MODEM_raw_putb('\n');
    20e4:	8a e0       	ldi	r24, 0x0A	; 10
    20e6:	0e 94 2f 03 	call	0x65e	; 0x65e <MODEM_raw_putb>
            MODEM_raw_putb('\r');
    20ea:	8d e0       	ldi	r24, 0x0D	; 13
    20ec:	0e 94 2f 03 	call	0x65e	; 0x65e <MODEM_raw_putb>
    20f0:	d7 01       	movw	r26, r14
    20f2:	c6 01       	movw	r24, r12
    20f4:	01 97       	sbiw	r24, 0x01	; 1
    20f6:	a1 09       	sbc	r26, r1
    20f8:	b1 09       	sbc	r27, r1
    20fa:	e1 f7       	brne	.-8      	; 0x20f4 <main+0xf2>
            delay_s(1.5);
            loop_time_start = rtc_get_time();
    20fc:	0e 94 1e 05 	call	0xa3c	; 0xa3c <rtc_get_time>
    2100:	4b 01       	movw	r8, r22
    2102:	5c 01       	movw	r10, r24
        }

        if (_uarte0_byte_available() == true) { //modem uart gets unsolicted interrupt
    2104:	0e 94 c6 02 	call	0x58c	; 0x58c <_uarte0_byte_available>
    2108:	88 23       	and	r24, r24
    210a:	e1 f2       	breq	.-72     	; 0x20c4 <main+0xc2>
            unsolicited_command_ptr = &unsolicited_command;
            get_unsolicited_commands(sizeof(unsolicited_command), unsolicited_command_ptr);
    210c:	be 01       	movw	r22, r28
    210e:	6f 5f       	subi	r22, 0xFF	; 255
    2110:	7f 4f       	sbci	r23, 0xFF	; 255
    2112:	8c e3       	ldi	r24, 0x3C	; 60
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	18 de       	rcall	.-976    	; 0x1d48 <get_unsolicited_commands>
            if (unsolicited_command[0] != '\n' && unsolicited_command[0] != '\r' && unsolicited_command[0] == '+') {
    2118:	89 81       	ldd	r24, Y+1	; 0x01
    211a:	8a 30       	cpi	r24, 0x0A	; 10
    211c:	b9 f0       	breq	.+46     	; 0x214c <main+0x14a>
    211e:	8b 32       	cpi	r24, 0x2B	; 43
    2120:	a9 f4       	brne	.+42     	; 0x214c <main+0x14a>
                DEBUG_puts(unsolicited_command);
    2122:	ce 01       	movw	r24, r28
    2124:	01 96       	adiw	r24, 0x01	; 1
    2126:	0e 94 06 03 	call	0x60c	; 0x60c <DEBUG_puts>
                _DEBUG_putc('\n');
    212a:	8a e0       	ldi	r24, 0x0A	; 10
    212c:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <_uartc1_putc>
                _DEBUG_putc('\r');
    2130:	8d e0       	ldi	r24, 0x0D	; 13
    2132:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <_uartc1_putc>
    2136:	d7 01       	movw	r26, r14
    2138:	c6 01       	movw	r24, r12
    213a:	01 97       	sbiw	r24, 0x01	; 1
    213c:	a1 09       	sbc	r26, r1
    213e:	b1 09       	sbc	r27, r1
    2140:	e1 f7       	brne	.-8      	; 0x213a <main+0x138>
                delay_s(1.5);
                asset_model* model_ptr = decode(unsolicited_command_ptr);
    2142:	ce 01       	movw	r24, r28
    2144:	01 96       	adiw	r24, 0x01	; 1
    2146:	61 de       	rcall	.-830    	; 0x1e0a <decode>
                schedule_job(model_ptr);
    2148:	c0 de       	rcall	.-640    	; 0x1eca <schedule_job>
                print_eeprom();
    214a:	4d df       	rcall	.-358    	; 0x1fe6 <print_eeprom>
            }
            clear_temp_string(sizeof(unsolicited_command_ptr), unsolicited_command_ptr);
    214c:	be 01       	movw	r22, r28
    214e:	6f 5f       	subi	r22, 0xFF	; 255
    2150:	7f 4f       	sbci	r23, 0xFF	; 255
    2152:	82 e0       	ldi	r24, 0x02	; 2
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	23 de       	rcall	.-954    	; 0x1d9e <clear_temp_string>
    2158:	b5 cf       	rjmp	.-150    	; 0x20c4 <main+0xc2>

0000215a <__udivmodsi4>:
    215a:	a1 e2       	ldi	r26, 0x21	; 33
    215c:	1a 2e       	mov	r1, r26
    215e:	aa 1b       	sub	r26, r26
    2160:	bb 1b       	sub	r27, r27
    2162:	fd 01       	movw	r30, r26
    2164:	0d c0       	rjmp	.+26     	; 0x2180 <__udivmodsi4_ep>

00002166 <__udivmodsi4_loop>:
    2166:	aa 1f       	adc	r26, r26
    2168:	bb 1f       	adc	r27, r27
    216a:	ee 1f       	adc	r30, r30
    216c:	ff 1f       	adc	r31, r31
    216e:	a2 17       	cp	r26, r18
    2170:	b3 07       	cpc	r27, r19
    2172:	e4 07       	cpc	r30, r20
    2174:	f5 07       	cpc	r31, r21
    2176:	20 f0       	brcs	.+8      	; 0x2180 <__udivmodsi4_ep>
    2178:	a2 1b       	sub	r26, r18
    217a:	b3 0b       	sbc	r27, r19
    217c:	e4 0b       	sbc	r30, r20
    217e:	f5 0b       	sbc	r31, r21

00002180 <__udivmodsi4_ep>:
    2180:	66 1f       	adc	r22, r22
    2182:	77 1f       	adc	r23, r23
    2184:	88 1f       	adc	r24, r24
    2186:	99 1f       	adc	r25, r25
    2188:	1a 94       	dec	r1
    218a:	69 f7       	brne	.-38     	; 0x2166 <__udivmodsi4_loop>
    218c:	60 95       	com	r22
    218e:	70 95       	com	r23
    2190:	80 95       	com	r24
    2192:	90 95       	com	r25
    2194:	9b 01       	movw	r18, r22
    2196:	ac 01       	movw	r20, r24
    2198:	bd 01       	movw	r22, r26
    219a:	cf 01       	movw	r24, r30
    219c:	08 95       	ret

0000219e <strtok>:
    219e:	4c ee       	ldi	r20, 0xEC	; 236
    21a0:	50 e2       	ldi	r21, 0x20	; 32
    21a2:	1b c0       	rjmp	.+54     	; 0x21da <strtok_r>

000021a4 <strcat>:
    21a4:	fb 01       	movw	r30, r22
    21a6:	dc 01       	movw	r26, r24
    21a8:	0d 90       	ld	r0, X+
    21aa:	00 20       	and	r0, r0
    21ac:	e9 f7       	brne	.-6      	; 0x21a8 <strcat+0x4>
    21ae:	11 97       	sbiw	r26, 0x01	; 1
    21b0:	01 90       	ld	r0, Z+
    21b2:	0d 92       	st	X+, r0
    21b4:	00 20       	and	r0, r0
    21b6:	e1 f7       	brne	.-8      	; 0x21b0 <strcat+0xc>
    21b8:	08 95       	ret

000021ba <strcmp>:
    21ba:	fb 01       	movw	r30, r22
    21bc:	dc 01       	movw	r26, r24
    21be:	8d 91       	ld	r24, X+
    21c0:	01 90       	ld	r0, Z+
    21c2:	80 19       	sub	r24, r0
    21c4:	01 10       	cpse	r0, r1
    21c6:	d9 f3       	breq	.-10     	; 0x21be <strcmp+0x4>
    21c8:	99 0b       	sbc	r25, r25
    21ca:	08 95       	ret

000021cc <strcpy>:
    21cc:	fb 01       	movw	r30, r22
    21ce:	dc 01       	movw	r26, r24
    21d0:	01 90       	ld	r0, Z+
    21d2:	0d 92       	st	X+, r0
    21d4:	00 20       	and	r0, r0
    21d6:	e1 f7       	brne	.-8      	; 0x21d0 <strcpy+0x4>
    21d8:	08 95       	ret

000021da <strtok_r>:
    21da:	fa 01       	movw	r30, r20
    21dc:	a1 91       	ld	r26, Z+
    21de:	b0 81       	ld	r27, Z
    21e0:	00 97       	sbiw	r24, 0x00	; 0
    21e2:	19 f4       	brne	.+6      	; 0x21ea <strtok_r+0x10>
    21e4:	10 97       	sbiw	r26, 0x00	; 0
    21e6:	e1 f0       	breq	.+56     	; 0x2220 <strtok_r+0x46>
    21e8:	cd 01       	movw	r24, r26
    21ea:	dc 01       	movw	r26, r24
    21ec:	cd 01       	movw	r24, r26
    21ee:	0d 90       	ld	r0, X+
    21f0:	00 20       	and	r0, r0
    21f2:	11 f4       	brne	.+4      	; 0x21f8 <strtok_r+0x1e>
    21f4:	c0 01       	movw	r24, r0
    21f6:	13 c0       	rjmp	.+38     	; 0x221e <strtok_r+0x44>
    21f8:	fb 01       	movw	r30, r22
    21fa:	21 91       	ld	r18, Z+
    21fc:	22 23       	and	r18, r18
    21fe:	19 f0       	breq	.+6      	; 0x2206 <strtok_r+0x2c>
    2200:	20 15       	cp	r18, r0
    2202:	d9 f7       	brne	.-10     	; 0x21fa <strtok_r+0x20>
    2204:	f3 cf       	rjmp	.-26     	; 0x21ec <strtok_r+0x12>
    2206:	fb 01       	movw	r30, r22
    2208:	21 91       	ld	r18, Z+
    220a:	20 15       	cp	r18, r0
    220c:	19 f4       	brne	.+6      	; 0x2214 <strtok_r+0x3a>
    220e:	1e 92       	st	-X, r1
    2210:	11 96       	adiw	r26, 0x01	; 1
    2212:	06 c0       	rjmp	.+12     	; 0x2220 <strtok_r+0x46>
    2214:	22 23       	and	r18, r18
    2216:	c1 f7       	brne	.-16     	; 0x2208 <strtok_r+0x2e>
    2218:	0d 90       	ld	r0, X+
    221a:	00 20       	and	r0, r0
    221c:	a1 f7       	brne	.-24     	; 0x2206 <strtok_r+0x2c>
    221e:	d0 01       	movw	r26, r0
    2220:	fa 01       	movw	r30, r20
    2222:	a1 93       	st	Z+, r26
    2224:	b0 83       	st	Z, r27
    2226:	08 95       	ret

00002228 <_exit>:
    2228:	f8 94       	cli

0000222a <__stop_program>:
    222a:	ff cf       	rjmp	.-2      	; 0x222a <__stop_program>
