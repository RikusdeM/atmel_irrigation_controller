
IESM-XMEGA32A4U--IrrigationController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003c5a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000039e  00802000  00003c5a  00003cee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000022b  0080239e  0080239e  0000408c  2**0
                  ALLOC
  3 .stab         00001218  00000000  00000000  0000408c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000817  00000000  00000000  000052a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00005abb  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000008d8  00000000  00000000  00005af0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00013670  00000000  00000000  000063c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000039c6  00000000  00000000  00019a38  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000108aa  00000000  00000000  0001d3fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000021a4  00000000  00000000  0002dca8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00028e95  00000000  00000000  0002fe4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00009e18  00000000  00000000  00058ce1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000a40  00000000  00000000  00062b00  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0000c8e9  00000000  00000000  00063540  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
       2:	00 00       	nop
       4:	18 c1       	rjmp	.+560    	; 0x236 <__bad_interrupt>
       6:	00 00       	nop
       8:	0c 94 64 10 	jmp	0x20c8	; 0x20c8 <__vector_2>
       c:	14 c1       	rjmp	.+552    	; 0x236 <__bad_interrupt>
       e:	00 00       	nop
      10:	12 c1       	rjmp	.+548    	; 0x236 <__bad_interrupt>
      12:	00 00       	nop
      14:	10 c1       	rjmp	.+544    	; 0x236 <__bad_interrupt>
      16:	00 00       	nop
      18:	0e c1       	rjmp	.+540    	; 0x236 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	0c c1       	rjmp	.+536    	; 0x236 <__bad_interrupt>
      1e:	00 00       	nop
      20:	0a c1       	rjmp	.+532    	; 0x236 <__bad_interrupt>
      22:	00 00       	nop
      24:	08 c1       	rjmp	.+528    	; 0x236 <__bad_interrupt>
      26:	00 00       	nop
      28:	7e c5       	rjmp	.+2812   	; 0xb26 <__vector_10>
      2a:	00 00       	nop
      2c:	95 c5       	rjmp	.+2858   	; 0xb58 <__vector_11>
      2e:	00 00       	nop
      30:	02 c1       	rjmp	.+516    	; 0x236 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 42 0b 	jmp	0x1684	; 0x1684 <__vector_13>
      38:	06 c6       	rjmp	.+3084   	; 0xc46 <__vector_14>
      3a:	00 00       	nop
      3c:	2d c6       	rjmp	.+3162   	; 0xc98 <__vector_15>
      3e:	00 00       	nop
      40:	54 c6       	rjmp	.+3240   	; 0xcea <__vector_16>
      42:	00 00       	nop
      44:	7b c6       	rjmp	.+3318   	; 0xd3c <__vector_17>
      46:	00 00       	nop
      48:	a2 c6       	rjmp	.+3396   	; 0xd8e <__vector_18>
      4a:	00 00       	nop
      4c:	c9 c6       	rjmp	.+3474   	; 0xde0 <__vector_19>
      4e:	00 00       	nop
      50:	f0 c6       	rjmp	.+3552   	; 0xe32 <__vector_20>
      52:	00 00       	nop
      54:	17 c7       	rjmp	.+3630   	; 0xe84 <__vector_21>
      56:	00 00       	nop
      58:	3e c7       	rjmp	.+3708   	; 0xed6 <__vector_22>
      5a:	00 00       	nop
      5c:	65 c7       	rjmp	.+3786   	; 0xf28 <__vector_23>
      5e:	00 00       	nop
      60:	ea c0       	rjmp	.+468    	; 0x236 <__bad_interrupt>
      62:	00 00       	nop
      64:	e8 c0       	rjmp	.+464    	; 0x236 <__bad_interrupt>
      66:	00 00       	nop
      68:	e6 c0       	rjmp	.+460    	; 0x236 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	e4 c0       	rjmp	.+456    	; 0x236 <__bad_interrupt>
      6e:	00 00       	nop
      70:	02 c1       	rjmp	.+516    	; 0x276 <__vector_28>
      72:	00 00       	nop
      74:	34 c1       	rjmp	.+616    	; 0x2de <__vector_29>
      76:	00 00       	nop
      78:	28 c1       	rjmp	.+592    	; 0x2ca <__vector_30>
      7a:	00 00       	nop
      7c:	dc c0       	rjmp	.+440    	; 0x236 <__bad_interrupt>
      7e:	00 00       	nop
      80:	da c0       	rjmp	.+436    	; 0x236 <__bad_interrupt>
      82:	00 00       	nop
      84:	d8 c0       	rjmp	.+432    	; 0x236 <__bad_interrupt>
      86:	00 00       	nop
      88:	0c 94 78 10 	jmp	0x20f0	; 0x20f0 <__vector_34>
      8c:	d4 c0       	rjmp	.+424    	; 0x236 <__bad_interrupt>
      8e:	00 00       	nop
      90:	d2 c0       	rjmp	.+420    	; 0x236 <__bad_interrupt>
      92:	00 00       	nop
      94:	d0 c0       	rjmp	.+416    	; 0x236 <__bad_interrupt>
      96:	00 00       	nop
      98:	ce c0       	rjmp	.+412    	; 0x236 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	cc c0       	rjmp	.+408    	; 0x236 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	ca c0       	rjmp	.+404    	; 0x236 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	c8 c0       	rjmp	.+400    	; 0x236 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	c6 c0       	rjmp	.+396    	; 0x236 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	c4 c0       	rjmp	.+392    	; 0x236 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	c2 c0       	rjmp	.+388    	; 0x236 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c0 c0       	rjmp	.+384    	; 0x236 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0c 94 65 0b 	jmp	0x16ca	; 0x16ca <__vector_46>
      bc:	0c 94 57 09 	jmp	0x12ae	; 0x12ae <__vector_47>
      c0:	0c 94 80 09 	jmp	0x1300	; 0x1300 <__vector_48>
      c4:	0c 94 a9 09 	jmp	0x1352	; 0x1352 <__vector_49>
      c8:	0c 94 d2 09 	jmp	0x13a4	; 0x13a4 <__vector_50>
      cc:	0c 94 fb 09 	jmp	0x13f6	; 0x13f6 <__vector_51>
      d0:	0c 94 24 0a 	jmp	0x1448	; 0x1448 <__vector_52>
      d4:	b0 c0       	rjmp	.+352    	; 0x236 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	ae c0       	rjmp	.+348    	; 0x236 <__bad_interrupt>
      da:	00 00       	nop
      dc:	ac c0       	rjmp	.+344    	; 0x236 <__bad_interrupt>
      de:	00 00       	nop
      e0:	aa c0       	rjmp	.+340    	; 0x236 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	a8 c0       	rjmp	.+336    	; 0x236 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	9c c1       	rjmp	.+824    	; 0x422 <__vector_58>
      ea:	00 00       	nop
      ec:	ce c1       	rjmp	.+924    	; 0x48a <__vector_59>
      ee:	00 00       	nop
      f0:	c2 c1       	rjmp	.+900    	; 0x476 <__vector_60>
      f2:	00 00       	nop
      f4:	a0 c0       	rjmp	.+320    	; 0x236 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	9e c0       	rjmp	.+316    	; 0x236 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	9c c0       	rjmp	.+312    	; 0x236 <__bad_interrupt>
      fe:	00 00       	nop
     100:	0c 94 50 10 	jmp	0x20a0	; 0x20a0 <__vector_64>
     104:	98 c0       	rjmp	.+304    	; 0x236 <__bad_interrupt>
     106:	00 00       	nop
     108:	0c 94 8c 10 	jmp	0x2118	; 0x2118 <__vector_66>
     10c:	94 c0       	rjmp	.+296    	; 0x236 <__bad_interrupt>
     10e:	00 00       	nop
     110:	92 c0       	rjmp	.+292    	; 0x236 <__bad_interrupt>
     112:	00 00       	nop
     114:	90 c0       	rjmp	.+288    	; 0x236 <__bad_interrupt>
     116:	00 00       	nop
     118:	8e c0       	rjmp	.+284    	; 0x236 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	8c c0       	rjmp	.+280    	; 0x236 <__bad_interrupt>
     11e:	00 00       	nop
     120:	8a c0       	rjmp	.+276    	; 0x236 <__bad_interrupt>
     122:	00 00       	nop
     124:	88 c0       	rjmp	.+272    	; 0x236 <__bad_interrupt>
     126:	00 00       	nop
     128:	86 c0       	rjmp	.+268    	; 0x236 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	84 c0       	rjmp	.+264    	; 0x236 <__bad_interrupt>
     12e:	00 00       	nop
     130:	82 c0       	rjmp	.+260    	; 0x236 <__bad_interrupt>
     132:	00 00       	nop
     134:	22 c7       	rjmp	.+3652   	; 0xf7a <__vector_77>
     136:	00 00       	nop
     138:	49 c7       	rjmp	.+3730   	; 0xfcc <__vector_78>
     13a:	00 00       	nop
     13c:	70 c7       	rjmp	.+3808   	; 0x101e <__vector_79>
     13e:	00 00       	nop
     140:	97 c7       	rjmp	.+3886   	; 0x1070 <__vector_80>
     142:	00 00       	nop
     144:	be c7       	rjmp	.+3964   	; 0x10c2 <__vector_81>
     146:	00 00       	nop
     148:	e5 c7       	rjmp	.+4042   	; 0x1114 <__vector_82>
     14a:	00 00       	nop
     14c:	0c 94 b3 08 	jmp	0x1166	; 0x1166 <__vector_83>
     150:	0c 94 dc 08 	jmp	0x11b8	; 0x11b8 <__vector_84>
     154:	0c 94 05 09 	jmp	0x120a	; 0x120a <__vector_85>
     158:	0c 94 2e 09 	jmp	0x125c	; 0x125c <__vector_86>
     15c:	6c c0       	rjmp	.+216    	; 0x236 <__bad_interrupt>
     15e:	00 00       	nop
     160:	6a c0       	rjmp	.+212    	; 0x236 <__bad_interrupt>
     162:	00 00       	nop
     164:	68 c0       	rjmp	.+208    	; 0x236 <__bad_interrupt>
     166:	00 00       	nop
     168:	66 c0       	rjmp	.+204    	; 0x236 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	64 c0       	rjmp	.+200    	; 0x236 <__bad_interrupt>
     16e:	00 00       	nop
     170:	62 c0       	rjmp	.+196    	; 0x236 <__bad_interrupt>
     172:	00 00       	nop
     174:	60 c0       	rjmp	.+192    	; 0x236 <__bad_interrupt>
     176:	00 00       	nop
     178:	5e c0       	rjmp	.+188    	; 0x236 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	5c c0       	rjmp	.+184    	; 0x236 <__bad_interrupt>
     17e:	00 00       	nop
     180:	5a c0       	rjmp	.+180    	; 0x236 <__bad_interrupt>
     182:	00 00       	nop
     184:	58 c0       	rjmp	.+176    	; 0x236 <__bad_interrupt>
     186:	00 00       	nop
     188:	56 c0       	rjmp	.+172    	; 0x236 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	54 c0       	rjmp	.+168    	; 0x236 <__bad_interrupt>
     18e:	00 00       	nop
     190:	52 c0       	rjmp	.+164    	; 0x236 <__bad_interrupt>
     192:	00 00       	nop
     194:	50 c0       	rjmp	.+160    	; 0x236 <__bad_interrupt>
     196:	00 00       	nop
     198:	4e c0       	rjmp	.+156    	; 0x236 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	4c c0       	rjmp	.+152    	; 0x236 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	4a c0       	rjmp	.+148    	; 0x236 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	48 c0       	rjmp	.+144    	; 0x236 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	46 c0       	rjmp	.+140    	; 0x236 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	44 c0       	rjmp	.+136    	; 0x236 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	42 c0       	rjmp	.+132    	; 0x236 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	40 c0       	rjmp	.+128    	; 0x236 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	3e c0       	rjmp	.+124    	; 0x236 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	3c c0       	rjmp	.+120    	; 0x236 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	3a c0       	rjmp	.+116    	; 0x236 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	38 c0       	rjmp	.+112    	; 0x236 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	36 c0       	rjmp	.+108    	; 0x236 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	34 c0       	rjmp	.+104    	; 0x236 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	32 c0       	rjmp	.+100    	; 0x236 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	30 c0       	rjmp	.+96     	; 0x236 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	2e c0       	rjmp	.+92     	; 0x236 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	2c c0       	rjmp	.+88     	; 0x236 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	2a c0       	rjmp	.+84     	; 0x236 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	28 c0       	rjmp	.+80     	; 0x236 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	26 c0       	rjmp	.+76     	; 0x236 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	24 c0       	rjmp	.+72     	; 0x236 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	22 c0       	rjmp	.+68     	; 0x236 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	20 c0       	rjmp	.+64     	; 0x236 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	1e c0       	rjmp	.+60     	; 0x236 <__bad_interrupt>
	...

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	df e2       	ldi	r29, 0x2F	; 47
     204:	de bf       	out	0x3e, r29	; 62
     206:	cd bf       	out	0x3d, r28	; 61

00000208 <__do_copy_data>:
     208:	13 e2       	ldi	r17, 0x23	; 35
     20a:	a0 e0       	ldi	r26, 0x00	; 0
     20c:	b0 e2       	ldi	r27, 0x20	; 32
     20e:	ea e5       	ldi	r30, 0x5A	; 90
     210:	fc e3       	ldi	r31, 0x3C	; 60
     212:	02 c0       	rjmp	.+4      	; 0x218 <__do_copy_data+0x10>
     214:	05 90       	lpm	r0, Z+
     216:	0d 92       	st	X+, r0
     218:	ae 39       	cpi	r26, 0x9E	; 158
     21a:	b1 07       	cpc	r27, r17
     21c:	d9 f7       	brne	.-10     	; 0x214 <__do_copy_data+0xc>

0000021e <__do_clear_bss>:
     21e:	25 e2       	ldi	r18, 0x25	; 37
     220:	ae e9       	ldi	r26, 0x9E	; 158
     222:	b3 e2       	ldi	r27, 0x23	; 35
     224:	01 c0       	rjmp	.+2      	; 0x228 <.do_clear_bss_start>

00000226 <.do_clear_bss_loop>:
     226:	1d 92       	st	X+, r1

00000228 <.do_clear_bss_start>:
     228:	a9 3c       	cpi	r26, 0xC9	; 201
     22a:	b2 07       	cpc	r27, r18
     22c:	e1 f7       	brne	.-8      	; 0x226 <.do_clear_bss_loop>
     22e:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <main>
     232:	0c 94 2b 1e 	jmp	0x3c56	; 0x3c56 <_exit>

00000236 <__bad_interrupt>:
     236:	e4 ce       	rjmp	.-568    	; 0x0 <__vectors>

00000238 <crc8_update>:
    for (uint16_t counter = 0; counter < len; counter++)
    {
        seed = crc_ccitt16_update(seed, *buf++);
    }
    return seed;
}
     238:	86 27       	eor	r24, r22
     23a:	98 e0       	ldi	r25, 0x08	; 8
     23c:	2c e8       	ldi	r18, 0x8C	; 140
     23e:	80 ff       	sbrs	r24, 0
     240:	03 c0       	rjmp	.+6      	; 0x248 <crc8_update+0x10>
     242:	86 95       	lsr	r24
     244:	82 27       	eor	r24, r18
     246:	01 c0       	rjmp	.+2      	; 0x24a <crc8_update+0x12>
     248:	86 95       	lsr	r24
     24a:	91 50       	subi	r25, 0x01	; 1
     24c:	c1 f7       	brne	.-16     	; 0x23e <crc8_update+0x6>
     24e:	08 95       	ret

00000250 <crc8_compute>:

uint8_t crc8_compute(uint8_t* buffer, uint8_t buffer_length)
{
     250:	1f 93       	push	r17
     252:	cf 93       	push	r28
     254:	df 93       	push	r29
     256:	ec 01       	movw	r28, r24
    uint8_t crc8 = 0;
    while (buffer_length--)
     258:	16 2f       	mov	r17, r22
     25a:	11 50       	subi	r17, 0x01	; 1
     25c:	66 23       	and	r22, r22
     25e:	31 f0       	breq	.+12     	; 0x26c <crc8_compute+0x1c>
    return seed;
}

uint8_t crc8_compute(uint8_t* buffer, uint8_t buffer_length)
{
    uint8_t crc8 = 0;
     260:	80 e0       	ldi	r24, 0x00	; 0
    while (buffer_length--)
    {
        crc8 = crc8_update(crc8, *buffer++);
     262:	69 91       	ld	r22, Y+
     264:	e9 df       	rcall	.-46     	; 0x238 <crc8_update>
}

uint8_t crc8_compute(uint8_t* buffer, uint8_t buffer_length)
{
    uint8_t crc8 = 0;
    while (buffer_length--)
     266:	11 50       	subi	r17, 0x01	; 1
     268:	e0 f7       	brcc	.-8      	; 0x262 <crc8_compute+0x12>
     26a:	01 c0       	rjmp	.+2      	; 0x26e <crc8_compute+0x1e>
    return seed;
}

uint8_t crc8_compute(uint8_t* buffer, uint8_t buffer_length)
{
    uint8_t crc8 = 0;
     26c:	80 e0       	ldi	r24, 0x00	; 0
    while (buffer_length--)
    {
        crc8 = crc8_update(crc8, *buffer++);
    }
    return crc8;
}
     26e:	df 91       	pop	r29
     270:	cf 91       	pop	r28
     272:	1f 91       	pop	r17
     274:	08 95       	ret

00000276 <__vector_28>:
}

bool _uartc1_byte_available(void)
{
    return buffer.rx_front != buffer.rx_back;
}
     276:	1f 92       	push	r1
     278:	0f 92       	push	r0
     27a:	0f b6       	in	r0, 0x3f	; 63
     27c:	0f 92       	push	r0
     27e:	11 24       	eor	r1, r1
     280:	2f 93       	push	r18
     282:	8f 93       	push	r24
     284:	9f 93       	push	r25
     286:	af 93       	push	r26
     288:	bf 93       	push	r27
     28a:	ef 93       	push	r30
     28c:	ff 93       	push	r31
     28e:	20 91 b0 08 	lds	r18, 0x08B0
     292:	80 91 30 24 	lds	r24, 0x2430
     296:	8f 5f       	subi	r24, 0xFF	; 255
     298:	8f 70       	andi	r24, 0x0F	; 15
     29a:	90 91 31 24 	lds	r25, 0x2431
     29e:	98 17       	cp	r25, r24
     2a0:	41 f0       	breq	.+16     	; 0x2b2 <__vector_28+0x3c>
     2a2:	e0 e3       	ldi	r30, 0x30	; 48
     2a4:	f4 e2       	ldi	r31, 0x24	; 36
     2a6:	a0 81       	ld	r26, Z
     2a8:	b0 e0       	ldi	r27, 0x00	; 0
     2aa:	a0 56       	subi	r26, 0x60	; 96
     2ac:	bc 4d       	sbci	r27, 0xDC	; 220
     2ae:	2c 93       	st	X, r18
     2b0:	80 83       	st	Z, r24
     2b2:	ff 91       	pop	r31
     2b4:	ef 91       	pop	r30
     2b6:	bf 91       	pop	r27
     2b8:	af 91       	pop	r26
     2ba:	9f 91       	pop	r25
     2bc:	8f 91       	pop	r24
     2be:	2f 91       	pop	r18
     2c0:	0f 90       	pop	r0
     2c2:	0f be       	out	0x3f, r0	; 63
     2c4:	0f 90       	pop	r0
     2c6:	1f 90       	pop	r1
     2c8:	18 95       	reti

000002ca <__vector_30>:
     2ca:	1f 92       	push	r1
     2cc:	0f 92       	push	r0
     2ce:	0f b6       	in	r0, 0x3f	; 63
     2d0:	0f 92       	push	r0
     2d2:	11 24       	eor	r1, r1
     2d4:	0f 90       	pop	r0
     2d6:	0f be       	out	0x3f, r0	; 63
     2d8:	0f 90       	pop	r0
     2da:	1f 90       	pop	r1
     2dc:	18 95       	reti

000002de <__vector_29>:
     2de:	1f 92       	push	r1
     2e0:	0f 92       	push	r0
     2e2:	0f b6       	in	r0, 0x3f	; 63
     2e4:	0f 92       	push	r0
     2e6:	11 24       	eor	r1, r1
     2e8:	8f 93       	push	r24
     2ea:	9f 93       	push	r25
     2ec:	af 93       	push	r26
     2ee:	bf 93       	push	r27
     2f0:	ef 93       	push	r30
     2f2:	ff 93       	push	r31
     2f4:	90 91 32 24 	lds	r25, 0x2432
     2f8:	80 91 33 24 	lds	r24, 0x2433
     2fc:	98 13       	cpse	r25, r24
     2fe:	06 c0       	rjmp	.+12     	; 0x30c <__vector_29+0x2e>
     300:	e0 eb       	ldi	r30, 0xB0	; 176
     302:	f8 e0       	ldi	r31, 0x08	; 8
     304:	83 81       	ldd	r24, Z+3	; 0x03
     306:	8c 7f       	andi	r24, 0xFC	; 252
     308:	83 83       	std	Z+3, r24	; 0x03
     30a:	0e c0       	rjmp	.+28     	; 0x328 <__vector_29+0x4a>
     30c:	e3 e3       	ldi	r30, 0x33	; 51
     30e:	f4 e2       	ldi	r31, 0x24	; 36
     310:	a0 81       	ld	r26, Z
     312:	b0 e0       	ldi	r27, 0x00	; 0
     314:	a0 56       	subi	r26, 0x60	; 96
     316:	bc 4d       	sbci	r27, 0xDC	; 220
     318:	50 96       	adiw	r26, 0x10	; 16
     31a:	8c 91       	ld	r24, X
     31c:	80 93 b0 08 	sts	0x08B0, r24
     320:	80 81       	ld	r24, Z
     322:	8f 5f       	subi	r24, 0xFF	; 255
     324:	8f 77       	andi	r24, 0x7F	; 127
     326:	80 83       	st	Z, r24
     328:	ff 91       	pop	r31
     32a:	ef 91       	pop	r30
     32c:	bf 91       	pop	r27
     32e:	af 91       	pop	r26
     330:	9f 91       	pop	r25
     332:	8f 91       	pop	r24
     334:	0f 90       	pop	r0
     336:	0f be       	out	0x3f, r0	; 63
     338:	0f 90       	pop	r0
     33a:	1f 90       	pop	r1
     33c:	18 95       	reti

0000033e <_uartc1_enable_interrupt>:
     33e:	e0 eb       	ldi	r30, 0xB0	; 176
     340:	f8 e0       	ldi	r31, 0x08	; 8
     342:	93 81       	ldd	r25, Z+3	; 0x03
     344:	82 95       	swap	r24
     346:	80 7f       	andi	r24, 0xF0	; 240
     348:	9f 7c       	andi	r25, 0xCF	; 207
     34a:	98 2b       	or	r25, r24
     34c:	93 83       	std	Z+3, r25	; 0x03
     34e:	08 95       	ret

00000350 <_uartc1_init>:
     350:	cf 93       	push	r28
     352:	df 93       	push	r29
     354:	cd b7       	in	r28, 0x3d	; 61
     356:	de b7       	in	r29, 0x3e	; 62
     358:	29 97       	sbiw	r28, 0x09	; 9
     35a:	cd bf       	out	0x3d, r28	; 61
     35c:	de bf       	out	0x3e, r29	; 62
     35e:	89 e0       	ldi	r24, 0x09	; 9
     360:	e0 e0       	ldi	r30, 0x00	; 0
     362:	f0 e2       	ldi	r31, 0x20	; 32
     364:	de 01       	movw	r26, r28
     366:	11 96       	adiw	r26, 0x01	; 1
     368:	01 90       	ld	r0, Z+
     36a:	0d 92       	st	X+, r0
     36c:	8a 95       	dec	r24
     36e:	e1 f7       	brne	.-8      	; 0x368 <_uartc1_init+0x18>
     370:	10 92 31 24 	sts	0x2431, r1
     374:	10 92 30 24 	sts	0x2430, r1
     378:	10 92 33 24 	sts	0x2433, r1
     37c:	10 92 32 24 	sts	0x2432, r1
     380:	be 01       	movw	r22, r28
     382:	6f 5f       	subi	r22, 0xFF	; 255
     384:	7f 4f       	sbci	r23, 0xFF	; 255
     386:	80 eb       	ldi	r24, 0xB0	; 176
     388:	98 e0       	ldi	r25, 0x08	; 8
     38a:	0e 94 9a 0c 	call	0x1934	; 0x1934 <usart_init_rs232>
     38e:	e0 eb       	ldi	r30, 0xB0	; 176
     390:	f8 e0       	ldi	r31, 0x08	; 8
     392:	83 81       	ldd	r24, Z+3	; 0x03
     394:	8f 7c       	andi	r24, 0xCF	; 207
     396:	83 83       	std	Z+3, r24	; 0x03
     398:	83 81       	ldd	r24, Z+3	; 0x03
     39a:	83 7f       	andi	r24, 0xF3	; 243
     39c:	83 83       	std	Z+3, r24	; 0x03
     39e:	83 81       	ldd	r24, Z+3	; 0x03
     3a0:	8c 7f       	andi	r24, 0xFC	; 252
     3a2:	81 60       	ori	r24, 0x01	; 1
     3a4:	83 83       	std	Z+3, r24	; 0x03
     3a6:	29 96       	adiw	r28, 0x09	; 9
     3a8:	cd bf       	out	0x3d, r28	; 61
     3aa:	de bf       	out	0x3e, r29	; 62
     3ac:	df 91       	pop	r29
     3ae:	cf 91       	pop	r28
     3b0:	08 95       	ret

000003b2 <_uartc1_putc>:

void reset_avr(void);

void _uartc1_putc(char ch)
{
     3b2:	ff 92       	push	r15
     3b4:	0f 93       	push	r16
     3b6:	1f 93       	push	r17
     3b8:	cf 93       	push	r28
     3ba:	df 93       	push	r29
     3bc:	f8 2e       	mov	r15, r24
    timeout_start_singleshot(TIMEOUT_UART, TIMEOUT_TICK_HZ);
     3be:	68 e0       	ldi	r22, 0x08	; 8
     3c0:	70 e0       	ldi	r23, 0x00	; 0
     3c2:	81 e0       	ldi	r24, 0x01	; 1
     3c4:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <timeout_start_singleshot>
}

static bool putb(uint8_t byte)
{
    uint8_t tx_back;
    tx_back = (buffer.tx_back + 1) & TX_BUFFER_MASK;
     3c8:	02 e3       	ldi	r16, 0x32	; 50
     3ca:	14 e2       	ldi	r17, 0x24	; 36
    if (tx_back != buffer.tx_front) {
     3cc:	c3 e3       	ldi	r28, 0x33	; 51
     3ce:	d4 e2       	ldi	r29, 0x24	; 36
void reset_avr(void);

void _uartc1_putc(char ch)
{
    timeout_start_singleshot(TIMEOUT_UART, TIMEOUT_TICK_HZ);
    while (!putb(ch)) {
     3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <_uartc1_putc+0x24>
        if (timeout_test_and_clear_expired(TIMEOUT_UART)) {
            reset_avr();
     3d2:	0e 94 12 10 	call	0x2024	; 0x2024 <reset_avr>
}

static bool putb(uint8_t byte)
{
    uint8_t tx_back;
    tx_back = (buffer.tx_back + 1) & TX_BUFFER_MASK;
     3d6:	f8 01       	movw	r30, r16
     3d8:	90 81       	ld	r25, Z
     3da:	9f 5f       	subi	r25, 0xFF	; 255
     3dc:	9f 77       	andi	r25, 0x7F	; 127
    if (tx_back != buffer.tx_front) {
     3de:	28 81       	ld	r18, Y
     3e0:	92 17       	cp	r25, r18
     3e2:	99 f0       	breq	.+38     	; 0x40a <_uartc1_putc+0x58>
        buffer.TX[buffer.tx_back] = byte;
     3e4:	e2 e3       	ldi	r30, 0x32	; 50
     3e6:	f4 e2       	ldi	r31, 0x24	; 36
     3e8:	a0 81       	ld	r26, Z
     3ea:	b0 e0       	ldi	r27, 0x00	; 0
     3ec:	a0 56       	subi	r26, 0x60	; 96
     3ee:	bc 4d       	sbci	r27, 0xDC	; 220
     3f0:	50 96       	adiw	r26, 0x10	; 16
     3f2:	fc 92       	st	X, r15
        buffer.tx_back = tx_back;
     3f4:	90 83       	st	Z, r25
 *              Use USART_DREINTLVL_t type.
 */
static inline void usart_set_dre_interrupt_level(USART_t *usart,
		enum usart_int_level_t level)
{
	(usart)->CTRLA = ((usart)->CTRLA & ~USART_DREINTLVL_gm) |
     3f6:	e0 eb       	ldi	r30, 0xB0	; 176
     3f8:	f8 e0       	ldi	r31, 0x08	; 8
     3fa:	83 81       	ldd	r24, Z+3	; 0x03
     3fc:	8c 7f       	andi	r24, 0xFC	; 252
     3fe:	81 60       	ori	r24, 0x01	; 1
     400:	83 83       	std	Z+3, r24	; 0x03
    while (!putb(ch)) {
        if (timeout_test_and_clear_expired(TIMEOUT_UART)) {
            reset_avr();
        }
    }
    timeout_stop(TIMEOUT_UART);
     402:	81 e0       	ldi	r24, 0x01	; 1
     404:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <timeout_stop>
     408:	06 c0       	rjmp	.+12     	; 0x416 <_uartc1_putc+0x64>

void _uartc1_putc(char ch)
{
    timeout_start_singleshot(TIMEOUT_UART, TIMEOUT_TICK_HZ);
    while (!putb(ch)) {
        if (timeout_test_and_clear_expired(TIMEOUT_UART)) {
     40a:	81 e0       	ldi	r24, 0x01	; 1
     40c:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <timeout_test_and_clear_expired>
     410:	88 23       	and	r24, r24
     412:	09 f3       	breq	.-62     	; 0x3d6 <_uartc1_putc+0x24>
     414:	de cf       	rjmp	.-68     	; 0x3d2 <_uartc1_putc+0x20>
            reset_avr();
        }
    }
    timeout_stop(TIMEOUT_UART);
}
     416:	df 91       	pop	r29
     418:	cf 91       	pop	r28
     41a:	1f 91       	pop	r17
     41c:	0f 91       	pop	r16
     41e:	ff 90       	pop	r15
     420:	08 95       	ret

00000422 <__vector_58>:
    volatile uint8_t tx_back;
    volatile uint8_t tx_front;
} buffer;

ISR(USARTE0_RXC_vect)
{
     422:	1f 92       	push	r1
     424:	0f 92       	push	r0
     426:	0f b6       	in	r0, 0x3f	; 63
     428:	0f 92       	push	r0
     42a:	11 24       	eor	r1, r1
     42c:	2f 93       	push	r18
     42e:	8f 93       	push	r24
     430:	9f 93       	push	r25
     432:	af 93       	push	r26
     434:	bf 93       	push	r27
     436:	ef 93       	push	r30
     438:	ff 93       	push	r31
    uint8_t data = USARTE0.DATA;
     43a:	20 91 a0 0a 	lds	r18, 0x0AA0
    uint8_t back = (buffer.rx_back + 1) & RX_BUFFER_MASK;
     43e:	80 91 34 25 	lds	r24, 0x2534
     442:	8f 5f       	subi	r24, 0xFF	; 255
     444:	8f 77       	andi	r24, 0x7F	; 127
    if (back != buffer.rx_front) {
     446:	90 91 35 25 	lds	r25, 0x2535
     44a:	98 17       	cp	r25, r24
     44c:	41 f0       	breq	.+16     	; 0x45e <__vector_58+0x3c>
        buffer.RX[buffer.rx_back] = data;
     44e:	e4 e3       	ldi	r30, 0x34	; 52
     450:	f5 e2       	ldi	r31, 0x25	; 37
     452:	a0 81       	ld	r26, Z
     454:	b0 e0       	ldi	r27, 0x00	; 0
     456:	ac 5c       	subi	r26, 0xCC	; 204
     458:	bb 4d       	sbci	r27, 0xDB	; 219
     45a:	2c 93       	st	X, r18
        buffer.rx_back = back;
     45c:	80 83       	st	Z, r24
    }
}
     45e:	ff 91       	pop	r31
     460:	ef 91       	pop	r30
     462:	bf 91       	pop	r27
     464:	af 91       	pop	r26
     466:	9f 91       	pop	r25
     468:	8f 91       	pop	r24
     46a:	2f 91       	pop	r18
     46c:	0f 90       	pop	r0
     46e:	0f be       	out	0x3f, r0	; 63
     470:	0f 90       	pop	r0
     472:	1f 90       	pop	r1
     474:	18 95       	reti

00000476 <__vector_60>:

ISR(USARTE0_TXC_vect)
{
     476:	1f 92       	push	r1
     478:	0f 92       	push	r0
     47a:	0f b6       	in	r0, 0x3f	; 63
     47c:	0f 92       	push	r0
     47e:	11 24       	eor	r1, r1
}
     480:	0f 90       	pop	r0
     482:	0f be       	out	0x3f, r0	; 63
     484:	0f 90       	pop	r0
     486:	1f 90       	pop	r1
     488:	18 95       	reti

0000048a <__vector_59>:

ISR(USARTE0_DRE_vect)
{
     48a:	1f 92       	push	r1
     48c:	0f 92       	push	r0
     48e:	0f b6       	in	r0, 0x3f	; 63
     490:	0f 92       	push	r0
     492:	11 24       	eor	r1, r1
     494:	8f 93       	push	r24
     496:	9f 93       	push	r25
     498:	af 93       	push	r26
     49a:	bf 93       	push	r27
     49c:	ef 93       	push	r30
     49e:	ff 93       	push	r31
    if (buffer.tx_back == buffer.tx_front) {
     4a0:	90 91 36 25 	lds	r25, 0x2536
     4a4:	80 91 37 25 	lds	r24, 0x2537
     4a8:	98 13       	cpse	r25, r24
     4aa:	06 c0       	rjmp	.+12     	; 0x4b8 <__vector_59+0x2e>
     4ac:	e0 ea       	ldi	r30, 0xA0	; 160
     4ae:	fa e0       	ldi	r31, 0x0A	; 10
     4b0:	83 81       	ldd	r24, Z+3	; 0x03
     4b2:	8c 7f       	andi	r24, 0xFC	; 252
     4b4:	83 83       	std	Z+3, r24	; 0x03
     4b6:	0d c0       	rjmp	.+26     	; 0x4d2 <__vector_59+0x48>
        usart_set_dre_interrupt_level(&USARTE0, USART_INT_LVL_OFF);
    } else {
        USARTE0.DATA = buffer.TX[buffer.tx_front];
     4b8:	e7 e3       	ldi	r30, 0x37	; 55
     4ba:	f5 e2       	ldi	r31, 0x25	; 37
     4bc:	a0 81       	ld	r26, Z
     4be:	b0 e0       	ldi	r27, 0x00	; 0
     4c0:	ac 54       	subi	r26, 0x4C	; 76
     4c2:	bb 4d       	sbci	r27, 0xDB	; 219
     4c4:	8c 91       	ld	r24, X
     4c6:	80 93 a0 0a 	sts	0x0AA0, r24
        buffer.tx_front = (buffer.tx_front + 1) & TX_BUFFER_MASK;
     4ca:	80 81       	ld	r24, Z
     4cc:	8f 5f       	subi	r24, 0xFF	; 255
     4ce:	8f 77       	andi	r24, 0x7F	; 127
     4d0:	80 83       	st	Z, r24
    }
}
     4d2:	ff 91       	pop	r31
     4d4:	ef 91       	pop	r30
     4d6:	bf 91       	pop	r27
     4d8:	af 91       	pop	r26
     4da:	9f 91       	pop	r25
     4dc:	8f 91       	pop	r24
     4de:	0f 90       	pop	r0
     4e0:	0f be       	out	0x3f, r0	; 63
     4e2:	0f 90       	pop	r0
     4e4:	1f 90       	pop	r1
     4e6:	18 95       	reti

000004e8 <_uarte0_enable_interrupt>:
 * \param level Interrupt level of the RXD interrupt.
 */
static inline void usart_set_rx_interrupt_level(USART_t *usart,
		enum usart_int_level_t level)
{
	(usart)->CTRLA = ((usart)->CTRLA & ~USART_RXCINTLVL_gm) |
     4e8:	e0 ea       	ldi	r30, 0xA0	; 160
     4ea:	fa e0       	ldi	r31, 0x0A	; 10
     4ec:	93 81       	ldd	r25, Z+3	; 0x03
     4ee:	82 95       	swap	r24
     4f0:	80 7f       	andi	r24, 0xF0	; 240
     4f2:	9f 7c       	andi	r25, 0xCF	; 207
     4f4:	98 2b       	or	r25, r24
     4f6:	93 83       	std	Z+3, r25	; 0x03
     4f8:	08 95       	ret

000004fa <_uarte0_init>:
{
    usart_set_rx_interrupt_level(&USARTE0, level);
}

void _uarte0_init(void)
{
     4fa:	cf 93       	push	r28
     4fc:	df 93       	push	r29
     4fe:	cd b7       	in	r28, 0x3d	; 61
     500:	de b7       	in	r29, 0x3e	; 62
     502:	29 97       	sbiw	r28, 0x09	; 9
     504:	cd bf       	out	0x3d, r28	; 61
     506:	de bf       	out	0x3e, r29	; 62
    usart_rs232_options_t rs232_options = {
     508:	89 e0       	ldi	r24, 0x09	; 9
     50a:	e9 e0       	ldi	r30, 0x09	; 9
     50c:	f0 e2       	ldi	r31, 0x20	; 32
     50e:	de 01       	movw	r26, r28
     510:	11 96       	adiw	r26, 0x01	; 1
     512:	01 90       	ld	r0, Z+
     514:	0d 92       	st	X+, r0
     516:	8a 95       	dec	r24
     518:	e1 f7       	brne	.-8      	; 0x512 <_uarte0_init+0x18>
        .baudrate = 115200,
        .charlength = USART_CHSIZE_8BIT_gc,
        .paritytype = USART_PMODE_DISABLED_gc,
        .stopbits = false
    };
    buffer.rx_front = 0;
     51a:	10 92 35 25 	sts	0x2535, r1
    buffer.rx_back = 0;
     51e:	10 92 34 25 	sts	0x2534, r1
    buffer.tx_front = 0;
     522:	10 92 37 25 	sts	0x2537, r1
    buffer.tx_back = 0;
     526:	10 92 36 25 	sts	0x2536, r1
    usart_init_rs232(&USARTE0, &rs232_options);
     52a:	be 01       	movw	r22, r28
     52c:	6f 5f       	subi	r22, 0xFF	; 255
     52e:	7f 4f       	sbci	r23, 0xFF	; 255
     530:	80 ea       	ldi	r24, 0xA0	; 160
     532:	9a e0       	ldi	r25, 0x0A	; 10
     534:	0e 94 9a 0c 	call	0x1934	; 0x1934 <usart_init_rs232>
     538:	e0 ea       	ldi	r30, 0xA0	; 160
     53a:	fa e0       	ldi	r31, 0x0A	; 10
     53c:	83 81       	ldd	r24, Z+3	; 0x03
     53e:	8f 7c       	andi	r24, 0xCF	; 207
     540:	83 83       	std	Z+3, r24	; 0x03
 * \param level Interrupt level of the TXD interrupt.
 */
static inline void usart_set_tx_interrupt_level(USART_t *usart,
		enum usart_int_level_t level)
{
	(usart)->CTRLA = ((usart)->CTRLA & ~USART_TXCINTLVL_gm) |
     542:	83 81       	ldd	r24, Z+3	; 0x03
     544:	83 7f       	andi	r24, 0xF3	; 243
     546:	83 83       	std	Z+3, r24	; 0x03
 *              Use USART_DREINTLVL_t type.
 */
static inline void usart_set_dre_interrupt_level(USART_t *usart,
		enum usart_int_level_t level)
{
	(usart)->CTRLA = ((usart)->CTRLA & ~USART_DREINTLVL_gm) |
     548:	83 81       	ldd	r24, Z+3	; 0x03
     54a:	8c 7f       	andi	r24, 0xFC	; 252
     54c:	81 60       	ori	r24, 0x01	; 1
     54e:	83 83       	std	Z+3, r24	; 0x03
    usart_set_rx_interrupt_level(&USARTE0, USART_INT_LVL_OFF);
    usart_set_tx_interrupt_level(&USARTE0, USART_INT_LVL_OFF);
    usart_set_dre_interrupt_level(&USARTE0, USART_INT_LVL_LO);
}
     550:	29 96       	adiw	r28, 0x09	; 9
     552:	cd bf       	out	0x3d, r28	; 61
     554:	de bf       	out	0x3e, r29	; 62
     556:	df 91       	pop	r29
     558:	cf 91       	pop	r28
     55a:	08 95       	ret

0000055c <_uarte0_getc>:

int16_t _uarte0_getc(void)
{
    uint8_t ans;
    if (buffer.rx_front == buffer.rx_back) {
     55c:	90 91 35 25 	lds	r25, 0x2535
     560:	80 91 34 25 	lds	r24, 0x2534
     564:	98 17       	cp	r25, r24
     566:	69 f0       	breq	.+26     	; 0x582 <_uarte0_getc+0x26>
        return -1;
    }
    ans = buffer.RX[buffer.rx_front];
     568:	e5 e3       	ldi	r30, 0x35	; 53
     56a:	f5 e2       	ldi	r31, 0x25	; 37
     56c:	a0 81       	ld	r26, Z
     56e:	b0 e0       	ldi	r27, 0x00	; 0
     570:	ac 5c       	subi	r26, 0xCC	; 204
     572:	bb 4d       	sbci	r27, 0xDB	; 219
     574:	2c 91       	ld	r18, X
    buffer.rx_front = (buffer.rx_front + 1) & RX_BUFFER_MASK;
     576:	80 81       	ld	r24, Z
     578:	8f 5f       	subi	r24, 0xFF	; 255
     57a:	8f 77       	andi	r24, 0x7F	; 127
     57c:	80 83       	st	Z, r24
    return ans;
     57e:	30 e0       	ldi	r19, 0x00	; 0
     580:	02 c0       	rjmp	.+4      	; 0x586 <_uarte0_getc+0x2a>

int16_t _uarte0_getc(void)
{
    uint8_t ans;
    if (buffer.rx_front == buffer.rx_back) {
        return -1;
     582:	2f ef       	ldi	r18, 0xFF	; 255
     584:	3f ef       	ldi	r19, 0xFF	; 255
    }
    ans = buffer.RX[buffer.rx_front];
    buffer.rx_front = (buffer.rx_front + 1) & RX_BUFFER_MASK;
    return ans;
}
     586:	82 2f       	mov	r24, r18
     588:	93 2f       	mov	r25, r19
     58a:	08 95       	ret

0000058c <_uarte0_byte_available>:

bool _uarte0_byte_available(void)
{
	return buffer.rx_front != buffer.rx_back;
     58c:	20 91 35 25 	lds	r18, 0x2535
     590:	90 91 34 25 	lds	r25, 0x2534
     594:	81 e0       	ldi	r24, 0x01	; 1
     596:	29 13       	cpse	r18, r25
     598:	01 c0       	rjmp	.+2      	; 0x59c <_uarte0_byte_available+0x10>
     59a:	80 e0       	ldi	r24, 0x00	; 0
}
     59c:	08 95       	ret

0000059e <_uarte0_putc>:

void reset_avr(void);

void _uarte0_putc(char ch)
{
     59e:	ff 92       	push	r15
     5a0:	0f 93       	push	r16
     5a2:	1f 93       	push	r17
     5a4:	cf 93       	push	r28
     5a6:	df 93       	push	r29
     5a8:	f8 2e       	mov	r15, r24
    timeout_start_singleshot(TIMEOUT_UART, TIMEOUT_TICK_HZ);
     5aa:	68 e0       	ldi	r22, 0x08	; 8
     5ac:	70 e0       	ldi	r23, 0x00	; 0
     5ae:	81 e0       	ldi	r24, 0x01	; 1
     5b0:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <timeout_start_singleshot>
}

static bool putb(uint8_t byte)
{
    uint8_t tx_back;
    tx_back = (buffer.tx_back + 1) & TX_BUFFER_MASK;
     5b4:	06 e3       	ldi	r16, 0x36	; 54
     5b6:	15 e2       	ldi	r17, 0x25	; 37
    if (tx_back != buffer.tx_front) {
     5b8:	c7 e3       	ldi	r28, 0x37	; 55
     5ba:	d5 e2       	ldi	r29, 0x25	; 37
void reset_avr(void);

void _uarte0_putc(char ch)
{
    timeout_start_singleshot(TIMEOUT_UART, TIMEOUT_TICK_HZ);
    while (!putb(ch)) {
     5bc:	02 c0       	rjmp	.+4      	; 0x5c2 <_uarte0_putc+0x24>
        if (timeout_test_and_clear_expired(TIMEOUT_UART)) {
            reset_avr();
     5be:	0e 94 12 10 	call	0x2024	; 0x2024 <reset_avr>
}

static bool putb(uint8_t byte)
{
    uint8_t tx_back;
    tx_back = (buffer.tx_back + 1) & TX_BUFFER_MASK;
     5c2:	f8 01       	movw	r30, r16
     5c4:	90 81       	ld	r25, Z
     5c6:	9f 5f       	subi	r25, 0xFF	; 255
     5c8:	9f 77       	andi	r25, 0x7F	; 127
    if (tx_back != buffer.tx_front) {
     5ca:	28 81       	ld	r18, Y
     5cc:	92 17       	cp	r25, r18
     5ce:	91 f0       	breq	.+36     	; 0x5f4 <_uarte0_putc+0x56>
        buffer.TX[buffer.tx_back] = byte;
     5d0:	e6 e3       	ldi	r30, 0x36	; 54
     5d2:	f5 e2       	ldi	r31, 0x25	; 37
     5d4:	a0 81       	ld	r26, Z
     5d6:	b0 e0       	ldi	r27, 0x00	; 0
     5d8:	ac 54       	subi	r26, 0x4C	; 76
     5da:	bb 4d       	sbci	r27, 0xDB	; 219
     5dc:	fc 92       	st	X, r15
        buffer.tx_back = tx_back;
     5de:	90 83       	st	Z, r25
     5e0:	e0 ea       	ldi	r30, 0xA0	; 160
     5e2:	fa e0       	ldi	r31, 0x0A	; 10
     5e4:	83 81       	ldd	r24, Z+3	; 0x03
     5e6:	8c 7f       	andi	r24, 0xFC	; 252
     5e8:	81 60       	ori	r24, 0x01	; 1
     5ea:	83 83       	std	Z+3, r24	; 0x03
    while (!putb(ch)) {
        if (timeout_test_and_clear_expired(TIMEOUT_UART)) {
            reset_avr();
        }
    }
    timeout_stop(TIMEOUT_UART);
     5ec:	81 e0       	ldi	r24, 0x01	; 1
     5ee:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <timeout_stop>
     5f2:	06 c0       	rjmp	.+12     	; 0x600 <_uarte0_putc+0x62>

void _uarte0_putc(char ch)
{
    timeout_start_singleshot(TIMEOUT_UART, TIMEOUT_TICK_HZ);
    while (!putb(ch)) {
        if (timeout_test_and_clear_expired(TIMEOUT_UART)) {
     5f4:	81 e0       	ldi	r24, 0x01	; 1
     5f6:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <timeout_test_and_clear_expired>
     5fa:	88 23       	and	r24, r24
     5fc:	11 f3       	breq	.-60     	; 0x5c2 <_uarte0_putc+0x24>
     5fe:	df cf       	rjmp	.-66     	; 0x5be <_uarte0_putc+0x20>
            reset_avr();
        }
    }
    timeout_stop(TIMEOUT_UART);
}
     600:	df 91       	pop	r29
     602:	cf 91       	pop	r28
     604:	1f 91       	pop	r17
     606:	0f 91       	pop	r16
     608:	ff 90       	pop	r15
     60a:	08 95       	ret

0000060c <DEBUG_puts>:
#if (DEBUG_UART != UART_NONE)
    static const char hex[] = "0123456789ABCDEF";
#endif
    _DEBUG_putc(hex[b >> 4]);
    _DEBUG_putc(hex[b & 0x0F]);
}
     60c:	cf 93       	push	r28
     60e:	df 93       	push	r29
     610:	ec 01       	movw	r28, r24
     612:	88 81       	ld	r24, Y
     614:	88 23       	and	r24, r24
     616:	29 f0       	breq	.+10     	; 0x622 <DEBUG_puts+0x16>
     618:	21 96       	adiw	r28, 0x01	; 1
     61a:	cb de       	rcall	.-618    	; 0x3b2 <_uartc1_putc>
     61c:	89 91       	ld	r24, Y+
     61e:	81 11       	cpse	r24, r1
     620:	fc cf       	rjmp	.-8      	; 0x61a <DEBUG_puts+0xe>
     622:	df 91       	pop	r29
     624:	cf 91       	pop	r28
     626:	08 95       	ret

00000628 <DEBUG_putcrlf>:
     628:	00 97       	sbiw	r24, 0x00	; 0
     62a:	09 f0       	breq	.+2      	; 0x62e <DEBUG_putcrlf+0x6>
     62c:	ef df       	rcall	.-34     	; 0x60c <DEBUG_puts>
     62e:	82 e1       	ldi	r24, 0x12	; 18
     630:	90 e2       	ldi	r25, 0x20	; 32
     632:	ec cf       	rjmp	.-40     	; 0x60c <DEBUG_puts>

00000634 <DEBUG_putu>:

void DEBUG_putu(uint32_t v)
{
     634:	cf 92       	push	r12
     636:	df 92       	push	r13
     638:	ef 92       	push	r14
     63a:	ff 92       	push	r15
     63c:	6b 01       	movw	r12, r22
     63e:	7c 01       	movw	r14, r24
    if (v > 9) {
     640:	8a e0       	ldi	r24, 0x0A	; 10
     642:	c8 16       	cp	r12, r24
     644:	d1 04       	cpc	r13, r1
     646:	e1 04       	cpc	r14, r1
     648:	f1 04       	cpc	r15, r1
     64a:	58 f0       	brcs	.+22     	; 0x662 <DEBUG_putu+0x2e>
        DEBUG_putu(v / 10);
     64c:	c7 01       	movw	r24, r14
     64e:	b6 01       	movw	r22, r12
     650:	2a e0       	ldi	r18, 0x0A	; 10
     652:	30 e0       	ldi	r19, 0x00	; 0
     654:	40 e0       	ldi	r20, 0x00	; 0
     656:	50 e0       	ldi	r21, 0x00	; 0
     658:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <__udivmodsi4>
     65c:	ca 01       	movw	r24, r20
     65e:	b9 01       	movw	r22, r18
     660:	e9 df       	rcall	.-46     	; 0x634 <DEBUG_putu>
    }
    _DEBUG_putc('0' + v % 10);
     662:	c7 01       	movw	r24, r14
     664:	b6 01       	movw	r22, r12
     666:	2a e0       	ldi	r18, 0x0A	; 10
     668:	30 e0       	ldi	r19, 0x00	; 0
     66a:	40 e0       	ldi	r20, 0x00	; 0
     66c:	50 e0       	ldi	r21, 0x00	; 0
     66e:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <__udivmodsi4>
     672:	86 2f       	mov	r24, r22
     674:	80 5d       	subi	r24, 0xD0	; 208
     676:	9d de       	rcall	.-710    	; 0x3b2 <_uartc1_putc>
}
     678:	ff 90       	pop	r15
     67a:	ef 90       	pop	r14
     67c:	df 90       	pop	r13
     67e:	cf 90       	pop	r12
     680:	08 95       	ret

00000682 <MODEM_get_byte>:
#include "crc.h"

int16_t MODEM_get_byte(void)
{
    int16_t ans;
    ans = _MODEM_getc();
     682:	6c cf       	rjmp	.-296    	; 0x55c <_uarte0_getc>
    if (ans < 0) {
        return ans;
    }
    //_DEBUG_putc(ans); //eccho every byte that recieved by modem to debug serial port
    return ans;
}
     684:	08 95       	ret

00000686 <MODEM_raw_putb>:

void MODEM_raw_putb(uint8_t byte)
{
     686:	cf 93       	push	r28
     688:	c8 2f       	mov	r28, r24
    _MODEM_putc(byte);
     68a:	89 df       	rcall	.-238    	; 0x59e <_uarte0_putc>
    _DEBUG_putc(byte);
     68c:	8c 2f       	mov	r24, r28
     68e:	91 de       	rcall	.-734    	; 0x3b2 <_uartc1_putc>
}
     690:	cf 91       	pop	r28
     692:	08 95       	ret

00000694 <MODEM_raw_puts>:

void MODEM_raw_puts(const char* data)
{
     694:	cf 93       	push	r28
     696:	df 93       	push	r29
     698:	ec 01       	movw	r28, r24
    while (*data != '\x00') {
     69a:	88 81       	ld	r24, Y
     69c:	88 23       	and	r24, r24
     69e:	29 f0       	breq	.+10     	; 0x6aa <MODEM_raw_puts+0x16>
{
    _MODEM_putc(byte);
    _DEBUG_putc(byte);
}

void MODEM_raw_puts(const char* data)
     6a0:	21 96       	adiw	r28, 0x01	; 1
{
    while (*data != '\x00') {
        MODEM_raw_putb(*data);
     6a2:	f1 df       	rcall	.-30     	; 0x686 <MODEM_raw_putb>
    _DEBUG_putc(byte);
}

void MODEM_raw_puts(const char* data)
{
    while (*data != '\x00') {
     6a4:	89 91       	ld	r24, Y+
     6a6:	81 11       	cpse	r24, r1
     6a8:	fc cf       	rjmp	.-8      	; 0x6a2 <MODEM_raw_puts+0xe>
        MODEM_raw_putb(*data);
        data++;
    }
}
     6aa:	df 91       	pop	r29
     6ac:	cf 91       	pop	r28
     6ae:	08 95       	ret

000006b0 <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
     6b0:	43 e0       	ldi	r20, 0x03	; 3
     6b2:	50 e0       	ldi	r21, 0x00	; 0
     6b4:	68 e0       	ldi	r22, 0x08	; 8
     6b6:	80 e2       	ldi	r24, 0x20	; 32
     6b8:	96 e0       	ldi	r25, 0x06	; 6
     6ba:	bd d0       	rcall	.+378    	; 0x836 <ioport_configure_port_pin>
     6bc:	43 e0       	ldi	r20, 0x03	; 3
     6be:	50 e0       	ldi	r21, 0x00	; 0
     6c0:	60 e2       	ldi	r22, 0x20	; 32
     6c2:	80 e0       	ldi	r24, 0x00	; 0
     6c4:	96 e0       	ldi	r25, 0x06	; 6
     6c6:	b7 d0       	rcall	.+366    	; 0x836 <ioport_configure_port_pin>
     6c8:	43 e0       	ldi	r20, 0x03	; 3
     6ca:	50 e0       	ldi	r21, 0x00	; 0
     6cc:	68 e0       	ldi	r22, 0x08	; 8
     6ce:	80 e8       	ldi	r24, 0x80	; 128
     6d0:	96 e0       	ldi	r25, 0x06	; 6
     6d2:	b1 d0       	rcall	.+354    	; 0x836 <ioport_configure_port_pin>
     6d4:	40 e0       	ldi	r20, 0x00	; 0
     6d6:	50 e0       	ldi	r21, 0x00	; 0
     6d8:	64 e0       	ldi	r22, 0x04	; 4
     6da:	80 e8       	ldi	r24, 0x80	; 128
     6dc:	96 e0       	ldi	r25, 0x06	; 6
     6de:	ab d0       	rcall	.+342    	; 0x836 <ioport_configure_port_pin>
     6e0:	43 e0       	ldi	r20, 0x03	; 3
     6e2:	50 e0       	ldi	r21, 0x00	; 0
     6e4:	68 e0       	ldi	r22, 0x08	; 8
     6e6:	80 e8       	ldi	r24, 0x80	; 128
     6e8:	96 e0       	ldi	r25, 0x06	; 6
     6ea:	a5 d0       	rcall	.+330    	; 0x836 <ioport_configure_port_pin>
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	64 e0       	ldi	r22, 0x04	; 4
     6f2:	80 e8       	ldi	r24, 0x80	; 128
     6f4:	96 e0       	ldi	r25, 0x06	; 6
     6f6:	9f d0       	rcall	.+318    	; 0x836 <ioport_configure_port_pin>
     6f8:	43 e0       	ldi	r20, 0x03	; 3
     6fa:	50 e0       	ldi	r21, 0x00	; 0
     6fc:	60 e8       	ldi	r22, 0x80	; 128
     6fe:	80 e4       	ldi	r24, 0x40	; 64
     700:	96 e0       	ldi	r25, 0x06	; 6
     702:	99 d0       	rcall	.+306    	; 0x836 <ioport_configure_port_pin>
     704:	40 e0       	ldi	r20, 0x00	; 0
     706:	50 e0       	ldi	r21, 0x00	; 0
     708:	60 e4       	ldi	r22, 0x40	; 64
     70a:	80 e4       	ldi	r24, 0x40	; 64
     70c:	96 e0       	ldi	r25, 0x06	; 6
     70e:	93 d0       	rcall	.+294    	; 0x836 <ioport_configure_port_pin>
     710:	43 e0       	ldi	r20, 0x03	; 3
     712:	50 e0       	ldi	r21, 0x00	; 0
     714:	62 e0       	ldi	r22, 0x02	; 2
     716:	80 e2       	ldi	r24, 0x20	; 32
     718:	96 e0       	ldi	r25, 0x06	; 6
     71a:	8d d0       	rcall	.+282    	; 0x836 <ioport_configure_port_pin>
     71c:	43 e0       	ldi	r20, 0x03	; 3
     71e:	50 e0       	ldi	r21, 0x00	; 0
     720:	60 e4       	ldi	r22, 0x40	; 64
     722:	80 e0       	ldi	r24, 0x00	; 0
     724:	96 e0       	ldi	r25, 0x06	; 6
     726:	87 d0       	rcall	.+270    	; 0x836 <ioport_configure_port_pin>
     728:	41 e0       	ldi	r20, 0x01	; 1
     72a:	50 e0       	ldi	r21, 0x00	; 0
     72c:	61 e0       	ldi	r22, 0x01	; 1
     72e:	80 e6       	ldi	r24, 0x60	; 96
     730:	96 e0       	ldi	r25, 0x06	; 6
     732:	81 d0       	rcall	.+258    	; 0x836 <ioport_configure_port_pin>
     734:	41 e0       	ldi	r20, 0x01	; 1
     736:	50 e0       	ldi	r21, 0x00	; 0
     738:	62 e0       	ldi	r22, 0x02	; 2
     73a:	80 e6       	ldi	r24, 0x60	; 96
     73c:	96 e0       	ldi	r25, 0x06	; 6
     73e:	7b d0       	rcall	.+246    	; 0x836 <ioport_configure_port_pin>
     740:	43 e0       	ldi	r20, 0x03	; 3
     742:	50 e0       	ldi	r21, 0x00	; 0
     744:	68 e0       	ldi	r22, 0x08	; 8
     746:	80 e6       	ldi	r24, 0x60	; 96
     748:	96 e0       	ldi	r25, 0x06	; 6
     74a:	75 d0       	rcall	.+234    	; 0x836 <ioport_configure_port_pin>
     74c:	40 e0       	ldi	r20, 0x00	; 0
     74e:	50 e0       	ldi	r21, 0x00	; 0
     750:	64 e0       	ldi	r22, 0x04	; 4
     752:	80 e4       	ldi	r24, 0x40	; 64
     754:	96 e0       	ldi	r25, 0x06	; 6
     756:	6f d0       	rcall	.+222    	; 0x836 <ioport_configure_port_pin>
     758:	40 e0       	ldi	r20, 0x00	; 0
     75a:	50 e0       	ldi	r21, 0x00	; 0
     75c:	64 e0       	ldi	r22, 0x04	; 4
     75e:	80 e6       	ldi	r24, 0x60	; 96
     760:	96 e0       	ldi	r25, 0x06	; 6
     762:	69 d0       	rcall	.+210    	; 0x836 <ioport_configure_port_pin>
     764:	40 e0       	ldi	r20, 0x00	; 0
     766:	50 e0       	ldi	r21, 0x00	; 0
     768:	64 e0       	ldi	r22, 0x04	; 4
     76a:	80 e2       	ldi	r24, 0x20	; 32
     76c:	96 e0       	ldi	r25, 0x06	; 6
     76e:	63 d0       	rcall	.+198    	; 0x836 <ioport_configure_port_pin>
     770:	40 e0       	ldi	r20, 0x00	; 0
     772:	50 e0       	ldi	r21, 0x00	; 0
     774:	64 e0       	ldi	r22, 0x04	; 4
     776:	80 e0       	ldi	r24, 0x00	; 0
     778:	96 e0       	ldi	r25, 0x06	; 6
     77a:	5d c0       	rjmp	.+186    	; 0x836 <ioport_configure_port_pin>

0000077c <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
     77c:	cf 93       	push	r28
     77e:	df 93       	push	r29
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     780:	8f ef       	ldi	r24, 0xFF	; 255
     782:	80 93 70 00 	sts	0x0070, r24
     786:	80 93 71 00 	sts	0x0071, r24
     78a:	80 93 72 00 	sts	0x0072, r24
     78e:	80 93 73 00 	sts	0x0073, r24
     792:	80 93 74 00 	sts	0x0074, r24
     796:	80 93 75 00 	sts	0x0075, r24
     79a:	80 93 76 00 	sts	0x0076, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     79e:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     7a0:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     7a2:	e0 e5       	ldi	r30, 0x50	; 80
     7a4:	f0 e0       	ldi	r31, 0x00	; 0
     7a6:	90 81       	ld	r25, Z
     7a8:	92 60       	ori	r25, 0x02	; 2
     7aa:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     7ac:	8f bf       	out	0x3f, r24	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     7ae:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     7b0:	81 ff       	sbrs	r24, 1
     7b2:	fd cf       	rjmp	.-6      	; 0x7ae <sysclk_init+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     7b4:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     7b6:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     7b8:	e0 e5       	ldi	r30, 0x50	; 80
     7ba:	f0 e0       	ldi	r31, 0x00	; 0
     7bc:	90 81       	ld	r25, Z
     7be:	94 60       	ori	r25, 0x04	; 4
     7c0:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     7c2:	8f bf       	out	0x3f, r24	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     7c4:	81 81       	ldd	r24, Z+1	; 0x01
     7c6:	82 ff       	sbrs	r24, 2
     7c8:	fd cf       	rjmp	.-6      	; 0x7c4 <sysclk_init+0x48>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     7ca:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     7cc:	f8 94       	cli
#if XMEGA_AU || XMEGA_B || XMEGA_C || XMEGA_E
		Assert((ref_id == OSC_ID_RC32KHZ)
				|| (ref_id == OSC_ID_XOSC)
				|| (ref_id == OSC_ID_USBSOF));

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
     7ce:	c0 e5       	ldi	r28, 0x50	; 80
     7d0:	d0 e0       	ldi	r29, 0x00	; 0
     7d2:	9e 81       	ldd	r25, Y+6	; 0x06
     7d4:	99 7f       	andi	r25, 0xF9	; 249
     7d6:	9e 83       	std	Y+6, r25	; 0x06
		if (ref_id == OSC_ID_XOSC) {
			osc_enable(OSC_ID_RC32KHZ);
			OSC.DFLLCTRL |= OSC_RC32MCREF_XOSC32K_gc;
		}
		else if (ref_id == OSC_ID_RC32KHZ) {
			OSC.DFLLCTRL |= OSC_RC32MCREF_RC32K_gc;
     7d8:	9e 81       	ldd	r25, Y+6	; 0x06
     7da:	9e 83       	std	Y+6, r25	; 0x06
		}
		else if (ref_id == OSC_ID_RC32KHZ) {
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
		}
#endif
		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
     7dc:	e0 e6       	ldi	r30, 0x60	; 96
     7de:	f0 e0       	ldi	r31, 0x00	; 0
     7e0:	90 81       	ld	r25, Z
     7e2:	91 60       	ori	r25, 0x01	; 1
     7e4:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     7e6:	8f bf       	out	0x3f, r24	; 63
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
     7e8:	61 e0       	ldi	r22, 0x01	; 1
     7ea:	80 e4       	ldi	r24, 0x40	; 64
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	4b d0       	rcall	.+150    	; 0x886 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     7f0:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     7f2:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
     7f4:	98 81       	ld	r25, Y
     7f6:	9e 7f       	andi	r25, 0xFE	; 254
     7f8:	98 83       	st	Y, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     7fa:	8f bf       	out	0x3f, r24	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     7fc:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     7fe:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     800:	98 81       	ld	r25, Y
     802:	94 60       	ori	r25, 0x04	; 4
     804:	98 83       	st	Y, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     806:	8f bf       	out	0x3f, r24	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     808:	e0 e5       	ldi	r30, 0x50	; 80
     80a:	f0 e0       	ldi	r31, 0x00	; 0
     80c:	81 81       	ldd	r24, Z+1	; 0x01
     80e:	82 ff       	sbrs	r24, 2
     810:	fd cf       	rjmp	.-6      	; 0x80c <sysclk_init+0x90>
		osc_enable(OSC_ID_XOSC);
		osc_wait_ready(OSC_ID_XOSC);
		break;
	}

	CLK.RTCCTRL = id | CLK_RTCEN_bm;
     812:	85 e0       	ldi	r24, 0x05	; 5
     814:	e0 e4       	ldi	r30, 0x40	; 64
     816:	f0 e0       	ldi	r31, 0x00	; 0
     818:	83 83       	std	Z+3, r24	; 0x03
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
     81a:	df 91       	pop	r29
     81c:	cf 91       	pop	r28
     81e:	08 95       	ret

00000820 <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     820:	2f b7       	in	r18, 0x3f	; 63
	cpu_irq_disable();
     822:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     824:	fc 01       	movw	r30, r24
     826:	e0 59       	subi	r30, 0x90	; 144
     828:	ff 4f       	sbci	r31, 0xFF	; 255
     82a:	60 95       	com	r22
     82c:	80 81       	ld	r24, Z
     82e:	68 23       	and	r22, r24
     830:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     832:	2f bf       	out	0x3f, r18	; 63
     834:	08 95       	ret

00000836 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
     836:	cf 93       	push	r28
     838:	df 93       	push	r29
 *
 */
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
     83a:	fc 01       	movw	r30, r24
     83c:	70 96       	adiw	r30, 0x10	; 16
     83e:	20 e0       	ldi	r18, 0x00	; 0
     840:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
     842:	c6 2f       	mov	r28, r22
     844:	d0 e0       	ldi	r29, 0x00	; 0
     846:	de 01       	movw	r26, r28
     848:	02 2e       	mov	r0, r18
     84a:	02 c0       	rjmp	.+4      	; 0x850 <ioport_configure_port_pin+0x1a>
     84c:	b5 95       	asr	r27
     84e:	a7 95       	ror	r26
     850:	0a 94       	dec	r0
     852:	e2 f7       	brpl	.-8      	; 0x84c <ioport_configure_port_pin+0x16>
     854:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     856:	50 83       	st	Z, r21
     858:	2f 5f       	subi	r18, 0xFF	; 255
     85a:	3f 4f       	sbci	r19, 0xFF	; 255
     85c:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
     85e:	28 30       	cpi	r18, 0x08	; 8
     860:	31 05       	cpc	r19, r1
     862:	89 f7       	brne	.-30     	; 0x846 <ioport_configure_port_pin+0x10>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
     864:	40 ff       	sbrs	r20, 0
     866:	0a c0       	rjmp	.+20     	; 0x87c <ioport_configure_port_pin+0x46>
		if (flags & IOPORT_INIT_HIGH) {
     868:	41 ff       	sbrs	r20, 1
     86a:	03 c0       	rjmp	.+6      	; 0x872 <ioport_configure_port_pin+0x3c>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
     86c:	fc 01       	movw	r30, r24
     86e:	65 83       	std	Z+5, r22	; 0x05
     870:	02 c0       	rjmp	.+4      	; 0x876 <ioport_configure_port_pin+0x40>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
     872:	fc 01       	movw	r30, r24
     874:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
     876:	fc 01       	movw	r30, r24
     878:	61 83       	std	Z+1, r22	; 0x01
     87a:	02 c0       	rjmp	.+4      	; 0x880 <ioport_configure_port_pin+0x4a>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
     87c:	fc 01       	movw	r30, r24
     87e:	62 83       	std	Z+2, r22	; 0x02
	}
}
     880:	df 91       	pop	r29
     882:	cf 91       	pop	r28
     884:	08 95       	ret

00000886 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
     886:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
     888:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
     88a:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
     88c:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
     88e:	60 83       	st	Z, r22
	ret                             // Return to caller
     890:	08 95       	ret

00000892 <nvm_eeprom_read_byte>:
{
	nvm_wait_until_ready();
	eeprom_enable_mapping();
	memcpy( buf,(void*)(address+MAPPED_EEPROM_START), len );
	eeprom_disable_mapping();
}
     892:	e0 ec       	ldi	r30, 0xC0	; 192
     894:	f1 e0       	ldi	r31, 0x01	; 1
     896:	27 85       	ldd	r18, Z+15	; 0x0f
     898:	22 23       	and	r18, r18
     89a:	ec f3       	brlt	.-6      	; 0x896 <nvm_eeprom_read_byte+0x4>
     89c:	ec ec       	ldi	r30, 0xCC	; 204
     89e:	f1 e0       	ldi	r31, 0x01	; 1
     8a0:	20 81       	ld	r18, Z
     8a2:	28 60       	ori	r18, 0x08	; 8
     8a4:	20 83       	st	Z, r18
     8a6:	dc 01       	movw	r26, r24
     8a8:	b0 5f       	subi	r27, 0xF0	; 240
     8aa:	8c 91       	ld	r24, X
     8ac:	90 81       	ld	r25, Z
     8ae:	97 7f       	andi	r25, 0xF7	; 247
     8b0:	90 83       	st	Z, r25
     8b2:	08 95       	ret

000008b4 <nvm_eeprom_flush_buffer>:
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
     8b4:	e0 ec       	ldi	r30, 0xC0	; 192
     8b6:	f1 e0       	ldi	r31, 0x01	; 1
     8b8:	87 85       	ldd	r24, Z+15	; 0x0f
     8ba:	88 23       	and	r24, r24
     8bc:	ec f3       	brlt	.-6      	; 0x8b8 <nvm_eeprom_flush_buffer+0x4>
{
	// Wait until NVM is ready
	nvm_wait_until_ready();

	// Flush EEPROM page buffer if necessary
	if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
     8be:	e0 ec       	ldi	r30, 0xC0	; 192
     8c0:	f1 e0       	ldi	r31, 0x01	; 1
     8c2:	87 85       	ldd	r24, Z+15	; 0x0f
     8c4:	81 ff       	sbrs	r24, 1
     8c6:	06 c0       	rjmp	.+12     	; 0x8d4 <nvm_eeprom_flush_buffer+0x20>
		NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
     8c8:	86 e3       	ldi	r24, 0x36	; 54
     8ca:	82 87       	std	Z+10, r24	; 0x0a
 * \note The correct NVM command must be set in the NVM.CMD register before
 *       calling this function.
 */
static inline void nvm_exec(void)
{
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
     8cc:	61 e0       	ldi	r22, 0x01	; 1
     8ce:	8b ec       	ldi	r24, 0xCB	; 203
     8d0:	91 e0       	ldi	r25, 0x01	; 1
     8d2:	d9 cf       	rjmp	.-78     	; 0x886 <ccp_write_io>
     8d4:	08 95       	ret

000008d6 <nvm_eeprom_load_byte_to_buffer>:
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
     8d6:	e0 ec       	ldi	r30, 0xC0	; 192
     8d8:	f1 e0       	ldi	r31, 0x01	; 1
     8da:	97 85       	ldd	r25, Z+15	; 0x0f
     8dc:	99 23       	and	r25, r25
     8de:	ec f3       	brlt	.-6      	; 0x8da <nvm_eeprom_load_byte_to_buffer+0x4>
 *        write operations still needs to be done through IO register.
 */
static inline void eeprom_enable_mapping(void)
{
#if !XMEGA_E
	NVM_CTRLB = NVM_CTRLB | NVM_EEMAPEN_bm;
     8e0:	ec ec       	ldi	r30, 0xCC	; 204
     8e2:	f1 e0       	ldi	r31, 0x01	; 1
     8e4:	90 81       	ld	r25, Z
     8e6:	98 60       	ori	r25, 0x08	; 8
     8e8:	90 83       	st	Z, r25
{
	// Wait until NVM is ready
	nvm_wait_until_ready();

	eeprom_enable_mapping();
	*(uint8_t*)(byte_addr + MAPPED_EEPROM_START) = value;
     8ea:	a8 2f       	mov	r26, r24
     8ec:	b0 e0       	ldi	r27, 0x00	; 0
     8ee:	b0 5f       	subi	r27, 0xF0	; 240
     8f0:	6c 93       	st	X, r22
 *  IO mapped access is now enabled.
 */
static inline void eeprom_disable_mapping(void)
{
#if !XMEGA_E
	NVM_CTRLB = NVM_CTRLB & ~NVM_EEMAPEN_bm;
     8f2:	80 81       	ld	r24, Z
     8f4:	87 7f       	andi	r24, 0xF7	; 247
     8f6:	80 83       	st	Z, r24
     8f8:	08 95       	ret

000008fa <nvm_eeprom_write_byte>:
 *
 * \param  address    EEPROM address (max EEPROM_SIZE)
 * \param  value      Byte value to write to EEPROM.
 */
void nvm_eeprom_write_byte(eeprom_addr_t address, uint8_t value)
{
     8fa:	ff 92       	push	r15
     8fc:	0f 93       	push	r16
     8fe:	1f 93       	push	r17
     900:	cf 93       	push	r28
     902:	df 93       	push	r29
     904:	18 2f       	mov	r17, r24
     906:	f9 2e       	mov	r15, r25
     908:	c6 2f       	mov	r28, r22

	Assert(address <= EEPROM_SIZE);
	/*  Flush buffer to make sure no unintentional data is written and load
	 *  the "Page Load" command into the command register.
	 */
	old_cmd = NVM.CMD;
     90a:	e0 ec       	ldi	r30, 0xC0	; 192
     90c:	f1 e0       	ldi	r31, 0x01	; 1
     90e:	02 85       	ldd	r16, Z+10	; 0x0a
	nvm_eeprom_flush_buffer();
     910:	d1 df       	rcall	.-94     	; 0x8b4 <nvm_eeprom_flush_buffer>
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
     912:	e0 ec       	ldi	r30, 0xC0	; 192
     914:	f1 e0       	ldi	r31, 0x01	; 1
     916:	27 85       	ldd	r18, Z+15	; 0x0f
     918:	22 23       	and	r18, r18
     91a:	ec f3       	brlt	.-6      	; 0x916 <nvm_eeprom_write_byte+0x1c>
	// Wait until NVM is ready
	nvm_wait_until_ready();
	nvm_eeprom_load_byte_to_buffer(address, value);
     91c:	6c 2f       	mov	r22, r28
     91e:	81 2f       	mov	r24, r17
     920:	da df       	rcall	.-76     	; 0x8d6 <nvm_eeprom_load_byte_to_buffer>

	// Set address to write to
	NVM.ADDR2 = 0x00;
     922:	c0 ec       	ldi	r28, 0xC0	; 192
     924:	d1 e0       	ldi	r29, 0x01	; 1
     926:	1a 82       	std	Y+2, r1	; 0x02
	NVM.ADDR1 = (address >> 8) & 0xFF;
     928:	f9 82       	std	Y+1, r15	; 0x01
	NVM.ADDR0 = address & 0xFF;
     92a:	18 83       	st	Y, r17

	/*  Issue EEPROM Atomic Write (Erase&Write) command. Load command, write
	 *  the protection signature and execute command.
	 */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
     92c:	85 e3       	ldi	r24, 0x35	; 53
     92e:	8a 87       	std	Y+10, r24	; 0x0a
 * \note The correct NVM command must be set in the NVM.CMD register before
 *       calling this function.
 */
static inline void nvm_exec(void)
{
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
     930:	61 e0       	ldi	r22, 0x01	; 1
     932:	8b ec       	ldi	r24, 0xCB	; 203
     934:	91 e0       	ldi	r25, 0x01	; 1
     936:	a7 df       	rcall	.-178    	; 0x886 <ccp_write_io>
	nvm_exec();
	NVM.CMD = old_cmd;
     938:	0a 87       	std	Y+10, r16	; 0x0a
}
     93a:	df 91       	pop	r29
     93c:	cf 91       	pop	r28
     93e:	1f 91       	pop	r17
     940:	0f 91       	pop	r16
     942:	ff 90       	pop	r15
     944:	08 95       	ret

00000946 <nvm_eeprom_load_page_to_buffer>:
 *       EEPROM write page operation.
 *
 * \param  values   Pointer to SRAM buffer containing an entire page.
 */
void nvm_eeprom_load_page_to_buffer(const uint8_t *values)
{
     946:	ef 92       	push	r14
     948:	ff 92       	push	r15
     94a:	0f 93       	push	r16
     94c:	1f 93       	push	r17
     94e:	cf 93       	push	r28
     950:	df 93       	push	r29
     952:	8c 01       	movw	r16, r24
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
     954:	e0 ec       	ldi	r30, 0xC0	; 192
     956:	f1 e0       	ldi	r31, 0x01	; 1
     958:	87 85       	ldd	r24, Z+15	; 0x0f
     95a:	88 23       	and	r24, r24
     95c:	ec f3       	brlt	.-6      	; 0x958 <nvm_eeprom_load_page_to_buffer+0x12>
 *       is written to the EEPROM page given by the address parameter to the
 *       EEPROM write page operation.
 *
 * \param  values   Pointer to SRAM buffer containing an entire page.
 */
void nvm_eeprom_load_page_to_buffer(const uint8_t *values)
     95e:	78 01       	movw	r14, r16
     960:	80 e2       	ldi	r24, 0x20	; 32
     962:	e8 0e       	add	r14, r24
     964:	f1 1c       	adc	r15, r1
     966:	e8 01       	movw	r28, r16
     968:	8c 2f       	mov	r24, r28
     96a:	80 1b       	sub	r24, r16
	nvm_wait_until_ready();

	// Load multiple bytes into page buffer
	uint8_t i;
	for (i = 0; i < EEPROM_PAGE_SIZE; ++i) {
		nvm_eeprom_load_byte_to_buffer(i, *values);
     96c:	69 91       	ld	r22, Y+
     96e:	b3 df       	rcall	.-154    	; 0x8d6 <nvm_eeprom_load_byte_to_buffer>
	// Wait until NVM is ready
	nvm_wait_until_ready();

	// Load multiple bytes into page buffer
	uint8_t i;
	for (i = 0; i < EEPROM_PAGE_SIZE; ++i) {
     970:	ce 15       	cp	r28, r14
     972:	df 05       	cpc	r29, r15
     974:	c9 f7       	brne	.-14     	; 0x968 <nvm_eeprom_load_page_to_buffer+0x22>
		nvm_eeprom_load_byte_to_buffer(i, *values);
		++values;
	}
}
     976:	df 91       	pop	r29
     978:	cf 91       	pop	r28
     97a:	1f 91       	pop	r17
     97c:	0f 91       	pop	r16
     97e:	ff 90       	pop	r15
     980:	ef 90       	pop	r14
     982:	08 95       	ret

00000984 <nvm_eeprom_atomic_write_page>:
 * locations that have not been loaded will be left untouched in EEPROM.
 *
 * \param  page_addr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGE_SIZE
 */
void nvm_eeprom_atomic_write_page(uint8_t page_addr)
{
     984:	1f 93       	push	r17
     986:	cf 93       	push	r28
     988:	df 93       	push	r29
     98a:	e0 ec       	ldi	r30, 0xC0	; 192
     98c:	f1 e0       	ldi	r31, 0x01	; 1
     98e:	97 85       	ldd	r25, Z+15	; 0x0f
     990:	99 23       	and	r25, r25
     992:	ec f3       	brlt	.-6      	; 0x98e <nvm_eeprom_atomic_write_page+0xa>
	// Wait until NVM is ready
	nvm_wait_until_ready();

	// Calculate page address
	uint16_t address = (uint16_t)(page_addr * EEPROM_PAGE_SIZE);
     994:	20 e2       	ldi	r18, 0x20	; 32
     996:	82 9f       	mul	r24, r18
     998:	c0 01       	movw	r24, r0
     99a:	11 24       	eor	r1, r1

	Assert(address <= EEPROM_SIZE);

	// Set address
	NVM.ADDR2 = 0x00;
     99c:	c0 ec       	ldi	r28, 0xC0	; 192
     99e:	d1 e0       	ldi	r29, 0x01	; 1
     9a0:	1a 82       	std	Y+2, r1	; 0x02
	NVM.ADDR1 = (address >> 8) & 0xFF;
     9a2:	99 83       	std	Y+1, r25	; 0x01
	NVM.ADDR0 = address & 0xFF;
     9a4:	88 83       	st	Y, r24
 */
static inline void nvm_issue_command(NVM_CMD_t nvm_command)
{
	uint8_t old_cmd;

	old_cmd = NVM.CMD;
     9a6:	1a 85       	ldd	r17, Y+10	; 0x0a
	NVM.CMD = nvm_command;
     9a8:	85 e3       	ldi	r24, 0x35	; 53
     9aa:	8a 87       	std	Y+10, r24	; 0x0a
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
     9ac:	61 e0       	ldi	r22, 0x01	; 1
     9ae:	8b ec       	ldi	r24, 0xCB	; 203
     9b0:	91 e0       	ldi	r25, 0x01	; 1
     9b2:	69 df       	rcall	.-302    	; 0x886 <ccp_write_io>
	NVM.CMD = old_cmd;
     9b4:	1a 87       	std	Y+10, r17	; 0x0a

	// Issue EEPROM Atomic Write (Erase&Write) command
	nvm_issue_command(NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc);
}
     9b6:	df 91       	pop	r29
     9b8:	cf 91       	pop	r28
     9ba:	1f 91       	pop	r17
     9bc:	08 95       	ret

000009be <nvm_eeprom_erase_and_write_buffer>:
 * \param address   the address to where to write
 * \param buf       pointer to the data
 * \param len       the number of bytes to write
 */
void nvm_eeprom_erase_and_write_buffer(eeprom_addr_t address, const void *buf, uint16_t len)
{
     9be:	cf 92       	push	r12
     9c0:	df 92       	push	r13
     9c2:	ef 92       	push	r14
     9c4:	ff 92       	push	r15
     9c6:	0f 93       	push	r16
     9c8:	1f 93       	push	r17
     9ca:	cf 93       	push	r28
     9cc:	df 93       	push	r29
     9ce:	ec 01       	movw	r28, r24
     9d0:	7b 01       	movw	r14, r22
     9d2:	8a 01       	movw	r16, r20
	while (len) {
     9d4:	41 15       	cp	r20, r1
     9d6:	51 05       	cpc	r21, r1
     9d8:	51 f1       	breq	.+84     	; 0xa2e <nvm_eeprom_erase_and_write_buffer+0x70>
		if (((address%EEPROM_PAGE_SIZE)==0) && (len>=EEPROM_PAGE_SIZE)) {
     9da:	ce 01       	movw	r24, r28
     9dc:	8f 71       	andi	r24, 0x1F	; 31
     9de:	99 27       	eor	r25, r25
     9e0:	89 2b       	or	r24, r25
     9e2:	b1 f4       	brne	.+44     	; 0xa10 <nvm_eeprom_erase_and_write_buffer+0x52>
     9e4:	00 32       	cpi	r16, 0x20	; 32
     9e6:	11 05       	cpc	r17, r1
     9e8:	98 f0       	brcs	.+38     	; 0xa10 <nvm_eeprom_erase_and_write_buffer+0x52>
			// A full page can be written
			nvm_eeprom_load_page_to_buffer((uint8_t*)buf);
     9ea:	c7 01       	movw	r24, r14
     9ec:	ac df       	rcall	.-168    	; 0x946 <nvm_eeprom_load_page_to_buffer>
			nvm_eeprom_atomic_write_page(address/EEPROM_PAGE_SIZE);
     9ee:	ce 01       	movw	r24, r28
     9f0:	96 95       	lsr	r25
     9f2:	87 95       	ror	r24
     9f4:	92 95       	swap	r25
     9f6:	82 95       	swap	r24
     9f8:	8f 70       	andi	r24, 0x0F	; 15
     9fa:	89 27       	eor	r24, r25
     9fc:	9f 70       	andi	r25, 0x0F	; 15
     9fe:	89 27       	eor	r24, r25
     a00:	c1 df       	rcall	.-126    	; 0x984 <nvm_eeprom_atomic_write_page>
			address += EEPROM_PAGE_SIZE;
     a02:	a0 96       	adiw	r28, 0x20	; 32
			buf = (uint8_t*)buf + EEPROM_PAGE_SIZE;
     a04:	80 e2       	ldi	r24, 0x20	; 32
     a06:	e8 0e       	add	r14, r24
     a08:	f1 1c       	adc	r15, r1
			len -= EEPROM_PAGE_SIZE;
     a0a:	00 52       	subi	r16, 0x20	; 32
     a0c:	11 09       	sbc	r17, r1
     a0e:	0c c0       	rjmp	.+24     	; 0xa28 <nvm_eeprom_erase_and_write_buffer+0x6a>
		} else {
			nvm_eeprom_write_byte(address++, *(uint8_t*)buf);
     a10:	6e 01       	movw	r12, r28
     a12:	ef ef       	ldi	r30, 0xFF	; 255
     a14:	ce 1a       	sub	r12, r30
     a16:	de 0a       	sbc	r13, r30
     a18:	f7 01       	movw	r30, r14
     a1a:	61 91       	ld	r22, Z+
     a1c:	7f 01       	movw	r14, r30
     a1e:	ce 01       	movw	r24, r28
     a20:	6c df       	rcall	.-296    	; 0x8fa <nvm_eeprom_write_byte>
			buf = (uint8_t*)buf + 1;
			len--;
     a22:	01 50       	subi	r16, 0x01	; 1
     a24:	11 09       	sbc	r17, r1
			nvm_eeprom_atomic_write_page(address/EEPROM_PAGE_SIZE);
			address += EEPROM_PAGE_SIZE;
			buf = (uint8_t*)buf + EEPROM_PAGE_SIZE;
			len -= EEPROM_PAGE_SIZE;
		} else {
			nvm_eeprom_write_byte(address++, *(uint8_t*)buf);
     a26:	e6 01       	movw	r28, r12
 * \param buf       pointer to the data
 * \param len       the number of bytes to write
 */
void nvm_eeprom_erase_and_write_buffer(eeprom_addr_t address, const void *buf, uint16_t len)
{
	while (len) {
     a28:	01 15       	cp	r16, r1
     a2a:	11 05       	cpc	r17, r1
     a2c:	b1 f6       	brne	.-84     	; 0x9da <nvm_eeprom_erase_and_write_buffer+0x1c>
			nvm_eeprom_write_byte(address++, *(uint8_t*)buf);
			buf = (uint8_t*)buf + 1;
			len--;
		}
	}
}
     a2e:	df 91       	pop	r29
     a30:	cf 91       	pop	r28
     a32:	1f 91       	pop	r17
     a34:	0f 91       	pop	r16
     a36:	ff 90       	pop	r15
     a38:	ef 90       	pop	r14
     a3a:	df 90       	pop	r13
     a3c:	cf 90       	pop	r12
     a3e:	08 95       	ret

00000a40 <rtc_set_time>:
 *
 * \param time Time value to set
 */
void rtc_set_time(uint32_t time)
{
	RTC.CTRL = RTC_PRESCALER_OFF_gc;
     a40:	10 92 00 04 	sts	0x0400, r1
 * \brief Check if RTC is busy synchronizing
 */
__always_inline bool rtc_is_busy(void);
__always_inline bool rtc_is_busy(void)
{
	return RTC.STATUS & RTC_SYNCBUSY_bm;
     a44:	e0 e0       	ldi	r30, 0x00	; 0
     a46:	f4 e0       	ldi	r31, 0x04	; 4
     a48:	21 81       	ldd	r18, Z+1	; 0x01
 */
void rtc_set_time(uint32_t time)
{
	RTC.CTRL = RTC_PRESCALER_OFF_gc;

	while (rtc_is_busy());
     a4a:	20 fd       	sbrc	r18, 0
     a4c:	fd cf       	rjmp	.-6      	; 0xa48 <rtc_set_time+0x8>

	RTC.CNT = time;
     a4e:	e0 e0       	ldi	r30, 0x00	; 0
     a50:	f4 e0       	ldi	r31, 0x04	; 4
     a52:	60 87       	std	Z+8, r22	; 0x08
     a54:	71 87       	std	Z+9, r23	; 0x09
	rtc_data.counter_high = time >> 16;
     a56:	80 93 c1 25 	sts	0x25C1, r24
     a5a:	90 93 c2 25 	sts	0x25C2, r25
	RTC.CTRL = CONFIG_RTC_PRESCALER;
     a5e:	87 e0       	ldi	r24, 0x07	; 7
     a60:	80 83       	st	Z, r24
     a62:	08 95       	ret

00000a64 <rtc_get_time>:
 *       sleep.
 * \note Without this errata this function can block for up to 1 RTC
 *       clock source cycle after waking up from sleep.
 */
uint32_t rtc_get_time(void)
{
     a64:	0f 93       	push	r16
     a66:	1f 93       	push	r17
 * \brief Check if RTC is busy synchronizing
 */
__always_inline bool rtc_is_busy(void);
__always_inline bool rtc_is_busy(void)
{
	return RTC.STATUS & RTC_SYNCBUSY_bm;
     a68:	e0 e0       	ldi	r30, 0x00	; 0
     a6a:	f4 e0       	ldi	r31, 0x04	; 4
     a6c:	81 81       	ldd	r24, Z+1	; 0x01
{
	irqflags_t flags;
	uint16_t   count_high;
	uint16_t   count_low;

	while (rtc_is_busy());
     a6e:	80 fd       	sbrc	r24, 0
     a70:	fd cf       	rjmp	.-6      	; 0xa6c <rtc_get_time+0x8>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     a72:	2f b7       	in	r18, 0x3f	; 63
	cpu_irq_disable();
     a74:	f8 94       	cli

	flags = cpu_irq_save();
	count_high = rtc_data.counter_high;
     a76:	00 91 c1 25 	lds	r16, 0x25C1
     a7a:	10 91 c2 25 	lds	r17, 0x25C2
	count_low = RTC.CNT;
     a7e:	e0 e0       	ldi	r30, 0x00	; 0
     a80:	f4 e0       	ldi	r31, 0x04	; 4
     a82:	80 85       	ldd	r24, Z+8	; 0x08
     a84:	91 85       	ldd	r25, Z+9	; 0x09
	// Test for possible pending increase of high count value
	if ((count_low == 0) && (RTC.INTFLAGS & RTC_OVFIF_bm))
     a86:	00 97       	sbiw	r24, 0x00	; 0
     a88:	29 f4       	brne	.+10     	; 0xa94 <rtc_get_time+0x30>
     a8a:	33 81       	ldd	r19, Z+3	; 0x03
     a8c:	30 ff       	sbrs	r19, 0
     a8e:	02 c0       	rjmp	.+4      	; 0xa94 <rtc_get_time+0x30>
		count_high++;
     a90:	0f 5f       	subi	r16, 0xFF	; 255
     a92:	1f 4f       	sbci	r17, 0xFF	; 255
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     a94:	2f bf       	out	0x3f, r18	; 63
	cpu_irq_restore(flags);

	return ((uint32_t)count_high << 16) | count_low;
     a96:	20 e0       	ldi	r18, 0x00	; 0
     a98:	30 e0       	ldi	r19, 0x00	; 0
     a9a:	98 01       	movw	r18, r16
     a9c:	11 27       	eor	r17, r17
     a9e:	00 27       	eor	r16, r16
     aa0:	a0 e0       	ldi	r26, 0x00	; 0
     aa2:	b0 e0       	ldi	r27, 0x00	; 0
     aa4:	08 2b       	or	r16, r24
     aa6:	19 2b       	or	r17, r25
     aa8:	2a 2b       	or	r18, r26
     aaa:	3b 2b       	or	r19, r27
}
     aac:	60 2f       	mov	r22, r16
     aae:	71 2f       	mov	r23, r17
     ab0:	82 2f       	mov	r24, r18
     ab2:	93 2f       	mov	r25, r19
     ab4:	1f 91       	pop	r17
     ab6:	0f 91       	pop	r16
     ab8:	08 95       	ret

00000aba <rtc_set_alarm>:
 * \param time Absolute time value. See also \ref rtc_min_alarm_time
 * \pre Needs interrupts disabled if used from several contexts
 */
void rtc_set_alarm(uint32_t time)
{
	RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
     aba:	e0 e0       	ldi	r30, 0x00	; 0
     abc:	f4 e0       	ldi	r31, 0x04	; 4
     abe:	21 e0       	ldi	r18, 0x01	; 1
     ac0:	22 83       	std	Z+2, r18	; 0x02
	RTC.COMP = time;
     ac2:	64 87       	std	Z+12, r22	; 0x0c
     ac4:	75 87       	std	Z+13, r23	; 0x0d
	rtc_data.alarm_low = time;
     ac6:	60 93 c5 25 	sts	0x25C5, r22
     aca:	70 93 c6 25 	sts	0x25C6, r23
	rtc_data.alarm_high = time >> 16;
     ace:	80 93 c3 25 	sts	0x25C3, r24
     ad2:	90 93 c4 25 	sts	0x25C4, r25
 * \brief Check if RTC is busy synchronizing
 */
__always_inline bool rtc_is_busy(void);
__always_inline bool rtc_is_busy(void)
{
	return RTC.STATUS & RTC_SYNCBUSY_bm;
     ad6:	81 81       	ldd	r24, Z+1	; 0x01
	RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
	RTC.COMP = time;
	rtc_data.alarm_low = time;
	rtc_data.alarm_high = time >> 16;

	while (rtc_is_busy());
     ad8:	80 fd       	sbrc	r24, 0
     ada:	fd cf       	rjmp	.-6      	; 0xad6 <rtc_set_alarm+0x1c>

	RTC.INTFLAGS = RTC_COMPIF_bm;
     adc:	e0 e0       	ldi	r30, 0x00	; 0
     ade:	f4 e0       	ldi	r31, 0x04	; 4
     ae0:	82 e0       	ldi	r24, 0x02	; 2
     ae2:	83 83       	std	Z+3, r24	; 0x03
	RTC.INTCTRL = (uint8_t)RTC_COMPARE_INT_LEVEL
     ae4:	85 e0       	ldi	r24, 0x05	; 5
     ae6:	82 83       	std	Z+2, r24	; 0x02
     ae8:	08 95       	ret

00000aea <rtc_set_callback>:
 *
 * \param callback Callback function pointer
 */
void rtc_set_callback(rtc_callback_t callback)
{
	rtc_data.callback = callback;
     aea:	80 93 c7 25 	sts	0x25C7, r24
     aee:	90 93 c8 25 	sts	0x25C8, r25
     af2:	08 95       	ret

00000af4 <rtc_init>:
 * \note The RTC clock source used by the RTC module should be set up before
 *       calling this function. 
 */
void rtc_init(void)
{
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
     af4:	64 e0       	ldi	r22, 0x04	; 4
     af6:	80 e0       	ldi	r24, 0x00	; 0
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	92 de       	rcall	.-732    	; 0x820 <sysclk_enable_module>
	RTC.PER = 0xffff;
     afc:	e0 e0       	ldi	r30, 0x00	; 0
     afe:	f4 e0       	ldi	r31, 0x04	; 4
     b00:	8f ef       	ldi	r24, 0xFF	; 255
     b02:	9f ef       	ldi	r25, 0xFF	; 255
     b04:	82 87       	std	Z+10, r24	; 0x0a
     b06:	93 87       	std	Z+11, r25	; 0x0b
	RTC.CNT = 0;
     b08:	10 86       	std	Z+8, r1	; 0x08
     b0a:	11 86       	std	Z+9, r1	; 0x09

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     b0c:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     b0e:	f8 94       	cli
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
     b10:	ae eb       	ldi	r26, 0xBE	; 190
     b12:	b5 e2       	ldi	r27, 0x25	; 37
     b14:	9c 91       	ld	r25, X
     b16:	9f 5f       	subi	r25, 0xFF	; 255
     b18:	9c 93       	st	X, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     b1a:	8f bf       	out	0x3f, r24	; 63
	/* Since overflow interrupt is needed all the time we limit sleep to
	 * power-save.
	 */
	sleepmgr_lock_mode(SLEEPMGR_PSAVE);
	RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
     b1c:	81 e0       	ldi	r24, 0x01	; 1
     b1e:	82 83       	std	Z+2, r24	; 0x02
	RTC.CTRL = CONFIG_RTC_PRESCALER;
     b20:	87 e0       	ldi	r24, 0x07	; 7
     b22:	80 83       	st	Z, r24
     b24:	08 95       	ret

00000b26 <__vector_10>:
/**
 * \internal
 * \brief Overflow interrupt handling high counter
 */
ISR(RTC_OVF_vect)
{
     b26:	1f 92       	push	r1
     b28:	0f 92       	push	r0
     b2a:	0f b6       	in	r0, 0x3f	; 63
     b2c:	0f 92       	push	r0
     b2e:	11 24       	eor	r1, r1
     b30:	8f 93       	push	r24
     b32:	9f 93       	push	r25
     b34:	ef 93       	push	r30
     b36:	ff 93       	push	r31
	rtc_data.counter_high++;
     b38:	e1 ec       	ldi	r30, 0xC1	; 193
     b3a:	f5 e2       	ldi	r31, 0x25	; 37
     b3c:	80 81       	ld	r24, Z
     b3e:	91 81       	ldd	r25, Z+1	; 0x01
     b40:	01 96       	adiw	r24, 0x01	; 1
     b42:	80 83       	st	Z, r24
     b44:	91 83       	std	Z+1, r25	; 0x01
}
     b46:	ff 91       	pop	r31
     b48:	ef 91       	pop	r30
     b4a:	9f 91       	pop	r25
     b4c:	8f 91       	pop	r24
     b4e:	0f 90       	pop	r0
     b50:	0f be       	out	0x3f, r0	; 63
     b52:	0f 90       	pop	r0
     b54:	1f 90       	pop	r1
     b56:	18 95       	reti

00000b58 <__vector_11>:
/**
 * \internal
 * \brief Compare interrupt used for alarm
 */
ISR(RTC_COMP_vect)
{
     b58:	1f 92       	push	r1
     b5a:	0f 92       	push	r0
     b5c:	0f b6       	in	r0, 0x3f	; 63
     b5e:	0f 92       	push	r0
     b60:	11 24       	eor	r1, r1
     b62:	cf 92       	push	r12
     b64:	df 92       	push	r13
     b66:	ef 92       	push	r14
     b68:	ff 92       	push	r15
     b6a:	0f 93       	push	r16
     b6c:	1f 93       	push	r17
     b6e:	2f 93       	push	r18
     b70:	3f 93       	push	r19
     b72:	4f 93       	push	r20
     b74:	5f 93       	push	r21
     b76:	6f 93       	push	r22
     b78:	7f 93       	push	r23
     b7a:	8f 93       	push	r24
     b7c:	9f 93       	push	r25
     b7e:	af 93       	push	r26
     b80:	bf 93       	push	r27
     b82:	ef 93       	push	r30
     b84:	ff 93       	push	r31
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
     b86:	40 91 c1 25 	lds	r20, 0x25C1
     b8a:	50 91 c2 25 	lds	r21, 0x25C2
     b8e:	80 91 c3 25 	lds	r24, 0x25C3
     b92:	90 91 c4 25 	lds	r25, 0x25C4
     b96:	48 17       	cp	r20, r24
     b98:	59 07       	cpc	r21, r25
     b9a:	f0 f1       	brcs	.+124    	; 0xc18 <__vector_11+0xc0>
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
     b9c:	81 e0       	ldi	r24, 0x01	; 1
     b9e:	e0 e0       	ldi	r30, 0x00	; 0
     ba0:	f4 e0       	ldi	r31, 0x04	; 4
     ba2:	82 83       	std	Z+2, r24	; 0x02
		if (rtc_data.callback) {
     ba4:	e0 91 c7 25 	lds	r30, 0x25C7
     ba8:	f0 91 c8 25 	lds	r31, 0x25C8
     bac:	30 97       	sbiw	r30, 0x00	; 0
     bae:	a1 f1       	breq	.+104    	; 0xc18 <__vector_11+0xc0>
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
					| RTC.CNT;
     bb0:	a0 e0       	ldi	r26, 0x00	; 0
     bb2:	b4 e0       	ldi	r27, 0x04	; 4
     bb4:	18 96       	adiw	r26, 0x08	; 8
     bb6:	8d 91       	ld	r24, X+
     bb8:	9c 91       	ld	r25, X
     bba:	19 97       	sbiw	r26, 0x09	; 9
ISR(RTC_COMP_vect)
{
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
     bbc:	60 e0       	ldi	r22, 0x00	; 0
     bbe:	70 e0       	ldi	r23, 0x00	; 0
     bc0:	ba 01       	movw	r22, r20
     bc2:	55 27       	eor	r21, r21
     bc4:	44 27       	eor	r20, r20
					| RTC.CNT;
     bc6:	a0 e0       	ldi	r26, 0x00	; 0
     bc8:	b0 e0       	ldi	r27, 0x00	; 0
ISR(RTC_COMP_vect)
{
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
     bca:	8a 01       	movw	r16, r20
     bcc:	9b 01       	movw	r18, r22
     bce:	08 2b       	or	r16, r24
     bd0:	19 2b       	or	r17, r25
     bd2:	2a 2b       	or	r18, r26
     bd4:	3b 2b       	or	r19, r27
     bd6:	c9 01       	movw	r24, r18
     bd8:	b8 01       	movw	r22, r16
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
     bda:	00 91 c3 25 	lds	r16, 0x25C3
     bde:	10 91 c4 25 	lds	r17, 0x25C4
     be2:	20 e0       	ldi	r18, 0x00	; 0
     be4:	30 e0       	ldi	r19, 0x00	; 0
     be6:	98 01       	movw	r18, r16
     be8:	11 27       	eor	r17, r17
     bea:	00 27       	eor	r16, r16
					| rtc_data.alarm_low;
     bec:	c0 90 c5 25 	lds	r12, 0x25C5
     bf0:	d0 90 c6 25 	lds	r13, 0x25C6
     bf4:	e1 2c       	mov	r14, r1
     bf6:	f1 2c       	mov	r15, r1
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
     bf8:	0c 29       	or	r16, r12
     bfa:	1d 29       	or	r17, r13
     bfc:	2e 29       	or	r18, r14
     bfe:	3f 29       	or	r19, r15
					| rtc_data.alarm_low;
			/* Workaround for errata. Count might not be updated
			 * when waking up from sleep, so in this case use alarm
			 * time plus one.
			 */
			if (alarm >= count)
     c00:	06 17       	cp	r16, r22
     c02:	17 07       	cpc	r17, r23
     c04:	28 07       	cpc	r18, r24
     c06:	39 07       	cpc	r19, r25
     c08:	30 f0       	brcs	.+12     	; 0xc16 <__vector_11+0xbe>
				count = alarm + 1;
     c0a:	c9 01       	movw	r24, r18
     c0c:	b8 01       	movw	r22, r16
     c0e:	6f 5f       	subi	r22, 0xFF	; 255
     c10:	7f 4f       	sbci	r23, 0xFF	; 255
     c12:	8f 4f       	sbci	r24, 0xFF	; 255
     c14:	9f 4f       	sbci	r25, 0xFF	; 255
			rtc_data.callback(count);
     c16:	09 95       	icall
		}
	}
}
     c18:	ff 91       	pop	r31
     c1a:	ef 91       	pop	r30
     c1c:	bf 91       	pop	r27
     c1e:	af 91       	pop	r26
     c20:	9f 91       	pop	r25
     c22:	8f 91       	pop	r24
     c24:	7f 91       	pop	r23
     c26:	6f 91       	pop	r22
     c28:	5f 91       	pop	r21
     c2a:	4f 91       	pop	r20
     c2c:	3f 91       	pop	r19
     c2e:	2f 91       	pop	r18
     c30:	1f 91       	pop	r17
     c32:	0f 91       	pop	r16
     c34:	ff 90       	pop	r15
     c36:	ef 90       	pop	r14
     c38:	df 90       	pop	r13
     c3a:	cf 90       	pop	r12
     c3c:	0f 90       	pop	r0
     c3e:	0f be       	out	0x3f, r0	; 63
     c40:	0f 90       	pop	r0
     c42:	1f 90       	pop	r1
     c44:	18 95       	reti

00000c46 <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
     c46:	1f 92       	push	r1
     c48:	0f 92       	push	r0
     c4a:	0f b6       	in	r0, 0x3f	; 63
     c4c:	0f 92       	push	r0
     c4e:	11 24       	eor	r1, r1
     c50:	2f 93       	push	r18
     c52:	3f 93       	push	r19
     c54:	4f 93       	push	r20
     c56:	5f 93       	push	r21
     c58:	6f 93       	push	r22
     c5a:	7f 93       	push	r23
     c5c:	8f 93       	push	r24
     c5e:	9f 93       	push	r25
     c60:	af 93       	push	r26
     c62:	bf 93       	push	r27
     c64:	ef 93       	push	r30
     c66:	ff 93       	push	r31
	if (tc_tcc0_ovf_callback) {
     c68:	e0 91 38 25 	lds	r30, 0x2538
     c6c:	f0 91 39 25 	lds	r31, 0x2539
     c70:	30 97       	sbiw	r30, 0x00	; 0
     c72:	09 f0       	breq	.+2      	; 0xc76 <__vector_14+0x30>
		tc_tcc0_ovf_callback();
     c74:	09 95       	icall
	}
}
     c76:	ff 91       	pop	r31
     c78:	ef 91       	pop	r30
     c7a:	bf 91       	pop	r27
     c7c:	af 91       	pop	r26
     c7e:	9f 91       	pop	r25
     c80:	8f 91       	pop	r24
     c82:	7f 91       	pop	r23
     c84:	6f 91       	pop	r22
     c86:	5f 91       	pop	r21
     c88:	4f 91       	pop	r20
     c8a:	3f 91       	pop	r19
     c8c:	2f 91       	pop	r18
     c8e:	0f 90       	pop	r0
     c90:	0f be       	out	0x3f, r0	; 63
     c92:	0f 90       	pop	r0
     c94:	1f 90       	pop	r1
     c96:	18 95       	reti

00000c98 <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
     c98:	1f 92       	push	r1
     c9a:	0f 92       	push	r0
     c9c:	0f b6       	in	r0, 0x3f	; 63
     c9e:	0f 92       	push	r0
     ca0:	11 24       	eor	r1, r1
     ca2:	2f 93       	push	r18
     ca4:	3f 93       	push	r19
     ca6:	4f 93       	push	r20
     ca8:	5f 93       	push	r21
     caa:	6f 93       	push	r22
     cac:	7f 93       	push	r23
     cae:	8f 93       	push	r24
     cb0:	9f 93       	push	r25
     cb2:	af 93       	push	r26
     cb4:	bf 93       	push	r27
     cb6:	ef 93       	push	r30
     cb8:	ff 93       	push	r31
	if (tc_tcc0_err_callback) {
     cba:	e0 91 3a 25 	lds	r30, 0x253A
     cbe:	f0 91 3b 25 	lds	r31, 0x253B
     cc2:	30 97       	sbiw	r30, 0x00	; 0
     cc4:	09 f0       	breq	.+2      	; 0xcc8 <__vector_15+0x30>
		tc_tcc0_err_callback();
     cc6:	09 95       	icall
	}
}
     cc8:	ff 91       	pop	r31
     cca:	ef 91       	pop	r30
     ccc:	bf 91       	pop	r27
     cce:	af 91       	pop	r26
     cd0:	9f 91       	pop	r25
     cd2:	8f 91       	pop	r24
     cd4:	7f 91       	pop	r23
     cd6:	6f 91       	pop	r22
     cd8:	5f 91       	pop	r21
     cda:	4f 91       	pop	r20
     cdc:	3f 91       	pop	r19
     cde:	2f 91       	pop	r18
     ce0:	0f 90       	pop	r0
     ce2:	0f be       	out	0x3f, r0	; 63
     ce4:	0f 90       	pop	r0
     ce6:	1f 90       	pop	r1
     ce8:	18 95       	reti

00000cea <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
     cea:	1f 92       	push	r1
     cec:	0f 92       	push	r0
     cee:	0f b6       	in	r0, 0x3f	; 63
     cf0:	0f 92       	push	r0
     cf2:	11 24       	eor	r1, r1
     cf4:	2f 93       	push	r18
     cf6:	3f 93       	push	r19
     cf8:	4f 93       	push	r20
     cfa:	5f 93       	push	r21
     cfc:	6f 93       	push	r22
     cfe:	7f 93       	push	r23
     d00:	8f 93       	push	r24
     d02:	9f 93       	push	r25
     d04:	af 93       	push	r26
     d06:	bf 93       	push	r27
     d08:	ef 93       	push	r30
     d0a:	ff 93       	push	r31
	if (tc_tcc0_cca_callback) {
     d0c:	e0 91 3c 25 	lds	r30, 0x253C
     d10:	f0 91 3d 25 	lds	r31, 0x253D
     d14:	30 97       	sbiw	r30, 0x00	; 0
     d16:	09 f0       	breq	.+2      	; 0xd1a <__vector_16+0x30>
		tc_tcc0_cca_callback();
     d18:	09 95       	icall
	}
}
     d1a:	ff 91       	pop	r31
     d1c:	ef 91       	pop	r30
     d1e:	bf 91       	pop	r27
     d20:	af 91       	pop	r26
     d22:	9f 91       	pop	r25
     d24:	8f 91       	pop	r24
     d26:	7f 91       	pop	r23
     d28:	6f 91       	pop	r22
     d2a:	5f 91       	pop	r21
     d2c:	4f 91       	pop	r20
     d2e:	3f 91       	pop	r19
     d30:	2f 91       	pop	r18
     d32:	0f 90       	pop	r0
     d34:	0f be       	out	0x3f, r0	; 63
     d36:	0f 90       	pop	r0
     d38:	1f 90       	pop	r1
     d3a:	18 95       	reti

00000d3c <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
     d3c:	1f 92       	push	r1
     d3e:	0f 92       	push	r0
     d40:	0f b6       	in	r0, 0x3f	; 63
     d42:	0f 92       	push	r0
     d44:	11 24       	eor	r1, r1
     d46:	2f 93       	push	r18
     d48:	3f 93       	push	r19
     d4a:	4f 93       	push	r20
     d4c:	5f 93       	push	r21
     d4e:	6f 93       	push	r22
     d50:	7f 93       	push	r23
     d52:	8f 93       	push	r24
     d54:	9f 93       	push	r25
     d56:	af 93       	push	r26
     d58:	bf 93       	push	r27
     d5a:	ef 93       	push	r30
     d5c:	ff 93       	push	r31
	if (tc_tcc0_ccb_callback) {
     d5e:	e0 91 3e 25 	lds	r30, 0x253E
     d62:	f0 91 3f 25 	lds	r31, 0x253F
     d66:	30 97       	sbiw	r30, 0x00	; 0
     d68:	09 f0       	breq	.+2      	; 0xd6c <__vector_17+0x30>
		tc_tcc0_ccb_callback();
     d6a:	09 95       	icall
	}
}
     d6c:	ff 91       	pop	r31
     d6e:	ef 91       	pop	r30
     d70:	bf 91       	pop	r27
     d72:	af 91       	pop	r26
     d74:	9f 91       	pop	r25
     d76:	8f 91       	pop	r24
     d78:	7f 91       	pop	r23
     d7a:	6f 91       	pop	r22
     d7c:	5f 91       	pop	r21
     d7e:	4f 91       	pop	r20
     d80:	3f 91       	pop	r19
     d82:	2f 91       	pop	r18
     d84:	0f 90       	pop	r0
     d86:	0f be       	out	0x3f, r0	; 63
     d88:	0f 90       	pop	r0
     d8a:	1f 90       	pop	r1
     d8c:	18 95       	reti

00000d8e <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
     d8e:	1f 92       	push	r1
     d90:	0f 92       	push	r0
     d92:	0f b6       	in	r0, 0x3f	; 63
     d94:	0f 92       	push	r0
     d96:	11 24       	eor	r1, r1
     d98:	2f 93       	push	r18
     d9a:	3f 93       	push	r19
     d9c:	4f 93       	push	r20
     d9e:	5f 93       	push	r21
     da0:	6f 93       	push	r22
     da2:	7f 93       	push	r23
     da4:	8f 93       	push	r24
     da6:	9f 93       	push	r25
     da8:	af 93       	push	r26
     daa:	bf 93       	push	r27
     dac:	ef 93       	push	r30
     dae:	ff 93       	push	r31
	if (tc_tcc0_ccc_callback) {
     db0:	e0 91 40 25 	lds	r30, 0x2540
     db4:	f0 91 41 25 	lds	r31, 0x2541
     db8:	30 97       	sbiw	r30, 0x00	; 0
     dba:	09 f0       	breq	.+2      	; 0xdbe <__vector_18+0x30>
		tc_tcc0_ccc_callback();
     dbc:	09 95       	icall
	}
}
     dbe:	ff 91       	pop	r31
     dc0:	ef 91       	pop	r30
     dc2:	bf 91       	pop	r27
     dc4:	af 91       	pop	r26
     dc6:	9f 91       	pop	r25
     dc8:	8f 91       	pop	r24
     dca:	7f 91       	pop	r23
     dcc:	6f 91       	pop	r22
     dce:	5f 91       	pop	r21
     dd0:	4f 91       	pop	r20
     dd2:	3f 91       	pop	r19
     dd4:	2f 91       	pop	r18
     dd6:	0f 90       	pop	r0
     dd8:	0f be       	out	0x3f, r0	; 63
     dda:	0f 90       	pop	r0
     ddc:	1f 90       	pop	r1
     dde:	18 95       	reti

00000de0 <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
     de0:	1f 92       	push	r1
     de2:	0f 92       	push	r0
     de4:	0f b6       	in	r0, 0x3f	; 63
     de6:	0f 92       	push	r0
     de8:	11 24       	eor	r1, r1
     dea:	2f 93       	push	r18
     dec:	3f 93       	push	r19
     dee:	4f 93       	push	r20
     df0:	5f 93       	push	r21
     df2:	6f 93       	push	r22
     df4:	7f 93       	push	r23
     df6:	8f 93       	push	r24
     df8:	9f 93       	push	r25
     dfa:	af 93       	push	r26
     dfc:	bf 93       	push	r27
     dfe:	ef 93       	push	r30
     e00:	ff 93       	push	r31
	if (tc_tcc0_ccd_callback) {
     e02:	e0 91 42 25 	lds	r30, 0x2542
     e06:	f0 91 43 25 	lds	r31, 0x2543
     e0a:	30 97       	sbiw	r30, 0x00	; 0
     e0c:	09 f0       	breq	.+2      	; 0xe10 <__vector_19+0x30>
		tc_tcc0_ccd_callback();
     e0e:	09 95       	icall
	}
}
     e10:	ff 91       	pop	r31
     e12:	ef 91       	pop	r30
     e14:	bf 91       	pop	r27
     e16:	af 91       	pop	r26
     e18:	9f 91       	pop	r25
     e1a:	8f 91       	pop	r24
     e1c:	7f 91       	pop	r23
     e1e:	6f 91       	pop	r22
     e20:	5f 91       	pop	r21
     e22:	4f 91       	pop	r20
     e24:	3f 91       	pop	r19
     e26:	2f 91       	pop	r18
     e28:	0f 90       	pop	r0
     e2a:	0f be       	out	0x3f, r0	; 63
     e2c:	0f 90       	pop	r0
     e2e:	1f 90       	pop	r1
     e30:	18 95       	reti

00000e32 <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
     e32:	1f 92       	push	r1
     e34:	0f 92       	push	r0
     e36:	0f b6       	in	r0, 0x3f	; 63
     e38:	0f 92       	push	r0
     e3a:	11 24       	eor	r1, r1
     e3c:	2f 93       	push	r18
     e3e:	3f 93       	push	r19
     e40:	4f 93       	push	r20
     e42:	5f 93       	push	r21
     e44:	6f 93       	push	r22
     e46:	7f 93       	push	r23
     e48:	8f 93       	push	r24
     e4a:	9f 93       	push	r25
     e4c:	af 93       	push	r26
     e4e:	bf 93       	push	r27
     e50:	ef 93       	push	r30
     e52:	ff 93       	push	r31
	if (tc_tcc1_ovf_callback) {
     e54:	e0 91 44 25 	lds	r30, 0x2544
     e58:	f0 91 45 25 	lds	r31, 0x2545
     e5c:	30 97       	sbiw	r30, 0x00	; 0
     e5e:	09 f0       	breq	.+2      	; 0xe62 <__vector_20+0x30>
		tc_tcc1_ovf_callback();
     e60:	09 95       	icall
	}
}
     e62:	ff 91       	pop	r31
     e64:	ef 91       	pop	r30
     e66:	bf 91       	pop	r27
     e68:	af 91       	pop	r26
     e6a:	9f 91       	pop	r25
     e6c:	8f 91       	pop	r24
     e6e:	7f 91       	pop	r23
     e70:	6f 91       	pop	r22
     e72:	5f 91       	pop	r21
     e74:	4f 91       	pop	r20
     e76:	3f 91       	pop	r19
     e78:	2f 91       	pop	r18
     e7a:	0f 90       	pop	r0
     e7c:	0f be       	out	0x3f, r0	; 63
     e7e:	0f 90       	pop	r0
     e80:	1f 90       	pop	r1
     e82:	18 95       	reti

00000e84 <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
     e84:	1f 92       	push	r1
     e86:	0f 92       	push	r0
     e88:	0f b6       	in	r0, 0x3f	; 63
     e8a:	0f 92       	push	r0
     e8c:	11 24       	eor	r1, r1
     e8e:	2f 93       	push	r18
     e90:	3f 93       	push	r19
     e92:	4f 93       	push	r20
     e94:	5f 93       	push	r21
     e96:	6f 93       	push	r22
     e98:	7f 93       	push	r23
     e9a:	8f 93       	push	r24
     e9c:	9f 93       	push	r25
     e9e:	af 93       	push	r26
     ea0:	bf 93       	push	r27
     ea2:	ef 93       	push	r30
     ea4:	ff 93       	push	r31
	if (tc_tcc1_err_callback) {
     ea6:	e0 91 46 25 	lds	r30, 0x2546
     eaa:	f0 91 47 25 	lds	r31, 0x2547
     eae:	30 97       	sbiw	r30, 0x00	; 0
     eb0:	09 f0       	breq	.+2      	; 0xeb4 <__vector_21+0x30>
		tc_tcc1_err_callback();
     eb2:	09 95       	icall
	}
}
     eb4:	ff 91       	pop	r31
     eb6:	ef 91       	pop	r30
     eb8:	bf 91       	pop	r27
     eba:	af 91       	pop	r26
     ebc:	9f 91       	pop	r25
     ebe:	8f 91       	pop	r24
     ec0:	7f 91       	pop	r23
     ec2:	6f 91       	pop	r22
     ec4:	5f 91       	pop	r21
     ec6:	4f 91       	pop	r20
     ec8:	3f 91       	pop	r19
     eca:	2f 91       	pop	r18
     ecc:	0f 90       	pop	r0
     ece:	0f be       	out	0x3f, r0	; 63
     ed0:	0f 90       	pop	r0
     ed2:	1f 90       	pop	r1
     ed4:	18 95       	reti

00000ed6 <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
     ed6:	1f 92       	push	r1
     ed8:	0f 92       	push	r0
     eda:	0f b6       	in	r0, 0x3f	; 63
     edc:	0f 92       	push	r0
     ede:	11 24       	eor	r1, r1
     ee0:	2f 93       	push	r18
     ee2:	3f 93       	push	r19
     ee4:	4f 93       	push	r20
     ee6:	5f 93       	push	r21
     ee8:	6f 93       	push	r22
     eea:	7f 93       	push	r23
     eec:	8f 93       	push	r24
     eee:	9f 93       	push	r25
     ef0:	af 93       	push	r26
     ef2:	bf 93       	push	r27
     ef4:	ef 93       	push	r30
     ef6:	ff 93       	push	r31
	if (tc_tcc1_cca_callback) {
     ef8:	e0 91 48 25 	lds	r30, 0x2548
     efc:	f0 91 49 25 	lds	r31, 0x2549
     f00:	30 97       	sbiw	r30, 0x00	; 0
     f02:	09 f0       	breq	.+2      	; 0xf06 <__vector_22+0x30>
		tc_tcc1_cca_callback();
     f04:	09 95       	icall
	}
}
     f06:	ff 91       	pop	r31
     f08:	ef 91       	pop	r30
     f0a:	bf 91       	pop	r27
     f0c:	af 91       	pop	r26
     f0e:	9f 91       	pop	r25
     f10:	8f 91       	pop	r24
     f12:	7f 91       	pop	r23
     f14:	6f 91       	pop	r22
     f16:	5f 91       	pop	r21
     f18:	4f 91       	pop	r20
     f1a:	3f 91       	pop	r19
     f1c:	2f 91       	pop	r18
     f1e:	0f 90       	pop	r0
     f20:	0f be       	out	0x3f, r0	; 63
     f22:	0f 90       	pop	r0
     f24:	1f 90       	pop	r1
     f26:	18 95       	reti

00000f28 <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
     f28:	1f 92       	push	r1
     f2a:	0f 92       	push	r0
     f2c:	0f b6       	in	r0, 0x3f	; 63
     f2e:	0f 92       	push	r0
     f30:	11 24       	eor	r1, r1
     f32:	2f 93       	push	r18
     f34:	3f 93       	push	r19
     f36:	4f 93       	push	r20
     f38:	5f 93       	push	r21
     f3a:	6f 93       	push	r22
     f3c:	7f 93       	push	r23
     f3e:	8f 93       	push	r24
     f40:	9f 93       	push	r25
     f42:	af 93       	push	r26
     f44:	bf 93       	push	r27
     f46:	ef 93       	push	r30
     f48:	ff 93       	push	r31
	if (tc_tcc1_ccb_callback) {
     f4a:	e0 91 4a 25 	lds	r30, 0x254A
     f4e:	f0 91 4b 25 	lds	r31, 0x254B
     f52:	30 97       	sbiw	r30, 0x00	; 0
     f54:	09 f0       	breq	.+2      	; 0xf58 <__vector_23+0x30>
		tc_tcc1_ccb_callback();
     f56:	09 95       	icall
	}
}
     f58:	ff 91       	pop	r31
     f5a:	ef 91       	pop	r30
     f5c:	bf 91       	pop	r27
     f5e:	af 91       	pop	r26
     f60:	9f 91       	pop	r25
     f62:	8f 91       	pop	r24
     f64:	7f 91       	pop	r23
     f66:	6f 91       	pop	r22
     f68:	5f 91       	pop	r21
     f6a:	4f 91       	pop	r20
     f6c:	3f 91       	pop	r19
     f6e:	2f 91       	pop	r18
     f70:	0f 90       	pop	r0
     f72:	0f be       	out	0x3f, r0	; 63
     f74:	0f 90       	pop	r0
     f76:	1f 90       	pop	r1
     f78:	18 95       	reti

00000f7a <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
     f7a:	1f 92       	push	r1
     f7c:	0f 92       	push	r0
     f7e:	0f b6       	in	r0, 0x3f	; 63
     f80:	0f 92       	push	r0
     f82:	11 24       	eor	r1, r1
     f84:	2f 93       	push	r18
     f86:	3f 93       	push	r19
     f88:	4f 93       	push	r20
     f8a:	5f 93       	push	r21
     f8c:	6f 93       	push	r22
     f8e:	7f 93       	push	r23
     f90:	8f 93       	push	r24
     f92:	9f 93       	push	r25
     f94:	af 93       	push	r26
     f96:	bf 93       	push	r27
     f98:	ef 93       	push	r30
     f9a:	ff 93       	push	r31
	if (tc_tcd0_ovf_callback) {
     f9c:	e0 91 4c 25 	lds	r30, 0x254C
     fa0:	f0 91 4d 25 	lds	r31, 0x254D
     fa4:	30 97       	sbiw	r30, 0x00	; 0
     fa6:	09 f0       	breq	.+2      	; 0xfaa <__vector_77+0x30>
		tc_tcd0_ovf_callback();
     fa8:	09 95       	icall
	}
}
     faa:	ff 91       	pop	r31
     fac:	ef 91       	pop	r30
     fae:	bf 91       	pop	r27
     fb0:	af 91       	pop	r26
     fb2:	9f 91       	pop	r25
     fb4:	8f 91       	pop	r24
     fb6:	7f 91       	pop	r23
     fb8:	6f 91       	pop	r22
     fba:	5f 91       	pop	r21
     fbc:	4f 91       	pop	r20
     fbe:	3f 91       	pop	r19
     fc0:	2f 91       	pop	r18
     fc2:	0f 90       	pop	r0
     fc4:	0f be       	out	0x3f, r0	; 63
     fc6:	0f 90       	pop	r0
     fc8:	1f 90       	pop	r1
     fca:	18 95       	reti

00000fcc <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
     fcc:	1f 92       	push	r1
     fce:	0f 92       	push	r0
     fd0:	0f b6       	in	r0, 0x3f	; 63
     fd2:	0f 92       	push	r0
     fd4:	11 24       	eor	r1, r1
     fd6:	2f 93       	push	r18
     fd8:	3f 93       	push	r19
     fda:	4f 93       	push	r20
     fdc:	5f 93       	push	r21
     fde:	6f 93       	push	r22
     fe0:	7f 93       	push	r23
     fe2:	8f 93       	push	r24
     fe4:	9f 93       	push	r25
     fe6:	af 93       	push	r26
     fe8:	bf 93       	push	r27
     fea:	ef 93       	push	r30
     fec:	ff 93       	push	r31
	if (tc_tcd0_err_callback) {
     fee:	e0 91 4e 25 	lds	r30, 0x254E
     ff2:	f0 91 4f 25 	lds	r31, 0x254F
     ff6:	30 97       	sbiw	r30, 0x00	; 0
     ff8:	09 f0       	breq	.+2      	; 0xffc <__vector_78+0x30>
		tc_tcd0_err_callback();
     ffa:	09 95       	icall
	}
}
     ffc:	ff 91       	pop	r31
     ffe:	ef 91       	pop	r30
    1000:	bf 91       	pop	r27
    1002:	af 91       	pop	r26
    1004:	9f 91       	pop	r25
    1006:	8f 91       	pop	r24
    1008:	7f 91       	pop	r23
    100a:	6f 91       	pop	r22
    100c:	5f 91       	pop	r21
    100e:	4f 91       	pop	r20
    1010:	3f 91       	pop	r19
    1012:	2f 91       	pop	r18
    1014:	0f 90       	pop	r0
    1016:	0f be       	out	0x3f, r0	; 63
    1018:	0f 90       	pop	r0
    101a:	1f 90       	pop	r1
    101c:	18 95       	reti

0000101e <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
    101e:	1f 92       	push	r1
    1020:	0f 92       	push	r0
    1022:	0f b6       	in	r0, 0x3f	; 63
    1024:	0f 92       	push	r0
    1026:	11 24       	eor	r1, r1
    1028:	2f 93       	push	r18
    102a:	3f 93       	push	r19
    102c:	4f 93       	push	r20
    102e:	5f 93       	push	r21
    1030:	6f 93       	push	r22
    1032:	7f 93       	push	r23
    1034:	8f 93       	push	r24
    1036:	9f 93       	push	r25
    1038:	af 93       	push	r26
    103a:	bf 93       	push	r27
    103c:	ef 93       	push	r30
    103e:	ff 93       	push	r31
	if (tc_tcd0_cca_callback) {
    1040:	e0 91 50 25 	lds	r30, 0x2550
    1044:	f0 91 51 25 	lds	r31, 0x2551
    1048:	30 97       	sbiw	r30, 0x00	; 0
    104a:	09 f0       	breq	.+2      	; 0x104e <__vector_79+0x30>
		tc_tcd0_cca_callback();
    104c:	09 95       	icall
	}
}
    104e:	ff 91       	pop	r31
    1050:	ef 91       	pop	r30
    1052:	bf 91       	pop	r27
    1054:	af 91       	pop	r26
    1056:	9f 91       	pop	r25
    1058:	8f 91       	pop	r24
    105a:	7f 91       	pop	r23
    105c:	6f 91       	pop	r22
    105e:	5f 91       	pop	r21
    1060:	4f 91       	pop	r20
    1062:	3f 91       	pop	r19
    1064:	2f 91       	pop	r18
    1066:	0f 90       	pop	r0
    1068:	0f be       	out	0x3f, r0	; 63
    106a:	0f 90       	pop	r0
    106c:	1f 90       	pop	r1
    106e:	18 95       	reti

00001070 <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
    1070:	1f 92       	push	r1
    1072:	0f 92       	push	r0
    1074:	0f b6       	in	r0, 0x3f	; 63
    1076:	0f 92       	push	r0
    1078:	11 24       	eor	r1, r1
    107a:	2f 93       	push	r18
    107c:	3f 93       	push	r19
    107e:	4f 93       	push	r20
    1080:	5f 93       	push	r21
    1082:	6f 93       	push	r22
    1084:	7f 93       	push	r23
    1086:	8f 93       	push	r24
    1088:	9f 93       	push	r25
    108a:	af 93       	push	r26
    108c:	bf 93       	push	r27
    108e:	ef 93       	push	r30
    1090:	ff 93       	push	r31
	if (tc_tcd0_ccb_callback) {
    1092:	e0 91 52 25 	lds	r30, 0x2552
    1096:	f0 91 53 25 	lds	r31, 0x2553
    109a:	30 97       	sbiw	r30, 0x00	; 0
    109c:	09 f0       	breq	.+2      	; 0x10a0 <__vector_80+0x30>
		tc_tcd0_ccb_callback();
    109e:	09 95       	icall
	}
}
    10a0:	ff 91       	pop	r31
    10a2:	ef 91       	pop	r30
    10a4:	bf 91       	pop	r27
    10a6:	af 91       	pop	r26
    10a8:	9f 91       	pop	r25
    10aa:	8f 91       	pop	r24
    10ac:	7f 91       	pop	r23
    10ae:	6f 91       	pop	r22
    10b0:	5f 91       	pop	r21
    10b2:	4f 91       	pop	r20
    10b4:	3f 91       	pop	r19
    10b6:	2f 91       	pop	r18
    10b8:	0f 90       	pop	r0
    10ba:	0f be       	out	0x3f, r0	; 63
    10bc:	0f 90       	pop	r0
    10be:	1f 90       	pop	r1
    10c0:	18 95       	reti

000010c2 <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
    10c2:	1f 92       	push	r1
    10c4:	0f 92       	push	r0
    10c6:	0f b6       	in	r0, 0x3f	; 63
    10c8:	0f 92       	push	r0
    10ca:	11 24       	eor	r1, r1
    10cc:	2f 93       	push	r18
    10ce:	3f 93       	push	r19
    10d0:	4f 93       	push	r20
    10d2:	5f 93       	push	r21
    10d4:	6f 93       	push	r22
    10d6:	7f 93       	push	r23
    10d8:	8f 93       	push	r24
    10da:	9f 93       	push	r25
    10dc:	af 93       	push	r26
    10de:	bf 93       	push	r27
    10e0:	ef 93       	push	r30
    10e2:	ff 93       	push	r31
	if (tc_tcd0_ccc_callback) {
    10e4:	e0 91 54 25 	lds	r30, 0x2554
    10e8:	f0 91 55 25 	lds	r31, 0x2555
    10ec:	30 97       	sbiw	r30, 0x00	; 0
    10ee:	09 f0       	breq	.+2      	; 0x10f2 <__vector_81+0x30>
		tc_tcd0_ccc_callback();
    10f0:	09 95       	icall
	}
}
    10f2:	ff 91       	pop	r31
    10f4:	ef 91       	pop	r30
    10f6:	bf 91       	pop	r27
    10f8:	af 91       	pop	r26
    10fa:	9f 91       	pop	r25
    10fc:	8f 91       	pop	r24
    10fe:	7f 91       	pop	r23
    1100:	6f 91       	pop	r22
    1102:	5f 91       	pop	r21
    1104:	4f 91       	pop	r20
    1106:	3f 91       	pop	r19
    1108:	2f 91       	pop	r18
    110a:	0f 90       	pop	r0
    110c:	0f be       	out	0x3f, r0	; 63
    110e:	0f 90       	pop	r0
    1110:	1f 90       	pop	r1
    1112:	18 95       	reti

00001114 <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
    1114:	1f 92       	push	r1
    1116:	0f 92       	push	r0
    1118:	0f b6       	in	r0, 0x3f	; 63
    111a:	0f 92       	push	r0
    111c:	11 24       	eor	r1, r1
    111e:	2f 93       	push	r18
    1120:	3f 93       	push	r19
    1122:	4f 93       	push	r20
    1124:	5f 93       	push	r21
    1126:	6f 93       	push	r22
    1128:	7f 93       	push	r23
    112a:	8f 93       	push	r24
    112c:	9f 93       	push	r25
    112e:	af 93       	push	r26
    1130:	bf 93       	push	r27
    1132:	ef 93       	push	r30
    1134:	ff 93       	push	r31
	if (tc_tcd0_ccd_callback) {
    1136:	e0 91 56 25 	lds	r30, 0x2556
    113a:	f0 91 57 25 	lds	r31, 0x2557
    113e:	30 97       	sbiw	r30, 0x00	; 0
    1140:	09 f0       	breq	.+2      	; 0x1144 <__vector_82+0x30>
		tc_tcd0_ccd_callback();
    1142:	09 95       	icall
	}
}
    1144:	ff 91       	pop	r31
    1146:	ef 91       	pop	r30
    1148:	bf 91       	pop	r27
    114a:	af 91       	pop	r26
    114c:	9f 91       	pop	r25
    114e:	8f 91       	pop	r24
    1150:	7f 91       	pop	r23
    1152:	6f 91       	pop	r22
    1154:	5f 91       	pop	r21
    1156:	4f 91       	pop	r20
    1158:	3f 91       	pop	r19
    115a:	2f 91       	pop	r18
    115c:	0f 90       	pop	r0
    115e:	0f be       	out	0x3f, r0	; 63
    1160:	0f 90       	pop	r0
    1162:	1f 90       	pop	r1
    1164:	18 95       	reti

00001166 <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
    1166:	1f 92       	push	r1
    1168:	0f 92       	push	r0
    116a:	0f b6       	in	r0, 0x3f	; 63
    116c:	0f 92       	push	r0
    116e:	11 24       	eor	r1, r1
    1170:	2f 93       	push	r18
    1172:	3f 93       	push	r19
    1174:	4f 93       	push	r20
    1176:	5f 93       	push	r21
    1178:	6f 93       	push	r22
    117a:	7f 93       	push	r23
    117c:	8f 93       	push	r24
    117e:	9f 93       	push	r25
    1180:	af 93       	push	r26
    1182:	bf 93       	push	r27
    1184:	ef 93       	push	r30
    1186:	ff 93       	push	r31
	if (tc_tcd1_ovf_callback) {
    1188:	e0 91 58 25 	lds	r30, 0x2558
    118c:	f0 91 59 25 	lds	r31, 0x2559
    1190:	30 97       	sbiw	r30, 0x00	; 0
    1192:	09 f0       	breq	.+2      	; 0x1196 <__vector_83+0x30>
		tc_tcd1_ovf_callback();
    1194:	09 95       	icall
	}
}
    1196:	ff 91       	pop	r31
    1198:	ef 91       	pop	r30
    119a:	bf 91       	pop	r27
    119c:	af 91       	pop	r26
    119e:	9f 91       	pop	r25
    11a0:	8f 91       	pop	r24
    11a2:	7f 91       	pop	r23
    11a4:	6f 91       	pop	r22
    11a6:	5f 91       	pop	r21
    11a8:	4f 91       	pop	r20
    11aa:	3f 91       	pop	r19
    11ac:	2f 91       	pop	r18
    11ae:	0f 90       	pop	r0
    11b0:	0f be       	out	0x3f, r0	; 63
    11b2:	0f 90       	pop	r0
    11b4:	1f 90       	pop	r1
    11b6:	18 95       	reti

000011b8 <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
    11b8:	1f 92       	push	r1
    11ba:	0f 92       	push	r0
    11bc:	0f b6       	in	r0, 0x3f	; 63
    11be:	0f 92       	push	r0
    11c0:	11 24       	eor	r1, r1
    11c2:	2f 93       	push	r18
    11c4:	3f 93       	push	r19
    11c6:	4f 93       	push	r20
    11c8:	5f 93       	push	r21
    11ca:	6f 93       	push	r22
    11cc:	7f 93       	push	r23
    11ce:	8f 93       	push	r24
    11d0:	9f 93       	push	r25
    11d2:	af 93       	push	r26
    11d4:	bf 93       	push	r27
    11d6:	ef 93       	push	r30
    11d8:	ff 93       	push	r31
	if (tc_tcd1_err_callback) {
    11da:	e0 91 5a 25 	lds	r30, 0x255A
    11de:	f0 91 5b 25 	lds	r31, 0x255B
    11e2:	30 97       	sbiw	r30, 0x00	; 0
    11e4:	09 f0       	breq	.+2      	; 0x11e8 <__vector_84+0x30>
		tc_tcd1_err_callback();
    11e6:	09 95       	icall
	}
}
    11e8:	ff 91       	pop	r31
    11ea:	ef 91       	pop	r30
    11ec:	bf 91       	pop	r27
    11ee:	af 91       	pop	r26
    11f0:	9f 91       	pop	r25
    11f2:	8f 91       	pop	r24
    11f4:	7f 91       	pop	r23
    11f6:	6f 91       	pop	r22
    11f8:	5f 91       	pop	r21
    11fa:	4f 91       	pop	r20
    11fc:	3f 91       	pop	r19
    11fe:	2f 91       	pop	r18
    1200:	0f 90       	pop	r0
    1202:	0f be       	out	0x3f, r0	; 63
    1204:	0f 90       	pop	r0
    1206:	1f 90       	pop	r1
    1208:	18 95       	reti

0000120a <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
    120a:	1f 92       	push	r1
    120c:	0f 92       	push	r0
    120e:	0f b6       	in	r0, 0x3f	; 63
    1210:	0f 92       	push	r0
    1212:	11 24       	eor	r1, r1
    1214:	2f 93       	push	r18
    1216:	3f 93       	push	r19
    1218:	4f 93       	push	r20
    121a:	5f 93       	push	r21
    121c:	6f 93       	push	r22
    121e:	7f 93       	push	r23
    1220:	8f 93       	push	r24
    1222:	9f 93       	push	r25
    1224:	af 93       	push	r26
    1226:	bf 93       	push	r27
    1228:	ef 93       	push	r30
    122a:	ff 93       	push	r31
	if (tc_tcd1_cca_callback) {
    122c:	e0 91 5c 25 	lds	r30, 0x255C
    1230:	f0 91 5d 25 	lds	r31, 0x255D
    1234:	30 97       	sbiw	r30, 0x00	; 0
    1236:	09 f0       	breq	.+2      	; 0x123a <__vector_85+0x30>
		tc_tcd1_cca_callback();
    1238:	09 95       	icall
	}
}
    123a:	ff 91       	pop	r31
    123c:	ef 91       	pop	r30
    123e:	bf 91       	pop	r27
    1240:	af 91       	pop	r26
    1242:	9f 91       	pop	r25
    1244:	8f 91       	pop	r24
    1246:	7f 91       	pop	r23
    1248:	6f 91       	pop	r22
    124a:	5f 91       	pop	r21
    124c:	4f 91       	pop	r20
    124e:	3f 91       	pop	r19
    1250:	2f 91       	pop	r18
    1252:	0f 90       	pop	r0
    1254:	0f be       	out	0x3f, r0	; 63
    1256:	0f 90       	pop	r0
    1258:	1f 90       	pop	r1
    125a:	18 95       	reti

0000125c <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
    125c:	1f 92       	push	r1
    125e:	0f 92       	push	r0
    1260:	0f b6       	in	r0, 0x3f	; 63
    1262:	0f 92       	push	r0
    1264:	11 24       	eor	r1, r1
    1266:	2f 93       	push	r18
    1268:	3f 93       	push	r19
    126a:	4f 93       	push	r20
    126c:	5f 93       	push	r21
    126e:	6f 93       	push	r22
    1270:	7f 93       	push	r23
    1272:	8f 93       	push	r24
    1274:	9f 93       	push	r25
    1276:	af 93       	push	r26
    1278:	bf 93       	push	r27
    127a:	ef 93       	push	r30
    127c:	ff 93       	push	r31
	if (tc_tcd1_ccb_callback) {
    127e:	e0 91 5e 25 	lds	r30, 0x255E
    1282:	f0 91 5f 25 	lds	r31, 0x255F
    1286:	30 97       	sbiw	r30, 0x00	; 0
    1288:	09 f0       	breq	.+2      	; 0x128c <__vector_86+0x30>
		tc_tcd1_ccb_callback();
    128a:	09 95       	icall
	}
}
    128c:	ff 91       	pop	r31
    128e:	ef 91       	pop	r30
    1290:	bf 91       	pop	r27
    1292:	af 91       	pop	r26
    1294:	9f 91       	pop	r25
    1296:	8f 91       	pop	r24
    1298:	7f 91       	pop	r23
    129a:	6f 91       	pop	r22
    129c:	5f 91       	pop	r21
    129e:	4f 91       	pop	r20
    12a0:	3f 91       	pop	r19
    12a2:	2f 91       	pop	r18
    12a4:	0f 90       	pop	r0
    12a6:	0f be       	out	0x3f, r0	; 63
    12a8:	0f 90       	pop	r0
    12aa:	1f 90       	pop	r1
    12ac:	18 95       	reti

000012ae <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
    12ae:	1f 92       	push	r1
    12b0:	0f 92       	push	r0
    12b2:	0f b6       	in	r0, 0x3f	; 63
    12b4:	0f 92       	push	r0
    12b6:	11 24       	eor	r1, r1
    12b8:	2f 93       	push	r18
    12ba:	3f 93       	push	r19
    12bc:	4f 93       	push	r20
    12be:	5f 93       	push	r21
    12c0:	6f 93       	push	r22
    12c2:	7f 93       	push	r23
    12c4:	8f 93       	push	r24
    12c6:	9f 93       	push	r25
    12c8:	af 93       	push	r26
    12ca:	bf 93       	push	r27
    12cc:	ef 93       	push	r30
    12ce:	ff 93       	push	r31
	if (tc_tce0_ovf_callback) {
    12d0:	e0 91 60 25 	lds	r30, 0x2560
    12d4:	f0 91 61 25 	lds	r31, 0x2561
    12d8:	30 97       	sbiw	r30, 0x00	; 0
    12da:	09 f0       	breq	.+2      	; 0x12de <__vector_47+0x30>
		tc_tce0_ovf_callback();
    12dc:	09 95       	icall
	}
}
    12de:	ff 91       	pop	r31
    12e0:	ef 91       	pop	r30
    12e2:	bf 91       	pop	r27
    12e4:	af 91       	pop	r26
    12e6:	9f 91       	pop	r25
    12e8:	8f 91       	pop	r24
    12ea:	7f 91       	pop	r23
    12ec:	6f 91       	pop	r22
    12ee:	5f 91       	pop	r21
    12f0:	4f 91       	pop	r20
    12f2:	3f 91       	pop	r19
    12f4:	2f 91       	pop	r18
    12f6:	0f 90       	pop	r0
    12f8:	0f be       	out	0x3f, r0	; 63
    12fa:	0f 90       	pop	r0
    12fc:	1f 90       	pop	r1
    12fe:	18 95       	reti

00001300 <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
    1300:	1f 92       	push	r1
    1302:	0f 92       	push	r0
    1304:	0f b6       	in	r0, 0x3f	; 63
    1306:	0f 92       	push	r0
    1308:	11 24       	eor	r1, r1
    130a:	2f 93       	push	r18
    130c:	3f 93       	push	r19
    130e:	4f 93       	push	r20
    1310:	5f 93       	push	r21
    1312:	6f 93       	push	r22
    1314:	7f 93       	push	r23
    1316:	8f 93       	push	r24
    1318:	9f 93       	push	r25
    131a:	af 93       	push	r26
    131c:	bf 93       	push	r27
    131e:	ef 93       	push	r30
    1320:	ff 93       	push	r31
	if (tc_tce0_err_callback) {
    1322:	e0 91 62 25 	lds	r30, 0x2562
    1326:	f0 91 63 25 	lds	r31, 0x2563
    132a:	30 97       	sbiw	r30, 0x00	; 0
    132c:	09 f0       	breq	.+2      	; 0x1330 <__vector_48+0x30>
		tc_tce0_err_callback();
    132e:	09 95       	icall
	}
}
    1330:	ff 91       	pop	r31
    1332:	ef 91       	pop	r30
    1334:	bf 91       	pop	r27
    1336:	af 91       	pop	r26
    1338:	9f 91       	pop	r25
    133a:	8f 91       	pop	r24
    133c:	7f 91       	pop	r23
    133e:	6f 91       	pop	r22
    1340:	5f 91       	pop	r21
    1342:	4f 91       	pop	r20
    1344:	3f 91       	pop	r19
    1346:	2f 91       	pop	r18
    1348:	0f 90       	pop	r0
    134a:	0f be       	out	0x3f, r0	; 63
    134c:	0f 90       	pop	r0
    134e:	1f 90       	pop	r1
    1350:	18 95       	reti

00001352 <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
    1352:	1f 92       	push	r1
    1354:	0f 92       	push	r0
    1356:	0f b6       	in	r0, 0x3f	; 63
    1358:	0f 92       	push	r0
    135a:	11 24       	eor	r1, r1
    135c:	2f 93       	push	r18
    135e:	3f 93       	push	r19
    1360:	4f 93       	push	r20
    1362:	5f 93       	push	r21
    1364:	6f 93       	push	r22
    1366:	7f 93       	push	r23
    1368:	8f 93       	push	r24
    136a:	9f 93       	push	r25
    136c:	af 93       	push	r26
    136e:	bf 93       	push	r27
    1370:	ef 93       	push	r30
    1372:	ff 93       	push	r31
	if (tc_tce0_cca_callback) {
    1374:	e0 91 64 25 	lds	r30, 0x2564
    1378:	f0 91 65 25 	lds	r31, 0x2565
    137c:	30 97       	sbiw	r30, 0x00	; 0
    137e:	09 f0       	breq	.+2      	; 0x1382 <__vector_49+0x30>
		tc_tce0_cca_callback();
    1380:	09 95       	icall
	}
}
    1382:	ff 91       	pop	r31
    1384:	ef 91       	pop	r30
    1386:	bf 91       	pop	r27
    1388:	af 91       	pop	r26
    138a:	9f 91       	pop	r25
    138c:	8f 91       	pop	r24
    138e:	7f 91       	pop	r23
    1390:	6f 91       	pop	r22
    1392:	5f 91       	pop	r21
    1394:	4f 91       	pop	r20
    1396:	3f 91       	pop	r19
    1398:	2f 91       	pop	r18
    139a:	0f 90       	pop	r0
    139c:	0f be       	out	0x3f, r0	; 63
    139e:	0f 90       	pop	r0
    13a0:	1f 90       	pop	r1
    13a2:	18 95       	reti

000013a4 <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
    13a4:	1f 92       	push	r1
    13a6:	0f 92       	push	r0
    13a8:	0f b6       	in	r0, 0x3f	; 63
    13aa:	0f 92       	push	r0
    13ac:	11 24       	eor	r1, r1
    13ae:	2f 93       	push	r18
    13b0:	3f 93       	push	r19
    13b2:	4f 93       	push	r20
    13b4:	5f 93       	push	r21
    13b6:	6f 93       	push	r22
    13b8:	7f 93       	push	r23
    13ba:	8f 93       	push	r24
    13bc:	9f 93       	push	r25
    13be:	af 93       	push	r26
    13c0:	bf 93       	push	r27
    13c2:	ef 93       	push	r30
    13c4:	ff 93       	push	r31
	if (tc_tce0_ccb_callback) {
    13c6:	e0 91 66 25 	lds	r30, 0x2566
    13ca:	f0 91 67 25 	lds	r31, 0x2567
    13ce:	30 97       	sbiw	r30, 0x00	; 0
    13d0:	09 f0       	breq	.+2      	; 0x13d4 <__vector_50+0x30>
		tc_tce0_ccb_callback();
    13d2:	09 95       	icall
	}
}
    13d4:	ff 91       	pop	r31
    13d6:	ef 91       	pop	r30
    13d8:	bf 91       	pop	r27
    13da:	af 91       	pop	r26
    13dc:	9f 91       	pop	r25
    13de:	8f 91       	pop	r24
    13e0:	7f 91       	pop	r23
    13e2:	6f 91       	pop	r22
    13e4:	5f 91       	pop	r21
    13e6:	4f 91       	pop	r20
    13e8:	3f 91       	pop	r19
    13ea:	2f 91       	pop	r18
    13ec:	0f 90       	pop	r0
    13ee:	0f be       	out	0x3f, r0	; 63
    13f0:	0f 90       	pop	r0
    13f2:	1f 90       	pop	r1
    13f4:	18 95       	reti

000013f6 <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
    13f6:	1f 92       	push	r1
    13f8:	0f 92       	push	r0
    13fa:	0f b6       	in	r0, 0x3f	; 63
    13fc:	0f 92       	push	r0
    13fe:	11 24       	eor	r1, r1
    1400:	2f 93       	push	r18
    1402:	3f 93       	push	r19
    1404:	4f 93       	push	r20
    1406:	5f 93       	push	r21
    1408:	6f 93       	push	r22
    140a:	7f 93       	push	r23
    140c:	8f 93       	push	r24
    140e:	9f 93       	push	r25
    1410:	af 93       	push	r26
    1412:	bf 93       	push	r27
    1414:	ef 93       	push	r30
    1416:	ff 93       	push	r31
	if (tc_tce0_ccc_callback) {
    1418:	e0 91 68 25 	lds	r30, 0x2568
    141c:	f0 91 69 25 	lds	r31, 0x2569
    1420:	30 97       	sbiw	r30, 0x00	; 0
    1422:	09 f0       	breq	.+2      	; 0x1426 <__vector_51+0x30>
		tc_tce0_ccc_callback();
    1424:	09 95       	icall
	}
}
    1426:	ff 91       	pop	r31
    1428:	ef 91       	pop	r30
    142a:	bf 91       	pop	r27
    142c:	af 91       	pop	r26
    142e:	9f 91       	pop	r25
    1430:	8f 91       	pop	r24
    1432:	7f 91       	pop	r23
    1434:	6f 91       	pop	r22
    1436:	5f 91       	pop	r21
    1438:	4f 91       	pop	r20
    143a:	3f 91       	pop	r19
    143c:	2f 91       	pop	r18
    143e:	0f 90       	pop	r0
    1440:	0f be       	out	0x3f, r0	; 63
    1442:	0f 90       	pop	r0
    1444:	1f 90       	pop	r1
    1446:	18 95       	reti

00001448 <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
    1448:	1f 92       	push	r1
    144a:	0f 92       	push	r0
    144c:	0f b6       	in	r0, 0x3f	; 63
    144e:	0f 92       	push	r0
    1450:	11 24       	eor	r1, r1
    1452:	2f 93       	push	r18
    1454:	3f 93       	push	r19
    1456:	4f 93       	push	r20
    1458:	5f 93       	push	r21
    145a:	6f 93       	push	r22
    145c:	7f 93       	push	r23
    145e:	8f 93       	push	r24
    1460:	9f 93       	push	r25
    1462:	af 93       	push	r26
    1464:	bf 93       	push	r27
    1466:	ef 93       	push	r30
    1468:	ff 93       	push	r31
	if (tc_tce0_ccd_callback) {
    146a:	e0 91 6a 25 	lds	r30, 0x256A
    146e:	f0 91 6b 25 	lds	r31, 0x256B
    1472:	30 97       	sbiw	r30, 0x00	; 0
    1474:	09 f0       	breq	.+2      	; 0x1478 <__vector_52+0x30>
		tc_tce0_ccd_callback();
    1476:	09 95       	icall
	}
}
    1478:	ff 91       	pop	r31
    147a:	ef 91       	pop	r30
    147c:	bf 91       	pop	r27
    147e:	af 91       	pop	r26
    1480:	9f 91       	pop	r25
    1482:	8f 91       	pop	r24
    1484:	7f 91       	pop	r23
    1486:	6f 91       	pop	r22
    1488:	5f 91       	pop	r21
    148a:	4f 91       	pop	r20
    148c:	3f 91       	pop	r19
    148e:	2f 91       	pop	r18
    1490:	0f 90       	pop	r0
    1492:	0f be       	out	0x3f, r0	; 63
    1494:	0f 90       	pop	r0
    1496:	1f 90       	pop	r1
    1498:	18 95       	reti

0000149a <tc_enable>:
 *
 * \note
 * unmask TC clock (sysclk), but does not configure the TC clock source.
 */
void tc_enable(volatile void *tc)
{
    149a:	cf 93       	push	r28

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    149c:	cf b7       	in	r28, 0x3f	; 63
	cpu_irq_disable();
    149e:	f8 94       	cli
	irqflags_t iflags = cpu_irq_save();

#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    14a0:	81 15       	cp	r24, r1
    14a2:	28 e0       	ldi	r18, 0x08	; 8
    14a4:	92 07       	cpc	r25, r18
    14a6:	49 f4       	brne	.+18     	; 0x14ba <tc_enable+0x20>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    14a8:	61 e0       	ldi	r22, 0x01	; 1
    14aa:	83 e0       	ldi	r24, 0x03	; 3
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	b8 d9       	rcall	.-3216   	; 0x820 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    14b0:	64 e0       	ldi	r22, 0x04	; 4
    14b2:	83 e0       	ldi	r24, 0x03	; 3
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	b4 d9       	rcall	.-3224   	; 0x820 <sysclk_enable_module>
    14b8:	35 c0       	rjmp	.+106    	; 0x1524 <tc_enable+0x8a>
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    14ba:	80 34       	cpi	r24, 0x40	; 64
    14bc:	28 e0       	ldi	r18, 0x08	; 8
    14be:	92 07       	cpc	r25, r18
    14c0:	49 f4       	brne	.+18     	; 0x14d4 <tc_enable+0x3a>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    14c2:	62 e0       	ldi	r22, 0x02	; 2
    14c4:	83 e0       	ldi	r24, 0x03	; 3
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	ab d9       	rcall	.-3242   	; 0x820 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    14ca:	64 e0       	ldi	r22, 0x04	; 4
    14cc:	83 e0       	ldi	r24, 0x03	; 3
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	a7 d9       	rcall	.-3250   	; 0x820 <sysclk_enable_module>
    14d2:	28 c0       	rjmp	.+80     	; 0x1524 <tc_enable+0x8a>
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    14d4:	81 15       	cp	r24, r1
    14d6:	29 e0       	ldi	r18, 0x09	; 9
    14d8:	92 07       	cpc	r25, r18
    14da:	49 f4       	brne	.+18     	; 0x14ee <tc_enable+0x54>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    14dc:	61 e0       	ldi	r22, 0x01	; 1
    14de:	84 e0       	ldi	r24, 0x04	; 4
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	9e d9       	rcall	.-3268   	; 0x820 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    14e4:	64 e0       	ldi	r22, 0x04	; 4
    14e6:	84 e0       	ldi	r24, 0x04	; 4
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	9a d9       	rcall	.-3276   	; 0x820 <sysclk_enable_module>
    14ec:	1b c0       	rjmp	.+54     	; 0x1524 <tc_enable+0x8a>
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
    14ee:	80 34       	cpi	r24, 0x40	; 64
    14f0:	29 e0       	ldi	r18, 0x09	; 9
    14f2:	92 07       	cpc	r25, r18
    14f4:	49 f4       	brne	.+18     	; 0x1508 <tc_enable+0x6e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    14f6:	62 e0       	ldi	r22, 0x02	; 2
    14f8:	84 e0       	ldi	r24, 0x04	; 4
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	91 d9       	rcall	.-3294   	; 0x820 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    14fe:	64 e0       	ldi	r22, 0x04	; 4
    1500:	84 e0       	ldi	r24, 0x04	; 4
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	8d d9       	rcall	.-3302   	; 0x820 <sysclk_enable_module>
    1506:	0e c0       	rjmp	.+28     	; 0x1524 <tc_enable+0x8a>
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    1508:	81 15       	cp	r24, r1
    150a:	9a 40       	sbci	r25, 0x0A	; 10
    150c:	49 f4       	brne	.+18     	; 0x1520 <tc_enable+0x86>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    150e:	61 e0       	ldi	r22, 0x01	; 1
    1510:	85 e0       	ldi	r24, 0x05	; 5
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	85 d9       	rcall	.-3318   	; 0x820 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1516:	64 e0       	ldi	r22, 0x04	; 4
    1518:	85 e0       	ldi	r24, 0x05	; 5
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	81 d9       	rcall	.-3326   	; 0x820 <sysclk_enable_module>
    151e:	02 c0       	rjmp	.+4      	; 0x1524 <tc_enable+0x8a>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1520:	cf bf       	out	0x3f, r28	; 63
    1522:	09 c0       	rjmp	.+18     	; 0x1536 <tc_enable+0x9c>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1524:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    1526:	f8 94       	cli
    1528:	ec eb       	ldi	r30, 0xBC	; 188
    152a:	f5 e2       	ldi	r31, 0x25	; 37
    152c:	90 81       	ld	r25, Z
    152e:	9f 5f       	subi	r25, 0xFF	; 255
    1530:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1532:	8f bf       	out	0x3f, r24	; 63
    1534:	cf bf       	out	0x3f, r28	; 63
		cpu_irq_restore(iflags);
		return;
	}
	sleepmgr_lock_mode(SLEEPMGR_IDLE);
	cpu_irq_restore(iflags);
}
    1536:	cf 91       	pop	r28
    1538:	08 95       	ret

0000153a <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
    153a:	cf 93       	push	r28
    153c:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
    153e:	e0 91 6c 25 	lds	r30, 0x256C
    1542:	f0 91 6d 25 	lds	r31, 0x256D
    1546:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
    1548:	83 ff       	sbrs	r24, 3
    154a:	0b c0       	rjmp	.+22     	; 0x1562 <twim_interrupt_handler+0x28>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
    154c:	88 60       	ori	r24, 0x08	; 8
    154e:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
    1550:	83 e0       	ldi	r24, 0x03	; 3
    1552:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
    1554:	86 ef       	ldi	r24, 0xF6	; 246
    1556:	9f ef       	ldi	r25, 0xFF	; 255
    1558:	80 93 76 25 	sts	0x2576, r24
    155c:	90 93 77 25 	sts	0x2577, r25
    1560:	8e c0       	rjmp	.+284    	; 0x167e <twim_interrupt_handler+0x144>
 *
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
    1562:	98 2f       	mov	r25, r24
    1564:	94 71       	andi	r25, 0x14	; 20

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
		transfer.status = ERR_BUSY;

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    1566:	49 f0       	breq	.+18     	; 0x157a <twim_interrupt_handler+0x40>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1568:	83 e0       	ldi	r24, 0x03	; 3
    156a:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
    156c:	8f ef       	ldi	r24, 0xFF	; 255
    156e:	9f ef       	ldi	r25, 0xFF	; 255
    1570:	80 93 76 25 	sts	0x2576, r24
    1574:	90 93 77 25 	sts	0x2577, r25
    1578:	82 c0       	rjmp	.+260    	; 0x167e <twim_interrupt_handler+0x144>

	} else if (master_status & TWI_MASTER_WIF_bm) {
    157a:	86 ff       	sbrs	r24, 6
    157c:	42 c0       	rjmp	.+132    	; 0x1602 <twim_interrupt_handler+0xc8>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    157e:	a0 91 6e 25 	lds	r26, 0x256E
    1582:	b0 91 6f 25 	lds	r27, 0x256F

	if (transfer.addr_count < pkg->addr_length) {
    1586:	80 91 70 25 	lds	r24, 0x2570
    158a:	90 91 71 25 	lds	r25, 0x2571
    158e:	14 96       	adiw	r26, 0x04	; 4
    1590:	2d 91       	ld	r18, X+
    1592:	3c 91       	ld	r19, X
    1594:	15 97       	sbiw	r26, 0x05	; 5
    1596:	82 17       	cp	r24, r18
    1598:	93 07       	cpc	r25, r19
    159a:	5c f4       	brge	.+22     	; 0x15b2 <twim_interrupt_handler+0x78>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
    159c:	a8 0f       	add	r26, r24
    159e:	b9 1f       	adc	r27, r25
    15a0:	11 96       	adiw	r26, 0x01	; 1
    15a2:	2c 91       	ld	r18, X
    15a4:	27 83       	std	Z+7, r18	; 0x07
    15a6:	01 96       	adiw	r24, 0x01	; 1
    15a8:	80 93 70 25 	sts	0x2570, r24
    15ac:	90 93 71 25 	sts	0x2571, r25
    15b0:	66 c0       	rjmp	.+204    	; 0x167e <twim_interrupt_handler+0x144>

	} else if (transfer.data_count < pkg->length) {
    15b2:	80 91 72 25 	lds	r24, 0x2572
    15b6:	90 91 73 25 	lds	r25, 0x2573
    15ba:	18 96       	adiw	r26, 0x08	; 8
    15bc:	2d 91       	ld	r18, X+
    15be:	3c 91       	ld	r19, X
    15c0:	19 97       	sbiw	r26, 0x09	; 9
    15c2:	82 17       	cp	r24, r18
    15c4:	93 07       	cpc	r25, r19
    15c6:	b0 f4       	brcc	.+44     	; 0x15f4 <twim_interrupt_handler+0xba>

		if (transfer.read) {
    15c8:	20 91 74 25 	lds	r18, 0x2574
    15cc:	22 23       	and	r18, r18
    15ce:	21 f0       	breq	.+8      	; 0x15d8 <twim_interrupt_handler+0x9e>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
    15d0:	86 81       	ldd	r24, Z+6	; 0x06
    15d2:	81 60       	ori	r24, 0x01	; 1
    15d4:	86 83       	std	Z+6, r24	; 0x06
    15d6:	53 c0       	rjmp	.+166    	; 0x167e <twim_interrupt_handler+0x144>

		} else {
			const uint8_t * const data = pkg->buffer;
			bus->MASTER.DATA = data[transfer.data_count++];
    15d8:	16 96       	adiw	r26, 0x06	; 6
    15da:	0d 90       	ld	r0, X+
    15dc:	bc 91       	ld	r27, X
    15de:	a0 2d       	mov	r26, r0
    15e0:	a8 0f       	add	r26, r24
    15e2:	b9 1f       	adc	r27, r25
    15e4:	2c 91       	ld	r18, X
    15e6:	27 83       	std	Z+7, r18	; 0x07
    15e8:	01 96       	adiw	r24, 0x01	; 1
    15ea:	80 93 72 25 	sts	0x2572, r24
    15ee:	90 93 73 25 	sts	0x2573, r25
    15f2:	45 c0       	rjmp	.+138    	; 0x167e <twim_interrupt_handler+0x144>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    15f4:	83 e0       	ldi	r24, 0x03	; 3
    15f6:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
    15f8:	10 92 76 25 	sts	0x2576, r1
    15fc:	10 92 77 25 	sts	0x2577, r1
    1600:	3e c0       	rjmp	.+124    	; 0x167e <twim_interrupt_handler+0x144>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
    1602:	88 23       	and	r24, r24
    1604:	b4 f5       	brge	.+108    	; 0x1672 <twim_interrupt_handler+0x138>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    1606:	a0 91 6e 25 	lds	r26, 0x256E
    160a:	b0 91 6f 25 	lds	r27, 0x256F

	if (transfer.data_count < pkg->length) {
    160e:	80 91 72 25 	lds	r24, 0x2572
    1612:	90 91 73 25 	lds	r25, 0x2573
    1616:	18 96       	adiw	r26, 0x08	; 8
    1618:	2d 91       	ld	r18, X+
    161a:	3c 91       	ld	r19, X
    161c:	19 97       	sbiw	r26, 0x09	; 9
    161e:	82 17       	cp	r24, r18
    1620:	93 07       	cpc	r25, r19
    1622:	f0 f4       	brcc	.+60     	; 0x1660 <twim_interrupt_handler+0x126>

		uint8_t * const data = pkg->buffer;
		data[transfer.data_count++] = bus->MASTER.DATA;
    1624:	27 81       	ldd	r18, Z+7	; 0x07
    1626:	16 96       	adiw	r26, 0x06	; 6
    1628:	cd 91       	ld	r28, X+
    162a:	dc 91       	ld	r29, X
    162c:	17 97       	sbiw	r26, 0x07	; 7
    162e:	c8 0f       	add	r28, r24
    1630:	d9 1f       	adc	r29, r25
    1632:	28 83       	st	Y, r18
    1634:	01 96       	adiw	r24, 0x01	; 1
    1636:	80 93 72 25 	sts	0x2572, r24
    163a:	90 93 73 25 	sts	0x2573, r25

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
    163e:	18 96       	adiw	r26, 0x08	; 8
    1640:	2d 91       	ld	r18, X+
    1642:	3c 91       	ld	r19, X
    1644:	19 97       	sbiw	r26, 0x09	; 9
    1646:	82 17       	cp	r24, r18
    1648:	93 07       	cpc	r25, r19
    164a:	18 f4       	brcc	.+6      	; 0x1652 <twim_interrupt_handler+0x118>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    164c:	82 e0       	ldi	r24, 0x02	; 2
    164e:	83 83       	std	Z+3, r24	; 0x03
    1650:	16 c0       	rjmp	.+44     	; 0x167e <twim_interrupt_handler+0x144>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    1652:	87 e0       	ldi	r24, 0x07	; 7
    1654:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
    1656:	10 92 76 25 	sts	0x2576, r1
    165a:	10 92 77 25 	sts	0x2577, r1
    165e:	0f c0       	rjmp	.+30     	; 0x167e <twim_interrupt_handler+0x144>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1660:	83 e0       	ldi	r24, 0x03	; 3
    1662:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
    1664:	89 ef       	ldi	r24, 0xF9	; 249
    1666:	9f ef       	ldi	r25, 0xFF	; 255
    1668:	80 93 76 25 	sts	0x2576, r24
    166c:	90 93 77 25 	sts	0x2577, r25
    1670:	06 c0       	rjmp	.+12     	; 0x167e <twim_interrupt_handler+0x144>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
    1672:	8b ef       	ldi	r24, 0xFB	; 251
    1674:	9f ef       	ldi	r25, 0xFF	; 255
    1676:	80 93 76 25 	sts	0x2576, r24
    167a:	90 93 77 25 	sts	0x2577, r25
	}
}
    167e:	df 91       	pop	r29
    1680:	cf 91       	pop	r28
    1682:	08 95       	ret

00001684 <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
    1684:	1f 92       	push	r1
    1686:	0f 92       	push	r0
    1688:	0f b6       	in	r0, 0x3f	; 63
    168a:	0f 92       	push	r0
    168c:	11 24       	eor	r1, r1
    168e:	2f 93       	push	r18
    1690:	3f 93       	push	r19
    1692:	4f 93       	push	r20
    1694:	5f 93       	push	r21
    1696:	6f 93       	push	r22
    1698:	7f 93       	push	r23
    169a:	8f 93       	push	r24
    169c:	9f 93       	push	r25
    169e:	af 93       	push	r26
    16a0:	bf 93       	push	r27
    16a2:	ef 93       	push	r30
    16a4:	ff 93       	push	r31
    16a6:	49 df       	rcall	.-366    	; 0x153a <twim_interrupt_handler>
    16a8:	ff 91       	pop	r31
    16aa:	ef 91       	pop	r30
    16ac:	bf 91       	pop	r27
    16ae:	af 91       	pop	r26
    16b0:	9f 91       	pop	r25
    16b2:	8f 91       	pop	r24
    16b4:	7f 91       	pop	r23
    16b6:	6f 91       	pop	r22
    16b8:	5f 91       	pop	r21
    16ba:	4f 91       	pop	r20
    16bc:	3f 91       	pop	r19
    16be:	2f 91       	pop	r18
    16c0:	0f 90       	pop	r0
    16c2:	0f be       	out	0x3f, r0	; 63
    16c4:	0f 90       	pop	r0
    16c6:	1f 90       	pop	r1
    16c8:	18 95       	reti

000016ca <__vector_46>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
    16ca:	1f 92       	push	r1
    16cc:	0f 92       	push	r0
    16ce:	0f b6       	in	r0, 0x3f	; 63
    16d0:	0f 92       	push	r0
    16d2:	11 24       	eor	r1, r1
    16d4:	2f 93       	push	r18
    16d6:	3f 93       	push	r19
    16d8:	4f 93       	push	r20
    16da:	5f 93       	push	r21
    16dc:	6f 93       	push	r22
    16de:	7f 93       	push	r23
    16e0:	8f 93       	push	r24
    16e2:	9f 93       	push	r25
    16e4:	af 93       	push	r26
    16e6:	bf 93       	push	r27
    16e8:	ef 93       	push	r30
    16ea:	ff 93       	push	r31
    16ec:	26 df       	rcall	.-436    	; 0x153a <twim_interrupt_handler>
    16ee:	ff 91       	pop	r31
    16f0:	ef 91       	pop	r30
    16f2:	bf 91       	pop	r27
    16f4:	af 91       	pop	r26
    16f6:	9f 91       	pop	r25
    16f8:	8f 91       	pop	r24
    16fa:	7f 91       	pop	r23
    16fc:	6f 91       	pop	r22
    16fe:	5f 91       	pop	r21
    1700:	4f 91       	pop	r20
    1702:	3f 91       	pop	r19
    1704:	2f 91       	pop	r18
    1706:	0f 90       	pop	r0
    1708:	0f be       	out	0x3f, r0	; 63
    170a:	0f 90       	pop	r0
    170c:	1f 90       	pop	r1
    170e:	18 95       	reti

00001710 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    1710:	4f 92       	push	r4
    1712:	5f 92       	push	r5
    1714:	6f 92       	push	r6
    1716:	7f 92       	push	r7
    1718:	8f 92       	push	r8
    171a:	9f 92       	push	r9
    171c:	af 92       	push	r10
    171e:	bf 92       	push	r11
    1720:	cf 92       	push	r12
    1722:	df 92       	push	r13
    1724:	ef 92       	push	r14
    1726:	ff 92       	push	r15
    1728:	0f 93       	push	r16
    172a:	1f 93       	push	r17
    172c:	cf 93       	push	r28
    172e:	df 93       	push	r29
    1730:	ec 01       	movw	r28, r24
    1732:	4a 01       	movw	r8, r20
    1734:	5b 01       	movw	r10, r22
    1736:	28 01       	movw	r4, r16
    1738:	39 01       	movw	r6, r18

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    173a:	d9 01       	movw	r26, r18
    173c:	c8 01       	movw	r24, r16
    173e:	68 94       	set
    1740:	12 f8       	bld	r1, 2
    1742:	b6 95       	lsr	r27
    1744:	a7 95       	ror	r26
    1746:	97 95       	ror	r25
    1748:	87 95       	ror	r24
    174a:	16 94       	lsr	r1
    174c:	d1 f7       	brne	.-12     	; 0x1742 <usart_set_baudrate+0x32>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    174e:	b9 01       	movw	r22, r18
    1750:	a8 01       	movw	r20, r16
    1752:	03 2e       	mov	r0, r19
    1754:	36 e1       	ldi	r19, 0x16	; 22
    1756:	76 95       	lsr	r23
    1758:	67 95       	ror	r22
    175a:	57 95       	ror	r21
    175c:	47 95       	ror	r20
    175e:	3a 95       	dec	r19
    1760:	d1 f7       	brne	.-12     	; 0x1756 <usart_set_baudrate+0x46>
    1762:	30 2d       	mov	r19, r0

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    1764:	2c 81       	ldd	r18, Y+4	; 0x04
    1766:	22 fd       	sbrc	r18, 2
    1768:	08 c0       	rjmp	.+16     	; 0x177a <usart_set_baudrate+0x6a>
		max_rate /= 2;
    176a:	b6 95       	lsr	r27
    176c:	a7 95       	ror	r26
    176e:	97 95       	ror	r25
    1770:	87 95       	ror	r24
		min_rate /= 2;
    1772:	76 95       	lsr	r23
    1774:	67 95       	ror	r22
    1776:	57 95       	ror	r21
    1778:	47 95       	ror	r20
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    177a:	88 15       	cp	r24, r8
    177c:	99 05       	cpc	r25, r9
    177e:	aa 05       	cpc	r26, r10
    1780:	bb 05       	cpc	r27, r11
    1782:	08 f4       	brcc	.+2      	; 0x1786 <usart_set_baudrate+0x76>
    1784:	ae c0       	rjmp	.+348    	; 0x18e2 <usart_set_baudrate+0x1d2>
    1786:	84 16       	cp	r8, r20
    1788:	95 06       	cpc	r9, r21
    178a:	a6 06       	cpc	r10, r22
    178c:	b7 06       	cpc	r11, r23
    178e:	08 f4       	brcc	.+2      	; 0x1792 <usart_set_baudrate+0x82>
    1790:	aa c0       	rjmp	.+340    	; 0x18e6 <usart_set_baudrate+0x1d6>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    1792:	8c 81       	ldd	r24, Y+4	; 0x04
    1794:	82 fd       	sbrc	r24, 2
    1796:	04 c0       	rjmp	.+8      	; 0x17a0 <usart_set_baudrate+0x90>
		baud *= 2;
    1798:	88 0c       	add	r8, r8
    179a:	99 1c       	adc	r9, r9
    179c:	aa 1c       	adc	r10, r10
    179e:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
    17a0:	c3 01       	movw	r24, r6
    17a2:	b2 01       	movw	r22, r4
    17a4:	a5 01       	movw	r20, r10
    17a6:	94 01       	movw	r18, r8
    17a8:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
    17ac:	2f 3f       	cpi	r18, 0xFF	; 255
    17ae:	31 05       	cpc	r19, r1
    17b0:	41 05       	cpc	r20, r1
    17b2:	51 05       	cpc	r21, r1
    17b4:	08 f4       	brcc	.+2      	; 0x17b8 <usart_set_baudrate+0xa8>
    17b6:	99 c0       	rjmp	.+306    	; 0x18ea <usart_set_baudrate+0x1da>
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		baud *= 2;
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
    17b8:	c1 2c       	mov	r12, r1
    17ba:	d1 2c       	mov	r13, r1
    17bc:	76 01       	movw	r14, r12
    17be:	ca 94       	dec	r12
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    17c0:	19 ef       	ldi	r17, 0xF9	; 249
    17c2:	05 c0       	rjmp	.+10     	; 0x17ce <usart_set_baudrate+0xbe>
		if (ratio < limit) {
    17c4:	2c 15       	cp	r18, r12
    17c6:	3d 05       	cpc	r19, r13
    17c8:	4e 05       	cpc	r20, r14
    17ca:	5f 05       	cpc	r21, r15
    17cc:	68 f0       	brcs	.+26     	; 0x17e8 <usart_set_baudrate+0xd8>
			break;
		}

		limit <<= 1;
    17ce:	cc 0c       	add	r12, r12
    17d0:	dd 1c       	adc	r13, r13
    17d2:	ee 1c       	adc	r14, r14
    17d4:	ff 1c       	adc	r15, r15

		if (exp < -3) {
    17d6:	1d 3f       	cpi	r17, 0xFD	; 253
    17d8:	14 f4       	brge	.+4      	; 0x17de <usart_set_baudrate+0xce>
			limit |= 1;
    17da:	68 94       	set
    17dc:	c0 f8       	bld	r12, 0

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    17de:	1f 5f       	subi	r17, 0xFF	; 255
    17e0:	17 30       	cpi	r17, 0x07	; 7
    17e2:	81 f7       	brne	.-32     	; 0x17c4 <usart_set_baudrate+0xb4>
    17e4:	21 2f       	mov	r18, r17
    17e6:	54 c0       	rjmp	.+168    	; 0x1890 <usart_set_baudrate+0x180>
    17e8:	21 2f       	mov	r18, r17
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    17ea:	11 23       	and	r17, r17
    17ec:	0c f0       	brlt	.+2      	; 0x17f0 <usart_set_baudrate+0xe0>
    17ee:	50 c0       	rjmp	.+160    	; 0x1890 <usart_set_baudrate+0x180>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    17f0:	d5 01       	movw	r26, r10
    17f2:	c4 01       	movw	r24, r8
    17f4:	88 0f       	add	r24, r24
    17f6:	99 1f       	adc	r25, r25
    17f8:	aa 1f       	adc	r26, r26
    17fa:	bb 1f       	adc	r27, r27
    17fc:	88 0f       	add	r24, r24
    17fe:	99 1f       	adc	r25, r25
    1800:	aa 1f       	adc	r26, r26
    1802:	bb 1f       	adc	r27, r27
    1804:	88 0f       	add	r24, r24
    1806:	99 1f       	adc	r25, r25
    1808:	aa 1f       	adc	r26, r26
    180a:	bb 1f       	adc	r27, r27
    180c:	48 1a       	sub	r4, r24
    180e:	59 0a       	sbc	r5, r25
    1810:	6a 0a       	sbc	r6, r26
    1812:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    1814:	1e 3f       	cpi	r17, 0xFE	; 254
    1816:	f4 f4       	brge	.+60     	; 0x1854 <usart_set_baudrate+0x144>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    1818:	6d ef       	ldi	r22, 0xFD	; 253
    181a:	7f ef       	ldi	r23, 0xFF	; 255
    181c:	61 1b       	sub	r22, r17
    181e:	71 09       	sbc	r23, r1
    1820:	17 fd       	sbrc	r17, 7
    1822:	73 95       	inc	r23
    1824:	04 c0       	rjmp	.+8      	; 0x182e <usart_set_baudrate+0x11e>
    1826:	44 0c       	add	r4, r4
    1828:	55 1c       	adc	r5, r5
    182a:	66 1c       	adc	r6, r6
    182c:	77 1c       	adc	r7, r7
    182e:	6a 95       	dec	r22
    1830:	d2 f7       	brpl	.-12     	; 0x1826 <usart_set_baudrate+0x116>
    1832:	d5 01       	movw	r26, r10
    1834:	c4 01       	movw	r24, r8
    1836:	b6 95       	lsr	r27
    1838:	a7 95       	ror	r26
    183a:	97 95       	ror	r25
    183c:	87 95       	ror	r24
    183e:	bc 01       	movw	r22, r24
    1840:	cd 01       	movw	r24, r26
    1842:	64 0d       	add	r22, r4
    1844:	75 1d       	adc	r23, r5
    1846:	86 1d       	adc	r24, r6
    1848:	97 1d       	adc	r25, r7
    184a:	a5 01       	movw	r20, r10
    184c:	94 01       	movw	r18, r8
    184e:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <__udivmodsi4>
    1852:	3e c0       	rjmp	.+124    	; 0x18d0 <usart_set_baudrate+0x1c0>
		} else {
			baud <<= exp + 3;
    1854:	21 2f       	mov	r18, r17
    1856:	33 27       	eor	r19, r19
    1858:	27 fd       	sbrc	r18, 7
    185a:	30 95       	com	r19
    185c:	2d 5f       	subi	r18, 0xFD	; 253
    185e:	3f 4f       	sbci	r19, 0xFF	; 255
    1860:	d5 01       	movw	r26, r10
    1862:	c4 01       	movw	r24, r8
    1864:	04 c0       	rjmp	.+8      	; 0x186e <usart_set_baudrate+0x15e>
    1866:	88 0f       	add	r24, r24
    1868:	99 1f       	adc	r25, r25
    186a:	aa 1f       	adc	r26, r26
    186c:	bb 1f       	adc	r27, r27
    186e:	2a 95       	dec	r18
    1870:	d2 f7       	brpl	.-12     	; 0x1866 <usart_set_baudrate+0x156>
    1872:	9c 01       	movw	r18, r24
    1874:	ad 01       	movw	r20, r26
			div = (cpu_hz + baud / 2) / baud;
    1876:	b6 95       	lsr	r27
    1878:	a7 95       	ror	r26
    187a:	97 95       	ror	r25
    187c:	87 95       	ror	r24
    187e:	bc 01       	movw	r22, r24
    1880:	cd 01       	movw	r24, r26
    1882:	64 0d       	add	r22, r4
    1884:	75 1d       	adc	r23, r5
    1886:	86 1d       	adc	r24, r6
    1888:	97 1d       	adc	r25, r7
    188a:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <__udivmodsi4>
    188e:	20 c0       	rjmp	.+64     	; 0x18d0 <usart_set_baudrate+0x1c0>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    1890:	33 27       	eor	r19, r19
    1892:	27 fd       	sbrc	r18, 7
    1894:	30 95       	com	r19
    1896:	2d 5f       	subi	r18, 0xFD	; 253
    1898:	3f 4f       	sbci	r19, 0xFF	; 255
    189a:	d5 01       	movw	r26, r10
    189c:	c4 01       	movw	r24, r8
    189e:	04 c0       	rjmp	.+8      	; 0x18a8 <usart_set_baudrate+0x198>
    18a0:	88 0f       	add	r24, r24
    18a2:	99 1f       	adc	r25, r25
    18a4:	aa 1f       	adc	r26, r26
    18a6:	bb 1f       	adc	r27, r27
    18a8:	2a 95       	dec	r18
    18aa:	d2 f7       	brpl	.-12     	; 0x18a0 <usart_set_baudrate+0x190>
    18ac:	9c 01       	movw	r18, r24
    18ae:	ad 01       	movw	r20, r26
		div = (cpu_hz + baud / 2) / baud - 1;
    18b0:	b6 95       	lsr	r27
    18b2:	a7 95       	ror	r26
    18b4:	97 95       	ror	r25
    18b6:	87 95       	ror	r24
    18b8:	bc 01       	movw	r22, r24
    18ba:	cd 01       	movw	r24, r26
    18bc:	64 0d       	add	r22, r4
    18be:	75 1d       	adc	r23, r5
    18c0:	86 1d       	adc	r24, r6
    18c2:	97 1d       	adc	r25, r7
    18c4:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <__udivmodsi4>
    18c8:	21 50       	subi	r18, 0x01	; 1
    18ca:	31 09       	sbc	r19, r1
    18cc:	41 09       	sbc	r20, r1
    18ce:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    18d0:	83 2f       	mov	r24, r19
    18d2:	8f 70       	andi	r24, 0x0F	; 15
    18d4:	12 95       	swap	r17
    18d6:	10 7f       	andi	r17, 0xF0	; 240
    18d8:	18 2b       	or	r17, r24
    18da:	1f 83       	std	Y+7, r17	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    18dc:	2e 83       	std	Y+6, r18	; 0x06

	return true;
    18de:	81 e0       	ldi	r24, 0x01	; 1
    18e0:	18 c0       	rjmp	.+48     	; 0x1912 <usart_set_baudrate+0x202>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    18e2:	80 e0       	ldi	r24, 0x00	; 0
    18e4:	16 c0       	rjmp	.+44     	; 0x1912 <usart_set_baudrate+0x202>
    18e6:	80 e0       	ldi	r24, 0x00	; 0
    18e8:	14 c0       	rjmp	.+40     	; 0x1912 <usart_set_baudrate+0x202>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    18ea:	d5 01       	movw	r26, r10
    18ec:	c4 01       	movw	r24, r8
    18ee:	88 0f       	add	r24, r24
    18f0:	99 1f       	adc	r25, r25
    18f2:	aa 1f       	adc	r26, r26
    18f4:	bb 1f       	adc	r27, r27
    18f6:	88 0f       	add	r24, r24
    18f8:	99 1f       	adc	r25, r25
    18fa:	aa 1f       	adc	r26, r26
    18fc:	bb 1f       	adc	r27, r27
    18fe:	88 0f       	add	r24, r24
    1900:	99 1f       	adc	r25, r25
    1902:	aa 1f       	adc	r26, r26
    1904:	bb 1f       	adc	r27, r27
    1906:	48 1a       	sub	r4, r24
    1908:	59 0a       	sbc	r5, r25
    190a:	6a 0a       	sbc	r6, r26
    190c:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    190e:	19 ef       	ldi	r17, 0xF9	; 249
    1910:	83 cf       	rjmp	.-250    	; 0x1818 <usart_set_baudrate+0x108>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
    1912:	df 91       	pop	r29
    1914:	cf 91       	pop	r28
    1916:	1f 91       	pop	r17
    1918:	0f 91       	pop	r16
    191a:	ff 90       	pop	r15
    191c:	ef 90       	pop	r14
    191e:	df 90       	pop	r13
    1920:	cf 90       	pop	r12
    1922:	bf 90       	pop	r11
    1924:	af 90       	pop	r10
    1926:	9f 90       	pop	r9
    1928:	8f 90       	pop	r8
    192a:	7f 90       	pop	r7
    192c:	6f 90       	pop	r6
    192e:	5f 90       	pop	r5
    1930:	4f 90       	pop	r4
    1932:	08 95       	ret

00001934 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
    1934:	0f 93       	push	r16
    1936:	1f 93       	push	r17
    1938:	cf 93       	push	r28
    193a:	df 93       	push	r29
    193c:	ec 01       	movw	r28, r24
    193e:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    1940:	00 97       	sbiw	r24, 0x00	; 0
    1942:	09 f4       	brne	.+2      	; 0x1946 <usart_init_rs232+0x12>
    1944:	ee c0       	rjmp	.+476    	; 0x1b22 <usart_init_rs232+0x1ee>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    1946:	80 3c       	cpi	r24, 0xC0	; 192
    1948:	91 05       	cpc	r25, r1
    194a:	31 f4       	brne	.+12     	; 0x1958 <usart_init_rs232+0x24>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    194c:	60 e1       	ldi	r22, 0x10	; 16
    194e:	80 e0       	ldi	r24, 0x00	; 0
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	0e 94 10 04 	call	0x820	; 0x820 <sysclk_enable_module>
    1956:	e5 c0       	rjmp	.+458    	; 0x1b22 <usart_init_rs232+0x1ee>
	else if (module == &EBI) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    1958:	c1 15       	cp	r28, r1
    195a:	84 e0       	ldi	r24, 0x04	; 4
    195c:	d8 07       	cpc	r29, r24
    195e:	31 f4       	brne	.+12     	; 0x196c <usart_init_rs232+0x38>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    1960:	64 e0       	ldi	r22, 0x04	; 4
    1962:	80 e0       	ldi	r24, 0x00	; 0
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	0e 94 10 04 	call	0x820	; 0x820 <sysclk_enable_module>
    196a:	db c0       	rjmp	.+438    	; 0x1b22 <usart_init_rs232+0x1ee>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    196c:	c0 38       	cpi	r28, 0x80	; 128
    196e:	e1 e0       	ldi	r30, 0x01	; 1
    1970:	de 07       	cpc	r29, r30
    1972:	31 f4       	brne	.+12     	; 0x1980 <usart_init_rs232+0x4c>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    1974:	62 e0       	ldi	r22, 0x02	; 2
    1976:	80 e0       	ldi	r24, 0x00	; 0
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	0e 94 10 04 	call	0x820	; 0x820 <sysclk_enable_module>
    197e:	d1 c0       	rjmp	.+418    	; 0x1b22 <usart_init_rs232+0x1ee>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    1980:	c1 15       	cp	r28, r1
    1982:	f1 e0       	ldi	r31, 0x01	; 1
    1984:	df 07       	cpc	r29, r31
    1986:	31 f4       	brne	.+12     	; 0x1994 <usart_init_rs232+0x60>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    1988:	61 e0       	ldi	r22, 0x01	; 1
    198a:	80 e0       	ldi	r24, 0x00	; 0
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	0e 94 10 04 	call	0x820	; 0x820 <sysclk_enable_module>
    1992:	c7 c0       	rjmp	.+398    	; 0x1b22 <usart_init_rs232+0x1ee>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    1994:	c0 38       	cpi	r28, 0x80	; 128
    1996:	83 e0       	ldi	r24, 0x03	; 3
    1998:	d8 07       	cpc	r29, r24
    199a:	31 f4       	brne	.+12     	; 0x19a8 <usart_init_rs232+0x74>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    199c:	61 e0       	ldi	r22, 0x01	; 1
    199e:	81 e0       	ldi	r24, 0x01	; 1
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	0e 94 10 04 	call	0x820	; 0x820 <sysclk_enable_module>
    19a6:	bd c0       	rjmp	.+378    	; 0x1b22 <usart_init_rs232+0x1ee>
	else if (module == &ACB) {
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    19a8:	c1 15       	cp	r28, r1
    19aa:	e2 e0       	ldi	r30, 0x02	; 2
    19ac:	de 07       	cpc	r29, r30
    19ae:	31 f4       	brne	.+12     	; 0x19bc <usart_init_rs232+0x88>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    19b0:	62 e0       	ldi	r22, 0x02	; 2
    19b2:	81 e0       	ldi	r24, 0x01	; 1
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	0e 94 10 04 	call	0x820	; 0x820 <sysclk_enable_module>
    19ba:	b3 c0       	rjmp	.+358    	; 0x1b22 <usart_init_rs232+0x1ee>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    19bc:	c0 32       	cpi	r28, 0x20	; 32
    19be:	f3 e0       	ldi	r31, 0x03	; 3
    19c0:	df 07       	cpc	r29, r31
    19c2:	31 f4       	brne	.+12     	; 0x19d0 <usart_init_rs232+0x9c>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    19c4:	64 e0       	ldi	r22, 0x04	; 4
    19c6:	82 e0       	ldi	r24, 0x02	; 2
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	0e 94 10 04 	call	0x820	; 0x820 <sysclk_enable_module>
    19ce:	a9 c0       	rjmp	.+338    	; 0x1b22 <usart_init_rs232+0x1ee>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    19d0:	c1 15       	cp	r28, r1
    19d2:	88 e0       	ldi	r24, 0x08	; 8
    19d4:	d8 07       	cpc	r29, r24
    19d6:	31 f4       	brne	.+12     	; 0x19e4 <usart_init_rs232+0xb0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    19d8:	61 e0       	ldi	r22, 0x01	; 1
    19da:	83 e0       	ldi	r24, 0x03	; 3
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	0e 94 10 04 	call	0x820	; 0x820 <sysclk_enable_module>
    19e2:	9f c0       	rjmp	.+318    	; 0x1b22 <usart_init_rs232+0x1ee>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    19e4:	c1 15       	cp	r28, r1
    19e6:	e9 e0       	ldi	r30, 0x09	; 9
    19e8:	de 07       	cpc	r29, r30
    19ea:	31 f4       	brne	.+12     	; 0x19f8 <usart_init_rs232+0xc4>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    19ec:	61 e0       	ldi	r22, 0x01	; 1
    19ee:	84 e0       	ldi	r24, 0x04	; 4
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	0e 94 10 04 	call	0x820	; 0x820 <sysclk_enable_module>
    19f6:	95 c0       	rjmp	.+298    	; 0x1b22 <usart_init_rs232+0x1ee>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    19f8:	c1 15       	cp	r28, r1
    19fa:	fa e0       	ldi	r31, 0x0A	; 10
    19fc:	df 07       	cpc	r29, r31
    19fe:	31 f4       	brne	.+12     	; 0x1a0c <usart_init_rs232+0xd8>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    1a00:	61 e0       	ldi	r22, 0x01	; 1
    1a02:	85 e0       	ldi	r24, 0x05	; 5
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	0e 94 10 04 	call	0x820	; 0x820 <sysclk_enable_module>
    1a0a:	8b c0       	rjmp	.+278    	; 0x1b22 <usart_init_rs232+0x1ee>
	else if (module == &TCF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    1a0c:	c0 34       	cpi	r28, 0x40	; 64
    1a0e:	88 e0       	ldi	r24, 0x08	; 8
    1a10:	d8 07       	cpc	r29, r24
    1a12:	31 f4       	brne	.+12     	; 0x1a20 <usart_init_rs232+0xec>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    1a14:	62 e0       	ldi	r22, 0x02	; 2
    1a16:	83 e0       	ldi	r24, 0x03	; 3
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	0e 94 10 04 	call	0x820	; 0x820 <sysclk_enable_module>
    1a1e:	81 c0       	rjmp	.+258    	; 0x1b22 <usart_init_rs232+0x1ee>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    1a20:	c0 34       	cpi	r28, 0x40	; 64
    1a22:	e9 e0       	ldi	r30, 0x09	; 9
    1a24:	de 07       	cpc	r29, r30
    1a26:	31 f4       	brne	.+12     	; 0x1a34 <usart_init_rs232+0x100>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    1a28:	62 e0       	ldi	r22, 0x02	; 2
    1a2a:	84 e0       	ldi	r24, 0x04	; 4
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	0e 94 10 04 	call	0x820	; 0x820 <sysclk_enable_module>
    1a32:	77 c0       	rjmp	.+238    	; 0x1b22 <usart_init_rs232+0x1ee>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    1a34:	c0 39       	cpi	r28, 0x90	; 144
    1a36:	f8 e0       	ldi	r31, 0x08	; 8
    1a38:	df 07       	cpc	r29, r31
    1a3a:	31 f4       	brne	.+12     	; 0x1a48 <usart_init_rs232+0x114>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1a3c:	64 e0       	ldi	r22, 0x04	; 4
    1a3e:	83 e0       	ldi	r24, 0x03	; 3
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	0e 94 10 04 	call	0x820	; 0x820 <sysclk_enable_module>
    1a46:	6d c0       	rjmp	.+218    	; 0x1b22 <usart_init_rs232+0x1ee>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    1a48:	c0 39       	cpi	r28, 0x90	; 144
    1a4a:	89 e0       	ldi	r24, 0x09	; 9
    1a4c:	d8 07       	cpc	r29, r24
    1a4e:	31 f4       	brne	.+12     	; 0x1a5c <usart_init_rs232+0x128>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1a50:	64 e0       	ldi	r22, 0x04	; 4
    1a52:	84 e0       	ldi	r24, 0x04	; 4
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	0e 94 10 04 	call	0x820	; 0x820 <sysclk_enable_module>
    1a5a:	63 c0       	rjmp	.+198    	; 0x1b22 <usart_init_rs232+0x1ee>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    1a5c:	c0 39       	cpi	r28, 0x90	; 144
    1a5e:	ea e0       	ldi	r30, 0x0A	; 10
    1a60:	de 07       	cpc	r29, r30
    1a62:	31 f4       	brne	.+12     	; 0x1a70 <usart_init_rs232+0x13c>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1a64:	64 e0       	ldi	r22, 0x04	; 4
    1a66:	85 e0       	ldi	r24, 0x05	; 5
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	0e 94 10 04 	call	0x820	; 0x820 <sysclk_enable_module>
    1a6e:	59 c0       	rjmp	.+178    	; 0x1b22 <usart_init_rs232+0x1ee>
	else if (module == &HIRESF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    1a70:	c0 3c       	cpi	r28, 0xC0	; 192
    1a72:	f8 e0       	ldi	r31, 0x08	; 8
    1a74:	df 07       	cpc	r29, r31
    1a76:	31 f4       	brne	.+12     	; 0x1a84 <usart_init_rs232+0x150>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    1a78:	68 e0       	ldi	r22, 0x08	; 8
    1a7a:	83 e0       	ldi	r24, 0x03	; 3
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	0e 94 10 04 	call	0x820	; 0x820 <sysclk_enable_module>
    1a82:	4f c0       	rjmp	.+158    	; 0x1b22 <usart_init_rs232+0x1ee>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    1a84:	c0 3c       	cpi	r28, 0xC0	; 192
    1a86:	89 e0       	ldi	r24, 0x09	; 9
    1a88:	d8 07       	cpc	r29, r24
    1a8a:	31 f4       	brne	.+12     	; 0x1a98 <usart_init_rs232+0x164>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    1a8c:	68 e0       	ldi	r22, 0x08	; 8
    1a8e:	84 e0       	ldi	r24, 0x04	; 4
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	0e 94 10 04 	call	0x820	; 0x820 <sysclk_enable_module>
    1a96:	45 c0       	rjmp	.+138    	; 0x1b22 <usart_init_rs232+0x1ee>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    1a98:	c0 3a       	cpi	r28, 0xA0	; 160
    1a9a:	e8 e0       	ldi	r30, 0x08	; 8
    1a9c:	de 07       	cpc	r29, r30
    1a9e:	31 f4       	brne	.+12     	; 0x1aac <usart_init_rs232+0x178>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    1aa0:	60 e1       	ldi	r22, 0x10	; 16
    1aa2:	83 e0       	ldi	r24, 0x03	; 3
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	0e 94 10 04 	call	0x820	; 0x820 <sysclk_enable_module>
    1aaa:	3b c0       	rjmp	.+118    	; 0x1b22 <usart_init_rs232+0x1ee>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    1aac:	c0 3a       	cpi	r28, 0xA0	; 160
    1aae:	f9 e0       	ldi	r31, 0x09	; 9
    1ab0:	df 07       	cpc	r29, r31
    1ab2:	31 f4       	brne	.+12     	; 0x1ac0 <usart_init_rs232+0x18c>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    1ab4:	60 e1       	ldi	r22, 0x10	; 16
    1ab6:	84 e0       	ldi	r24, 0x04	; 4
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	0e 94 10 04 	call	0x820	; 0x820 <sysclk_enable_module>
    1abe:	31 c0       	rjmp	.+98     	; 0x1b22 <usart_init_rs232+0x1ee>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    1ac0:	c0 3a       	cpi	r28, 0xA0	; 160
    1ac2:	8a e0       	ldi	r24, 0x0A	; 10
    1ac4:	d8 07       	cpc	r29, r24
    1ac6:	31 f4       	brne	.+12     	; 0x1ad4 <usart_init_rs232+0x1a0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    1ac8:	60 e1       	ldi	r22, 0x10	; 16
    1aca:	85 e0       	ldi	r24, 0x05	; 5
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	0e 94 10 04 	call	0x820	; 0x820 <sysclk_enable_module>
    1ad2:	27 c0       	rjmp	.+78     	; 0x1b22 <usart_init_rs232+0x1ee>
	else if (module == &USARTF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    1ad4:	c0 3b       	cpi	r28, 0xB0	; 176
    1ad6:	e8 e0       	ldi	r30, 0x08	; 8
    1ad8:	de 07       	cpc	r29, r30
    1ada:	31 f4       	brne	.+12     	; 0x1ae8 <usart_init_rs232+0x1b4>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    1adc:	60 e2       	ldi	r22, 0x20	; 32
    1ade:	83 e0       	ldi	r24, 0x03	; 3
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	0e 94 10 04 	call	0x820	; 0x820 <sysclk_enable_module>
    1ae6:	1d c0       	rjmp	.+58     	; 0x1b22 <usart_init_rs232+0x1ee>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    1ae8:	c0 3b       	cpi	r28, 0xB0	; 176
    1aea:	f9 e0       	ldi	r31, 0x09	; 9
    1aec:	df 07       	cpc	r29, r31
    1aee:	31 f4       	brne	.+12     	; 0x1afc <usart_init_rs232+0x1c8>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    1af0:	60 e2       	ldi	r22, 0x20	; 32
    1af2:	84 e0       	ldi	r24, 0x04	; 4
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	0e 94 10 04 	call	0x820	; 0x820 <sysclk_enable_module>
    1afa:	13 c0       	rjmp	.+38     	; 0x1b22 <usart_init_rs232+0x1ee>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    1afc:	c0 38       	cpi	r28, 0x80	; 128
    1afe:	84 e0       	ldi	r24, 0x04	; 4
    1b00:	d8 07       	cpc	r29, r24
    1b02:	31 f4       	brne	.+12     	; 0x1b10 <usart_init_rs232+0x1dc>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    1b04:	60 e4       	ldi	r22, 0x40	; 64
    1b06:	83 e0       	ldi	r24, 0x03	; 3
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	0e 94 10 04 	call	0x820	; 0x820 <sysclk_enable_module>
    1b0e:	09 c0       	rjmp	.+18     	; 0x1b22 <usart_init_rs232+0x1ee>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    1b10:	c0 3a       	cpi	r28, 0xA0	; 160
    1b12:	e4 e0       	ldi	r30, 0x04	; 4
    1b14:	de 07       	cpc	r29, r30
    1b16:	29 f4       	brne	.+10     	; 0x1b22 <usart_init_rs232+0x1ee>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    1b18:	60 e4       	ldi	r22, 0x40	; 64
    1b1a:	85 e0       	ldi	r24, 0x05	; 5
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	0e 94 10 04 	call	0x820	; 0x820 <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    1b22:	8d 81       	ldd	r24, Y+5	; 0x05
    1b24:	8f 73       	andi	r24, 0x3F	; 63
    1b26:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    1b28:	f8 01       	movw	r30, r16
    1b2a:	96 81       	ldd	r25, Z+6	; 0x06
    1b2c:	84 81       	ldd	r24, Z+4	; 0x04
    1b2e:	89 2b       	or	r24, r25
    1b30:	90 85       	ldd	r25, Z+8	; 0x08
    1b32:	99 23       	and	r25, r25
    1b34:	11 f0       	breq	.+4      	; 0x1b3a <usart_init_rs232+0x206>
    1b36:	98 e0       	ldi	r25, 0x08	; 8
    1b38:	01 c0       	rjmp	.+2      	; 0x1b3c <usart_init_rs232+0x208>
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	89 2b       	or	r24, r25
    1b3e:	8d 83       	std	Y+5, r24	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    1b40:	f8 01       	movw	r30, r16
    1b42:	40 81       	ld	r20, Z
    1b44:	51 81       	ldd	r21, Z+1	; 0x01
    1b46:	62 81       	ldd	r22, Z+2	; 0x02
    1b48:	73 81       	ldd	r23, Z+3	; 0x03
    1b4a:	00 e0       	ldi	r16, 0x00	; 0
    1b4c:	18 e4       	ldi	r17, 0x48	; 72
    1b4e:	28 ee       	ldi	r18, 0xE8	; 232
    1b50:	31 e0       	ldi	r19, 0x01	; 1
    1b52:	ce 01       	movw	r24, r28
    1b54:	dd dd       	rcall	.-1094   	; 0x1710 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    1b56:	9c 81       	ldd	r25, Y+4	; 0x04
    1b58:	98 60       	ori	r25, 0x08	; 8
    1b5a:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    1b5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b5e:	90 61       	ori	r25, 0x10	; 16
    1b60:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
    1b62:	df 91       	pop	r29
    1b64:	cf 91       	pop	r28
    1b66:	1f 91       	pop	r17
    1b68:	0f 91       	pop	r16
    1b6a:	08 95       	ret

00001b6c <pwm_set_frequency>:
 *
 * \param config Pointer to PWM configuration.
 * \param freq_hz Wanted PWM frequency in Hz.
 */
void pwm_set_frequency(struct pwm_config *config, uint16_t freq_hz)
{
    1b6c:	cf 92       	push	r12
    1b6e:	df 92       	push	r13
    1b70:	ef 92       	push	r14
    1b72:	ff 92       	push	r15
    1b74:	cf 93       	push	r28
    1b76:	df 93       	push	r29
    1b78:	ec 01       	movw	r28, r24
	/* Avoid division by zero. */
	Assert(freq_hz != 0);

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
    1b7a:	6b 01       	movw	r12, r22
    1b7c:	e1 2c       	mov	r14, r1
    1b7e:	f1 2c       	mov	r15, r1
    1b80:	60 e0       	ldi	r22, 0x00	; 0
    1b82:	78 e4       	ldi	r23, 0x48	; 72
    1b84:	88 ee       	ldi	r24, 0xE8	; 232
    1b86:	91 e0       	ldi	r25, 0x01	; 1
    1b88:	a7 01       	movw	r20, r14
    1b8a:	96 01       	movw	r18, r12
    1b8c:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <__udivmodsi4>
    1b90:	ca 01       	movw	r24, r20
    1b92:	b9 01       	movw	r22, r18
    1b94:	2f ef       	ldi	r18, 0xFF	; 255
    1b96:	3f ef       	ldi	r19, 0xFF	; 255
    1b98:	40 e0       	ldi	r20, 0x00	; 0
    1b9a:	50 e0       	ldi	r21, 0x00	; 0
    1b9c:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <__udivmodsi4>
	if (smallest_div < 1) {
    1ba0:	21 15       	cp	r18, r1
    1ba2:	31 05       	cpc	r19, r1
    1ba4:	39 f4       	brne	.+14     	; 0x1bb4 <pwm_set_frequency+0x48>
		dividor = 1;
		config->clk_sel = PWM_CLK_DIV1;
    1ba6:	81 e0       	ldi	r24, 0x01	; 1
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	8e 83       	std	Y+6, r24	; 0x06
    1bac:	9f 83       	std	Y+7, r25	; 0x07

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
	if (smallest_div < 1) {
		dividor = 1;
    1bae:	21 e0       	ldi	r18, 0x01	; 1
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	39 c0       	rjmp	.+114    	; 0x1c26 <pwm_set_frequency+0xba>
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
    1bb4:	22 30       	cpi	r18, 0x02	; 2
    1bb6:	31 05       	cpc	r19, r1
    1bb8:	38 f4       	brcc	.+14     	; 0x1bc8 <pwm_set_frequency+0x5c>
		dividor = 2;
		config->clk_sel = PWM_CLK_DIV2;
    1bba:	82 e0       	ldi	r24, 0x02	; 2
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	8e 83       	std	Y+6, r24	; 0x06
    1bc0:	9f 83       	std	Y+7, r25	; 0x07
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
	if (smallest_div < 1) {
		dividor = 1;
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
		dividor = 2;
    1bc2:	22 e0       	ldi	r18, 0x02	; 2
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	2f c0       	rjmp	.+94     	; 0x1c26 <pwm_set_frequency+0xba>
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
    1bc8:	24 30       	cpi	r18, 0x04	; 4
    1bca:	31 05       	cpc	r19, r1
    1bcc:	38 f4       	brcc	.+14     	; 0x1bdc <pwm_set_frequency+0x70>
		dividor = 4;
		config->clk_sel = PWM_CLK_DIV4;
    1bce:	83 e0       	ldi	r24, 0x03	; 3
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	8e 83       	std	Y+6, r24	; 0x06
    1bd4:	9f 83       	std	Y+7, r25	; 0x07
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
		dividor = 2;
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
		dividor = 4;
    1bd6:	24 e0       	ldi	r18, 0x04	; 4
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	25 c0       	rjmp	.+74     	; 0x1c26 <pwm_set_frequency+0xba>
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
    1bdc:	28 30       	cpi	r18, 0x08	; 8
    1bde:	31 05       	cpc	r19, r1
    1be0:	38 f4       	brcc	.+14     	; 0x1bf0 <pwm_set_frequency+0x84>
		dividor = 8;
		config->clk_sel = PWM_CLK_DIV8;
    1be2:	84 e0       	ldi	r24, 0x04	; 4
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	8e 83       	std	Y+6, r24	; 0x06
    1be8:	9f 83       	std	Y+7, r25	; 0x07
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
		dividor = 4;
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
		dividor = 8;
    1bea:	28 e0       	ldi	r18, 0x08	; 8
    1bec:	30 e0       	ldi	r19, 0x00	; 0
    1bee:	1b c0       	rjmp	.+54     	; 0x1c26 <pwm_set_frequency+0xba>
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
    1bf0:	20 34       	cpi	r18, 0x40	; 64
    1bf2:	31 05       	cpc	r19, r1
    1bf4:	38 f4       	brcc	.+14     	; 0x1c04 <pwm_set_frequency+0x98>
		dividor = 64;
		config->clk_sel = PWM_CLK_DIV64;
    1bf6:	85 e0       	ldi	r24, 0x05	; 5
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	8e 83       	std	Y+6, r24	; 0x06
    1bfc:	9f 83       	std	Y+7, r25	; 0x07
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
		dividor = 8;
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
		dividor = 64;
    1bfe:	20 e4       	ldi	r18, 0x40	; 64
    1c00:	30 e0       	ldi	r19, 0x00	; 0
    1c02:	11 c0       	rjmp	.+34     	; 0x1c26 <pwm_set_frequency+0xba>
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
    1c04:	2f 3f       	cpi	r18, 0xFF	; 255
    1c06:	31 05       	cpc	r19, r1
    1c08:	09 f0       	breq	.+2      	; 0x1c0c <pwm_set_frequency+0xa0>
    1c0a:	38 f4       	brcc	.+14     	; 0x1c1a <pwm_set_frequency+0xae>
		dividor = 256;
		config->clk_sel = PWM_CLK_DIV256;
    1c0c:	86 e0       	ldi	r24, 0x06	; 6
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	8e 83       	std	Y+6, r24	; 0x06
    1c12:	9f 83       	std	Y+7, r25	; 0x07
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
		dividor = 64;
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
		dividor = 256;
    1c14:	20 e0       	ldi	r18, 0x00	; 0
    1c16:	31 e0       	ldi	r19, 0x01	; 1
    1c18:	06 c0       	rjmp	.+12     	; 0x1c26 <pwm_set_frequency+0xba>
		config->clk_sel = PWM_CLK_DIV256;
	} else {
		dividor = 1024;
		config->clk_sel = PWM_CLK_DIV1024;
    1c1a:	87 e0       	ldi	r24, 0x07	; 7
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	8e 83       	std	Y+6, r24	; 0x06
    1c20:	9f 83       	std	Y+7, r25	; 0x07
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
		dividor = 256;
		config->clk_sel = PWM_CLK_DIV256;
	} else {
		dividor = 1024;
    1c22:	20 e0       	ldi	r18, 0x00	; 0
    1c24:	34 e0       	ldi	r19, 0x04	; 4
		config->clk_sel = PWM_CLK_DIV1024;
	}

	/* Calculate the period from the just found divider */
	config->period = cpu_hz / dividor / freq_hz;
    1c26:	40 e0       	ldi	r20, 0x00	; 0
    1c28:	50 e0       	ldi	r21, 0x00	; 0
    1c2a:	60 e0       	ldi	r22, 0x00	; 0
    1c2c:	78 e4       	ldi	r23, 0x48	; 72
    1c2e:	88 ee       	ldi	r24, 0xE8	; 232
    1c30:	91 e0       	ldi	r25, 0x01	; 1
    1c32:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <__udivmodsi4>
    1c36:	ca 01       	movw	r24, r20
    1c38:	b9 01       	movw	r22, r18
    1c3a:	a7 01       	movw	r20, r14
    1c3c:	96 01       	movw	r18, r12
    1c3e:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <__udivmodsi4>
    1c42:	28 87       	std	Y+8, r18	; 0x08
    1c44:	39 87       	std	Y+9, r19	; 0x09

	/* Make sure our period is at least 100 ticks so we are able to provide
	   a full range (0-100% duty cycle */
	if (config->period < 100) {
    1c46:	24 36       	cpi	r18, 0x64	; 100
    1c48:	31 05       	cpc	r19, r1
    1c4a:	20 f4       	brcc	.+8      	; 0x1c54 <pwm_set_frequency+0xe8>
		/* The period is too short. */
		config->clk_sel = PWM_CLK_OFF;
    1c4c:	1e 82       	std	Y+6, r1	; 0x06
    1c4e:	1f 82       	std	Y+7, r1	; 0x07
		config->period = 0;
    1c50:	18 86       	std	Y+8, r1	; 0x08
    1c52:	19 86       	std	Y+9, r1	; 0x09
		Assert(false);
	}
}
    1c54:	df 91       	pop	r29
    1c56:	cf 91       	pop	r28
    1c58:	ff 90       	pop	r15
    1c5a:	ef 90       	pop	r14
    1c5c:	df 90       	pop	r13
    1c5e:	cf 90       	pop	r12
    1c60:	08 95       	ret

00001c62 <pwm_init>:
 * \param channel \ref pwm_channel_t "CC channel" to use for this PWM.
 * \param freq_hz Frequency to use for this PWM.
  */
void pwm_init(struct pwm_config *config, enum pwm_tc_t tc,
		enum pwm_channel_t channel, uint16_t freq_hz)
{
    1c62:	0f 93       	push	r16
    1c64:	1f 93       	push	r17
    1c66:	cf 93       	push	r28
    1c68:	df 93       	push	r29
    1c6a:	ec 01       	movw	r28, r24
    1c6c:	89 01       	movw	r16, r18
	/* Number of channels for this TC */
	uint8_t num_chan = 0;
	UNUSED(num_chan);

	/* Set TC and correct I/O pin to output */
	switch (tc) {
    1c6e:	62 30       	cpi	r22, 0x02	; 2
    1c70:	71 05       	cpc	r23, r1
    1c72:	e1 f1       	breq	.+120    	; 0x1cec <pwm_init+0x8a>
    1c74:	40 f4       	brcc	.+16     	; 0x1c86 <pwm_init+0x24>
    1c76:	61 15       	cp	r22, r1
    1c78:	71 05       	cpc	r23, r1
    1c7a:	71 f0       	breq	.+28     	; 0x1c98 <pwm_init+0x36>
    1c7c:	61 30       	cpi	r22, 0x01	; 1
    1c7e:	71 05       	cpc	r23, r1
    1c80:	09 f0       	breq	.+2      	; 0x1c84 <pwm_init+0x22>
    1c82:	72 c0       	rjmp	.+228    	; 0x1d68 <pwm_init+0x106>
    1c84:	1e c0       	rjmp	.+60     	; 0x1cc2 <pwm_init+0x60>
    1c86:	63 30       	cpi	r22, 0x03	; 3
    1c88:	71 05       	cpc	r23, r1
    1c8a:	09 f4       	brne	.+2      	; 0x1c8e <pwm_init+0x2c>
    1c8c:	44 c0       	rjmp	.+136    	; 0x1d16 <pwm_init+0xb4>
    1c8e:	64 30       	cpi	r22, 0x04	; 4
    1c90:	71 05       	cpc	r23, r1
    1c92:	09 f0       	breq	.+2      	; 0x1c96 <pwm_init+0x34>
    1c94:	69 c0       	rjmp	.+210    	; 0x1d68 <pwm_init+0x106>
    1c96:	54 c0       	rjmp	.+168    	; 0x1d40 <pwm_init+0xde>
#if defined(TCC0)
	case PWM_TCC0:
		config->tc = &TCC0;
    1c98:	80 e0       	ldi	r24, 0x00	; 0
    1c9a:	98 e0       	ldi	r25, 0x08	; 8
    1c9c:	88 83       	st	Y, r24
    1c9e:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIR |= (1 << (channel-1));
    1ca0:	e0 e4       	ldi	r30, 0x40	; 64
    1ca2:	f6 e0       	ldi	r31, 0x06	; 6
    1ca4:	a0 81       	ld	r26, Z
    1ca6:	9a 01       	movw	r18, r20
    1ca8:	21 50       	subi	r18, 0x01	; 1
    1caa:	31 09       	sbc	r19, r1
    1cac:	61 e0       	ldi	r22, 0x01	; 1
    1cae:	70 e0       	ldi	r23, 0x00	; 0
    1cb0:	cb 01       	movw	r24, r22
    1cb2:	02 c0       	rjmp	.+4      	; 0x1cb8 <pwm_init+0x56>
    1cb4:	88 0f       	add	r24, r24
    1cb6:	99 1f       	adc	r25, r25
    1cb8:	2a 95       	dec	r18
    1cba:	e2 f7       	brpl	.-8      	; 0x1cb4 <pwm_init+0x52>
    1cbc:	8a 2b       	or	r24, r26
    1cbe:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    1cc0:	53 c0       	rjmp	.+166    	; 0x1d68 <pwm_init+0x106>
#endif
#if defined(TCC1)
	case PWM_TCC1:
		config->tc = &TCC1;
    1cc2:	80 e4       	ldi	r24, 0x40	; 64
    1cc4:	98 e0       	ldi	r25, 0x08	; 8
    1cc6:	88 83       	st	Y, r24
    1cc8:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIR |= (1 << (channel+3));
    1cca:	e0 e4       	ldi	r30, 0x40	; 64
    1ccc:	f6 e0       	ldi	r31, 0x06	; 6
    1cce:	a0 81       	ld	r26, Z
    1cd0:	9a 01       	movw	r18, r20
    1cd2:	2d 5f       	subi	r18, 0xFD	; 253
    1cd4:	3f 4f       	sbci	r19, 0xFF	; 255
    1cd6:	61 e0       	ldi	r22, 0x01	; 1
    1cd8:	70 e0       	ldi	r23, 0x00	; 0
    1cda:	cb 01       	movw	r24, r22
    1cdc:	02 c0       	rjmp	.+4      	; 0x1ce2 <pwm_init+0x80>
    1cde:	88 0f       	add	r24, r24
    1ce0:	99 1f       	adc	r25, r25
    1ce2:	2a 95       	dec	r18
    1ce4:	e2 f7       	brpl	.-8      	; 0x1cde <pwm_init+0x7c>
    1ce6:	8a 2b       	or	r24, r26
    1ce8:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    1cea:	3e c0       	rjmp	.+124    	; 0x1d68 <pwm_init+0x106>
#endif
#if defined(TCD0)
	case PWM_TCD0:
		config->tc = &TCD0;
    1cec:	80 e0       	ldi	r24, 0x00	; 0
    1cee:	99 e0       	ldi	r25, 0x09	; 9
    1cf0:	88 83       	st	Y, r24
    1cf2:	99 83       	std	Y+1, r25	; 0x01
		PORTD.DIR |= (1 << (channel-1));
    1cf4:	e0 e6       	ldi	r30, 0x60	; 96
    1cf6:	f6 e0       	ldi	r31, 0x06	; 6
    1cf8:	a0 81       	ld	r26, Z
    1cfa:	9a 01       	movw	r18, r20
    1cfc:	21 50       	subi	r18, 0x01	; 1
    1cfe:	31 09       	sbc	r19, r1
    1d00:	61 e0       	ldi	r22, 0x01	; 1
    1d02:	70 e0       	ldi	r23, 0x00	; 0
    1d04:	cb 01       	movw	r24, r22
    1d06:	02 c0       	rjmp	.+4      	; 0x1d0c <pwm_init+0xaa>
    1d08:	88 0f       	add	r24, r24
    1d0a:	99 1f       	adc	r25, r25
    1d0c:	2a 95       	dec	r18
    1d0e:	e2 f7       	brpl	.-8      	; 0x1d08 <pwm_init+0xa6>
    1d10:	8a 2b       	or	r24, r26
    1d12:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    1d14:	29 c0       	rjmp	.+82     	; 0x1d68 <pwm_init+0x106>
#endif
#if defined(TCD1)
	case PWM_TCD1:
		config->tc = &TCD1;
    1d16:	80 e4       	ldi	r24, 0x40	; 64
    1d18:	99 e0       	ldi	r25, 0x09	; 9
    1d1a:	88 83       	st	Y, r24
    1d1c:	99 83       	std	Y+1, r25	; 0x01
		PORTD.DIR |= (1 << (channel+3));
    1d1e:	e0 e6       	ldi	r30, 0x60	; 96
    1d20:	f6 e0       	ldi	r31, 0x06	; 6
    1d22:	a0 81       	ld	r26, Z
    1d24:	9a 01       	movw	r18, r20
    1d26:	2d 5f       	subi	r18, 0xFD	; 253
    1d28:	3f 4f       	sbci	r19, 0xFF	; 255
    1d2a:	61 e0       	ldi	r22, 0x01	; 1
    1d2c:	70 e0       	ldi	r23, 0x00	; 0
    1d2e:	cb 01       	movw	r24, r22
    1d30:	02 c0       	rjmp	.+4      	; 0x1d36 <pwm_init+0xd4>
    1d32:	88 0f       	add	r24, r24
    1d34:	99 1f       	adc	r25, r25
    1d36:	2a 95       	dec	r18
    1d38:	e2 f7       	brpl	.-8      	; 0x1d32 <pwm_init+0xd0>
    1d3a:	8a 2b       	or	r24, r26
    1d3c:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    1d3e:	14 c0       	rjmp	.+40     	; 0x1d68 <pwm_init+0x106>
#endif

#if defined(TCE0)
	case PWM_TCE0:
		config->tc = &TCE0;
    1d40:	80 e0       	ldi	r24, 0x00	; 0
    1d42:	9a e0       	ldi	r25, 0x0A	; 10
    1d44:	88 83       	st	Y, r24
    1d46:	99 83       	std	Y+1, r25	; 0x01
		PORTE.DIR |= (1 << (channel-1));
    1d48:	e0 e8       	ldi	r30, 0x80	; 128
    1d4a:	f6 e0       	ldi	r31, 0x06	; 6
    1d4c:	a0 81       	ld	r26, Z
    1d4e:	9a 01       	movw	r18, r20
    1d50:	21 50       	subi	r18, 0x01	; 1
    1d52:	31 09       	sbc	r19, r1
    1d54:	61 e0       	ldi	r22, 0x01	; 1
    1d56:	70 e0       	ldi	r23, 0x00	; 0
    1d58:	cb 01       	movw	r24, r22
    1d5a:	02 c0       	rjmp	.+4      	; 0x1d60 <pwm_init+0xfe>
    1d5c:	88 0f       	add	r24, r24
    1d5e:	99 1f       	adc	r25, r25
    1d60:	2a 95       	dec	r18
    1d62:	e2 f7       	brpl	.-8      	; 0x1d5c <pwm_init+0xfa>
    1d64:	8a 2b       	or	r24, r26
    1d66:	80 83       	st	Z, r24
	}

	/* Make sure we are not given a channel number larger
	   than this TC can handle */
	Assert(channel <= num_chan);
	config->channel = channel;
    1d68:	4a 83       	std	Y+2, r20	; 0x02
    1d6a:	5b 83       	std	Y+3, r21	; 0x03

	/* Set the correct cc_mask */
	switch (channel) {
    1d6c:	42 30       	cpi	r20, 0x02	; 2
    1d6e:	51 05       	cpc	r21, r1
    1d70:	89 f0       	breq	.+34     	; 0x1d94 <pwm_init+0x132>
    1d72:	20 f4       	brcc	.+8      	; 0x1d7c <pwm_init+0x11a>
    1d74:	41 30       	cpi	r20, 0x01	; 1
    1d76:	51 05       	cpc	r21, r1
    1d78:	d9 f4       	brne	.+54     	; 0x1db0 <pwm_init+0x14e>
    1d7a:	07 c0       	rjmp	.+14     	; 0x1d8a <pwm_init+0x128>
    1d7c:	43 30       	cpi	r20, 0x03	; 3
    1d7e:	51 05       	cpc	r21, r1
    1d80:	71 f0       	breq	.+28     	; 0x1d9e <pwm_init+0x13c>
    1d82:	44 30       	cpi	r20, 0x04	; 4
    1d84:	51 05       	cpc	r21, r1
    1d86:	a1 f4       	brne	.+40     	; 0x1db0 <pwm_init+0x14e>
    1d88:	0f c0       	rjmp	.+30     	; 0x1da8 <pwm_init+0x146>
	case PWM_CH_A:
		config->cc_mask = TC_CCAEN;
    1d8a:	80 e1       	ldi	r24, 0x10	; 16
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	8c 83       	std	Y+4, r24	; 0x04
    1d90:	9d 83       	std	Y+5, r25	; 0x05
		break;
    1d92:	0e c0       	rjmp	.+28     	; 0x1db0 <pwm_init+0x14e>
	case PWM_CH_B:
		config->cc_mask = TC_CCBEN;
    1d94:	80 e2       	ldi	r24, 0x20	; 32
    1d96:	90 e0       	ldi	r25, 0x00	; 0
    1d98:	8c 83       	std	Y+4, r24	; 0x04
    1d9a:	9d 83       	std	Y+5, r25	; 0x05
		break;
    1d9c:	09 c0       	rjmp	.+18     	; 0x1db0 <pwm_init+0x14e>
	case PWM_CH_C:
		config->cc_mask = TC_CCCEN;
    1d9e:	80 e4       	ldi	r24, 0x40	; 64
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	8c 83       	std	Y+4, r24	; 0x04
    1da4:	9d 83       	std	Y+5, r25	; 0x05
		break;
    1da6:	04 c0       	rjmp	.+8      	; 0x1db0 <pwm_init+0x14e>
	case PWM_CH_D:
		config->cc_mask = TC_CCDEN;
    1da8:	80 e8       	ldi	r24, 0x80	; 128
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	8c 83       	std	Y+4, r24	; 0x04
    1dae:	9d 83       	std	Y+5, r25	; 0x05
		Assert(false);
		break;
	}

	/* Enable peripheral clock for this TC */
	tc_enable(config->tc);
    1db0:	88 81       	ld	r24, Y
    1db2:	99 81       	ldd	r25, Y+1	; 0x01
    1db4:	72 db       	rcall	.-2332   	; 0x149a <tc_enable>

	/* Set this TC's waveform generator in single slope mode */
	tc_set_wgm(config->tc, TC_WG_SS);
    1db6:	e8 81       	ld	r30, Y
    1db8:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    1dba:	81 81       	ldd	r24, Z+1	; 0x01
    1dbc:	88 7f       	andi	r24, 0xF8	; 248
    1dbe:	83 60       	ori	r24, 0x03	; 3
    1dc0:	81 83       	std	Z+1, r24	; 0x01

	/* Default values (disable TC and set minimum period)*/
	config->period = 0;
    1dc2:	18 86       	std	Y+8, r1	; 0x08
    1dc4:	19 86       	std	Y+9, r1	; 0x09
	config->clk_sel = PWM_CLK_OFF;
    1dc6:	1e 82       	std	Y+6, r1	; 0x06
    1dc8:	1f 82       	std	Y+7, r1	; 0x07
	tc_write_clock_source(config->tc, PWM_CLK_OFF);
    1dca:	e8 81       	ld	r30, Y
    1dcc:	f9 81       	ldd	r31, Y+1	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    1dce:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    1dd0:	80 7f       	andi	r24, 0xF0	; 240
    1dd2:	80 83       	st	Z, r24

	/* Set the PWM frequency */
	pwm_set_frequency(config, freq_hz);
    1dd4:	b8 01       	movw	r22, r16
    1dd6:	ce 01       	movw	r24, r28
    1dd8:	c9 de       	rcall	.-622    	; 0x1b6c <pwm_set_frequency>
}
    1dda:	df 91       	pop	r29
    1ddc:	cf 91       	pop	r28
    1dde:	1f 91       	pop	r17
    1de0:	0f 91       	pop	r16
    1de2:	08 95       	ret

00001de4 <pwm_start>:
 *
 * \param *config           Pointer to the PWM configuration struct
 * \param duty_cycle_scale  Duty cycle as a value between 0 and 100.
 */
void pwm_start(struct pwm_config *config, uint8_t duty_cycle_scale)
{
    1de4:	cf 93       	push	r28
    1de6:	df 93       	push	r29
    1de8:	ec 01       	movw	r28, r24
static inline void pwm_set_duty_cycle_percent(struct pwm_config *config,
		uint8_t duty_cycle_scale)
{
	Assert( duty_cycle_scale <= 100 );
	tc_write_cc_buffer(config->tc, config->channel,
			(uint16_t)(((uint32_t)config->period *
    1dea:	a8 85       	ldd	r26, Y+8	; 0x08
    1dec:	b9 85       	ldd	r27, Y+9	; 0x09
    1dee:	26 2f       	mov	r18, r22
    1df0:	30 e0       	ldi	r19, 0x00	; 0
    1df2:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <__umulhisi3>
			(uint32_t)duty_cycle_scale) / 100));
    1df6:	24 e6       	ldi	r18, 0x64	; 100
    1df8:	30 e0       	ldi	r19, 0x00	; 0
    1dfa:	40 e0       	ldi	r20, 0x00	; 0
    1dfc:	50 e0       	ldi	r21, 0x00	; 0
    1dfe:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <__udivmodsi4>
 */
static inline void pwm_set_duty_cycle_percent(struct pwm_config *config,
		uint8_t duty_cycle_scale)
{
	Assert( duty_cycle_scale <= 100 );
	tc_write_cc_buffer(config->tc, config->channel,
    1e02:	8a 81       	ldd	r24, Y+2	; 0x02
    1e04:	9b 81       	ldd	r25, Y+3	; 0x03
    1e06:	e8 81       	ld	r30, Y
    1e08:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param buffer_value Counter Buffer value
 */
static inline void tc_write_cc_buffer(volatile void *tc,
		enum tc_cc_channel_t channel_index, uint16_t buffer_value)
{
	if (tc_is_tc0(void *tc)) {
    1e0a:	e6 fd       	sbrc	r30, 6
    1e0c:	19 c0       	rjmp	.+50     	; 0x1e40 <pwm_start+0x5c>
		switch (channel_index) {
    1e0e:	82 30       	cpi	r24, 0x02	; 2
    1e10:	91 05       	cpc	r25, r1
    1e12:	69 f0       	breq	.+26     	; 0x1e2e <pwm_start+0x4a>
    1e14:	18 f4       	brcc	.+6      	; 0x1e1c <pwm_start+0x38>
    1e16:	01 97       	sbiw	r24, 0x01	; 1
    1e18:	f1 f4       	brne	.+60     	; 0x1e56 <pwm_start+0x72>
    1e1a:	06 c0       	rjmp	.+12     	; 0x1e28 <pwm_start+0x44>
    1e1c:	83 30       	cpi	r24, 0x03	; 3
    1e1e:	91 05       	cpc	r25, r1
    1e20:	49 f0       	breq	.+18     	; 0x1e34 <pwm_start+0x50>
    1e22:	04 97       	sbiw	r24, 0x04	; 4
    1e24:	c1 f4       	brne	.+48     	; 0x1e56 <pwm_start+0x72>
    1e26:	09 c0       	rjmp	.+18     	; 0x1e3a <pwm_start+0x56>
		case TC_CCA:
			((TC0_t *)tc)->CCABUF = buffer_value;
    1e28:	20 af       	std	Z+56, r18	; 0x38
    1e2a:	31 af       	std	Z+57, r19	; 0x39
    1e2c:	14 c0       	rjmp	.+40     	; 0x1e56 <pwm_start+0x72>
			break;
		case TC_CCB:
			((TC0_t *)tc)->CCBBUF = buffer_value;
    1e2e:	22 af       	std	Z+58, r18	; 0x3a
    1e30:	33 af       	std	Z+59, r19	; 0x3b
    1e32:	11 c0       	rjmp	.+34     	; 0x1e56 <pwm_start+0x72>
			break;
		case TC_CCC:
			((TC0_t *)tc)->CCCBUF = buffer_value;
    1e34:	24 af       	std	Z+60, r18	; 0x3c
    1e36:	35 af       	std	Z+61, r19	; 0x3d
    1e38:	0e c0       	rjmp	.+28     	; 0x1e56 <pwm_start+0x72>
			break;
		case TC_CCD:
			((TC0_t *)tc)->CCDBUF = buffer_value;
    1e3a:	26 af       	std	Z+62, r18	; 0x3e
    1e3c:	37 af       	std	Z+63, r19	; 0x3f
    1e3e:	0b c0       	rjmp	.+22     	; 0x1e56 <pwm_start+0x72>
			break;
		}
	} else if (tc_is_tc1(void *tc)) {
			switch (channel_index) {
    1e40:	81 30       	cpi	r24, 0x01	; 1
    1e42:	91 05       	cpc	r25, r1
    1e44:	19 f0       	breq	.+6      	; 0x1e4c <pwm_start+0x68>
    1e46:	02 97       	sbiw	r24, 0x02	; 2
    1e48:	31 f4       	brne	.+12     	; 0x1e56 <pwm_start+0x72>
    1e4a:	03 c0       	rjmp	.+6      	; 0x1e52 <pwm_start+0x6e>
			case TC_CCA:
				((TC1_t *)tc)->CCABUF = buffer_value;
    1e4c:	20 af       	std	Z+56, r18	; 0x38
    1e4e:	31 af       	std	Z+57, r19	; 0x39
    1e50:	02 c0       	rjmp	.+4      	; 0x1e56 <pwm_start+0x72>
				break;
			case TC_CCB:
				((TC1_t *)tc)->CCBBUF = buffer_value;
    1e52:	22 af       	std	Z+58, r18	; 0x3a
    1e54:	33 af       	std	Z+59, r19	; 0x3b
	/* Set given duty cycle */
	pwm_set_duty_cycle_percent(config, duty_cycle_scale);
	/* Set correct TC period */
	tc_write_period(config->tc, config->period);
    1e56:	88 85       	ldd	r24, Y+8	; 0x08
    1e58:	99 85       	ldd	r25, Y+9	; 0x09
    1e5a:	e8 81       	ld	r30, Y
    1e5c:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    1e5e:	86 a3       	std	Z+38, r24	; 0x26
    1e60:	97 a3       	std	Z+39, r25	; 0x27
	/* Enable CC channel for this TC */
	tc_enable_cc_channels(config->tc, config->cc_mask);
    1e62:	8c 81       	ldd	r24, Y+4	; 0x04
    1e64:	9d 81       	ldd	r25, Y+5	; 0x05
    1e66:	e8 81       	ld	r30, Y
    1e68:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param enablemask CC channel
 */
static inline void tc_enable_cc_channels(volatile void *tc,
		enum tc_cc_channel_mask_enable_t enablemask)
{
	if (tc_is_tc0(void *tc)) {
    1e6a:	e6 fd       	sbrc	r30, 6
    1e6c:	04 c0       	rjmp	.+8      	; 0x1e76 <pwm_start+0x92>
		((TC0_t *)tc)->CTRLB |= enablemask;
    1e6e:	91 81       	ldd	r25, Z+1	; 0x01
    1e70:	89 2b       	or	r24, r25
    1e72:	81 83       	std	Z+1, r24	; 0x01
    1e74:	05 c0       	rjmp	.+10     	; 0x1e80 <pwm_start+0x9c>
	} else if (tc_is_tc1(void *tc)) {
		((TC1_t *)tc)->CTRLB |=
    1e76:	21 81       	ldd	r18, Z+1	; 0x01
    1e78:	80 73       	andi	r24, 0x30	; 48
    1e7a:	99 27       	eor	r25, r25
    1e7c:	82 2b       	or	r24, r18
    1e7e:	81 83       	std	Z+1, r24	; 0x01
	/* Enable TC by setting correct clock prescaler */
	tc_write_clock_source(config->tc, config->clk_sel);
    1e80:	e8 81       	ld	r30, Y
    1e82:	f9 81       	ldd	r31, Y+1	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    1e84:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    1e86:	80 7f       	andi	r24, 0xF0	; 240
    1e88:	9e 81       	ldd	r25, Y+6	; 0x06
    1e8a:	89 2b       	or	r24, r25
    1e8c:	80 83       	st	Z, r24
}
    1e8e:	df 91       	pop	r29
    1e90:	cf 91       	pop	r28
    1e92:	08 95       	ret

00001e94 <tick_handler>:
 * \param id      \ref timeout_id_t
 * \param period  Time period in number of ticks
 */
void timeout_start_periodic(timeout_id_t id, uint16_t period)
{
	timeout_start_offset(id, period, period);
    1e94:	cf 93       	push	r28
    1e96:	df 93       	push	r29
    1e98:	c0 91 78 25 	lds	r28, 0x2578
    1e9c:	d0 91 99 25 	lds	r29, 0x2599
    1ea0:	e9 e7       	ldi	r30, 0x79	; 121
    1ea2:	f5 e2       	ldi	r31, 0x25	; 37
    1ea4:	80 e0       	ldi	r24, 0x00	; 0
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	61 e0       	ldi	r22, 0x01	; 1
    1eaa:	70 e0       	ldi	r23, 0x00	; 0
    1eac:	2c 2f       	mov	r18, r28
    1eae:	30 e0       	ldi	r19, 0x00	; 0
    1eb0:	08 2e       	mov	r0, r24
    1eb2:	02 c0       	rjmp	.+4      	; 0x1eb8 <tick_handler+0x24>
    1eb4:	35 95       	asr	r19
    1eb6:	27 95       	ror	r18
    1eb8:	0a 94       	dec	r0
    1eba:	e2 f7       	brpl	.-8      	; 0x1eb4 <tick_handler+0x20>
    1ebc:	20 ff       	sbrs	r18, 0
    1ebe:	1a c0       	rjmp	.+52     	; 0x1ef4 <tick_handler+0x60>
    1ec0:	20 81       	ld	r18, Z
    1ec2:	31 81       	ldd	r19, Z+1	; 0x01
    1ec4:	21 50       	subi	r18, 0x01	; 1
    1ec6:	31 09       	sbc	r19, r1
    1ec8:	20 83       	st	Z, r18
    1eca:	31 83       	std	Z+1, r19	; 0x01
    1ecc:	23 2b       	or	r18, r19
    1ece:	91 f4       	brne	.+36     	; 0x1ef4 <tick_handler+0x60>
    1ed0:	9b 01       	movw	r18, r22
    1ed2:	08 2e       	mov	r0, r24
    1ed4:	02 c0       	rjmp	.+4      	; 0x1eda <tick_handler+0x46>
    1ed6:	22 0f       	add	r18, r18
    1ed8:	33 1f       	adc	r19, r19
    1eda:	0a 94       	dec	r0
    1edc:	e2 f7       	brpl	.-8      	; 0x1ed6 <tick_handler+0x42>
    1ede:	d2 2b       	or	r29, r18
    1ee0:	42 81       	ldd	r20, Z+2	; 0x02
    1ee2:	53 81       	ldd	r21, Z+3	; 0x03
    1ee4:	41 15       	cp	r20, r1
    1ee6:	51 05       	cpc	r21, r1
    1ee8:	19 f0       	breq	.+6      	; 0x1ef0 <tick_handler+0x5c>
    1eea:	40 83       	st	Z, r20
    1eec:	51 83       	std	Z+1, r21	; 0x01
    1eee:	02 c0       	rjmp	.+4      	; 0x1ef4 <tick_handler+0x60>
    1ef0:	20 95       	com	r18
    1ef2:	c2 23       	and	r28, r18
    1ef4:	01 96       	adiw	r24, 0x01	; 1
    1ef6:	34 96       	adiw	r30, 0x04	; 4
    1ef8:	88 30       	cpi	r24, 0x08	; 8
    1efa:	91 05       	cpc	r25, r1
    1efc:	b9 f6       	brne	.-82     	; 0x1eac <tick_handler+0x18>
    1efe:	c0 93 78 25 	sts	0x2578, r28
    1f02:	d0 93 99 25 	sts	0x2599, r29
    1f06:	60 e0       	ldi	r22, 0x00	; 0
    1f08:	70 e0       	ldi	r23, 0x00	; 0
    1f0a:	cb 01       	movw	r24, r22
    1f0c:	0e 94 20 05 	call	0xa40	; 0xa40 <rtc_set_time>
    1f10:	60 e8       	ldi	r22, 0x80	; 128
    1f12:	70 e0       	ldi	r23, 0x00	; 0
    1f14:	80 e0       	ldi	r24, 0x00	; 0
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	0e 94 5d 05 	call	0xaba	; 0xaba <rtc_set_alarm>
    1f1c:	df 91       	pop	r29
    1f1e:	cf 91       	pop	r28
    1f20:	08 95       	ret

00001f22 <timeout_init>:
    1f22:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <rtc_init>
    1f26:	8a e4       	ldi	r24, 0x4A	; 74
    1f28:	9f e0       	ldi	r25, 0x0F	; 15
    1f2a:	0e 94 75 05 	call	0xaea	; 0xaea <rtc_set_callback>
    1f2e:	60 e0       	ldi	r22, 0x00	; 0
    1f30:	70 e0       	ldi	r23, 0x00	; 0
    1f32:	cb 01       	movw	r24, r22
    1f34:	0e 94 20 05 	call	0xa40	; 0xa40 <rtc_set_time>
    1f38:	60 e8       	ldi	r22, 0x80	; 128
    1f3a:	70 e0       	ldi	r23, 0x00	; 0
    1f3c:	80 e0       	ldi	r24, 0x00	; 0
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	0c 94 5d 05 	jmp	0xaba	; 0xaba <rtc_set_alarm>

00001f44 <timeout_start_offset>:
    1f44:	88 30       	cpi	r24, 0x08	; 8
    1f46:	18 f5       	brcc	.+70     	; 0x1f8e <timeout_start_offset+0x4a>
    1f48:	af b7       	in	r26, 0x3f	; 63
    1f4a:	f8 94       	cli
    1f4c:	e8 2f       	mov	r30, r24
    1f4e:	f0 e0       	ldi	r31, 0x00	; 0
    1f50:	ee 0f       	add	r30, r30
    1f52:	ff 1f       	adc	r31, r31
    1f54:	ee 0f       	add	r30, r30
    1f56:	ff 1f       	adc	r31, r31
    1f58:	e7 58       	subi	r30, 0x87	; 135
    1f5a:	fa 4d       	sbci	r31, 0xDA	; 218
    1f5c:	40 83       	st	Z, r20
    1f5e:	51 83       	std	Z+1, r21	; 0x01
    1f60:	62 83       	std	Z+2, r22	; 0x02
    1f62:	73 83       	std	Z+3, r23	; 0x03
    1f64:	21 e0       	ldi	r18, 0x01	; 1
    1f66:	30 e0       	ldi	r19, 0x00	; 0
    1f68:	a9 01       	movw	r20, r18
    1f6a:	02 c0       	rjmp	.+4      	; 0x1f70 <timeout_start_offset+0x2c>
    1f6c:	44 0f       	add	r20, r20
    1f6e:	55 1f       	adc	r21, r21
    1f70:	8a 95       	dec	r24
    1f72:	e2 f7       	brpl	.-8      	; 0x1f6c <timeout_start_offset+0x28>
    1f74:	ca 01       	movw	r24, r20
    1f76:	90 91 78 25 	lds	r25, 0x2578
    1f7a:	98 2b       	or	r25, r24
    1f7c:	90 93 78 25 	sts	0x2578, r25
    1f80:	80 95       	com	r24
    1f82:	90 91 99 25 	lds	r25, 0x2599
    1f86:	89 23       	and	r24, r25
    1f88:	80 93 99 25 	sts	0x2599, r24
    1f8c:	af bf       	out	0x3f, r26	; 63
    1f8e:	08 95       	ret

00001f90 <timeout_start_singleshot>:
    1f90:	ab 01       	movw	r20, r22
    1f92:	60 e0       	ldi	r22, 0x00	; 0
    1f94:	70 e0       	ldi	r23, 0x00	; 0
    1f96:	d6 cf       	rjmp	.-84     	; 0x1f44 <timeout_start_offset>

00001f98 <timeout_test_and_clear_expired>:
 * \retval false  Timer still running
 */
bool timeout_test_and_clear_expired(timeout_id_t id)
{
	/* Check that ID within the TIMEOUT_COUNT range */
	if (id < TIMEOUT_COUNT) {
    1f98:	88 30       	cpi	r24, 0x08	; 8
    1f9a:	f8 f4       	brcc	.+62     	; 0x1fda <timeout_test_and_clear_expired+0x42>
		irqflags_t flags;

		/* Check if timeout has expired */
		if (timeout_expired & (1 << id)) {
    1f9c:	20 91 99 25 	lds	r18, 0x2599
    1fa0:	30 e0       	ldi	r19, 0x00	; 0
    1fa2:	08 2e       	mov	r0, r24
    1fa4:	02 c0       	rjmp	.+4      	; 0x1faa <timeout_test_and_clear_expired+0x12>
    1fa6:	35 95       	asr	r19
    1fa8:	27 95       	ror	r18
    1faa:	0a 94       	dec	r0
    1fac:	e2 f7       	brpl	.-8      	; 0x1fa6 <timeout_test_and_clear_expired+0xe>
    1fae:	20 ff       	sbrs	r18, 0
    1fb0:	16 c0       	rjmp	.+44     	; 0x1fde <timeout_test_and_clear_expired+0x46>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1fb2:	4f b7       	in	r20, 0x3f	; 63
	cpu_irq_disable();
    1fb4:	f8 94       	cli
			flags = cpu_irq_save();
			timeout_expired &= ~(1 << id);
    1fb6:	21 e0       	ldi	r18, 0x01	; 1
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	b9 01       	movw	r22, r18
    1fbc:	02 c0       	rjmp	.+4      	; 0x1fc2 <timeout_test_and_clear_expired+0x2a>
    1fbe:	66 0f       	add	r22, r22
    1fc0:	77 1f       	adc	r23, r23
    1fc2:	8a 95       	dec	r24
    1fc4:	e2 f7       	brpl	.-8      	; 0x1fbe <timeout_test_and_clear_expired+0x26>
    1fc6:	cb 01       	movw	r24, r22
    1fc8:	80 95       	com	r24
    1fca:	90 91 99 25 	lds	r25, 0x2599
    1fce:	89 23       	and	r24, r25
    1fd0:	80 93 99 25 	sts	0x2599, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1fd4:	4f bf       	out	0x3f, r20	; 63
			cpu_irq_restore(flags);
			return true;
    1fd6:	81 e0       	ldi	r24, 0x01	; 1
    1fd8:	08 95       	ret
		}
	}

	return false;
    1fda:	80 e0       	ldi	r24, 0x00	; 0
    1fdc:	08 95       	ret
    1fde:	80 e0       	ldi	r24, 0x00	; 0
}
    1fe0:	08 95       	ret

00001fe2 <timeout_stop>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1fe2:	4f b7       	in	r20, 0x3f	; 63
	cpu_irq_disable();
    1fe4:	f8 94       	cli
 */
void timeout_stop(timeout_id_t id)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	timeout_active &= ~(1 << id);
    1fe6:	21 e0       	ldi	r18, 0x01	; 1
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	b9 01       	movw	r22, r18
    1fec:	02 c0       	rjmp	.+4      	; 0x1ff2 <timeout_stop+0x10>
    1fee:	66 0f       	add	r22, r22
    1ff0:	77 1f       	adc	r23, r23
    1ff2:	8a 95       	dec	r24
    1ff4:	e2 f7       	brpl	.-8      	; 0x1fee <timeout_stop+0xc>
    1ff6:	cb 01       	movw	r24, r22
    1ff8:	80 95       	com	r24
    1ffa:	90 91 78 25 	lds	r25, 0x2578
    1ffe:	89 23       	and	r24, r25
    2000:	80 93 78 25 	sts	0x2578, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2004:	4f bf       	out	0x3f, r20	; 63
    2006:	08 95       	ret

00002008 <get_current_pulse_counter>:
        _DEBUG_putc((char)nvm_eeprom_read_byte(addr));
        DEBUG_puts("\n \r");
        addr++;
    }
    return 0;
}
    2008:	8f b7       	in	r24, 0x3f	; 63
    200a:	f8 94       	cli
    200c:	8f bf       	out	0x3f, r24	; 63
    200e:	60 e0       	ldi	r22, 0x00	; 0
    2010:	70 e0       	ldi	r23, 0x00	; 0
    2012:	cb 01       	movw	r24, r22
    2014:	08 95       	ret

00002016 <get_midnight_pulse_counter>:
    2016:	8f b7       	in	r24, 0x3f	; 63
    2018:	f8 94       	cli
    201a:	8f bf       	out	0x3f, r24	; 63
    201c:	60 e0       	ldi	r22, 0x00	; 0
    201e:	70 e0       	ldi	r23, 0x00	; 0
    2020:	cb 01       	movw	r24, r22
    2022:	08 95       	ret

00002024 <reset_avr>:
    2024:	cf 93       	push	r28
    2026:	df 93       	push	r29
    2028:	cd b7       	in	r28, 0x3d	; 61
    202a:	de b7       	in	r29, 0x3e	; 62
    202c:	61 97       	sbiw	r28, 0x11	; 17
    202e:	cd bf       	out	0x3d, r28	; 61
    2030:	de bf       	out	0x3e, r29	; 62
    2032:	80 e0       	ldi	r24, 0x00	; 0
    2034:	e9 df       	rcall	.-46     	; 0x2008 <get_current_pulse_counter>
    2036:	69 83       	std	Y+1, r22	; 0x01
    2038:	7a 83       	std	Y+2, r23	; 0x02
    203a:	8b 83       	std	Y+3, r24	; 0x03
    203c:	9c 83       	std	Y+4, r25	; 0x04
    203e:	81 e0       	ldi	r24, 0x01	; 1
    2040:	e3 df       	rcall	.-58     	; 0x2008 <get_current_pulse_counter>
    2042:	6d 83       	std	Y+5, r22	; 0x05
    2044:	7e 83       	std	Y+6, r23	; 0x06
    2046:	8f 83       	std	Y+7, r24	; 0x07
    2048:	98 87       	std	Y+8, r25	; 0x08
    204a:	80 e0       	ldi	r24, 0x00	; 0
    204c:	e4 df       	rcall	.-56     	; 0x2016 <get_midnight_pulse_counter>
    204e:	69 87       	std	Y+9, r22	; 0x09
    2050:	7a 87       	std	Y+10, r23	; 0x0a
    2052:	8b 87       	std	Y+11, r24	; 0x0b
    2054:	9c 87       	std	Y+12, r25	; 0x0c
    2056:	81 e0       	ldi	r24, 0x01	; 1
    2058:	de df       	rcall	.-68     	; 0x2016 <get_midnight_pulse_counter>
    205a:	6d 87       	std	Y+13, r22	; 0x0d
    205c:	7e 87       	std	Y+14, r23	; 0x0e
    205e:	8f 87       	std	Y+15, r24	; 0x0f
    2060:	98 8b       	std	Y+16, r25	; 0x10
    2062:	60 e1       	ldi	r22, 0x10	; 16
    2064:	ce 01       	movw	r24, r28
    2066:	01 96       	adiw	r24, 0x01	; 1
    2068:	0e 94 28 01 	call	0x250	; 0x250 <crc8_compute>
    206c:	89 8b       	std	Y+17, r24	; 0x11
    206e:	41 e1       	ldi	r20, 0x11	; 17
    2070:	50 e0       	ldi	r21, 0x00	; 0
    2072:	be 01       	movw	r22, r28
    2074:	6f 5f       	subi	r22, 0xFF	; 255
    2076:	7f 4f       	sbci	r23, 0xFF	; 255
    2078:	83 ec       	ldi	r24, 0xC3	; 195
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	0e 94 df 04 	call	0x9be	; 0x9be <nvm_eeprom_erase_and_write_buffer>
    2080:	e0 ec       	ldi	r30, 0xC0	; 192
    2082:	f1 e0       	ldi	r31, 0x01	; 1
    2084:	87 85       	ldd	r24, Z+15	; 0x0f
    2086:	88 23       	and	r24, r24
    2088:	ec f3       	brlt	.-6      	; 0x2084 <reset_avr+0x60>
    208a:	82 e8       	ldi	r24, 0x82	; 130
    208c:	93 e2       	ldi	r25, 0x23	; 35
    208e:	0e 94 14 03 	call	0x628	; 0x628 <DEBUG_putcrlf>
    2092:	f8 94       	cli
    2094:	61 e0       	ldi	r22, 0x01	; 1
    2096:	89 e7       	ldi	r24, 0x79	; 121
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	0e 94 43 04 	call	0x886	; 0x886 <ccp_write_io>
    209e:	ff cf       	rjmp	.-2      	; 0x209e <reset_avr+0x7a>

000020a0 <__vector_64>:
    20a0:	1f 92       	push	r1
    20a2:	0f 92       	push	r0
    20a4:	0f b6       	in	r0, 0x3f	; 63
    20a6:	0f 92       	push	r0
    20a8:	11 24       	eor	r1, r1
    20aa:	8f 93       	push	r24
    20ac:	ef 93       	push	r30
    20ae:	ff 93       	push	r31
    20b0:	81 e0       	ldi	r24, 0x01	; 1
    20b2:	e0 e6       	ldi	r30, 0x60	; 96
    20b4:	f6 e0       	ldi	r31, 0x06	; 6
    20b6:	84 87       	std	Z+12, r24	; 0x0c
    20b8:	ff 91       	pop	r31
    20ba:	ef 91       	pop	r30
    20bc:	8f 91       	pop	r24
    20be:	0f 90       	pop	r0
    20c0:	0f be       	out	0x3f, r0	; 63
    20c2:	0f 90       	pop	r0
    20c4:	1f 90       	pop	r1
    20c6:	18 95       	reti

000020c8 <__vector_2>:
    20c8:	1f 92       	push	r1
    20ca:	0f 92       	push	r0
    20cc:	0f b6       	in	r0, 0x3f	; 63
    20ce:	0f 92       	push	r0
    20d0:	11 24       	eor	r1, r1
    20d2:	8f 93       	push	r24
    20d4:	ef 93       	push	r30
    20d6:	ff 93       	push	r31
    20d8:	81 e0       	ldi	r24, 0x01	; 1
    20da:	e0 e4       	ldi	r30, 0x40	; 64
    20dc:	f6 e0       	ldi	r31, 0x06	; 6
    20de:	84 87       	std	Z+12, r24	; 0x0c
    20e0:	ff 91       	pop	r31
    20e2:	ef 91       	pop	r30
    20e4:	8f 91       	pop	r24
    20e6:	0f 90       	pop	r0
    20e8:	0f be       	out	0x3f, r0	; 63
    20ea:	0f 90       	pop	r0
    20ec:	1f 90       	pop	r1
    20ee:	18 95       	reti

000020f0 <__vector_34>:
    20f0:	1f 92       	push	r1
    20f2:	0f 92       	push	r0
    20f4:	0f b6       	in	r0, 0x3f	; 63
    20f6:	0f 92       	push	r0
    20f8:	11 24       	eor	r1, r1
    20fa:	8f 93       	push	r24
    20fc:	ef 93       	push	r30
    20fe:	ff 93       	push	r31
    2100:	81 e0       	ldi	r24, 0x01	; 1
    2102:	e0 e2       	ldi	r30, 0x20	; 32
    2104:	f6 e0       	ldi	r31, 0x06	; 6
    2106:	84 87       	std	Z+12, r24	; 0x0c
    2108:	ff 91       	pop	r31
    210a:	ef 91       	pop	r30
    210c:	8f 91       	pop	r24
    210e:	0f 90       	pop	r0
    2110:	0f be       	out	0x3f, r0	; 63
    2112:	0f 90       	pop	r0
    2114:	1f 90       	pop	r1
    2116:	18 95       	reti

00002118 <__vector_66>:
    2118:	1f 92       	push	r1
    211a:	0f 92       	push	r0
    211c:	0f b6       	in	r0, 0x3f	; 63
    211e:	0f 92       	push	r0
    2120:	11 24       	eor	r1, r1
    2122:	8f 93       	push	r24
    2124:	ef 93       	push	r30
    2126:	ff 93       	push	r31
    2128:	81 e0       	ldi	r24, 0x01	; 1
    212a:	e0 e0       	ldi	r30, 0x00	; 0
    212c:	f6 e0       	ldi	r31, 0x06	; 6
    212e:	84 87       	std	Z+12, r24	; 0x0c
    2130:	ff 91       	pop	r31
    2132:	ef 91       	pop	r30
    2134:	8f 91       	pop	r24
    2136:	0f 90       	pop	r0
    2138:	0f be       	out	0x3f, r0	; 63
    213a:	0f 90       	pop	r0
    213c:	1f 90       	pop	r1
    213e:	18 95       	reti

00002140 <wipe_ica1_eeprom>:
    2140:	cf 93       	push	r28
    2142:	df 93       	push	r29
    2144:	81 30       	cpi	r24, 0x01	; 1
    2146:	79 f0       	breq	.+30     	; 0x2166 <wipe_ica1_eeprom+0x26>
    2148:	82 30       	cpi	r24, 0x02	; 2
    214a:	c1 f0       	breq	.+48     	; 0x217c <wipe_ica1_eeprom+0x3c>
    214c:	81 11       	cpse	r24, r1
    214e:	20 c0       	rjmp	.+64     	; 0x2190 <wipe_ica1_eeprom+0x50>
    2150:	c0 e0       	ldi	r28, 0x00	; 0
    2152:	d0 e0       	ldi	r29, 0x00	; 0
    2154:	6f ef       	ldi	r22, 0xFF	; 255
    2156:	ce 01       	movw	r24, r28
    2158:	0e 94 7d 04 	call	0x8fa	; 0x8fa <nvm_eeprom_write_byte>
    215c:	21 96       	adiw	r28, 0x01	; 1
    215e:	c0 31       	cpi	r28, 0x10	; 16
    2160:	d1 05       	cpc	r29, r1
    2162:	c1 f7       	brne	.-16     	; 0x2154 <wipe_ica1_eeprom+0x14>
    2164:	15 c0       	rjmp	.+42     	; 0x2190 <wipe_ica1_eeprom+0x50>
    2166:	ca e0       	ldi	r28, 0x0A	; 10
    2168:	d0 e0       	ldi	r29, 0x00	; 0
    216a:	6f ef       	ldi	r22, 0xFF	; 255
    216c:	ce 01       	movw	r24, r28
    216e:	0e 94 7d 04 	call	0x8fa	; 0x8fa <nvm_eeprom_write_byte>
    2172:	21 96       	adiw	r28, 0x01	; 1
    2174:	c0 32       	cpi	r28, 0x20	; 32
    2176:	d1 05       	cpc	r29, r1
    2178:	c1 f7       	brne	.-16     	; 0x216a <wipe_ica1_eeprom+0x2a>
    217a:	0a c0       	rjmp	.+20     	; 0x2190 <wipe_ica1_eeprom+0x50>
    217c:	c4 e1       	ldi	r28, 0x14	; 20
    217e:	d0 e0       	ldi	r29, 0x00	; 0
    2180:	6f ef       	ldi	r22, 0xFF	; 255
    2182:	ce 01       	movw	r24, r28
    2184:	0e 94 7d 04 	call	0x8fa	; 0x8fa <nvm_eeprom_write_byte>
    2188:	21 96       	adiw	r28, 0x01	; 1
    218a:	c0 33       	cpi	r28, 0x30	; 48
    218c:	d1 05       	cpc	r29, r1
    218e:	c1 f7       	brne	.-16     	; 0x2180 <wipe_ica1_eeprom+0x40>
    2190:	df 91       	pop	r29
    2192:	cf 91       	pop	r28
    2194:	08 95       	ret

00002196 <wipe_ica2_eeprom>:
    2196:	cf 93       	push	r28
    2198:	df 93       	push	r29
    219a:	81 30       	cpi	r24, 0x01	; 1
    219c:	79 f0       	breq	.+30     	; 0x21bc <wipe_ica2_eeprom+0x26>
    219e:	82 30       	cpi	r24, 0x02	; 2
    21a0:	c1 f0       	breq	.+48     	; 0x21d2 <wipe_ica2_eeprom+0x3c>
    21a2:	81 11       	cpse	r24, r1
    21a4:	20 c0       	rjmp	.+64     	; 0x21e6 <wipe_ica2_eeprom+0x50>
    21a6:	ce e1       	ldi	r28, 0x1E	; 30
    21a8:	d0 e0       	ldi	r29, 0x00	; 0
    21aa:	6f ef       	ldi	r22, 0xFF	; 255
    21ac:	ce 01       	movw	r24, r28
    21ae:	0e 94 7d 04 	call	0x8fa	; 0x8fa <nvm_eeprom_write_byte>
    21b2:	21 96       	adiw	r28, 0x01	; 1
    21b4:	c0 34       	cpi	r28, 0x40	; 64
    21b6:	d1 05       	cpc	r29, r1
    21b8:	c1 f7       	brne	.-16     	; 0x21aa <wipe_ica2_eeprom+0x14>
    21ba:	15 c0       	rjmp	.+42     	; 0x21e6 <wipe_ica2_eeprom+0x50>
    21bc:	c8 e2       	ldi	r28, 0x28	; 40
    21be:	d0 e0       	ldi	r29, 0x00	; 0
    21c0:	6f ef       	ldi	r22, 0xFF	; 255
    21c2:	ce 01       	movw	r24, r28
    21c4:	0e 94 7d 04 	call	0x8fa	; 0x8fa <nvm_eeprom_write_byte>
    21c8:	21 96       	adiw	r28, 0x01	; 1
    21ca:	c0 35       	cpi	r28, 0x50	; 80
    21cc:	d1 05       	cpc	r29, r1
    21ce:	c1 f7       	brne	.-16     	; 0x21c0 <wipe_ica2_eeprom+0x2a>
    21d0:	0a c0       	rjmp	.+20     	; 0x21e6 <wipe_ica2_eeprom+0x50>
    21d2:	c2 e3       	ldi	r28, 0x32	; 50
    21d4:	d0 e0       	ldi	r29, 0x00	; 0
    21d6:	6f ef       	ldi	r22, 0xFF	; 255
    21d8:	ce 01       	movw	r24, r28
    21da:	0e 94 7d 04 	call	0x8fa	; 0x8fa <nvm_eeprom_write_byte>
    21de:	21 96       	adiw	r28, 0x01	; 1
    21e0:	c0 36       	cpi	r28, 0x60	; 96
    21e2:	d1 05       	cpc	r29, r1
    21e4:	c1 f7       	brne	.-16     	; 0x21d6 <wipe_ica2_eeprom+0x40>
    21e6:	df 91       	pop	r29
    21e8:	cf 91       	pop	r28
    21ea:	08 95       	ret

000021ec <wipe_ica3_eeprom>:
    21ec:	cf 93       	push	r28
    21ee:	df 93       	push	r29
    21f0:	81 30       	cpi	r24, 0x01	; 1
    21f2:	79 f0       	breq	.+30     	; 0x2212 <wipe_ica3_eeprom+0x26>
    21f4:	82 30       	cpi	r24, 0x02	; 2
    21f6:	c1 f0       	breq	.+48     	; 0x2228 <wipe_ica3_eeprom+0x3c>
    21f8:	81 11       	cpse	r24, r1
    21fa:	20 c0       	rjmp	.+64     	; 0x223c <wipe_ica3_eeprom+0x50>
    21fc:	cc e3       	ldi	r28, 0x3C	; 60
    21fe:	d0 e0       	ldi	r29, 0x00	; 0
    2200:	6f ef       	ldi	r22, 0xFF	; 255
    2202:	ce 01       	movw	r24, r28
    2204:	0e 94 7d 04 	call	0x8fa	; 0x8fa <nvm_eeprom_write_byte>
    2208:	21 96       	adiw	r28, 0x01	; 1
    220a:	c0 37       	cpi	r28, 0x70	; 112
    220c:	d1 05       	cpc	r29, r1
    220e:	c1 f7       	brne	.-16     	; 0x2200 <wipe_ica3_eeprom+0x14>
    2210:	15 c0       	rjmp	.+42     	; 0x223c <wipe_ica3_eeprom+0x50>
    2212:	c6 e4       	ldi	r28, 0x46	; 70
    2214:	d0 e0       	ldi	r29, 0x00	; 0
    2216:	6f ef       	ldi	r22, 0xFF	; 255
    2218:	ce 01       	movw	r24, r28
    221a:	0e 94 7d 04 	call	0x8fa	; 0x8fa <nvm_eeprom_write_byte>
    221e:	21 96       	adiw	r28, 0x01	; 1
    2220:	c0 38       	cpi	r28, 0x80	; 128
    2222:	d1 05       	cpc	r29, r1
    2224:	c1 f7       	brne	.-16     	; 0x2216 <wipe_ica3_eeprom+0x2a>
    2226:	0a c0       	rjmp	.+20     	; 0x223c <wipe_ica3_eeprom+0x50>
    2228:	c0 e5       	ldi	r28, 0x50	; 80
    222a:	d0 e0       	ldi	r29, 0x00	; 0
    222c:	6f ef       	ldi	r22, 0xFF	; 255
    222e:	ce 01       	movw	r24, r28
    2230:	0e 94 7d 04 	call	0x8fa	; 0x8fa <nvm_eeprom_write_byte>
    2234:	21 96       	adiw	r28, 0x01	; 1
    2236:	c0 39       	cpi	r28, 0x90	; 144
    2238:	d1 05       	cpc	r29, r1
    223a:	c1 f7       	brne	.-16     	; 0x222c <wipe_ica3_eeprom+0x40>
    223c:	df 91       	pop	r29
    223e:	cf 91       	pop	r28
    2240:	08 95       	ret

00002242 <get_unsolicited_commands>:
    2242:	cf 92       	push	r12
    2244:	df 92       	push	r13
    2246:	ef 92       	push	r14
    2248:	ff 92       	push	r15
    224a:	0f 93       	push	r16
    224c:	1f 93       	push	r17
    224e:	cf 93       	push	r28
    2250:	df 93       	push	r29
    2252:	6c 01       	movw	r12, r24
    2254:	7b 01       	movw	r14, r22
    2256:	c0 e0       	ldi	r28, 0x00	; 0
    2258:	d0 e0       	ldi	r29, 0x00	; 0
    225a:	8c 01       	movw	r16, r24
    225c:	01 50       	subi	r16, 0x01	; 1
    225e:	11 09       	sbc	r17, r1
    2260:	0e 94 41 03 	call	0x682	; 0x682 <MODEM_get_byte>
    2264:	c0 17       	cp	r28, r16
    2266:	d1 07       	cpc	r29, r17
    2268:	24 f4       	brge	.+8      	; 0x2272 <get_unsolicited_commands+0x30>
    226a:	f7 01       	movw	r30, r14
    226c:	ec 0f       	add	r30, r28
    226e:	fd 1f       	adc	r31, r29
    2270:	80 83       	st	Z, r24
    2272:	21 96       	adiw	r28, 0x01	; 1
    2274:	8d 30       	cpi	r24, 0x0D	; 13
    2276:	11 f0       	breq	.+4      	; 0x227c <get_unsolicited_commands+0x3a>
    2278:	8a 30       	cpi	r24, 0x0A	; 10
    227a:	91 f7       	brne	.-28     	; 0x2260 <get_unsolicited_commands+0x1e>
    227c:	ec 0c       	add	r14, r12
    227e:	fd 1c       	adc	r15, r13
    2280:	f7 01       	movw	r30, r14
    2282:	31 97       	sbiw	r30, 0x01	; 1
    2284:	10 82       	st	Z, r1
    2286:	df 91       	pop	r29
    2288:	cf 91       	pop	r28
    228a:	1f 91       	pop	r17
    228c:	0f 91       	pop	r16
    228e:	ff 90       	pop	r15
    2290:	ef 90       	pop	r14
    2292:	df 90       	pop	r13
    2294:	cf 90       	pop	r12
    2296:	08 95       	ret

00002298 <clear_temp_string>:
    2298:	e6 2f       	mov	r30, r22
    229a:	f7 2f       	mov	r31, r23
    229c:	80 e0       	ldi	r24, 0x00	; 0
    229e:	90 e0       	ldi	r25, 0x00	; 0
    22a0:	11 92       	st	Z+, r1
    22a2:	01 96       	adiw	r24, 0x01	; 1
    22a4:	8c 33       	cpi	r24, 0x3C	; 60
    22a6:	91 05       	cpc	r25, r1
    22a8:	d9 f7       	brne	.-10     	; 0x22a0 <clear_temp_string+0x8>
    22aa:	08 95       	ret

000022ac <ack_job>:
    22ac:	cf 93       	push	r28
    22ae:	df 93       	push	r29
    22b0:	cd b7       	in	r28, 0x3d	; 61
    22b2:	de b7       	in	r29, 0x3e	; 62
    22b4:	ec 97       	sbiw	r28, 0x3c	; 60
    22b6:	cd bf       	out	0x3d, r28	; 61
    22b8:	de bf       	out	0x3e, r29	; 62
    22ba:	23 e1       	ldi	r18, 0x13	; 19
    22bc:	e5 e1       	ldi	r30, 0x15	; 21
    22be:	f0 e2       	ldi	r31, 0x20	; 32
    22c0:	de 01       	movw	r26, r28
    22c2:	11 96       	adiw	r26, 0x01	; 1
    22c4:	01 90       	ld	r0, Z+
    22c6:	0d 92       	st	X+, r0
    22c8:	2a 95       	dec	r18
    22ca:	e1 f7       	brne	.-8      	; 0x22c4 <ack_job+0x18>
    22cc:	bc 01       	movw	r22, r24
    22ce:	ce 01       	movw	r24, r28
    22d0:	01 96       	adiw	r24, 0x01	; 1
    22d2:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <strcat>
    22d6:	ce 01       	movw	r24, r28
    22d8:	01 96       	adiw	r24, 0x01	; 1
    22da:	0e 94 4a 03 	call	0x694	; 0x694 <MODEM_raw_puts>
    22de:	8a e0       	ldi	r24, 0x0A	; 10
    22e0:	0e 94 43 03 	call	0x686	; 0x686 <MODEM_raw_putb>
    22e4:	8d e0       	ldi	r24, 0x0D	; 13
    22e6:	0e 94 43 03 	call	0x686	; 0x686 <MODEM_raw_putb>
    22ea:	80 e0       	ldi	r24, 0x00	; 0
    22ec:	92 e1       	ldi	r25, 0x12	; 18
    22ee:	aa e7       	ldi	r26, 0x7A	; 122
    22f0:	b0 e0       	ldi	r27, 0x00	; 0
    22f2:	01 97       	sbiw	r24, 0x01	; 1
    22f4:	a1 09       	sbc	r26, r1
    22f6:	b1 09       	sbc	r27, r1
    22f8:	e1 f7       	brne	.-8      	; 0x22f2 <ack_job+0x46>
    22fa:	ec 96       	adiw	r28, 0x3c	; 60
    22fc:	cd bf       	out	0x3d, r28	; 61
    22fe:	de bf       	out	0x3e, r29	; 62
    2300:	df 91       	pop	r29
    2302:	cf 91       	pop	r28
    2304:	08 95       	ret

00002306 <pwm_toggle>:
    2306:	0f 93       	push	r16
    2308:	1f 93       	push	r17
    230a:	cf 93       	push	r28
    230c:	df 93       	push	r29
    230e:	cd b7       	in	r28, 0x3d	; 61
    2310:	de b7       	in	r29, 0x3e	; 62
    2312:	a8 97       	sbiw	r28, 0x28	; 40
    2314:	cd bf       	out	0x3d, r28	; 61
    2316:	de bf       	out	0x3e, r29	; 62
    2318:	16 2f       	mov	r17, r22
    231a:	04 2f       	mov	r16, r20
    231c:	81 30       	cpi	r24, 0x01	; 1
    231e:	91 05       	cpc	r25, r1
    2320:	f9 f0       	breq	.+62     	; 0x2360 <pwm_toggle+0x5a>
    2322:	1c f4       	brge	.+6      	; 0x232a <pwm_toggle+0x24>
    2324:	89 2b       	or	r24, r25
    2326:	41 f0       	breq	.+16     	; 0x2338 <pwm_toggle+0x32>
    2328:	56 c0       	rjmp	.+172    	; 0x23d6 <pwm_toggle+0xd0>
    232a:	82 30       	cpi	r24, 0x02	; 2
    232c:	91 05       	cpc	r25, r1
    232e:	61 f1       	breq	.+88     	; 0x2388 <pwm_toggle+0x82>
    2330:	03 97       	sbiw	r24, 0x03	; 3
    2332:	09 f0       	breq	.+2      	; 0x2336 <pwm_toggle+0x30>
    2334:	50 c0       	rjmp	.+160    	; 0x23d6 <pwm_toggle+0xd0>
    2336:	3c c0       	rjmp	.+120    	; 0x23b0 <pwm_toggle+0xaa>
    2338:	41 e0       	ldi	r20, 0x01	; 1
    233a:	50 e0       	ldi	r21, 0x00	; 0
    233c:	62 e0       	ldi	r22, 0x02	; 2
    233e:	70 e0       	ldi	r23, 0x00	; 0
    2340:	ce 01       	movw	r24, r28
    2342:	01 96       	adiw	r24, 0x01	; 1
    2344:	8e dc       	rcall	.-1764   	; 0x1c62 <pwm_init>
    2346:	11 23       	and	r17, r17
    2348:	29 f0       	breq	.+10     	; 0x2354 <pwm_toggle+0x4e>
    234a:	60 2f       	mov	r22, r16
    234c:	ce 01       	movw	r24, r28
    234e:	01 96       	adiw	r24, 0x01	; 1
    2350:	49 dd       	rcall	.-1390   	; 0x1de4 <pwm_start>
    2352:	41 c0       	rjmp	.+130    	; 0x23d6 <pwm_toggle+0xd0>
    2354:	e9 81       	ldd	r30, Y+1	; 0x01
    2356:	fa 81       	ldd	r31, Y+2	; 0x02
    2358:	80 81       	ld	r24, Z
    235a:	80 7f       	andi	r24, 0xF0	; 240
    235c:	80 83       	st	Z, r24
    235e:	3b c0       	rjmp	.+118    	; 0x23d6 <pwm_toggle+0xd0>
    2360:	42 e0       	ldi	r20, 0x02	; 2
    2362:	50 e0       	ldi	r21, 0x00	; 0
    2364:	62 e0       	ldi	r22, 0x02	; 2
    2366:	70 e0       	ldi	r23, 0x00	; 0
    2368:	ce 01       	movw	r24, r28
    236a:	0b 96       	adiw	r24, 0x0b	; 11
    236c:	7a dc       	rcall	.-1804   	; 0x1c62 <pwm_init>
    236e:	11 23       	and	r17, r17
    2370:	29 f0       	breq	.+10     	; 0x237c <pwm_toggle+0x76>
    2372:	60 2f       	mov	r22, r16
    2374:	ce 01       	movw	r24, r28
    2376:	0b 96       	adiw	r24, 0x0b	; 11
    2378:	35 dd       	rcall	.-1430   	; 0x1de4 <pwm_start>
    237a:	2d c0       	rjmp	.+90     	; 0x23d6 <pwm_toggle+0xd0>
    237c:	eb 85       	ldd	r30, Y+11	; 0x0b
    237e:	fc 85       	ldd	r31, Y+12	; 0x0c
    2380:	80 81       	ld	r24, Z
    2382:	80 7f       	andi	r24, 0xF0	; 240
    2384:	80 83       	st	Z, r24
    2386:	27 c0       	rjmp	.+78     	; 0x23d6 <pwm_toggle+0xd0>
    2388:	43 e0       	ldi	r20, 0x03	; 3
    238a:	50 e0       	ldi	r21, 0x00	; 0
    238c:	62 e0       	ldi	r22, 0x02	; 2
    238e:	70 e0       	ldi	r23, 0x00	; 0
    2390:	ce 01       	movw	r24, r28
    2392:	45 96       	adiw	r24, 0x15	; 21
    2394:	66 dc       	rcall	.-1844   	; 0x1c62 <pwm_init>
    2396:	11 23       	and	r17, r17
    2398:	29 f0       	breq	.+10     	; 0x23a4 <pwm_toggle+0x9e>
    239a:	60 2f       	mov	r22, r16
    239c:	ce 01       	movw	r24, r28
    239e:	45 96       	adiw	r24, 0x15	; 21
    23a0:	21 dd       	rcall	.-1470   	; 0x1de4 <pwm_start>
    23a2:	19 c0       	rjmp	.+50     	; 0x23d6 <pwm_toggle+0xd0>
    23a4:	ed 89       	ldd	r30, Y+21	; 0x15
    23a6:	fe 89       	ldd	r31, Y+22	; 0x16
    23a8:	80 81       	ld	r24, Z
    23aa:	80 7f       	andi	r24, 0xF0	; 240
    23ac:	80 83       	st	Z, r24
    23ae:	13 c0       	rjmp	.+38     	; 0x23d6 <pwm_toggle+0xd0>
    23b0:	44 e0       	ldi	r20, 0x04	; 4
    23b2:	50 e0       	ldi	r21, 0x00	; 0
    23b4:	62 e0       	ldi	r22, 0x02	; 2
    23b6:	70 e0       	ldi	r23, 0x00	; 0
    23b8:	ce 01       	movw	r24, r28
    23ba:	4f 96       	adiw	r24, 0x1f	; 31
    23bc:	52 dc       	rcall	.-1884   	; 0x1c62 <pwm_init>
    23be:	11 23       	and	r17, r17
    23c0:	29 f0       	breq	.+10     	; 0x23cc <pwm_toggle+0xc6>
    23c2:	60 2f       	mov	r22, r16
    23c4:	ce 01       	movw	r24, r28
    23c6:	4f 96       	adiw	r24, 0x1f	; 31
    23c8:	0d dd       	rcall	.-1510   	; 0x1de4 <pwm_start>
    23ca:	05 c0       	rjmp	.+10     	; 0x23d6 <pwm_toggle+0xd0>
    23cc:	ef 8d       	ldd	r30, Y+31	; 0x1f
    23ce:	f8 a1       	ldd	r31, Y+32	; 0x20
    23d0:	80 81       	ld	r24, Z
    23d2:	80 7f       	andi	r24, 0xF0	; 240
    23d4:	80 83       	st	Z, r24
    23d6:	a8 96       	adiw	r28, 0x28	; 40
    23d8:	cd bf       	out	0x3d, r28	; 61
    23da:	de bf       	out	0x3e, r29	; 62
    23dc:	df 91       	pop	r29
    23de:	cf 91       	pop	r28
    23e0:	1f 91       	pop	r17
    23e2:	0f 91       	pop	r16
    23e4:	08 95       	ret

000023e6 <decode>:
    23e6:	2f 92       	push	r2
    23e8:	3f 92       	push	r3
    23ea:	4f 92       	push	r4
    23ec:	5f 92       	push	r5
    23ee:	6f 92       	push	r6
    23f0:	7f 92       	push	r7
    23f2:	8f 92       	push	r8
    23f4:	9f 92       	push	r9
    23f6:	af 92       	push	r10
    23f8:	bf 92       	push	r11
    23fa:	cf 92       	push	r12
    23fc:	df 92       	push	r13
    23fe:	ef 92       	push	r14
    2400:	ff 92       	push	r15
    2402:	0f 93       	push	r16
    2404:	1f 93       	push	r17
    2406:	cf 93       	push	r28
    2408:	df 93       	push	r29
    240a:	cd b7       	in	r28, 0x3d	; 61
    240c:	de b7       	in	r29, 0x3e	; 62
    240e:	28 97       	sbiw	r28, 0x08	; 8
    2410:	cd bf       	out	0x3d, r28	; 61
    2412:	de bf       	out	0x3e, r29	; 62
    2414:	7c 01       	movw	r14, r24
    2416:	68 e2       	ldi	r22, 0x28	; 40
    2418:	70 e2       	ldi	r23, 0x20	; 32
    241a:	0e 94 cc 1d 	call	0x3b98	; 0x3b98 <strtok>
    241e:	8c 01       	movw	r16, r24
    2420:	6c e2       	ldi	r22, 0x2C	; 44
    2422:	70 e2       	ldi	r23, 0x20	; 32
    2424:	c7 01       	movw	r24, r14
    2426:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <strstr>
    242a:	89 2b       	or	r24, r25
    242c:	09 f4       	brne	.+2      	; 0x2430 <decode+0x4a>
    242e:	9e c0       	rjmp	.+316    	; 0x256c <decode+0x186>
    2430:	d7 01       	movw	r26, r14
    2432:	50 96       	adiw	r26, 0x10	; 16
    2434:	fe 01       	movw	r30, r28
    2436:	31 96       	adiw	r30, 0x01	; 1
    2438:	ce 01       	movw	r24, r28
    243a:	09 96       	adiw	r24, 0x09	; 9
    243c:	2d 91       	ld	r18, X+
    243e:	21 93       	st	Z+, r18
    2440:	e8 17       	cp	r30, r24
    2442:	f9 07       	cpc	r31, r25
    2444:	d9 f7       	brne	.-10     	; 0x243c <decode+0x56>
    2446:	8f 81       	ldd	r24, Y+7	; 0x07
    2448:	99 27       	eor	r25, r25
    244a:	87 fd       	sbrc	r24, 7
    244c:	90 95       	com	r25
    244e:	c0 97       	sbiw	r24, 0x30	; 48
    2450:	aa 27       	eor	r26, r26
    2452:	97 fd       	sbrc	r25, 7
    2454:	a0 95       	com	r26
    2456:	ba 2f       	mov	r27, r26
    2458:	88 0f       	add	r24, r24
    245a:	99 1f       	adc	r25, r25
    245c:	aa 1f       	adc	r26, r26
    245e:	bb 1f       	adc	r27, r27
    2460:	6c 01       	movw	r12, r24
    2462:	7d 01       	movw	r14, r26
    2464:	cc 0c       	add	r12, r12
    2466:	dd 1c       	adc	r13, r13
    2468:	ee 1c       	adc	r14, r14
    246a:	ff 1c       	adc	r15, r15
    246c:	cc 0c       	add	r12, r12
    246e:	dd 1c       	adc	r13, r13
    2470:	ee 1c       	adc	r14, r14
    2472:	ff 1c       	adc	r15, r15
    2474:	8c 0d       	add	r24, r12
    2476:	9d 1d       	adc	r25, r13
    2478:	ae 1d       	adc	r26, r14
    247a:	bf 1d       	adc	r27, r15
    247c:	48 85       	ldd	r20, Y+8	; 0x08
    247e:	55 27       	eor	r21, r21
    2480:	47 fd       	sbrc	r20, 7
    2482:	50 95       	com	r21
    2484:	40 53       	subi	r20, 0x30	; 48
    2486:	51 09       	sbc	r21, r1
    2488:	66 27       	eor	r22, r22
    248a:	57 fd       	sbrc	r21, 7
    248c:	60 95       	com	r22
    248e:	76 2f       	mov	r23, r22
    2490:	6c 01       	movw	r12, r24
    2492:	7d 01       	movw	r14, r26
    2494:	c4 0e       	add	r12, r20
    2496:	d5 1e       	adc	r13, r21
    2498:	e6 1e       	adc	r14, r22
    249a:	f7 1e       	adc	r15, r23
    249c:	89 81       	ldd	r24, Y+1	; 0x01
    249e:	99 27       	eor	r25, r25
    24a0:	87 fd       	sbrc	r24, 7
    24a2:	90 95       	com	r25
    24a4:	c0 97       	sbiw	r24, 0x30	; 48
    24a6:	aa 27       	eor	r26, r26
    24a8:	97 fd       	sbrc	r25, 7
    24aa:	a0 95       	com	r26
    24ac:	ba 2f       	mov	r27, r26
    24ae:	88 0f       	add	r24, r24
    24b0:	99 1f       	adc	r25, r25
    24b2:	aa 1f       	adc	r26, r26
    24b4:	bb 1f       	adc	r27, r27
    24b6:	ac 01       	movw	r20, r24
    24b8:	bd 01       	movw	r22, r26
    24ba:	44 0f       	add	r20, r20
    24bc:	55 1f       	adc	r21, r21
    24be:	66 1f       	adc	r22, r22
    24c0:	77 1f       	adc	r23, r23
    24c2:	44 0f       	add	r20, r20
    24c4:	55 1f       	adc	r21, r21
    24c6:	66 1f       	adc	r22, r22
    24c8:	77 1f       	adc	r23, r23
    24ca:	84 0f       	add	r24, r20
    24cc:	95 1f       	adc	r25, r21
    24ce:	a6 1f       	adc	r26, r22
    24d0:	b7 1f       	adc	r27, r23
    24d2:	4a 81       	ldd	r20, Y+2	; 0x02
    24d4:	55 27       	eor	r21, r21
    24d6:	47 fd       	sbrc	r20, 7
    24d8:	50 95       	com	r21
    24da:	40 53       	subi	r20, 0x30	; 48
    24dc:	51 09       	sbc	r21, r1
    24de:	66 27       	eor	r22, r22
    24e0:	57 fd       	sbrc	r21, 7
    24e2:	60 95       	com	r22
    24e4:	76 2f       	mov	r23, r22
    24e6:	9a 01       	movw	r18, r20
    24e8:	ab 01       	movw	r20, r22
    24ea:	28 0f       	add	r18, r24
    24ec:	39 1f       	adc	r19, r25
    24ee:	4a 1f       	adc	r20, r26
    24f0:	5b 1f       	adc	r21, r27
    24f2:	a0 e1       	ldi	r26, 0x10	; 16
    24f4:	be e0       	ldi	r27, 0x0E	; 14
    24f6:	0e 94 bc 1d 	call	0x3b78	; 0x3b78 <__muluhisi3>
    24fa:	c6 0e       	add	r12, r22
    24fc:	d7 1e       	adc	r13, r23
    24fe:	e8 1e       	adc	r14, r24
    2500:	f9 1e       	adc	r15, r25
    2502:	4c 81       	ldd	r20, Y+4	; 0x04
    2504:	55 27       	eor	r21, r21
    2506:	47 fd       	sbrc	r20, 7
    2508:	50 95       	com	r21
    250a:	40 53       	subi	r20, 0x30	; 48
    250c:	51 09       	sbc	r21, r1
    250e:	66 27       	eor	r22, r22
    2510:	57 fd       	sbrc	r21, 7
    2512:	60 95       	com	r22
    2514:	76 2f       	mov	r23, r22
    2516:	44 0f       	add	r20, r20
    2518:	55 1f       	adc	r21, r21
    251a:	66 1f       	adc	r22, r22
    251c:	77 1f       	adc	r23, r23
    251e:	db 01       	movw	r26, r22
    2520:	ca 01       	movw	r24, r20
    2522:	88 0f       	add	r24, r24
    2524:	99 1f       	adc	r25, r25
    2526:	aa 1f       	adc	r26, r26
    2528:	bb 1f       	adc	r27, r27
    252a:	88 0f       	add	r24, r24
    252c:	99 1f       	adc	r25, r25
    252e:	aa 1f       	adc	r26, r26
    2530:	bb 1f       	adc	r27, r27
    2532:	48 0f       	add	r20, r24
    2534:	59 1f       	adc	r21, r25
    2536:	6a 1f       	adc	r22, r26
    2538:	7b 1f       	adc	r23, r27
    253a:	8d 81       	ldd	r24, Y+5	; 0x05
    253c:	99 27       	eor	r25, r25
    253e:	87 fd       	sbrc	r24, 7
    2540:	90 95       	com	r25
    2542:	c0 97       	sbiw	r24, 0x30	; 48
    2544:	aa 27       	eor	r26, r26
    2546:	97 fd       	sbrc	r25, 7
    2548:	a0 95       	com	r26
    254a:	ba 2f       	mov	r27, r26
    254c:	9a 01       	movw	r18, r20
    254e:	ab 01       	movw	r20, r22
    2550:	28 0f       	add	r18, r24
    2552:	39 1f       	adc	r19, r25
    2554:	4a 1f       	adc	r20, r26
    2556:	5b 1f       	adc	r21, r27
    2558:	ac e3       	ldi	r26, 0x3C	; 60
    255a:	b0 e0       	ldi	r27, 0x00	; 0
    255c:	0e 94 bc 1d 	call	0x3b78	; 0x3b78 <__muluhisi3>
    2560:	6c 0d       	add	r22, r12
    2562:	7d 1d       	adc	r23, r13
    2564:	8e 1d       	adc	r24, r14
    2566:	9f 1d       	adc	r25, r15
    2568:	0e 94 20 05 	call	0xa40	; 0xa40 <rtc_set_time>
    256c:	01 2b       	or	r16, r17
    256e:	09 f4       	brne	.+2      	; 0x2572 <decode+0x18c>
    2570:	6f c0       	rjmp	.+222    	; 0x2650 <decode+0x26a>
    2572:	00 e0       	ldi	r16, 0x00	; 0
    2574:	10 e0       	ldi	r17, 0x00	; 0
    2576:	0f 2e       	mov	r0, r31
    2578:	f1 ea       	ldi	r31, 0xA1	; 161
    257a:	8f 2e       	mov	r8, r31
    257c:	f5 e2       	ldi	r31, 0x25	; 37
    257e:	9f 2e       	mov	r9, r31
    2580:	f0 2d       	mov	r31, r0
    2582:	0f 2e       	mov	r0, r31
    2584:	f5 ea       	ldi	r31, 0xA5	; 165
    2586:	af 2e       	mov	r10, r31
    2588:	f5 e2       	ldi	r31, 0x25	; 37
    258a:	bf 2e       	mov	r11, r31
    258c:	f0 2d       	mov	r31, r0
    258e:	0f 2e       	mov	r0, r31
    2590:	f3 ea       	ldi	r31, 0xA3	; 163
    2592:	cf 2e       	mov	r12, r31
    2594:	f5 e2       	ldi	r31, 0x25	; 37
    2596:	df 2e       	mov	r13, r31
    2598:	f0 2d       	mov	r31, r0
    259a:	0f 2e       	mov	r0, r31
    259c:	f9 ea       	ldi	r31, 0xA9	; 169
    259e:	6f 2e       	mov	r6, r31
    25a0:	f5 e2       	ldi	r31, 0x25	; 37
    25a2:	7f 2e       	mov	r7, r31
    25a4:	f0 2d       	mov	r31, r0
    25a6:	0f 2e       	mov	r0, r31
    25a8:	fb e9       	ldi	r31, 0x9B	; 155
    25aa:	4f 2e       	mov	r4, r31
    25ac:	f5 e2       	ldi	r31, 0x25	; 37
    25ae:	5f 2e       	mov	r5, r31
    25b0:	f0 2d       	mov	r31, r0
    25b2:	0f 2e       	mov	r0, r31
    25b4:	ff e9       	ldi	r31, 0x9F	; 159
    25b6:	2f 2e       	mov	r2, r31
    25b8:	f5 e2       	ldi	r31, 0x25	; 37
    25ba:	3f 2e       	mov	r3, r31
    25bc:	f0 2d       	mov	r31, r0
    25be:	6a e2       	ldi	r22, 0x2A	; 42
    25c0:	70 e2       	ldi	r23, 0x20	; 32
    25c2:	80 e0       	ldi	r24, 0x00	; 0
    25c4:	90 e0       	ldi	r25, 0x00	; 0
    25c6:	0e 94 cc 1d 	call	0x3b98	; 0x3b98 <strtok>
    25ca:	7c 01       	movw	r14, r24
    25cc:	03 30       	cpi	r16, 0x03	; 3
    25ce:	11 05       	cpc	r17, r1
    25d0:	29 f1       	breq	.+74     	; 0x261c <decode+0x236>
    25d2:	44 f4       	brge	.+16     	; 0x25e4 <decode+0x1fe>
    25d4:	01 30       	cpi	r16, 0x01	; 1
    25d6:	11 05       	cpc	r17, r1
    25d8:	89 f0       	breq	.+34     	; 0x25fc <decode+0x216>
    25da:	e4 f4       	brge	.+56     	; 0x2614 <decode+0x22e>
    25dc:	01 15       	cp	r16, r1
    25de:	11 05       	cpc	r17, r1
    25e0:	49 f0       	breq	.+18     	; 0x25f4 <decode+0x20e>
    25e2:	31 c0       	rjmp	.+98     	; 0x2646 <decode+0x260>
    25e4:	05 30       	cpi	r16, 0x05	; 5
    25e6:	11 05       	cpc	r17, r1
    25e8:	09 f1       	breq	.+66     	; 0x262c <decode+0x246>
    25ea:	e4 f0       	brlt	.+56     	; 0x2624 <decode+0x23e>
    25ec:	06 30       	cpi	r16, 0x06	; 6
    25ee:	11 05       	cpc	r17, r1
    25f0:	51 f5       	brne	.+84     	; 0x2646 <decode+0x260>
    25f2:	26 c0       	rjmp	.+76     	; 0x2640 <decode+0x25a>
    25f4:	ea e9       	ldi	r30, 0x9A	; 154
    25f6:	f5 e2       	ldi	r31, 0x25	; 37
    25f8:	80 83       	st	Z, r24
    25fa:	25 c0       	rjmp	.+74     	; 0x2646 <decode+0x260>
    25fc:	57 de       	rcall	.-850    	; 0x22ac <ack_job>
    25fe:	c7 01       	movw	r24, r14
    2600:	aa 27       	eor	r26, r26
    2602:	97 fd       	sbrc	r25, 7
    2604:	a0 95       	com	r26
    2606:	ba 2f       	mov	r27, r26
    2608:	f2 01       	movw	r30, r4
    260a:	80 83       	st	Z, r24
    260c:	91 83       	std	Z+1, r25	; 0x01
    260e:	a2 83       	std	Z+2, r26	; 0x02
    2610:	b3 83       	std	Z+3, r27	; 0x03
    2612:	19 c0       	rjmp	.+50     	; 0x2646 <decode+0x260>
    2614:	f1 01       	movw	r30, r2
    2616:	80 83       	st	Z, r24
    2618:	91 83       	std	Z+1, r25	; 0x01
    261a:	15 c0       	rjmp	.+42     	; 0x2646 <decode+0x260>
    261c:	f4 01       	movw	r30, r8
    261e:	80 83       	st	Z, r24
    2620:	91 83       	std	Z+1, r25	; 0x01
    2622:	11 c0       	rjmp	.+34     	; 0x2646 <decode+0x260>
    2624:	f6 01       	movw	r30, r12
    2626:	80 83       	st	Z, r24
    2628:	91 83       	std	Z+1, r25	; 0x01
    262a:	0d c0       	rjmp	.+26     	; 0x2646 <decode+0x260>
    262c:	aa 27       	eor	r26, r26
    262e:	97 fd       	sbrc	r25, 7
    2630:	a0 95       	com	r26
    2632:	ba 2f       	mov	r27, r26
    2634:	f5 01       	movw	r30, r10
    2636:	80 83       	st	Z, r24
    2638:	91 83       	std	Z+1, r25	; 0x01
    263a:	a2 83       	std	Z+2, r26	; 0x02
    263c:	b3 83       	std	Z+3, r27	; 0x03
    263e:	03 c0       	rjmp	.+6      	; 0x2646 <decode+0x260>
    2640:	f3 01       	movw	r30, r6
    2642:	80 83       	st	Z, r24
    2644:	91 83       	std	Z+1, r25	; 0x01
    2646:	0f 5f       	subi	r16, 0xFF	; 255
    2648:	1f 4f       	sbci	r17, 0xFF	; 255
    264a:	ef 28       	or	r14, r15
    264c:	09 f0       	breq	.+2      	; 0x2650 <decode+0x26a>
    264e:	b7 cf       	rjmp	.-146    	; 0x25be <decode+0x1d8>
    2650:	8a e9       	ldi	r24, 0x9A	; 154
    2652:	95 e2       	ldi	r25, 0x25	; 37
    2654:	28 96       	adiw	r28, 0x08	; 8
    2656:	cd bf       	out	0x3d, r28	; 61
    2658:	de bf       	out	0x3e, r29	; 62
    265a:	df 91       	pop	r29
    265c:	cf 91       	pop	r28
    265e:	1f 91       	pop	r17
    2660:	0f 91       	pop	r16
    2662:	ff 90       	pop	r15
    2664:	ef 90       	pop	r14
    2666:	df 90       	pop	r13
    2668:	cf 90       	pop	r12
    266a:	bf 90       	pop	r11
    266c:	af 90       	pop	r10
    266e:	9f 90       	pop	r9
    2670:	8f 90       	pop	r8
    2672:	7f 90       	pop	r7
    2674:	6f 90       	pop	r6
    2676:	5f 90       	pop	r5
    2678:	4f 90       	pop	r4
    267a:	3f 90       	pop	r3
    267c:	2f 90       	pop	r2
    267e:	08 95       	ret

00002680 <clear_eeprom>:
    2680:	0f 93       	push	r16
    2682:	1f 93       	push	r17
    2684:	cf 93       	push	r28
    2686:	df 93       	push	r29
    2688:	8b 01       	movw	r16, r22
    268a:	68 17       	cp	r22, r24
    268c:	79 07       	cpc	r23, r25
    268e:	4c f0       	brlt	.+18     	; 0x26a2 <clear_eeprom+0x22>
    2690:	ec 01       	movw	r28, r24
    2692:	6f ef       	ldi	r22, 0xFF	; 255
    2694:	ce 01       	movw	r24, r28
    2696:	0e 94 7d 04 	call	0x8fa	; 0x8fa <nvm_eeprom_write_byte>
    269a:	21 96       	adiw	r28, 0x01	; 1
    269c:	0c 17       	cp	r16, r28
    269e:	1d 07       	cpc	r17, r29
    26a0:	c4 f7       	brge	.-16     	; 0x2692 <clear_eeprom+0x12>
    26a2:	df 91       	pop	r29
    26a4:	cf 91       	pop	r28
    26a6:	1f 91       	pop	r17
    26a8:	0f 91       	pop	r16
    26aa:	08 95       	ret

000026ac <schedule_job>:
    26ac:	cf 92       	push	r12
    26ae:	df 92       	push	r13
    26b0:	ef 92       	push	r14
    26b2:	ff 92       	push	r15
    26b4:	0f 93       	push	r16
    26b6:	1f 93       	push	r17
    26b8:	cf 93       	push	r28
    26ba:	df 93       	push	r29
    26bc:	cd b7       	in	r28, 0x3d	; 61
    26be:	de b7       	in	r29, 0x3e	; 62
    26c0:	2f 97       	sbiw	r28, 0x0f	; 15
    26c2:	cd bf       	out	0x3d, r28	; 61
    26c4:	de bf       	out	0x3e, r29	; 62
    26c6:	8c 01       	movw	r16, r24
    26c8:	61 e3       	ldi	r22, 0x31	; 49
    26ca:	70 e2       	ldi	r23, 0x20	; 32
    26cc:	fc 01       	movw	r30, r24
    26ce:	85 81       	ldd	r24, Z+5	; 0x05
    26d0:	96 81       	ldd	r25, Z+6	; 0x06
    26d2:	0e 94 da 1d 	call	0x3bb4	; 0x3bb4 <strcmp>
    26d6:	28 2f       	mov	r18, r24
    26d8:	39 2f       	mov	r19, r25
    26da:	23 2b       	or	r18, r19
    26dc:	09 f0       	breq	.+2      	; 0x26e0 <schedule_job+0x34>
    26de:	ac c0       	rjmp	.+344    	; 0x2838 <schedule_job+0x18c>
    26e0:	66 e3       	ldi	r22, 0x36	; 54
    26e2:	70 e2       	ldi	r23, 0x20	; 32
    26e4:	f8 01       	movw	r30, r16
    26e6:	87 81       	ldd	r24, Z+7	; 0x07
    26e8:	90 85       	ldd	r25, Z+8	; 0x08
    26ea:	0e 94 da 1d 	call	0x3bb4	; 0x3bb4 <strcmp>
    26ee:	28 2f       	mov	r18, r24
    26f0:	39 2f       	mov	r19, r25
    26f2:	23 2b       	or	r18, r19
    26f4:	01 f5       	brne	.+64     	; 0x2736 <schedule_job+0x8a>
    26f6:	6f e0       	ldi	r22, 0x0F	; 15
    26f8:	70 e0       	ldi	r23, 0x00	; 0
    26fa:	80 e0       	ldi	r24, 0x00	; 0
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	c0 df       	rcall	.-128    	; 0x2680 <clear_eeprom>
    2700:	f8 01       	movw	r30, r16
    2702:	63 85       	ldd	r22, Z+11	; 0x0b
    2704:	74 85       	ldd	r23, Z+12	; 0x0c
    2706:	ce 01       	movw	r24, r28
    2708:	01 96       	adiw	r24, 0x01	; 1
    270a:	0e 94 e3 1d 	call	0x3bc6	; 0x3bc6 <strcpy>
    270e:	69 81       	ldd	r22, Y+1	; 0x01
    2710:	66 23       	and	r22, r22
    2712:	89 f0       	breq	.+34     	; 0x2736 <schedule_job+0x8a>
    2714:	6e 01       	movw	r12, r28
    2716:	f2 e0       	ldi	r31, 0x02	; 2
    2718:	cf 0e       	add	r12, r31
    271a:	d1 1c       	adc	r13, r1
    271c:	e1 2c       	mov	r14, r1
    271e:	f1 2c       	mov	r15, r1
    2720:	c7 01       	movw	r24, r14
    2722:	0e 94 7d 04 	call	0x8fa	; 0x8fa <nvm_eeprom_write_byte>
    2726:	8f ef       	ldi	r24, 0xFF	; 255
    2728:	e8 1a       	sub	r14, r24
    272a:	f8 0a       	sbc	r15, r24
    272c:	f6 01       	movw	r30, r12
    272e:	61 91       	ld	r22, Z+
    2730:	6f 01       	movw	r12, r30
    2732:	61 11       	cpse	r22, r1
    2734:	f5 cf       	rjmp	.-22     	; 0x2720 <schedule_job+0x74>
    2736:	6d e3       	ldi	r22, 0x3D	; 61
    2738:	70 e2       	ldi	r23, 0x20	; 32
    273a:	f8 01       	movw	r30, r16
    273c:	87 81       	ldd	r24, Z+7	; 0x07
    273e:	90 85       	ldd	r25, Z+8	; 0x08
    2740:	0e 94 da 1d 	call	0x3bb4	; 0x3bb4 <strcmp>
    2744:	28 2f       	mov	r18, r24
    2746:	39 2f       	mov	r19, r25
    2748:	23 2b       	or	r18, r19
    274a:	11 f5       	brne	.+68     	; 0x2790 <schedule_job+0xe4>
    274c:	6f e1       	ldi	r22, 0x1F	; 31
    274e:	70 e0       	ldi	r23, 0x00	; 0
    2750:	80 e1       	ldi	r24, 0x10	; 16
    2752:	90 e0       	ldi	r25, 0x00	; 0
    2754:	95 df       	rcall	.-214    	; 0x2680 <clear_eeprom>
    2756:	f8 01       	movw	r30, r16
    2758:	63 85       	ldd	r22, Z+11	; 0x0b
    275a:	74 85       	ldd	r23, Z+12	; 0x0c
    275c:	ce 01       	movw	r24, r28
    275e:	01 96       	adiw	r24, 0x01	; 1
    2760:	0e 94 e3 1d 	call	0x3bc6	; 0x3bc6 <strcpy>
    2764:	69 81       	ldd	r22, Y+1	; 0x01
    2766:	66 23       	and	r22, r22
    2768:	99 f0       	breq	.+38     	; 0x2790 <schedule_job+0xe4>
    276a:	6e 01       	movw	r12, r28
    276c:	f2 e0       	ldi	r31, 0x02	; 2
    276e:	cf 0e       	add	r12, r31
    2770:	d1 1c       	adc	r13, r1
    2772:	68 94       	set
    2774:	ee 24       	eor	r14, r14
    2776:	e4 f8       	bld	r14, 4
    2778:	f1 2c       	mov	r15, r1
    277a:	c7 01       	movw	r24, r14
    277c:	0e 94 7d 04 	call	0x8fa	; 0x8fa <nvm_eeprom_write_byte>
    2780:	8f ef       	ldi	r24, 0xFF	; 255
    2782:	e8 1a       	sub	r14, r24
    2784:	f8 0a       	sbc	r15, r24
    2786:	f6 01       	movw	r30, r12
    2788:	61 91       	ld	r22, Z+
    278a:	6f 01       	movw	r12, r30
    278c:	61 11       	cpse	r22, r1
    278e:	f5 cf       	rjmp	.-22     	; 0x277a <schedule_job+0xce>
    2790:	64 e4       	ldi	r22, 0x44	; 68
    2792:	70 e2       	ldi	r23, 0x20	; 32
    2794:	f8 01       	movw	r30, r16
    2796:	87 81       	ldd	r24, Z+7	; 0x07
    2798:	90 85       	ldd	r25, Z+8	; 0x08
    279a:	0e 94 da 1d 	call	0x3bb4	; 0x3bb4 <strcmp>
    279e:	28 2f       	mov	r18, r24
    27a0:	39 2f       	mov	r19, r25
    27a2:	23 2b       	or	r18, r19
    27a4:	11 f5       	brne	.+68     	; 0x27ea <schedule_job+0x13e>
    27a6:	6f e2       	ldi	r22, 0x2F	; 47
    27a8:	70 e0       	ldi	r23, 0x00	; 0
    27aa:	80 e2       	ldi	r24, 0x20	; 32
    27ac:	90 e0       	ldi	r25, 0x00	; 0
    27ae:	68 df       	rcall	.-304    	; 0x2680 <clear_eeprom>
    27b0:	f8 01       	movw	r30, r16
    27b2:	63 85       	ldd	r22, Z+11	; 0x0b
    27b4:	74 85       	ldd	r23, Z+12	; 0x0c
    27b6:	ce 01       	movw	r24, r28
    27b8:	01 96       	adiw	r24, 0x01	; 1
    27ba:	0e 94 e3 1d 	call	0x3bc6	; 0x3bc6 <strcpy>
    27be:	69 81       	ldd	r22, Y+1	; 0x01
    27c0:	66 23       	and	r22, r22
    27c2:	99 f0       	breq	.+38     	; 0x27ea <schedule_job+0x13e>
    27c4:	6e 01       	movw	r12, r28
    27c6:	f2 e0       	ldi	r31, 0x02	; 2
    27c8:	cf 0e       	add	r12, r31
    27ca:	d1 1c       	adc	r13, r1
    27cc:	68 94       	set
    27ce:	ee 24       	eor	r14, r14
    27d0:	e5 f8       	bld	r14, 5
    27d2:	f1 2c       	mov	r15, r1
    27d4:	c7 01       	movw	r24, r14
    27d6:	0e 94 7d 04 	call	0x8fa	; 0x8fa <nvm_eeprom_write_byte>
    27da:	8f ef       	ldi	r24, 0xFF	; 255
    27dc:	e8 1a       	sub	r14, r24
    27de:	f8 0a       	sbc	r15, r24
    27e0:	f6 01       	movw	r30, r12
    27e2:	61 91       	ld	r22, Z+
    27e4:	6f 01       	movw	r12, r30
    27e6:	61 11       	cpse	r22, r1
    27e8:	f5 cf       	rjmp	.-22     	; 0x27d4 <schedule_job+0x128>
    27ea:	6b e4       	ldi	r22, 0x4B	; 75
    27ec:	70 e2       	ldi	r23, 0x20	; 32
    27ee:	f8 01       	movw	r30, r16
    27f0:	87 81       	ldd	r24, Z+7	; 0x07
    27f2:	90 85       	ldd	r25, Z+8	; 0x08
    27f4:	0e 94 da 1d 	call	0x3bb4	; 0x3bb4 <strcmp>
    27f8:	28 2f       	mov	r18, r24
    27fa:	39 2f       	mov	r19, r25
    27fc:	23 2b       	or	r18, r19
    27fe:	11 f4       	brne	.+4      	; 0x2804 <schedule_job+0x158>
    2800:	80 e0       	ldi	r24, 0x00	; 0
    2802:	9e dc       	rcall	.-1732   	; 0x2140 <wipe_ica1_eeprom>
    2804:	62 e5       	ldi	r22, 0x52	; 82
    2806:	70 e2       	ldi	r23, 0x20	; 32
    2808:	f8 01       	movw	r30, r16
    280a:	87 81       	ldd	r24, Z+7	; 0x07
    280c:	90 85       	ldd	r25, Z+8	; 0x08
    280e:	0e 94 da 1d 	call	0x3bb4	; 0x3bb4 <strcmp>
    2812:	28 2f       	mov	r18, r24
    2814:	39 2f       	mov	r19, r25
    2816:	23 2b       	or	r18, r19
    2818:	11 f4       	brne	.+4      	; 0x281e <schedule_job+0x172>
    281a:	81 e0       	ldi	r24, 0x01	; 1
    281c:	91 dc       	rcall	.-1758   	; 0x2140 <wipe_ica1_eeprom>
    281e:	69 e5       	ldi	r22, 0x59	; 89
    2820:	70 e2       	ldi	r23, 0x20	; 32
    2822:	f8 01       	movw	r30, r16
    2824:	87 81       	ldd	r24, Z+7	; 0x07
    2826:	90 85       	ldd	r25, Z+8	; 0x08
    2828:	0e 94 da 1d 	call	0x3bb4	; 0x3bb4 <strcmp>
    282c:	28 2f       	mov	r18, r24
    282e:	39 2f       	mov	r19, r25
    2830:	23 2b       	or	r18, r19
    2832:	11 f4       	brne	.+4      	; 0x2838 <schedule_job+0x18c>
    2834:	82 e0       	ldi	r24, 0x02	; 2
    2836:	84 dc       	rcall	.-1784   	; 0x2140 <wipe_ica1_eeprom>
    2838:	60 e6       	ldi	r22, 0x60	; 96
    283a:	70 e2       	ldi	r23, 0x20	; 32
    283c:	f8 01       	movw	r30, r16
    283e:	85 81       	ldd	r24, Z+5	; 0x05
    2840:	96 81       	ldd	r25, Z+6	; 0x06
    2842:	0e 94 da 1d 	call	0x3bb4	; 0x3bb4 <strcmp>
    2846:	28 2f       	mov	r18, r24
    2848:	39 2f       	mov	r19, r25
    284a:	23 2b       	or	r18, r19
    284c:	09 f0       	breq	.+2      	; 0x2850 <schedule_job+0x1a4>
    284e:	b0 c0       	rjmp	.+352    	; 0x29b0 <schedule_job+0x304>
    2850:	66 e3       	ldi	r22, 0x36	; 54
    2852:	70 e2       	ldi	r23, 0x20	; 32
    2854:	f8 01       	movw	r30, r16
    2856:	87 81       	ldd	r24, Z+7	; 0x07
    2858:	90 85       	ldd	r25, Z+8	; 0x08
    285a:	0e 94 da 1d 	call	0x3bb4	; 0x3bb4 <strcmp>
    285e:	28 2f       	mov	r18, r24
    2860:	39 2f       	mov	r19, r25
    2862:	23 2b       	or	r18, r19
    2864:	19 f5       	brne	.+70     	; 0x28ac <schedule_job+0x200>
    2866:	6f e3       	ldi	r22, 0x3F	; 63
    2868:	70 e0       	ldi	r23, 0x00	; 0
    286a:	80 e3       	ldi	r24, 0x30	; 48
    286c:	90 e0       	ldi	r25, 0x00	; 0
    286e:	08 df       	rcall	.-496    	; 0x2680 <clear_eeprom>
    2870:	f8 01       	movw	r30, r16
    2872:	63 85       	ldd	r22, Z+11	; 0x0b
    2874:	74 85       	ldd	r23, Z+12	; 0x0c
    2876:	ce 01       	movw	r24, r28
    2878:	01 96       	adiw	r24, 0x01	; 1
    287a:	0e 94 e3 1d 	call	0x3bc6	; 0x3bc6 <strcpy>
    287e:	69 81       	ldd	r22, Y+1	; 0x01
    2880:	66 23       	and	r22, r22
    2882:	a1 f0       	breq	.+40     	; 0x28ac <schedule_job+0x200>
    2884:	6e 01       	movw	r12, r28
    2886:	f2 e0       	ldi	r31, 0x02	; 2
    2888:	cf 0e       	add	r12, r31
    288a:	d1 1c       	adc	r13, r1
    288c:	0f 2e       	mov	r0, r31
    288e:	f0 e3       	ldi	r31, 0x30	; 48
    2890:	ef 2e       	mov	r14, r31
    2892:	f1 2c       	mov	r15, r1
    2894:	f0 2d       	mov	r31, r0
    2896:	c7 01       	movw	r24, r14
    2898:	0e 94 7d 04 	call	0x8fa	; 0x8fa <nvm_eeprom_write_byte>
    289c:	8f ef       	ldi	r24, 0xFF	; 255
    289e:	e8 1a       	sub	r14, r24
    28a0:	f8 0a       	sbc	r15, r24
    28a2:	f6 01       	movw	r30, r12
    28a4:	61 91       	ld	r22, Z+
    28a6:	6f 01       	movw	r12, r30
    28a8:	61 11       	cpse	r22, r1
    28aa:	f5 cf       	rjmp	.-22     	; 0x2896 <schedule_job+0x1ea>
    28ac:	6d e3       	ldi	r22, 0x3D	; 61
    28ae:	70 e2       	ldi	r23, 0x20	; 32
    28b0:	f8 01       	movw	r30, r16
    28b2:	87 81       	ldd	r24, Z+7	; 0x07
    28b4:	90 85       	ldd	r25, Z+8	; 0x08
    28b6:	0e 94 da 1d 	call	0x3bb4	; 0x3bb4 <strcmp>
    28ba:	28 2f       	mov	r18, r24
    28bc:	39 2f       	mov	r19, r25
    28be:	23 2b       	or	r18, r19
    28c0:	11 f5       	brne	.+68     	; 0x2906 <schedule_job+0x25a>
    28c2:	6f e4       	ldi	r22, 0x4F	; 79
    28c4:	70 e0       	ldi	r23, 0x00	; 0
    28c6:	80 e4       	ldi	r24, 0x40	; 64
    28c8:	90 e0       	ldi	r25, 0x00	; 0
    28ca:	da de       	rcall	.-588    	; 0x2680 <clear_eeprom>
    28cc:	f8 01       	movw	r30, r16
    28ce:	63 85       	ldd	r22, Z+11	; 0x0b
    28d0:	74 85       	ldd	r23, Z+12	; 0x0c
    28d2:	ce 01       	movw	r24, r28
    28d4:	01 96       	adiw	r24, 0x01	; 1
    28d6:	0e 94 e3 1d 	call	0x3bc6	; 0x3bc6 <strcpy>
    28da:	69 81       	ldd	r22, Y+1	; 0x01
    28dc:	66 23       	and	r22, r22
    28de:	99 f0       	breq	.+38     	; 0x2906 <schedule_job+0x25a>
    28e0:	6e 01       	movw	r12, r28
    28e2:	f2 e0       	ldi	r31, 0x02	; 2
    28e4:	cf 0e       	add	r12, r31
    28e6:	d1 1c       	adc	r13, r1
    28e8:	68 94       	set
    28ea:	ee 24       	eor	r14, r14
    28ec:	e6 f8       	bld	r14, 6
    28ee:	f1 2c       	mov	r15, r1
    28f0:	c7 01       	movw	r24, r14
    28f2:	0e 94 7d 04 	call	0x8fa	; 0x8fa <nvm_eeprom_write_byte>
    28f6:	8f ef       	ldi	r24, 0xFF	; 255
    28f8:	e8 1a       	sub	r14, r24
    28fa:	f8 0a       	sbc	r15, r24
    28fc:	f6 01       	movw	r30, r12
    28fe:	61 91       	ld	r22, Z+
    2900:	6f 01       	movw	r12, r30
    2902:	61 11       	cpse	r22, r1
    2904:	f5 cf       	rjmp	.-22     	; 0x28f0 <schedule_job+0x244>
    2906:	64 e4       	ldi	r22, 0x44	; 68
    2908:	70 e2       	ldi	r23, 0x20	; 32
    290a:	f8 01       	movw	r30, r16
    290c:	87 81       	ldd	r24, Z+7	; 0x07
    290e:	90 85       	ldd	r25, Z+8	; 0x08
    2910:	0e 94 da 1d 	call	0x3bb4	; 0x3bb4 <strcmp>
    2914:	28 2f       	mov	r18, r24
    2916:	39 2f       	mov	r19, r25
    2918:	23 2b       	or	r18, r19
    291a:	19 f5       	brne	.+70     	; 0x2962 <schedule_job+0x2b6>
    291c:	6f e5       	ldi	r22, 0x5F	; 95
    291e:	70 e0       	ldi	r23, 0x00	; 0
    2920:	80 e5       	ldi	r24, 0x50	; 80
    2922:	90 e0       	ldi	r25, 0x00	; 0
    2924:	ad de       	rcall	.-678    	; 0x2680 <clear_eeprom>
    2926:	f8 01       	movw	r30, r16
    2928:	63 85       	ldd	r22, Z+11	; 0x0b
    292a:	74 85       	ldd	r23, Z+12	; 0x0c
    292c:	ce 01       	movw	r24, r28
    292e:	01 96       	adiw	r24, 0x01	; 1
    2930:	0e 94 e3 1d 	call	0x3bc6	; 0x3bc6 <strcpy>
    2934:	69 81       	ldd	r22, Y+1	; 0x01
    2936:	66 23       	and	r22, r22
    2938:	a1 f0       	breq	.+40     	; 0x2962 <schedule_job+0x2b6>
    293a:	6e 01       	movw	r12, r28
    293c:	f2 e0       	ldi	r31, 0x02	; 2
    293e:	cf 0e       	add	r12, r31
    2940:	d1 1c       	adc	r13, r1
    2942:	0f 2e       	mov	r0, r31
    2944:	f0 e5       	ldi	r31, 0x50	; 80
    2946:	ef 2e       	mov	r14, r31
    2948:	f1 2c       	mov	r15, r1
    294a:	f0 2d       	mov	r31, r0
    294c:	c7 01       	movw	r24, r14
    294e:	0e 94 7d 04 	call	0x8fa	; 0x8fa <nvm_eeprom_write_byte>
    2952:	8f ef       	ldi	r24, 0xFF	; 255
    2954:	e8 1a       	sub	r14, r24
    2956:	f8 0a       	sbc	r15, r24
    2958:	f6 01       	movw	r30, r12
    295a:	61 91       	ld	r22, Z+
    295c:	6f 01       	movw	r12, r30
    295e:	61 11       	cpse	r22, r1
    2960:	f5 cf       	rjmp	.-22     	; 0x294c <schedule_job+0x2a0>
    2962:	6b e4       	ldi	r22, 0x4B	; 75
    2964:	70 e2       	ldi	r23, 0x20	; 32
    2966:	f8 01       	movw	r30, r16
    2968:	87 81       	ldd	r24, Z+7	; 0x07
    296a:	90 85       	ldd	r25, Z+8	; 0x08
    296c:	0e 94 da 1d 	call	0x3bb4	; 0x3bb4 <strcmp>
    2970:	28 2f       	mov	r18, r24
    2972:	39 2f       	mov	r19, r25
    2974:	23 2b       	or	r18, r19
    2976:	11 f4       	brne	.+4      	; 0x297c <schedule_job+0x2d0>
    2978:	80 e0       	ldi	r24, 0x00	; 0
    297a:	0d dc       	rcall	.-2022   	; 0x2196 <wipe_ica2_eeprom>
    297c:	62 e5       	ldi	r22, 0x52	; 82
    297e:	70 e2       	ldi	r23, 0x20	; 32
    2980:	f8 01       	movw	r30, r16
    2982:	87 81       	ldd	r24, Z+7	; 0x07
    2984:	90 85       	ldd	r25, Z+8	; 0x08
    2986:	0e 94 da 1d 	call	0x3bb4	; 0x3bb4 <strcmp>
    298a:	28 2f       	mov	r18, r24
    298c:	39 2f       	mov	r19, r25
    298e:	23 2b       	or	r18, r19
    2990:	11 f4       	brne	.+4      	; 0x2996 <schedule_job+0x2ea>
    2992:	81 e0       	ldi	r24, 0x01	; 1
    2994:	00 dc       	rcall	.-2048   	; 0x2196 <wipe_ica2_eeprom>
    2996:	69 e5       	ldi	r22, 0x59	; 89
    2998:	70 e2       	ldi	r23, 0x20	; 32
    299a:	f8 01       	movw	r30, r16
    299c:	87 81       	ldd	r24, Z+7	; 0x07
    299e:	90 85       	ldd	r25, Z+8	; 0x08
    29a0:	0e 94 da 1d 	call	0x3bb4	; 0x3bb4 <strcmp>
    29a4:	28 2f       	mov	r18, r24
    29a6:	39 2f       	mov	r19, r25
    29a8:	23 2b       	or	r18, r19
    29aa:	11 f4       	brne	.+4      	; 0x29b0 <schedule_job+0x304>
    29ac:	82 e0       	ldi	r24, 0x02	; 2
    29ae:	f3 db       	rcall	.-2074   	; 0x2196 <wipe_ica2_eeprom>
    29b0:	65 e6       	ldi	r22, 0x65	; 101
    29b2:	70 e2       	ldi	r23, 0x20	; 32
    29b4:	f8 01       	movw	r30, r16
    29b6:	85 81       	ldd	r24, Z+5	; 0x05
    29b8:	96 81       	ldd	r25, Z+6	; 0x06
    29ba:	0e 94 da 1d 	call	0x3bb4	; 0x3bb4 <strcmp>
    29be:	28 2f       	mov	r18, r24
    29c0:	39 2f       	mov	r19, r25
    29c2:	23 2b       	or	r18, r19
    29c4:	09 f0       	breq	.+2      	; 0x29c8 <schedule_job+0x31c>
    29c6:	b0 c0       	rjmp	.+352    	; 0x2b28 <schedule_job+0x47c>
    29c8:	66 e3       	ldi	r22, 0x36	; 54
    29ca:	70 e2       	ldi	r23, 0x20	; 32
    29cc:	f8 01       	movw	r30, r16
    29ce:	87 81       	ldd	r24, Z+7	; 0x07
    29d0:	90 85       	ldd	r25, Z+8	; 0x08
    29d2:	0e 94 da 1d 	call	0x3bb4	; 0x3bb4 <strcmp>
    29d6:	28 2f       	mov	r18, r24
    29d8:	39 2f       	mov	r19, r25
    29da:	23 2b       	or	r18, r19
    29dc:	19 f5       	brne	.+70     	; 0x2a24 <schedule_job+0x378>
    29de:	6f e6       	ldi	r22, 0x6F	; 111
    29e0:	70 e0       	ldi	r23, 0x00	; 0
    29e2:	80 e6       	ldi	r24, 0x60	; 96
    29e4:	90 e0       	ldi	r25, 0x00	; 0
    29e6:	4c de       	rcall	.-872    	; 0x2680 <clear_eeprom>
    29e8:	f8 01       	movw	r30, r16
    29ea:	63 85       	ldd	r22, Z+11	; 0x0b
    29ec:	74 85       	ldd	r23, Z+12	; 0x0c
    29ee:	ce 01       	movw	r24, r28
    29f0:	01 96       	adiw	r24, 0x01	; 1
    29f2:	0e 94 e3 1d 	call	0x3bc6	; 0x3bc6 <strcpy>
    29f6:	69 81       	ldd	r22, Y+1	; 0x01
    29f8:	66 23       	and	r22, r22
    29fa:	a1 f0       	breq	.+40     	; 0x2a24 <schedule_job+0x378>
    29fc:	6e 01       	movw	r12, r28
    29fe:	f2 e0       	ldi	r31, 0x02	; 2
    2a00:	cf 0e       	add	r12, r31
    2a02:	d1 1c       	adc	r13, r1
    2a04:	0f 2e       	mov	r0, r31
    2a06:	f0 e6       	ldi	r31, 0x60	; 96
    2a08:	ef 2e       	mov	r14, r31
    2a0a:	f1 2c       	mov	r15, r1
    2a0c:	f0 2d       	mov	r31, r0
    2a0e:	c7 01       	movw	r24, r14
    2a10:	0e 94 7d 04 	call	0x8fa	; 0x8fa <nvm_eeprom_write_byte>
    2a14:	8f ef       	ldi	r24, 0xFF	; 255
    2a16:	e8 1a       	sub	r14, r24
    2a18:	f8 0a       	sbc	r15, r24
    2a1a:	f6 01       	movw	r30, r12
    2a1c:	61 91       	ld	r22, Z+
    2a1e:	6f 01       	movw	r12, r30
    2a20:	61 11       	cpse	r22, r1
    2a22:	f5 cf       	rjmp	.-22     	; 0x2a0e <schedule_job+0x362>
    2a24:	6d e3       	ldi	r22, 0x3D	; 61
    2a26:	70 e2       	ldi	r23, 0x20	; 32
    2a28:	f8 01       	movw	r30, r16
    2a2a:	87 81       	ldd	r24, Z+7	; 0x07
    2a2c:	90 85       	ldd	r25, Z+8	; 0x08
    2a2e:	0e 94 da 1d 	call	0x3bb4	; 0x3bb4 <strcmp>
    2a32:	28 2f       	mov	r18, r24
    2a34:	39 2f       	mov	r19, r25
    2a36:	23 2b       	or	r18, r19
    2a38:	19 f5       	brne	.+70     	; 0x2a80 <schedule_job+0x3d4>
    2a3a:	6f e7       	ldi	r22, 0x7F	; 127
    2a3c:	70 e0       	ldi	r23, 0x00	; 0
    2a3e:	80 e7       	ldi	r24, 0x70	; 112
    2a40:	90 e0       	ldi	r25, 0x00	; 0
    2a42:	1e de       	rcall	.-964    	; 0x2680 <clear_eeprom>
    2a44:	f8 01       	movw	r30, r16
    2a46:	63 85       	ldd	r22, Z+11	; 0x0b
    2a48:	74 85       	ldd	r23, Z+12	; 0x0c
    2a4a:	ce 01       	movw	r24, r28
    2a4c:	01 96       	adiw	r24, 0x01	; 1
    2a4e:	0e 94 e3 1d 	call	0x3bc6	; 0x3bc6 <strcpy>
    2a52:	69 81       	ldd	r22, Y+1	; 0x01
    2a54:	66 23       	and	r22, r22
    2a56:	a1 f0       	breq	.+40     	; 0x2a80 <schedule_job+0x3d4>
    2a58:	6e 01       	movw	r12, r28
    2a5a:	f2 e0       	ldi	r31, 0x02	; 2
    2a5c:	cf 0e       	add	r12, r31
    2a5e:	d1 1c       	adc	r13, r1
    2a60:	0f 2e       	mov	r0, r31
    2a62:	f0 e7       	ldi	r31, 0x70	; 112
    2a64:	ef 2e       	mov	r14, r31
    2a66:	f1 2c       	mov	r15, r1
    2a68:	f0 2d       	mov	r31, r0
    2a6a:	c7 01       	movw	r24, r14
    2a6c:	0e 94 7d 04 	call	0x8fa	; 0x8fa <nvm_eeprom_write_byte>
    2a70:	8f ef       	ldi	r24, 0xFF	; 255
    2a72:	e8 1a       	sub	r14, r24
    2a74:	f8 0a       	sbc	r15, r24
    2a76:	f6 01       	movw	r30, r12
    2a78:	61 91       	ld	r22, Z+
    2a7a:	6f 01       	movw	r12, r30
    2a7c:	61 11       	cpse	r22, r1
    2a7e:	f5 cf       	rjmp	.-22     	; 0x2a6a <schedule_job+0x3be>
    2a80:	64 e4       	ldi	r22, 0x44	; 68
    2a82:	70 e2       	ldi	r23, 0x20	; 32
    2a84:	f8 01       	movw	r30, r16
    2a86:	87 81       	ldd	r24, Z+7	; 0x07
    2a88:	90 85       	ldd	r25, Z+8	; 0x08
    2a8a:	0e 94 da 1d 	call	0x3bb4	; 0x3bb4 <strcmp>
    2a8e:	28 2f       	mov	r18, r24
    2a90:	39 2f       	mov	r19, r25
    2a92:	23 2b       	or	r18, r19
    2a94:	11 f5       	brne	.+68     	; 0x2ada <schedule_job+0x42e>
    2a96:	6f e8       	ldi	r22, 0x8F	; 143
    2a98:	70 e0       	ldi	r23, 0x00	; 0
    2a9a:	80 e8       	ldi	r24, 0x80	; 128
    2a9c:	90 e0       	ldi	r25, 0x00	; 0
    2a9e:	f0 dd       	rcall	.-1056   	; 0x2680 <clear_eeprom>
    2aa0:	f8 01       	movw	r30, r16
    2aa2:	63 85       	ldd	r22, Z+11	; 0x0b
    2aa4:	74 85       	ldd	r23, Z+12	; 0x0c
    2aa6:	ce 01       	movw	r24, r28
    2aa8:	01 96       	adiw	r24, 0x01	; 1
    2aaa:	0e 94 e3 1d 	call	0x3bc6	; 0x3bc6 <strcpy>
    2aae:	69 81       	ldd	r22, Y+1	; 0x01
    2ab0:	66 23       	and	r22, r22
    2ab2:	99 f0       	breq	.+38     	; 0x2ada <schedule_job+0x42e>
    2ab4:	6e 01       	movw	r12, r28
    2ab6:	f2 e0       	ldi	r31, 0x02	; 2
    2ab8:	cf 0e       	add	r12, r31
    2aba:	d1 1c       	adc	r13, r1
    2abc:	68 94       	set
    2abe:	ee 24       	eor	r14, r14
    2ac0:	e7 f8       	bld	r14, 7
    2ac2:	f1 2c       	mov	r15, r1
    2ac4:	c7 01       	movw	r24, r14
    2ac6:	0e 94 7d 04 	call	0x8fa	; 0x8fa <nvm_eeprom_write_byte>
    2aca:	8f ef       	ldi	r24, 0xFF	; 255
    2acc:	e8 1a       	sub	r14, r24
    2ace:	f8 0a       	sbc	r15, r24
    2ad0:	f6 01       	movw	r30, r12
    2ad2:	61 91       	ld	r22, Z+
    2ad4:	6f 01       	movw	r12, r30
    2ad6:	61 11       	cpse	r22, r1
    2ad8:	f5 cf       	rjmp	.-22     	; 0x2ac4 <schedule_job+0x418>
    2ada:	6b e4       	ldi	r22, 0x4B	; 75
    2adc:	70 e2       	ldi	r23, 0x20	; 32
    2ade:	f8 01       	movw	r30, r16
    2ae0:	87 81       	ldd	r24, Z+7	; 0x07
    2ae2:	90 85       	ldd	r25, Z+8	; 0x08
    2ae4:	0e 94 da 1d 	call	0x3bb4	; 0x3bb4 <strcmp>
    2ae8:	28 2f       	mov	r18, r24
    2aea:	39 2f       	mov	r19, r25
    2aec:	23 2b       	or	r18, r19
    2aee:	11 f4       	brne	.+4      	; 0x2af4 <schedule_job+0x448>
    2af0:	80 e0       	ldi	r24, 0x00	; 0
    2af2:	7c db       	rcall	.-2312   	; 0x21ec <wipe_ica3_eeprom>
    2af4:	62 e5       	ldi	r22, 0x52	; 82
    2af6:	70 e2       	ldi	r23, 0x20	; 32
    2af8:	f8 01       	movw	r30, r16
    2afa:	87 81       	ldd	r24, Z+7	; 0x07
    2afc:	90 85       	ldd	r25, Z+8	; 0x08
    2afe:	0e 94 da 1d 	call	0x3bb4	; 0x3bb4 <strcmp>
    2b02:	28 2f       	mov	r18, r24
    2b04:	39 2f       	mov	r19, r25
    2b06:	23 2b       	or	r18, r19
    2b08:	11 f4       	brne	.+4      	; 0x2b0e <schedule_job+0x462>
    2b0a:	81 e0       	ldi	r24, 0x01	; 1
    2b0c:	6f db       	rcall	.-2338   	; 0x21ec <wipe_ica3_eeprom>
    2b0e:	69 e5       	ldi	r22, 0x59	; 89
    2b10:	70 e2       	ldi	r23, 0x20	; 32
    2b12:	f8 01       	movw	r30, r16
    2b14:	87 81       	ldd	r24, Z+7	; 0x07
    2b16:	90 85       	ldd	r25, Z+8	; 0x08
    2b18:	0e 94 da 1d 	call	0x3bb4	; 0x3bb4 <strcmp>
    2b1c:	28 2f       	mov	r18, r24
    2b1e:	39 2f       	mov	r19, r25
    2b20:	23 2b       	or	r18, r19
    2b22:	11 f4       	brne	.+4      	; 0x2b28 <schedule_job+0x47c>
    2b24:	82 e0       	ldi	r24, 0x02	; 2
    2b26:	62 db       	rcall	.-2364   	; 0x21ec <wipe_ica3_eeprom>
    2b28:	2f 96       	adiw	r28, 0x0f	; 15
    2b2a:	cd bf       	out	0x3d, r28	; 61
    2b2c:	de bf       	out	0x3e, r29	; 62
    2b2e:	df 91       	pop	r29
    2b30:	cf 91       	pop	r28
    2b32:	1f 91       	pop	r17
    2b34:	0f 91       	pop	r16
    2b36:	ff 90       	pop	r15
    2b38:	ef 90       	pop	r14
    2b3a:	df 90       	pop	r13
    2b3c:	cf 90       	pop	r12
    2b3e:	08 95       	ret

00002b40 <int_to_binary>:

void int_to_binary(int32_t k, int8_t bin_array[32])
{
    2b40:	cf 92       	push	r12
    2b42:	df 92       	push	r13
    2b44:	ef 92       	push	r14
    2b46:	ff 92       	push	r15
    2b48:	cf 93       	push	r28
    2b4a:	df 93       	push	r29
    2b4c:	6b 01       	movw	r12, r22
    2b4e:	7c 01       	movw	r14, r24
    2b50:	ea 01       	movw	r28, r20
    int8_t count = 0;
    int32_t value = k;
    DEBUG_puts("k : ");
    2b52:	84 e7       	ldi	r24, 0x74	; 116
    2b54:	90 e2       	ldi	r25, 0x20	; 32
    2b56:	0e 94 06 03 	call	0x60c	; 0x60c <DEBUG_puts>
    DEBUG_putu(k);
    2b5a:	c7 01       	movw	r24, r14
    2b5c:	b6 01       	movw	r22, r12
    2b5e:	0e 94 1a 03 	call	0x634	; 0x634 <DEBUG_putu>
    DEBUG_puts("\n \r");
    2b62:	84 ec       	ldi	r24, 0xC4	; 196
    2b64:	90 e2       	ldi	r25, 0x20	; 32
    2b66:	0e 94 06 03 	call	0x60c	; 0x60c <DEBUG_puts>
    return 0;
}

void int_to_binary(int32_t k, int8_t bin_array[32])
{
    int8_t count = 0;
    2b6a:	20 e0       	ldi	r18, 0x00	; 0
        bin_array[count] = k % 2;
        count++;
        value = k / 2 ;
        k = value;
        if (value == 1) {
            bin_array[count] = 1;
    2b6c:	41 e0       	ldi	r20, 0x01	; 1
    int8_t count = 0;
    int32_t value = k;
    DEBUG_puts("k : ");
    DEBUG_putu(k);
    DEBUG_puts("\n \r");
    while (value != 0 && value != 1) {
    2b6e:	3a c0       	rjmp	.+116    	; 0x2be4 <int_to_binary+0xa4>
        bin_array[count] = k % 2;
    2b70:	fe 01       	movw	r30, r28
    2b72:	e2 0f       	add	r30, r18
    2b74:	f1 1d       	adc	r31, r1
    2b76:	27 fd       	sbrc	r18, 7
    2b78:	fa 95       	dec	r31
    2b7a:	d7 01       	movw	r26, r14
    2b7c:	c6 01       	movw	r24, r12
    2b7e:	81 70       	andi	r24, 0x01	; 1
    2b80:	99 27       	eor	r25, r25
    2b82:	aa 27       	eor	r26, r26
    2b84:	b0 78       	andi	r27, 0x80	; 128
    2b86:	bb 23       	and	r27, r27
    2b88:	54 f4       	brge	.+20     	; 0x2b9e <int_to_binary+0x5e>
    2b8a:	01 97       	sbiw	r24, 0x01	; 1
    2b8c:	a1 09       	sbc	r26, r1
    2b8e:	b1 09       	sbc	r27, r1
    2b90:	8e 6f       	ori	r24, 0xFE	; 254
    2b92:	9f 6f       	ori	r25, 0xFF	; 255
    2b94:	af 6f       	ori	r26, 0xFF	; 255
    2b96:	bf 6f       	ori	r27, 0xFF	; 255
    2b98:	01 96       	adiw	r24, 0x01	; 1
    2b9a:	a1 1d       	adc	r26, r1
    2b9c:	b1 1d       	adc	r27, r1
    2b9e:	80 83       	st	Z, r24
        count++;
    2ba0:	32 2f       	mov	r19, r18
    2ba2:	3f 5f       	subi	r19, 0xFF	; 255
        value = k / 2 ;
    2ba4:	d7 01       	movw	r26, r14
    2ba6:	c6 01       	movw	r24, r12
    2ba8:	ff 20       	and	r15, r15
    2baa:	1c f4       	brge	.+6      	; 0x2bb2 <int_to_binary+0x72>
    2bac:	01 96       	adiw	r24, 0x01	; 1
    2bae:	a1 1d       	adc	r26, r1
    2bb0:	b1 1d       	adc	r27, r1
    2bb2:	6c 01       	movw	r12, r24
    2bb4:	7d 01       	movw	r14, r26
    2bb6:	f5 94       	asr	r15
    2bb8:	e7 94       	ror	r14
    2bba:	d7 94       	ror	r13
    2bbc:	c7 94       	ror	r12
        k = value;
        if (value == 1) {
    2bbe:	81 e0       	ldi	r24, 0x01	; 1
    2bc0:	c8 16       	cp	r12, r24
    2bc2:	d1 04       	cpc	r13, r1
    2bc4:	e1 04       	cpc	r14, r1
    2bc6:	f1 04       	cpc	r15, r1
    2bc8:	61 f4       	brne	.+24     	; 0x2be2 <int_to_binary+0xa2>
            bin_array[count] = 1;
    2bca:	fe 01       	movw	r30, r28
    2bcc:	e3 0f       	add	r30, r19
    2bce:	f1 1d       	adc	r31, r1
    2bd0:	37 fd       	sbrc	r19, 7
    2bd2:	fa 95       	dec	r31
    2bd4:	40 83       	st	Z, r20
            count++;
    2bd6:	32 2f       	mov	r19, r18
    2bd8:	3e 5f       	subi	r19, 0xFE	; 254
    2bda:	c1 2c       	mov	r12, r1
    2bdc:	d1 2c       	mov	r13, r1
    2bde:	76 01       	movw	r14, r12
    2be0:	c3 94       	inc	r12
    2be2:	23 2f       	mov	r18, r19
    int8_t count = 0;
    int32_t value = k;
    DEBUG_puts("k : ");
    DEBUG_putu(k);
    DEBUG_puts("\n \r");
    while (value != 0 && value != 1) {
    2be4:	82 e0       	ldi	r24, 0x02	; 2
    2be6:	c8 16       	cp	r12, r24
    2be8:	d1 04       	cpc	r13, r1
    2bea:	e1 04       	cpc	r14, r1
    2bec:	f1 04       	cpc	r15, r1
    2bee:	08 f0       	brcs	.+2      	; 0x2bf2 <int_to_binary+0xb2>
    2bf0:	bf cf       	rjmp	.-130    	; 0x2b70 <int_to_binary+0x30>
            bin_array[count] = 1;
            count++;
        }
    }
    return 0;
}//int_to_binary
    2bf2:	df 91       	pop	r29
    2bf4:	cf 91       	pop	r28
    2bf6:	ff 90       	pop	r15
    2bf8:	ef 90       	pop	r14
    2bfa:	df 90       	pop	r13
    2bfc:	cf 90       	pop	r12
    2bfe:	08 95       	ret

00002c00 <execute_jobs>:



void execute_jobs(char* scheduled_char_time_ptr, int8_t size, char* asset)
{
    2c00:	2f 92       	push	r2
    2c02:	3f 92       	push	r3
    2c04:	4f 92       	push	r4
    2c06:	5f 92       	push	r5
    2c08:	6f 92       	push	r6
    2c0a:	7f 92       	push	r7
    2c0c:	8f 92       	push	r8
    2c0e:	9f 92       	push	r9
    2c10:	af 92       	push	r10
    2c12:	bf 92       	push	r11
    2c14:	cf 92       	push	r12
    2c16:	df 92       	push	r13
    2c18:	ef 92       	push	r14
    2c1a:	ff 92       	push	r15
    2c1c:	0f 93       	push	r16
    2c1e:	1f 93       	push	r17
    2c20:	cf 93       	push	r28
    2c22:	df 93       	push	r29
    2c24:	cd b7       	in	r28, 0x3d	; 61
    2c26:	de b7       	in	r29, 0x3e	; 62
    2c28:	a0 97       	sbiw	r28, 0x20	; 32
    2c2a:	cd bf       	out	0x3d, r28	; 61
    2c2c:	de bf       	out	0x3e, r29	; 62
    2c2e:	6c 01       	movw	r12, r24
    2c30:	f6 2e       	mov	r15, r22
    2c32:	5a 01       	movw	r10, r20
    int32_t job_value = 0;
    int8_t array_pos = 0;
    int8_t bin_array_pass [32] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    2c34:	de 01       	movw	r26, r28
    2c36:	11 96       	adiw	r26, 0x01	; 1
    2c38:	80 e2       	ldi	r24, 0x20	; 32
    2c3a:	fd 01       	movw	r30, r26
    2c3c:	11 92       	st	Z+, r1
    2c3e:	8a 95       	dec	r24
    2c40:	e9 f7       	brne	.-6      	; 0x2c3c <execute_jobs+0x3c>
    uint32_t current_time = rtc_get_time(); //seconds
    2c42:	0e 94 32 05 	call	0xa64	; 0xa64 <rtc_get_time>
    uint32_t end_time = 0; //seconds
    uint32_t timeslot_offset = 0;
    int8_t next_bin_value = 0; // check the next value of the binary array to check if next job has been set to not stop the current job.
    bool next_job = false;

    for (int x = (size - 1); x >= 0; x--) {
    2c46:	ef 2d       	mov	r30, r15
    2c48:	ff 27       	eor	r31, r31
    2c4a:	e7 fd       	sbrc	r30, 7
    2c4c:	f0 95       	com	r31
    2c4e:	31 97       	sbiw	r30, 0x01	; 1
    2c50:	0a f4       	brpl	.+2      	; 0x2c54 <execute_jobs+0x54>
    2c52:	c3 c0       	rjmp	.+390    	; 0x2dda <execute_jobs+0x1da>
    return 0;
}//int_to_binary



void execute_jobs(char* scheduled_char_time_ptr, int8_t size, char* asset)
    2c54:	ec 0d       	add	r30, r12
    2c56:	fd 1d       	adc	r31, r13
    2c58:	76 01       	movw	r14, r12
    2c5a:	21 e0       	ldi	r18, 0x01	; 1
    2c5c:	e2 1a       	sub	r14, r18
    2c5e:	f1 08       	sbc	r15, r1
{
    int32_t job_value = 0;
    int8_t array_pos = 0;
    2c60:	10 e0       	ldi	r17, 0x00	; 0



void execute_jobs(char* scheduled_char_time_ptr, int8_t size, char* asset)
{
    int32_t job_value = 0;
    2c62:	41 2c       	mov	r4, r1
    2c64:	51 2c       	mov	r5, r1
    2c66:	32 01       	movw	r6, r4
    uint32_t timeslot_offset = 0;
    int8_t next_bin_value = 0; // check the next value of the binary array to check if next job has been set to not stop the current job.
    bool next_job = false;

    for (int x = (size - 1); x >= 0; x--) {
        if ((Byte)(scheduled_char_time_ptr) != 0xFF) {
    2c68:	3f ef       	ldi	r19, 0xFF	; 255
    2c6a:	c3 16       	cp	r12, r19
    2c6c:	09 f4       	brne	.+2      	; 0x2c70 <execute_jobs+0x70>
    2c6e:	a1 c0       	rjmp	.+322    	; 0x2db2 <execute_jobs+0x1b2>
            int32_t char_byte = (int32_t)(scheduled_char_time_ptr[x] - '0');
    2c70:	a0 81       	ld	r26, Z
    2c72:	bb 27       	eor	r27, r27
    2c74:	a7 fd       	sbrc	r26, 7
    2c76:	b0 95       	com	r27
    2c78:	d0 97       	sbiw	r26, 0x30	; 48
    2c7a:	9d 01       	movw	r18, r26
    2c7c:	44 27       	eor	r20, r20
    2c7e:	37 fd       	sbrc	r19, 7
    2c80:	40 95       	com	r20
    2c82:	54 2f       	mov	r21, r20
            switch (array_pos) {
    2c84:	15 30       	cpi	r17, 0x05	; 5
    2c86:	09 f4       	brne	.+2      	; 0x2c8a <execute_jobs+0x8a>
    2c88:	58 c0       	rjmp	.+176    	; 0x2d3a <execute_jobs+0x13a>
    2c8a:	7c f4       	brge	.+30     	; 0x2caa <execute_jobs+0xaa>
    2c8c:	12 30       	cpi	r17, 0x02	; 2
    2c8e:	e9 f1       	breq	.+122    	; 0x2d0a <execute_jobs+0x10a>
    2c90:	34 f4       	brge	.+12     	; 0x2c9e <execute_jobs+0x9e>
    2c92:	11 23       	and	r17, r17
    2c94:	e1 f0       	breq	.+56     	; 0x2cce <execute_jobs+0xce>
    2c96:	11 30       	cpi	r17, 0x01	; 1
    2c98:	09 f0       	breq	.+2      	; 0x2c9c <execute_jobs+0x9c>
    2c9a:	8a c0       	rjmp	.+276    	; 0x2db0 <execute_jobs+0x1b0>
    2c9c:	1d c0       	rjmp	.+58     	; 0x2cd8 <execute_jobs+0xd8>
    2c9e:	13 30       	cpi	r17, 0x03	; 3
    2ca0:	e1 f1       	breq	.+120    	; 0x2d1a <execute_jobs+0x11a>
    2ca2:	14 30       	cpi	r17, 0x04	; 4
    2ca4:	09 f0       	breq	.+2      	; 0x2ca8 <execute_jobs+0xa8>
    2ca6:	84 c0       	rjmp	.+264    	; 0x2db0 <execute_jobs+0x1b0>
    2ca8:	40 c0       	rjmp	.+128    	; 0x2d2a <execute_jobs+0x12a>
    2caa:	18 30       	cpi	r17, 0x08	; 8
    2cac:	09 f4       	brne	.+2      	; 0x2cb0 <execute_jobs+0xb0>
    2cae:	63 c0       	rjmp	.+198    	; 0x2d76 <execute_jobs+0x176>
    2cb0:	3c f4       	brge	.+14     	; 0x2cc0 <execute_jobs+0xc0>
    2cb2:	16 30       	cpi	r17, 0x06	; 6
    2cb4:	09 f4       	brne	.+2      	; 0x2cb8 <execute_jobs+0xb8>
    2cb6:	4b c0       	rjmp	.+150    	; 0x2d4e <execute_jobs+0x14e>
    2cb8:	17 30       	cpi	r17, 0x07	; 7
    2cba:	09 f0       	breq	.+2      	; 0x2cbe <execute_jobs+0xbe>
    2cbc:	79 c0       	rjmp	.+242    	; 0x2db0 <execute_jobs+0x1b0>
    2cbe:	51 c0       	rjmp	.+162    	; 0x2d62 <execute_jobs+0x162>
    2cc0:	19 30       	cpi	r17, 0x09	; 9
    2cc2:	09 f4       	brne	.+2      	; 0x2cc6 <execute_jobs+0xc6>
    2cc4:	62 c0       	rjmp	.+196    	; 0x2d8a <execute_jobs+0x18a>
    2cc6:	1a 30       	cpi	r17, 0x0A	; 10
    2cc8:	09 f0       	breq	.+2      	; 0x2ccc <execute_jobs+0xcc>
    2cca:	72 c0       	rjmp	.+228    	; 0x2db0 <execute_jobs+0x1b0>
    2ccc:	68 c0       	rjmp	.+208    	; 0x2d9e <execute_jobs+0x19e>
            case 0 : {
                job_value = job_value + char_byte;
    2cce:	42 0e       	add	r4, r18
    2cd0:	53 1e       	adc	r5, r19
    2cd2:	64 1e       	adc	r6, r20
    2cd4:	75 1e       	adc	r7, r21
                break;
    2cd6:	6c c0       	rjmp	.+216    	; 0x2db0 <execute_jobs+0x1b0>
            }
            case 1: {
                job_value = job_value + 10 * char_byte;
    2cd8:	ba 01       	movw	r22, r20
    2cda:	a9 01       	movw	r20, r18
    2cdc:	44 0f       	add	r20, r20
    2cde:	55 1f       	adc	r21, r21
    2ce0:	66 1f       	adc	r22, r22
    2ce2:	77 1f       	adc	r23, r23
    2ce4:	db 01       	movw	r26, r22
    2ce6:	ca 01       	movw	r24, r20
    2ce8:	88 0f       	add	r24, r24
    2cea:	99 1f       	adc	r25, r25
    2cec:	aa 1f       	adc	r26, r26
    2cee:	bb 1f       	adc	r27, r27
    2cf0:	88 0f       	add	r24, r24
    2cf2:	99 1f       	adc	r25, r25
    2cf4:	aa 1f       	adc	r26, r26
    2cf6:	bb 1f       	adc	r27, r27
    2cf8:	84 0f       	add	r24, r20
    2cfa:	95 1f       	adc	r25, r21
    2cfc:	a6 1f       	adc	r26, r22
    2cfe:	b7 1f       	adc	r27, r23
    2d00:	48 0e       	add	r4, r24
    2d02:	59 1e       	adc	r5, r25
    2d04:	6a 1e       	adc	r6, r26
    2d06:	7b 1e       	adc	r7, r27
                break;
    2d08:	53 c0       	rjmp	.+166    	; 0x2db0 <execute_jobs+0x1b0>
            }
            case 2: {
                job_value = job_value + 100 * char_byte;
    2d0a:	a4 e6       	ldi	r26, 0x64	; 100
    2d0c:	b0 e0       	ldi	r27, 0x00	; 0
    2d0e:	34 d7       	rcall	.+3688   	; 0x3b78 <__muluhisi3>
    2d10:	46 0e       	add	r4, r22
    2d12:	57 1e       	adc	r5, r23
    2d14:	68 1e       	adc	r6, r24
    2d16:	79 1e       	adc	r7, r25
                break;
    2d18:	4b c0       	rjmp	.+150    	; 0x2db0 <execute_jobs+0x1b0>
            }
            case 3: {
                job_value = job_value + 1000 * char_byte;
    2d1a:	a8 ee       	ldi	r26, 0xE8	; 232
    2d1c:	b3 e0       	ldi	r27, 0x03	; 3
    2d1e:	2c d7       	rcall	.+3672   	; 0x3b78 <__muluhisi3>
    2d20:	46 0e       	add	r4, r22
    2d22:	57 1e       	adc	r5, r23
    2d24:	68 1e       	adc	r6, r24
    2d26:	79 1e       	adc	r7, r25
                break;
    2d28:	43 c0       	rjmp	.+134    	; 0x2db0 <execute_jobs+0x1b0>
            }
            case 4: {
                job_value = job_value + 10000 * char_byte;
    2d2a:	a0 e1       	ldi	r26, 0x10	; 16
    2d2c:	b7 e2       	ldi	r27, 0x27	; 39
    2d2e:	24 d7       	rcall	.+3656   	; 0x3b78 <__muluhisi3>
    2d30:	46 0e       	add	r4, r22
    2d32:	57 1e       	adc	r5, r23
    2d34:	68 1e       	adc	r6, r24
    2d36:	79 1e       	adc	r7, r25
                break;
    2d38:	3b c0       	rjmp	.+118    	; 0x2db0 <execute_jobs+0x1b0>
            }
            case 5: {
                job_value = job_value + 100000 * char_byte;
    2d3a:	60 ea       	ldi	r22, 0xA0	; 160
    2d3c:	76 e8       	ldi	r23, 0x86	; 134
    2d3e:	81 e0       	ldi	r24, 0x01	; 1
    2d40:	90 e0       	ldi	r25, 0x00	; 0
    2d42:	dd d6       	rcall	.+3514   	; 0x3afe <__mulsi3>
    2d44:	46 0e       	add	r4, r22
    2d46:	57 1e       	adc	r5, r23
    2d48:	68 1e       	adc	r6, r24
    2d4a:	79 1e       	adc	r7, r25
                break;
    2d4c:	31 c0       	rjmp	.+98     	; 0x2db0 <execute_jobs+0x1b0>
            }
            case 6: {
                job_value = job_value + 1000000 * char_byte;
    2d4e:	60 e4       	ldi	r22, 0x40	; 64
    2d50:	72 e4       	ldi	r23, 0x42	; 66
    2d52:	8f e0       	ldi	r24, 0x0F	; 15
    2d54:	90 e0       	ldi	r25, 0x00	; 0
    2d56:	d3 d6       	rcall	.+3494   	; 0x3afe <__mulsi3>
    2d58:	46 0e       	add	r4, r22
    2d5a:	57 1e       	adc	r5, r23
    2d5c:	68 1e       	adc	r6, r24
    2d5e:	79 1e       	adc	r7, r25
                break;
    2d60:	27 c0       	rjmp	.+78     	; 0x2db0 <execute_jobs+0x1b0>
            }
            case 7: {
                job_value = job_value + 10000000 * char_byte;
    2d62:	60 e8       	ldi	r22, 0x80	; 128
    2d64:	76 e9       	ldi	r23, 0x96	; 150
    2d66:	88 e9       	ldi	r24, 0x98	; 152
    2d68:	90 e0       	ldi	r25, 0x00	; 0
    2d6a:	c9 d6       	rcall	.+3474   	; 0x3afe <__mulsi3>
    2d6c:	46 0e       	add	r4, r22
    2d6e:	57 1e       	adc	r5, r23
    2d70:	68 1e       	adc	r6, r24
    2d72:	79 1e       	adc	r7, r25
                break;
    2d74:	1d c0       	rjmp	.+58     	; 0x2db0 <execute_jobs+0x1b0>
            }
            case 8: {
                job_value = job_value + 100000000 * char_byte;
    2d76:	60 e0       	ldi	r22, 0x00	; 0
    2d78:	71 ee       	ldi	r23, 0xE1	; 225
    2d7a:	85 ef       	ldi	r24, 0xF5	; 245
    2d7c:	95 e0       	ldi	r25, 0x05	; 5
    2d7e:	bf d6       	rcall	.+3454   	; 0x3afe <__mulsi3>
    2d80:	46 0e       	add	r4, r22
    2d82:	57 1e       	adc	r5, r23
    2d84:	68 1e       	adc	r6, r24
    2d86:	79 1e       	adc	r7, r25
                break;
    2d88:	13 c0       	rjmp	.+38     	; 0x2db0 <execute_jobs+0x1b0>
            }
            case 9: {
                job_value = job_value + 1000000000 * char_byte;
    2d8a:	60 e0       	ldi	r22, 0x00	; 0
    2d8c:	7a ec       	ldi	r23, 0xCA	; 202
    2d8e:	8a e9       	ldi	r24, 0x9A	; 154
    2d90:	9b e3       	ldi	r25, 0x3B	; 59
    2d92:	b5 d6       	rcall	.+3434   	; 0x3afe <__mulsi3>
    2d94:	46 0e       	add	r4, r22
    2d96:	57 1e       	adc	r5, r23
    2d98:	68 1e       	adc	r6, r24
    2d9a:	79 1e       	adc	r7, r25
                break;
    2d9c:	09 c0       	rjmp	.+18     	; 0x2db0 <execute_jobs+0x1b0>
            }
            case 10: {
                job_value = job_value + 10000000000 * char_byte;
    2d9e:	20 e0       	ldi	r18, 0x00	; 0
    2da0:	34 ee       	ldi	r19, 0xE4	; 228
    2da2:	4b e0       	ldi	r20, 0x0B	; 11
    2da4:	54 e5       	ldi	r21, 0x54	; 84
    2da6:	f2 d6       	rcall	.+3556   	; 0x3b8c <__mulshisi3>
    2da8:	46 0e       	add	r4, r22
    2daa:	57 1e       	adc	r5, r23
    2dac:	68 1e       	adc	r6, r24
    2dae:	79 1e       	adc	r7, r25
                break;
            }
            }//switch
            array_pos++;
    2db0:	1f 5f       	subi	r17, 0xFF	; 255
    2db2:	31 97       	sbiw	r30, 0x01	; 1
    uint32_t end_time = 0; //seconds
    uint32_t timeslot_offset = 0;
    int8_t next_bin_value = 0; // check the next value of the binary array to check if next job has been set to not stop the current job.
    bool next_job = false;

    for (int x = (size - 1); x >= 0; x--) {
    2db4:	ee 15       	cp	r30, r14
    2db6:	ff 05       	cpc	r31, r15
    2db8:	09 f0       	breq	.+2      	; 0x2dbc <execute_jobs+0x1bc>
    2dba:	56 cf       	rjmp	.-340    	; 0x2c68 <execute_jobs+0x68>
            }//switch
            array_pos++;
        }//if
    }//for

    if (job_value < 0) { //if signed int32 value has overrun, then it is modified to represent the correct binary value
    2dbc:	77 20       	and	r7, r7
    2dbe:	84 f4       	brge	.+32     	; 0x2de0 <execute_jobs+0x1e0>
        uint32_t temp_value = -1 * job_value + 2147483648;
    2dc0:	80 e0       	ldi	r24, 0x00	; 0
    2dc2:	90 e0       	ldi	r25, 0x00	; 0
    2dc4:	a0 e0       	ldi	r26, 0x00	; 0
    2dc6:	b0 e8       	ldi	r27, 0x80	; 128
    2dc8:	9c 01       	movw	r18, r24
    2dca:	ad 01       	movw	r20, r26
    2dcc:	24 19       	sub	r18, r4
    2dce:	35 09       	sbc	r19, r5
    2dd0:	46 09       	sbc	r20, r6
    2dd2:	57 09       	sbc	r21, r7
    2dd4:	29 01       	movw	r4, r18
    2dd6:	3a 01       	movw	r6, r20
    2dd8:	03 c0       	rjmp	.+6      	; 0x2de0 <execute_jobs+0x1e0>



void execute_jobs(char* scheduled_char_time_ptr, int8_t size, char* asset)
{
    int32_t job_value = 0;
    2dda:	41 2c       	mov	r4, r1
    2ddc:	51 2c       	mov	r5, r1
    2dde:	32 01       	movw	r6, r4
    if (job_value < 0) { //if signed int32 value has overrun, then it is modified to represent the correct binary value
        uint32_t temp_value = -1 * job_value + 2147483648;
        job_value = temp_value;
    }

    int_to_binary(job_value, bin_array_pass);
    2de0:	ae 01       	movw	r20, r28
    2de2:	4f 5f       	subi	r20, 0xFF	; 255
    2de4:	5f 4f       	sbci	r21, 0xFF	; 255
    2de6:	c3 01       	movw	r24, r6
    2de8:	b2 01       	movw	r22, r4
    2dea:	aa de       	rcall	.-684    	; 0x2b40 <int_to_binary>
    current_time = rtc_get_time();
    2dec:	0e 94 32 05 	call	0xa64	; 0xa64 <rtc_get_time>
    2df0:	6b 01       	movw	r12, r22
    2df2:	7c 01       	movw	r14, r24

    if (asset == "ICA1_ts0") {
    2df4:	39 e7       	ldi	r19, 0x79	; 121
    2df6:	a3 16       	cp	r10, r19
    2df8:	30 e2       	ldi	r19, 0x20	; 32
    2dfa:	b3 06       	cpc	r11, r19
    2dfc:	09 f0       	breq	.+2      	; 0x2e00 <execute_jobs+0x200>
    2dfe:	66 c0       	rjmp	.+204    	; 0x2ecc <execute_jobs+0x2cc>
    2e00:	88 24       	eor	r8, r8
    2e02:	83 94       	inc	r8
    2e04:	91 2c       	mov	r9, r1
    2e06:	8c 0e       	add	r8, r28
    2e08:	9d 1e       	adc	r9, r29
    2e0a:	21 2c       	mov	r2, r1
    2e0c:	31 2c       	mov	r3, r1
    2e0e:	21 01       	movw	r4, r2
    2e10:	00 e0       	ldi	r16, 0x00	; 0
    2e12:	10 e0       	ldi	r17, 0x00	; 0
    2e14:	71 2c       	mov	r7, r1
        timeslot_offset = 0;
        for (int arr_index = 0; arr_index < 32; arr_index ++) {
            if (bin_array_pass[arr_index] == 1) {
    2e16:	f4 01       	movw	r30, r8
    2e18:	81 91       	ld	r24, Z+
    2e1a:	4f 01       	movw	r8, r30
    2e1c:	81 30       	cpi	r24, 0x01	; 1
    2e1e:	09 f0       	breq	.+2      	; 0x2e22 <execute_jobs+0x222>
    2e20:	48 c0       	rjmp	.+144    	; 0x2eb2 <execute_jobs+0x2b2>
                start_time = arr_index * (15 * 60) + timeslot_offset;
                end_time = start_time + (15 * 60);
                if ((arr_index + 1) <= 31) {
    2e22:	0f 31       	cpi	r16, 0x1F	; 31
    2e24:	11 05       	cpc	r17, r1
    2e26:	34 f4       	brge	.+12     	; 0x2e34 <execute_jobs+0x234>
                    next_bin_value = bin_array_pass[arr_index + 1];
                    if (next_bin_value == 1) {
    2e28:	77 24       	eor	r7, r7
    2e2a:	73 94       	inc	r7
    2e2c:	80 81       	ld	r24, Z
    2e2e:	81 30       	cpi	r24, 0x01	; 1
    2e30:	09 f0       	breq	.+2      	; 0x2e34 <execute_jobs+0x234>
    2e32:	71 2c       	mov	r7, r1
                        next_job = true;
                    } else {
                        next_job = false;
                    }
                }
                if (current_time  >= start_time && current_time <= (start_time + 60)) {
    2e34:	c2 14       	cp	r12, r2
    2e36:	d3 04       	cpc	r13, r3
    2e38:	e4 04       	cpc	r14, r4
    2e3a:	f5 04       	cpc	r15, r5
    2e3c:	b0 f0       	brcs	.+44     	; 0x2e6a <execute_jobs+0x26a>
    2e3e:	d2 01       	movw	r26, r4
    2e40:	c1 01       	movw	r24, r2
    2e42:	cc 96       	adiw	r24, 0x3c	; 60
    2e44:	a1 1d       	adc	r26, r1
    2e46:	b1 1d       	adc	r27, r1
    2e48:	8c 15       	cp	r24, r12
    2e4a:	9d 05       	cpc	r25, r13
    2e4c:	ae 05       	cpc	r26, r14
    2e4e:	bf 05       	cpc	r27, r15
    2e50:	60 f0       	brcs	.+24     	; 0x2e6a <execute_jobs+0x26a>
                    //start pwm method
                    DEBUG_puts("!!!start pwm method-ICA1_ts0!!! \n \r");
    2e52:	82 e8       	ldi	r24, 0x82	; 130
    2e54:	90 e2       	ldi	r25, 0x20	; 32
    2e56:	0e 94 06 03 	call	0x60c	; 0x60c <DEBUG_puts>
                    pwm_toggle(0, true, 10, 10);
    2e5a:	2a e0       	ldi	r18, 0x0A	; 10
    2e5c:	30 e0       	ldi	r19, 0x00	; 0
    2e5e:	4a e0       	ldi	r20, 0x0A	; 10
    2e60:	50 e0       	ldi	r21, 0x00	; 0
    2e62:	61 e0       	ldi	r22, 0x01	; 1
    2e64:	80 e0       	ldi	r24, 0x00	; 0
    2e66:	90 e0       	ldi	r25, 0x00	; 0
    2e68:	4e da       	rcall	.-2916   	; 0x2306 <pwm_toggle>
                }
                if (current_time >= end_time && current_time <= (end_time + 60)) {
    2e6a:	d2 01       	movw	r26, r4
    2e6c:	c1 01       	movw	r24, r2
    2e6e:	8c 57       	subi	r24, 0x7C	; 124
    2e70:	9c 4f       	sbci	r25, 0xFC	; 252
    2e72:	af 4f       	sbci	r26, 0xFF	; 255
    2e74:	bf 4f       	sbci	r27, 0xFF	; 255
    2e76:	c8 16       	cp	r12, r24
    2e78:	d9 06       	cpc	r13, r25
    2e7a:	ea 06       	cpc	r14, r26
    2e7c:	fb 06       	cpc	r15, r27
    2e7e:	c8 f0       	brcs	.+50     	; 0x2eb2 <execute_jobs+0x2b2>
    2e80:	d2 01       	movw	r26, r4
    2e82:	c1 01       	movw	r24, r2
    2e84:	80 54       	subi	r24, 0x40	; 64
    2e86:	9c 4f       	sbci	r25, 0xFC	; 252
    2e88:	af 4f       	sbci	r26, 0xFF	; 255
    2e8a:	bf 4f       	sbci	r27, 0xFF	; 255
    2e8c:	8c 15       	cp	r24, r12
    2e8e:	9d 05       	cpc	r25, r13
    2e90:	ae 05       	cpc	r26, r14
    2e92:	bf 05       	cpc	r27, r15
    2e94:	70 f0       	brcs	.+28     	; 0x2eb2 <execute_jobs+0x2b2>
                    if (next_job == false) {
    2e96:	71 10       	cpse	r7, r1
    2e98:	0c c0       	rjmp	.+24     	; 0x2eb2 <execute_jobs+0x2b2>
                        DEBUG_puts("!!!end pwm method-ICA1_ts0!!! \n \r"); //////////complete for all ifs
    2e9a:	86 ea       	ldi	r24, 0xA6	; 166
    2e9c:	90 e2       	ldi	r25, 0x20	; 32
    2e9e:	0e 94 06 03 	call	0x60c	; 0x60c <DEBUG_puts>
                        pwm_toggle(0, false, 0, 0);
    2ea2:	20 e0       	ldi	r18, 0x00	; 0
    2ea4:	30 e0       	ldi	r19, 0x00	; 0
    2ea6:	40 e0       	ldi	r20, 0x00	; 0
    2ea8:	50 e0       	ldi	r21, 0x00	; 0
    2eaa:	60 e0       	ldi	r22, 0x00	; 0
    2eac:	80 e0       	ldi	r24, 0x00	; 0
    2eae:	90 e0       	ldi	r25, 0x00	; 0
    2eb0:	2a da       	rcall	.-2988   	; 0x2306 <pwm_toggle>
    int_to_binary(job_value, bin_array_pass);
    current_time = rtc_get_time();

    if (asset == "ICA1_ts0") {
        timeslot_offset = 0;
        for (int arr_index = 0; arr_index < 32; arr_index ++) {
    2eb2:	0f 5f       	subi	r16, 0xFF	; 255
    2eb4:	1f 4f       	sbci	r17, 0xFF	; 255
    2eb6:	f4 e8       	ldi	r31, 0x84	; 132
    2eb8:	2f 0e       	add	r2, r31
    2eba:	f3 e0       	ldi	r31, 0x03	; 3
    2ebc:	3f 1e       	adc	r3, r31
    2ebe:	41 1c       	adc	r4, r1
    2ec0:	51 1c       	adc	r5, r1
    2ec2:	00 32       	cpi	r16, 0x20	; 32
    2ec4:	11 05       	cpc	r17, r1
    2ec6:	09 f0       	breq	.+2      	; 0x2eca <execute_jobs+0x2ca>
    2ec8:	a6 cf       	rjmp	.-180    	; 0x2e16 <execute_jobs+0x216>
    2eca:	e3 c0       	rjmp	.+454    	; 0x3092 <__stack+0x93>
                }

            }
        }
    }
    if (asset == "ICA1_ts1") {
    2ecc:	28 ec       	ldi	r18, 0xC8	; 200
    2ece:	a2 16       	cp	r10, r18
    2ed0:	20 e2       	ldi	r18, 0x20	; 32
    2ed2:	b2 06       	cpc	r11, r18
    2ed4:	09 f0       	breq	.+2      	; 0x2ed8 <execute_jobs+0x2d8>
    2ed6:	6b c0       	rjmp	.+214    	; 0x2fae <execute_jobs+0x3ae>
    2ed8:	88 24       	eor	r8, r8
    2eda:	83 94       	inc	r8
    2edc:	91 2c       	mov	r9, r1
    2ede:	8c 0e       	add	r8, r28
    2ee0:	9d 1e       	adc	r9, r29
    2ee2:	0f 2e       	mov	r0, r31
    2ee4:	f4 e0       	ldi	r31, 0x04	; 4
    2ee6:	2f 2e       	mov	r2, r31
    2ee8:	f4 e7       	ldi	r31, 0x74	; 116
    2eea:	3f 2e       	mov	r3, r31
    2eec:	41 2c       	mov	r4, r1
    2eee:	51 2c       	mov	r5, r1
    2ef0:	f0 2d       	mov	r31, r0
    2ef2:	00 e0       	ldi	r16, 0x00	; 0
    2ef4:	10 e0       	ldi	r17, 0x00	; 0
    uint32_t current_time = rtc_get_time(); //seconds
    uint32_t start_time = 0; //seconds
    uint32_t end_time = 0; //seconds
    uint32_t timeslot_offset = 0;
    int8_t next_bin_value = 0; // check the next value of the binary array to check if next job has been set to not stop the current job.
    bool next_job = false;
    2ef6:	71 2c       	mov	r7, r1
        }
    }
    if (asset == "ICA1_ts1") {
        timeslot_offset = 8 * 60 * 60L;
        for (int arr_index = 0; arr_index < 32; arr_index ++) {
            if (bin_array_pass[arr_index] == 1) {
    2ef8:	f4 01       	movw	r30, r8
    2efa:	81 91       	ld	r24, Z+
    2efc:	4f 01       	movw	r8, r30
    2efe:	81 30       	cpi	r24, 0x01	; 1
    2f00:	09 f0       	breq	.+2      	; 0x2f04 <execute_jobs+0x304>
    2f02:	48 c0       	rjmp	.+144    	; 0x2f94 <execute_jobs+0x394>
                start_time = arr_index * (15 * 60) + timeslot_offset;
                end_time = start_time + (15 * 60);
                if ((arr_index + 1) <= 31) {
    2f04:	0f 31       	cpi	r16, 0x1F	; 31
    2f06:	11 05       	cpc	r17, r1
    2f08:	34 f4       	brge	.+12     	; 0x2f16 <execute_jobs+0x316>
                    next_bin_value = bin_array_pass[arr_index + 1];
                    if (next_bin_value == 1) {
    2f0a:	77 24       	eor	r7, r7
    2f0c:	73 94       	inc	r7
    2f0e:	80 81       	ld	r24, Z
    2f10:	81 30       	cpi	r24, 0x01	; 1
    2f12:	09 f0       	breq	.+2      	; 0x2f16 <execute_jobs+0x316>
    2f14:	71 2c       	mov	r7, r1
                        next_job = true;
                    } else {
                        next_job = false;
                    }
                }
                if (current_time  >= start_time && current_time <= (start_time + 60)) {
    2f16:	d2 01       	movw	r26, r4
    2f18:	c1 01       	movw	r24, r2
    2f1a:	84 58       	subi	r24, 0x84	; 132
    2f1c:	93 40       	sbci	r25, 0x03	; 3
    2f1e:	a1 09       	sbc	r26, r1
    2f20:	b1 09       	sbc	r27, r1
    2f22:	c8 16       	cp	r12, r24
    2f24:	d9 06       	cpc	r13, r25
    2f26:	ea 06       	cpc	r14, r26
    2f28:	fb 06       	cpc	r15, r27
    2f2a:	b8 f0       	brcs	.+46     	; 0x2f5a <execute_jobs+0x35a>
    2f2c:	d2 01       	movw	r26, r4
    2f2e:	c1 01       	movw	r24, r2
    2f30:	88 54       	subi	r24, 0x48	; 72
    2f32:	93 40       	sbci	r25, 0x03	; 3
    2f34:	a1 09       	sbc	r26, r1
    2f36:	b1 09       	sbc	r27, r1
    2f38:	8c 15       	cp	r24, r12
    2f3a:	9d 05       	cpc	r25, r13
    2f3c:	ae 05       	cpc	r26, r14
    2f3e:	bf 05       	cpc	r27, r15
    2f40:	60 f0       	brcs	.+24     	; 0x2f5a <execute_jobs+0x35a>
                    //start pwm method
                    DEBUG_puts("!!!start pwm method-ICA1_ts1!!! \n \r");
    2f42:	81 ed       	ldi	r24, 0xD1	; 209
    2f44:	90 e2       	ldi	r25, 0x20	; 32
    2f46:	0e 94 06 03 	call	0x60c	; 0x60c <DEBUG_puts>
                    pwm_toggle(0, true, 10, 10);
    2f4a:	2a e0       	ldi	r18, 0x0A	; 10
    2f4c:	30 e0       	ldi	r19, 0x00	; 0
    2f4e:	4a e0       	ldi	r20, 0x0A	; 10
    2f50:	50 e0       	ldi	r21, 0x00	; 0
    2f52:	61 e0       	ldi	r22, 0x01	; 1
    2f54:	80 e0       	ldi	r24, 0x00	; 0
    2f56:	90 e0       	ldi	r25, 0x00	; 0
    2f58:	d6 d9       	rcall	.-3156   	; 0x2306 <pwm_toggle>
                }
                if (current_time >= end_time && current_time <= (end_time + 60)) {
    2f5a:	c2 14       	cp	r12, r2
    2f5c:	d3 04       	cpc	r13, r3
    2f5e:	e4 04       	cpc	r14, r4
    2f60:	f5 04       	cpc	r15, r5
    2f62:	c0 f0       	brcs	.+48     	; 0x2f94 <execute_jobs+0x394>
    2f64:	d2 01       	movw	r26, r4
    2f66:	c1 01       	movw	r24, r2
    2f68:	cc 96       	adiw	r24, 0x3c	; 60
    2f6a:	a1 1d       	adc	r26, r1
    2f6c:	b1 1d       	adc	r27, r1
    2f6e:	8c 15       	cp	r24, r12
    2f70:	9d 05       	cpc	r25, r13
    2f72:	ae 05       	cpc	r26, r14
    2f74:	bf 05       	cpc	r27, r15
    2f76:	70 f0       	brcs	.+28     	; 0x2f94 <execute_jobs+0x394>
                    if (next_job == false) {
    2f78:	71 10       	cpse	r7, r1
    2f7a:	0c c0       	rjmp	.+24     	; 0x2f94 <execute_jobs+0x394>
                        DEBUG_puts("!!!end pwm method-ICA1_ts1!!! \n \r"); //////////complete for all ifs
    2f7c:	85 ef       	ldi	r24, 0xF5	; 245
    2f7e:	90 e2       	ldi	r25, 0x20	; 32
    2f80:	0e 94 06 03 	call	0x60c	; 0x60c <DEBUG_puts>
                        pwm_toggle(0, false, 0, 0);
    2f84:	20 e0       	ldi	r18, 0x00	; 0
    2f86:	30 e0       	ldi	r19, 0x00	; 0
    2f88:	40 e0       	ldi	r20, 0x00	; 0
    2f8a:	50 e0       	ldi	r21, 0x00	; 0
    2f8c:	60 e0       	ldi	r22, 0x00	; 0
    2f8e:	80 e0       	ldi	r24, 0x00	; 0
    2f90:	90 e0       	ldi	r25, 0x00	; 0
    2f92:	b9 d9       	rcall	.-3214   	; 0x2306 <pwm_toggle>
            }
        }
    }
    if (asset == "ICA1_ts1") {
        timeslot_offset = 8 * 60 * 60L;
        for (int arr_index = 0; arr_index < 32; arr_index ++) {
    2f94:	0f 5f       	subi	r16, 0xFF	; 255
    2f96:	1f 4f       	sbci	r17, 0xFF	; 255
    2f98:	f4 e8       	ldi	r31, 0x84	; 132
    2f9a:	2f 0e       	add	r2, r31
    2f9c:	f3 e0       	ldi	r31, 0x03	; 3
    2f9e:	3f 1e       	adc	r3, r31
    2fa0:	41 1c       	adc	r4, r1
    2fa2:	51 1c       	adc	r5, r1
    2fa4:	00 32       	cpi	r16, 0x20	; 32
    2fa6:	11 05       	cpc	r17, r1
    2fa8:	09 f0       	breq	.+2      	; 0x2fac <execute_jobs+0x3ac>
    2faa:	a6 cf       	rjmp	.-180    	; 0x2ef8 <execute_jobs+0x2f8>
    2fac:	dd c0       	rjmp	.+442    	; 0x3168 <__stack+0x169>
                }

            }
        }
    }
    if (asset == "ICA1_ts2") {
    2fae:	27 e1       	ldi	r18, 0x17	; 23
    2fb0:	a2 16       	cp	r10, r18
    2fb2:	21 e2       	ldi	r18, 0x21	; 33
    2fb4:	b2 06       	cpc	r11, r18
    2fb6:	09 f0       	breq	.+2      	; 0x2fba <execute_jobs+0x3ba>
    2fb8:	6b c0       	rjmp	.+214    	; 0x3090 <__stack+0x91>
    2fba:	88 24       	eor	r8, r8
    2fbc:	83 94       	inc	r8
    2fbe:	91 2c       	mov	r9, r1
    2fc0:	8c 0e       	add	r8, r28
    2fc2:	9d 1e       	adc	r9, r29
    2fc4:	0f 2e       	mov	r0, r31
    2fc6:	f4 e8       	ldi	r31, 0x84	; 132
    2fc8:	2f 2e       	mov	r2, r31
    2fca:	f4 ee       	ldi	r31, 0xE4	; 228
    2fcc:	3f 2e       	mov	r3, r31
    2fce:	41 2c       	mov	r4, r1
    2fd0:	51 2c       	mov	r5, r1
    2fd2:	f0 2d       	mov	r31, r0
    2fd4:	00 e0       	ldi	r16, 0x00	; 0
    2fd6:	10 e0       	ldi	r17, 0x00	; 0
    uint32_t current_time = rtc_get_time(); //seconds
    uint32_t start_time = 0; //seconds
    uint32_t end_time = 0; //seconds
    uint32_t timeslot_offset = 0;
    int8_t next_bin_value = 0; // check the next value of the binary array to check if next job has been set to not stop the current job.
    bool next_job = false;
    2fd8:	71 2c       	mov	r7, r1
        }
    }
    if (asset == "ICA1_ts2") {
        timeslot_offset = 16 * 60 * 60L; //change to L for all the rest multiplications so that the sum works correctly
        for (int arr_index = 0; arr_index < 32; arr_index ++) {
            if (bin_array_pass[arr_index] == 1) {
    2fda:	f4 01       	movw	r30, r8
    2fdc:	81 91       	ld	r24, Z+
    2fde:	4f 01       	movw	r8, r30
    2fe0:	81 30       	cpi	r24, 0x01	; 1
    2fe2:	09 f0       	breq	.+2      	; 0x2fe6 <execute_jobs+0x3e6>
    2fe4:	48 c0       	rjmp	.+144    	; 0x3076 <__stack+0x77>
                start_time = arr_index * (15 * 60) + timeslot_offset;
                end_time = start_time + (15 * 60);
                if ((arr_index + 1) <= 31) {
    2fe6:	0f 31       	cpi	r16, 0x1F	; 31
    2fe8:	11 05       	cpc	r17, r1
    2fea:	34 f4       	brge	.+12     	; 0x2ff8 <execute_jobs+0x3f8>
                    next_bin_value = bin_array_pass[arr_index + 1];
                    if (next_bin_value == 1) {
    2fec:	77 24       	eor	r7, r7
    2fee:	73 94       	inc	r7
    2ff0:	80 81       	ld	r24, Z
    2ff2:	81 30       	cpi	r24, 0x01	; 1
    2ff4:	09 f0       	breq	.+2      	; 0x2ff8 <execute_jobs+0x3f8>
    2ff6:	71 2c       	mov	r7, r1
                        next_job = true;
                    } else {
                        next_job = false;
                    }
                }
                if (current_time  >= start_time && current_time <= (start_time + 60)) {
    2ff8:	d2 01       	movw	r26, r4
    2ffa:	c1 01       	movw	r24, r2
    2ffc:	84 58       	subi	r24, 0x84	; 132
    2ffe:	93 40       	sbci	r25, 0x03	; 3
    3000:	a1 09       	sbc	r26, r1
    3002:	b1 09       	sbc	r27, r1
    3004:	c8 16       	cp	r12, r24
    3006:	d9 06       	cpc	r13, r25
    3008:	ea 06       	cpc	r14, r26
    300a:	fb 06       	cpc	r15, r27
    300c:	b8 f0       	brcs	.+46     	; 0x303c <__stack+0x3d>
    300e:	d2 01       	movw	r26, r4
    3010:	c1 01       	movw	r24, r2
    3012:	88 54       	subi	r24, 0x48	; 72
    3014:	93 40       	sbci	r25, 0x03	; 3
    3016:	a1 09       	sbc	r26, r1
    3018:	b1 09       	sbc	r27, r1
    301a:	8c 15       	cp	r24, r12
    301c:	9d 05       	cpc	r25, r13
    301e:	ae 05       	cpc	r26, r14
    3020:	bf 05       	cpc	r27, r15
    3022:	60 f0       	brcs	.+24     	; 0x303c <__stack+0x3d>
                    //start pwm method
                    DEBUG_puts("!!!start pwm method-ICA1_ts2!!! \n \r");
    3024:	80 e2       	ldi	r24, 0x20	; 32
    3026:	91 e2       	ldi	r25, 0x21	; 33
    3028:	0e 94 06 03 	call	0x60c	; 0x60c <DEBUG_puts>
                    pwm_toggle(0, true, 10, 10);
    302c:	2a e0       	ldi	r18, 0x0A	; 10
    302e:	30 e0       	ldi	r19, 0x00	; 0
    3030:	4a e0       	ldi	r20, 0x0A	; 10
    3032:	50 e0       	ldi	r21, 0x00	; 0
    3034:	61 e0       	ldi	r22, 0x01	; 1
    3036:	80 e0       	ldi	r24, 0x00	; 0
    3038:	90 e0       	ldi	r25, 0x00	; 0
    303a:	65 d9       	rcall	.-3382   	; 0x2306 <pwm_toggle>
                }
                if (current_time >= end_time && current_time <= (end_time + 60)) {
    303c:	c2 14       	cp	r12, r2
    303e:	d3 04       	cpc	r13, r3
    3040:	e4 04       	cpc	r14, r4
    3042:	f5 04       	cpc	r15, r5
    3044:	c0 f0       	brcs	.+48     	; 0x3076 <__stack+0x77>
    3046:	d2 01       	movw	r26, r4
    3048:	c1 01       	movw	r24, r2
    304a:	cc 96       	adiw	r24, 0x3c	; 60
    304c:	a1 1d       	adc	r26, r1
    304e:	b1 1d       	adc	r27, r1
    3050:	8c 15       	cp	r24, r12
    3052:	9d 05       	cpc	r25, r13
    3054:	ae 05       	cpc	r26, r14
    3056:	bf 05       	cpc	r27, r15
    3058:	70 f0       	brcs	.+28     	; 0x3076 <__stack+0x77>
                    if (next_job == false) {
    305a:	71 10       	cpse	r7, r1
    305c:	0c c0       	rjmp	.+24     	; 0x3076 <__stack+0x77>
                        DEBUG_puts("!!!end pwm method-ICA1_ts2!!! \n \r"); //////////complete for all ifs
    305e:	84 e4       	ldi	r24, 0x44	; 68
    3060:	91 e2       	ldi	r25, 0x21	; 33
    3062:	0e 94 06 03 	call	0x60c	; 0x60c <DEBUG_puts>
                        pwm_toggle(0, false, 0, 0);
    3066:	20 e0       	ldi	r18, 0x00	; 0
    3068:	30 e0       	ldi	r19, 0x00	; 0
    306a:	40 e0       	ldi	r20, 0x00	; 0
    306c:	50 e0       	ldi	r21, 0x00	; 0
    306e:	60 e0       	ldi	r22, 0x00	; 0
    3070:	80 e0       	ldi	r24, 0x00	; 0
    3072:	90 e0       	ldi	r25, 0x00	; 0
    3074:	48 d9       	rcall	.-3440   	; 0x2306 <pwm_toggle>
            }
        }
    }
    if (asset == "ICA1_ts2") {
        timeslot_offset = 16 * 60 * 60L; //change to L for all the rest multiplications so that the sum works correctly
        for (int arr_index = 0; arr_index < 32; arr_index ++) {
    3076:	0f 5f       	subi	r16, 0xFF	; 255
    3078:	1f 4f       	sbci	r17, 0xFF	; 255
    307a:	f4 e8       	ldi	r31, 0x84	; 132
    307c:	2f 0e       	add	r2, r31
    307e:	f3 e0       	ldi	r31, 0x03	; 3
    3080:	3f 1e       	adc	r3, r31
    3082:	41 1c       	adc	r4, r1
    3084:	51 1c       	adc	r5, r1
    3086:	00 32       	cpi	r16, 0x20	; 32
    3088:	11 05       	cpc	r17, r1
    308a:	09 f0       	breq	.+2      	; 0x308e <__stack+0x8f>
    308c:	a6 cf       	rjmp	.-180    	; 0x2fda <execute_jobs+0x3da>
    308e:	dc c0       	rjmp	.+440    	; 0x3248 <__stack+0x249>
    uint32_t current_time = rtc_get_time(); //seconds
    uint32_t start_time = 0; //seconds
    uint32_t end_time = 0; //seconds
    uint32_t timeslot_offset = 0;
    int8_t next_bin_value = 0; // check the next value of the binary array to check if next job has been set to not stop the current job.
    bool next_job = false;
    3090:	71 2c       	mov	r7, r1
                }

            }
        }
    }
    if (asset == "ICA2_ts0") {
    3092:	26 e6       	ldi	r18, 0x66	; 102
    3094:	a2 16       	cp	r10, r18
    3096:	21 e2       	ldi	r18, 0x21	; 33
    3098:	b2 06       	cpc	r11, r18
    309a:	09 f0       	breq	.+2      	; 0x309e <__stack+0x9f>
    309c:	65 c0       	rjmp	.+202    	; 0x3168 <__stack+0x169>
    309e:	88 24       	eor	r8, r8
    30a0:	83 94       	inc	r8
    30a2:	91 2c       	mov	r9, r1
    30a4:	8c 0e       	add	r8, r28
    30a6:	9d 1e       	adc	r9, r29
    30a8:	21 2c       	mov	r2, r1
    30aa:	31 2c       	mov	r3, r1
    30ac:	21 01       	movw	r4, r2
    30ae:	00 e0       	ldi	r16, 0x00	; 0
    30b0:	10 e0       	ldi	r17, 0x00	; 0
        timeslot_offset = 0;
        for (int arr_index = 0; arr_index < 32; arr_index ++) {
            if (bin_array_pass[arr_index] == 1) {
    30b2:	f4 01       	movw	r30, r8
    30b4:	81 91       	ld	r24, Z+
    30b6:	4f 01       	movw	r8, r30
    30b8:	81 30       	cpi	r24, 0x01	; 1
    30ba:	09 f0       	breq	.+2      	; 0x30be <__stack+0xbf>
    30bc:	48 c0       	rjmp	.+144    	; 0x314e <__stack+0x14f>
                start_time = arr_index * (15 * 60) + timeslot_offset;
                end_time = start_time + (15 * 60);
                if ((arr_index + 1) <= 31) {
    30be:	0f 31       	cpi	r16, 0x1F	; 31
    30c0:	11 05       	cpc	r17, r1
    30c2:	34 f4       	brge	.+12     	; 0x30d0 <__stack+0xd1>
                    next_bin_value = bin_array_pass[arr_index + 1];
                    if (next_bin_value == 1) {
    30c4:	77 24       	eor	r7, r7
    30c6:	73 94       	inc	r7
    30c8:	80 81       	ld	r24, Z
    30ca:	81 30       	cpi	r24, 0x01	; 1
    30cc:	09 f0       	breq	.+2      	; 0x30d0 <__stack+0xd1>
    30ce:	71 2c       	mov	r7, r1
                        next_job = true;
                    } else {
                        next_job = false;
                    }
                }
                if (current_time  >= start_time && current_time <= (start_time + 60)) {
    30d0:	c2 14       	cp	r12, r2
    30d2:	d3 04       	cpc	r13, r3
    30d4:	e4 04       	cpc	r14, r4
    30d6:	f5 04       	cpc	r15, r5
    30d8:	b0 f0       	brcs	.+44     	; 0x3106 <__stack+0x107>
    30da:	d2 01       	movw	r26, r4
    30dc:	c1 01       	movw	r24, r2
    30de:	cc 96       	adiw	r24, 0x3c	; 60
    30e0:	a1 1d       	adc	r26, r1
    30e2:	b1 1d       	adc	r27, r1
    30e4:	8c 15       	cp	r24, r12
    30e6:	9d 05       	cpc	r25, r13
    30e8:	ae 05       	cpc	r26, r14
    30ea:	bf 05       	cpc	r27, r15
    30ec:	60 f0       	brcs	.+24     	; 0x3106 <__stack+0x107>
                    //start pwm method
                    DEBUG_puts("!!!start pwm method-ICA2_ts0!!! \n \r");
    30ee:	8f e6       	ldi	r24, 0x6F	; 111
    30f0:	91 e2       	ldi	r25, 0x21	; 33
    30f2:	0e 94 06 03 	call	0x60c	; 0x60c <DEBUG_puts>
                    pwm_toggle(1, true, 10, 10);
    30f6:	2a e0       	ldi	r18, 0x0A	; 10
    30f8:	30 e0       	ldi	r19, 0x00	; 0
    30fa:	4a e0       	ldi	r20, 0x0A	; 10
    30fc:	50 e0       	ldi	r21, 0x00	; 0
    30fe:	61 e0       	ldi	r22, 0x01	; 1
    3100:	81 e0       	ldi	r24, 0x01	; 1
    3102:	90 e0       	ldi	r25, 0x00	; 0
    3104:	00 d9       	rcall	.-3584   	; 0x2306 <pwm_toggle>
                }
                if (current_time >= end_time && current_time <= (end_time + 60)) {
    3106:	d2 01       	movw	r26, r4
    3108:	c1 01       	movw	r24, r2
    310a:	8c 57       	subi	r24, 0x7C	; 124
    310c:	9c 4f       	sbci	r25, 0xFC	; 252
    310e:	af 4f       	sbci	r26, 0xFF	; 255
    3110:	bf 4f       	sbci	r27, 0xFF	; 255
    3112:	c8 16       	cp	r12, r24
    3114:	d9 06       	cpc	r13, r25
    3116:	ea 06       	cpc	r14, r26
    3118:	fb 06       	cpc	r15, r27
    311a:	c8 f0       	brcs	.+50     	; 0x314e <__stack+0x14f>
    311c:	d2 01       	movw	r26, r4
    311e:	c1 01       	movw	r24, r2
    3120:	80 54       	subi	r24, 0x40	; 64
    3122:	9c 4f       	sbci	r25, 0xFC	; 252
    3124:	af 4f       	sbci	r26, 0xFF	; 255
    3126:	bf 4f       	sbci	r27, 0xFF	; 255
    3128:	8c 15       	cp	r24, r12
    312a:	9d 05       	cpc	r25, r13
    312c:	ae 05       	cpc	r26, r14
    312e:	bf 05       	cpc	r27, r15
    3130:	70 f0       	brcs	.+28     	; 0x314e <__stack+0x14f>
                    if (next_job == false) {
    3132:	71 10       	cpse	r7, r1
    3134:	0c c0       	rjmp	.+24     	; 0x314e <__stack+0x14f>
                        DEBUG_puts("!!!end pwm method-ICA2_ts0!!! \n \r"); //////////complete for all ifs
    3136:	83 e9       	ldi	r24, 0x93	; 147
    3138:	91 e2       	ldi	r25, 0x21	; 33
    313a:	0e 94 06 03 	call	0x60c	; 0x60c <DEBUG_puts>
                        pwm_toggle(1, false, 0, 0);
    313e:	20 e0       	ldi	r18, 0x00	; 0
    3140:	30 e0       	ldi	r19, 0x00	; 0
    3142:	40 e0       	ldi	r20, 0x00	; 0
    3144:	50 e0       	ldi	r21, 0x00	; 0
    3146:	60 e0       	ldi	r22, 0x00	; 0
    3148:	81 e0       	ldi	r24, 0x01	; 1
    314a:	90 e0       	ldi	r25, 0x00	; 0
    314c:	dc d8       	rcall	.-3656   	; 0x2306 <pwm_toggle>
            }
        }
    }
    if (asset == "ICA2_ts0") {
        timeslot_offset = 0;
        for (int arr_index = 0; arr_index < 32; arr_index ++) {
    314e:	0f 5f       	subi	r16, 0xFF	; 255
    3150:	1f 4f       	sbci	r17, 0xFF	; 255
    3152:	f4 e8       	ldi	r31, 0x84	; 132
    3154:	2f 0e       	add	r2, r31
    3156:	f3 e0       	ldi	r31, 0x03	; 3
    3158:	3f 1e       	adc	r3, r31
    315a:	41 1c       	adc	r4, r1
    315c:	51 1c       	adc	r5, r1
    315e:	00 32       	cpi	r16, 0x20	; 32
    3160:	11 05       	cpc	r17, r1
    3162:	09 f0       	breq	.+2      	; 0x3166 <__stack+0x167>
    3164:	a6 cf       	rjmp	.-180    	; 0x30b2 <__stack+0xb3>
    3166:	e1 c0       	rjmp	.+450    	; 0x332a <__stack+0x32b>
                }

            }
        }
    }
    if (asset == "ICA2_ts1") {
    3168:	25 eb       	ldi	r18, 0xB5	; 181
    316a:	a2 16       	cp	r10, r18
    316c:	21 e2       	ldi	r18, 0x21	; 33
    316e:	b2 06       	cpc	r11, r18
    3170:	09 f0       	breq	.+2      	; 0x3174 <__stack+0x175>
    3172:	6a c0       	rjmp	.+212    	; 0x3248 <__stack+0x249>
    3174:	88 24       	eor	r8, r8
    3176:	83 94       	inc	r8
    3178:	91 2c       	mov	r9, r1
    317a:	8c 0e       	add	r8, r28
    317c:	9d 1e       	adc	r9, r29
    317e:	0f 2e       	mov	r0, r31
    3180:	f4 e0       	ldi	r31, 0x04	; 4
    3182:	2f 2e       	mov	r2, r31
    3184:	f4 e7       	ldi	r31, 0x74	; 116
    3186:	3f 2e       	mov	r3, r31
    3188:	41 2c       	mov	r4, r1
    318a:	51 2c       	mov	r5, r1
    318c:	f0 2d       	mov	r31, r0
    318e:	00 e0       	ldi	r16, 0x00	; 0
    3190:	10 e0       	ldi	r17, 0x00	; 0
        timeslot_offset = 8 * 60 * 60L;
        for (int arr_index = 0; arr_index < 32; arr_index ++) {
            if (bin_array_pass[arr_index] == 1) {
    3192:	f4 01       	movw	r30, r8
    3194:	81 91       	ld	r24, Z+
    3196:	4f 01       	movw	r8, r30
    3198:	81 30       	cpi	r24, 0x01	; 1
    319a:	09 f0       	breq	.+2      	; 0x319e <__stack+0x19f>
    319c:	48 c0       	rjmp	.+144    	; 0x322e <__stack+0x22f>
                start_time = arr_index * (15 * 60) + timeslot_offset;
                end_time = start_time + (15 * 60);
                if ((arr_index + 1) <= 31) {
    319e:	0f 31       	cpi	r16, 0x1F	; 31
    31a0:	11 05       	cpc	r17, r1
    31a2:	34 f4       	brge	.+12     	; 0x31b0 <__stack+0x1b1>
                    next_bin_value = bin_array_pass[arr_index + 1];
                    if (next_bin_value == 1) {
    31a4:	77 24       	eor	r7, r7
    31a6:	73 94       	inc	r7
    31a8:	80 81       	ld	r24, Z
    31aa:	81 30       	cpi	r24, 0x01	; 1
    31ac:	09 f0       	breq	.+2      	; 0x31b0 <__stack+0x1b1>
    31ae:	71 2c       	mov	r7, r1
                        next_job = true;
                    } else {
                        next_job = false;
                    }
                }
                if (current_time  >= start_time && current_time <= (start_time + 60)) {
    31b0:	d2 01       	movw	r26, r4
    31b2:	c1 01       	movw	r24, r2
    31b4:	84 58       	subi	r24, 0x84	; 132
    31b6:	93 40       	sbci	r25, 0x03	; 3
    31b8:	a1 09       	sbc	r26, r1
    31ba:	b1 09       	sbc	r27, r1
    31bc:	c8 16       	cp	r12, r24
    31be:	d9 06       	cpc	r13, r25
    31c0:	ea 06       	cpc	r14, r26
    31c2:	fb 06       	cpc	r15, r27
    31c4:	b8 f0       	brcs	.+46     	; 0x31f4 <__stack+0x1f5>
    31c6:	d2 01       	movw	r26, r4
    31c8:	c1 01       	movw	r24, r2
    31ca:	88 54       	subi	r24, 0x48	; 72
    31cc:	93 40       	sbci	r25, 0x03	; 3
    31ce:	a1 09       	sbc	r26, r1
    31d0:	b1 09       	sbc	r27, r1
    31d2:	8c 15       	cp	r24, r12
    31d4:	9d 05       	cpc	r25, r13
    31d6:	ae 05       	cpc	r26, r14
    31d8:	bf 05       	cpc	r27, r15
    31da:	60 f0       	brcs	.+24     	; 0x31f4 <__stack+0x1f5>
                    //start pwm method
                    DEBUG_puts("!!!start pwm method-ICA2_ts1!!! \n \r");
    31dc:	8e eb       	ldi	r24, 0xBE	; 190
    31de:	91 e2       	ldi	r25, 0x21	; 33
    31e0:	0e 94 06 03 	call	0x60c	; 0x60c <DEBUG_puts>
                    pwm_toggle(1, true, 10, 10);
    31e4:	2a e0       	ldi	r18, 0x0A	; 10
    31e6:	30 e0       	ldi	r19, 0x00	; 0
    31e8:	4a e0       	ldi	r20, 0x0A	; 10
    31ea:	50 e0       	ldi	r21, 0x00	; 0
    31ec:	61 e0       	ldi	r22, 0x01	; 1
    31ee:	81 e0       	ldi	r24, 0x01	; 1
    31f0:	90 e0       	ldi	r25, 0x00	; 0
    31f2:	89 d8       	rcall	.-3822   	; 0x2306 <pwm_toggle>
                }
                if (current_time >= end_time && current_time <= (end_time + 60)) {
    31f4:	c2 14       	cp	r12, r2
    31f6:	d3 04       	cpc	r13, r3
    31f8:	e4 04       	cpc	r14, r4
    31fa:	f5 04       	cpc	r15, r5
    31fc:	c0 f0       	brcs	.+48     	; 0x322e <__stack+0x22f>
    31fe:	d2 01       	movw	r26, r4
    3200:	c1 01       	movw	r24, r2
    3202:	cc 96       	adiw	r24, 0x3c	; 60
    3204:	a1 1d       	adc	r26, r1
    3206:	b1 1d       	adc	r27, r1
    3208:	8c 15       	cp	r24, r12
    320a:	9d 05       	cpc	r25, r13
    320c:	ae 05       	cpc	r26, r14
    320e:	bf 05       	cpc	r27, r15
    3210:	70 f0       	brcs	.+28     	; 0x322e <__stack+0x22f>
                    if (next_job == false) {
    3212:	71 10       	cpse	r7, r1
    3214:	0c c0       	rjmp	.+24     	; 0x322e <__stack+0x22f>
                        DEBUG_puts("!!!end pwm method-ICA2_ts1!!! \n \r"); //////////complete for all ifs
    3216:	82 ee       	ldi	r24, 0xE2	; 226
    3218:	91 e2       	ldi	r25, 0x21	; 33
    321a:	0e 94 06 03 	call	0x60c	; 0x60c <DEBUG_puts>
                        pwm_toggle(1, false, 0, 0);
    321e:	20 e0       	ldi	r18, 0x00	; 0
    3220:	30 e0       	ldi	r19, 0x00	; 0
    3222:	40 e0       	ldi	r20, 0x00	; 0
    3224:	50 e0       	ldi	r21, 0x00	; 0
    3226:	60 e0       	ldi	r22, 0x00	; 0
    3228:	81 e0       	ldi	r24, 0x01	; 1
    322a:	90 e0       	ldi	r25, 0x00	; 0
    322c:	6c d8       	rcall	.-3880   	; 0x2306 <pwm_toggle>
            }
        }
    }
    if (asset == "ICA2_ts1") {
        timeslot_offset = 8 * 60 * 60L;
        for (int arr_index = 0; arr_index < 32; arr_index ++) {
    322e:	0f 5f       	subi	r16, 0xFF	; 255
    3230:	1f 4f       	sbci	r17, 0xFF	; 255
    3232:	f4 e8       	ldi	r31, 0x84	; 132
    3234:	2f 0e       	add	r2, r31
    3236:	f3 e0       	ldi	r31, 0x03	; 3
    3238:	3f 1e       	adc	r3, r31
    323a:	41 1c       	adc	r4, r1
    323c:	51 1c       	adc	r5, r1
    323e:	00 32       	cpi	r16, 0x20	; 32
    3240:	11 05       	cpc	r17, r1
    3242:	09 f0       	breq	.+2      	; 0x3246 <__stack+0x247>
    3244:	a6 cf       	rjmp	.-180    	; 0x3192 <__stack+0x193>
    3246:	de c0       	rjmp	.+444    	; 0x3404 <__stack+0x405>
                }

            }
        }
    }
    if (asset == "ICA2_ts2") {
    3248:	24 e0       	ldi	r18, 0x04	; 4
    324a:	a2 16       	cp	r10, r18
    324c:	22 e2       	ldi	r18, 0x22	; 34
    324e:	b2 06       	cpc	r11, r18
    3250:	09 f0       	breq	.+2      	; 0x3254 <__stack+0x255>
    3252:	6b c0       	rjmp	.+214    	; 0x332a <__stack+0x32b>
    3254:	88 24       	eor	r8, r8
    3256:	83 94       	inc	r8
    3258:	91 2c       	mov	r9, r1
    325a:	8c 0e       	add	r8, r28
    325c:	9d 1e       	adc	r9, r29
    325e:	0f 2e       	mov	r0, r31
    3260:	f4 e8       	ldi	r31, 0x84	; 132
    3262:	2f 2e       	mov	r2, r31
    3264:	f4 ee       	ldi	r31, 0xE4	; 228
    3266:	3f 2e       	mov	r3, r31
    3268:	41 2c       	mov	r4, r1
    326a:	51 2c       	mov	r5, r1
    326c:	f0 2d       	mov	r31, r0
    326e:	00 e0       	ldi	r16, 0x00	; 0
    3270:	10 e0       	ldi	r17, 0x00	; 0
        timeslot_offset = 16 * 60 * 60L;
        for (int arr_index = 0; arr_index < 32; arr_index ++) {
            if (bin_array_pass[arr_index] == 1) {
    3272:	f4 01       	movw	r30, r8
    3274:	81 91       	ld	r24, Z+
    3276:	4f 01       	movw	r8, r30
    3278:	81 30       	cpi	r24, 0x01	; 1
    327a:	09 f0       	breq	.+2      	; 0x327e <__stack+0x27f>
    327c:	49 c0       	rjmp	.+146    	; 0x3310 <__stack+0x311>
                start_time = arr_index * (15 * 60) + timeslot_offset;
                end_time = start_time + (15 * 60);
                if ((arr_index + 1) <= 31) {
    327e:	0f 31       	cpi	r16, 0x1F	; 31
    3280:	11 05       	cpc	r17, r1
    3282:	34 f4       	brge	.+12     	; 0x3290 <__stack+0x291>
                    next_bin_value = bin_array_pass[arr_index + 1];
                    if (next_bin_value == 1) {
    3284:	77 24       	eor	r7, r7
    3286:	73 94       	inc	r7
    3288:	80 81       	ld	r24, Z
    328a:	81 30       	cpi	r24, 0x01	; 1
    328c:	09 f0       	breq	.+2      	; 0x3290 <__stack+0x291>
    328e:	71 2c       	mov	r7, r1
                        next_job = true;
                    } else {
                        next_job = false;
                    }
                }
                if (current_time  >= start_time && current_time <= (start_time + 60)) {
    3290:	d2 01       	movw	r26, r4
    3292:	c1 01       	movw	r24, r2
    3294:	84 58       	subi	r24, 0x84	; 132
    3296:	93 40       	sbci	r25, 0x03	; 3
    3298:	a1 09       	sbc	r26, r1
    329a:	b1 09       	sbc	r27, r1
    329c:	c8 16       	cp	r12, r24
    329e:	d9 06       	cpc	r13, r25
    32a0:	ea 06       	cpc	r14, r26
    32a2:	fb 06       	cpc	r15, r27
    32a4:	b8 f0       	brcs	.+46     	; 0x32d4 <__stack+0x2d5>
    32a6:	d2 01       	movw	r26, r4
    32a8:	c1 01       	movw	r24, r2
    32aa:	88 54       	subi	r24, 0x48	; 72
    32ac:	93 40       	sbci	r25, 0x03	; 3
    32ae:	a1 09       	sbc	r26, r1
    32b0:	b1 09       	sbc	r27, r1
    32b2:	8c 15       	cp	r24, r12
    32b4:	9d 05       	cpc	r25, r13
    32b6:	ae 05       	cpc	r26, r14
    32b8:	bf 05       	cpc	r27, r15
    32ba:	60 f0       	brcs	.+24     	; 0x32d4 <__stack+0x2d5>
                    //start pwm method
                    DEBUG_puts("!!!start pwm method-ICA2_ts2!!! \n \r");
    32bc:	8d e0       	ldi	r24, 0x0D	; 13
    32be:	92 e2       	ldi	r25, 0x22	; 34
    32c0:	0e 94 06 03 	call	0x60c	; 0x60c <DEBUG_puts>
                    pwm_toggle(1, true, 10, 10);
    32c4:	2a e0       	ldi	r18, 0x0A	; 10
    32c6:	30 e0       	ldi	r19, 0x00	; 0
    32c8:	4a e0       	ldi	r20, 0x0A	; 10
    32ca:	50 e0       	ldi	r21, 0x00	; 0
    32cc:	61 e0       	ldi	r22, 0x01	; 1
    32ce:	81 e0       	ldi	r24, 0x01	; 1
    32d0:	90 e0       	ldi	r25, 0x00	; 0
    32d2:	19 d8       	rcall	.-4046   	; 0x2306 <pwm_toggle>
                }
                if (current_time >= end_time && current_time <= (end_time + 60)) {
    32d4:	c2 14       	cp	r12, r2
    32d6:	d3 04       	cpc	r13, r3
    32d8:	e4 04       	cpc	r14, r4
    32da:	f5 04       	cpc	r15, r5
    32dc:	c8 f0       	brcs	.+50     	; 0x3310 <__stack+0x311>
    32de:	d2 01       	movw	r26, r4
    32e0:	c1 01       	movw	r24, r2
    32e2:	cc 96       	adiw	r24, 0x3c	; 60
    32e4:	a1 1d       	adc	r26, r1
    32e6:	b1 1d       	adc	r27, r1
    32e8:	8c 15       	cp	r24, r12
    32ea:	9d 05       	cpc	r25, r13
    32ec:	ae 05       	cpc	r26, r14
    32ee:	bf 05       	cpc	r27, r15
    32f0:	78 f0       	brcs	.+30     	; 0x3310 <__stack+0x311>
                    if (next_job == false) {
    32f2:	71 10       	cpse	r7, r1
    32f4:	0d c0       	rjmp	.+26     	; 0x3310 <__stack+0x311>
                        DEBUG_puts("!!!end pwm method-ICA2_ts2!!! \n \r"); //////////complete for all ifs
    32f6:	81 e3       	ldi	r24, 0x31	; 49
    32f8:	92 e2       	ldi	r25, 0x22	; 34
    32fa:	0e 94 06 03 	call	0x60c	; 0x60c <DEBUG_puts>
                        pwm_toggle(1, false, 0, 0);
    32fe:	20 e0       	ldi	r18, 0x00	; 0
    3300:	30 e0       	ldi	r19, 0x00	; 0
    3302:	40 e0       	ldi	r20, 0x00	; 0
    3304:	50 e0       	ldi	r21, 0x00	; 0
    3306:	60 e0       	ldi	r22, 0x00	; 0
    3308:	81 e0       	ldi	r24, 0x01	; 1
    330a:	90 e0       	ldi	r25, 0x00	; 0
    330c:	0e 94 83 11 	call	0x2306	; 0x2306 <pwm_toggle>
            }
        }
    }
    if (asset == "ICA2_ts2") {
        timeslot_offset = 16 * 60 * 60L;
        for (int arr_index = 0; arr_index < 32; arr_index ++) {
    3310:	0f 5f       	subi	r16, 0xFF	; 255
    3312:	1f 4f       	sbci	r17, 0xFF	; 255
    3314:	f4 e8       	ldi	r31, 0x84	; 132
    3316:	2f 0e       	add	r2, r31
    3318:	f3 e0       	ldi	r31, 0x03	; 3
    331a:	3f 1e       	adc	r3, r31
    331c:	41 1c       	adc	r4, r1
    331e:	51 1c       	adc	r5, r1
    3320:	00 32       	cpi	r16, 0x20	; 32
    3322:	11 05       	cpc	r17, r1
    3324:	09 f0       	breq	.+2      	; 0x3328 <__stack+0x329>
    3326:	a5 cf       	rjmp	.-182    	; 0x3272 <__stack+0x273>
    3328:	df c0       	rjmp	.+446    	; 0x34e8 <__stack+0x4e9>
                }

            }
        }
    }
    if (asset == "ICA3_ts0") {
    332a:	23 e5       	ldi	r18, 0x53	; 83
    332c:	a2 16       	cp	r10, r18
    332e:	22 e2       	ldi	r18, 0x22	; 34
    3330:	b2 06       	cpc	r11, r18
    3332:	09 f0       	breq	.+2      	; 0x3336 <__stack+0x337>
    3334:	67 c0       	rjmp	.+206    	; 0x3404 <__stack+0x405>
    3336:	aa 24       	eor	r10, r10
    3338:	a3 94       	inc	r10
    333a:	b1 2c       	mov	r11, r1
    333c:	ac 0e       	add	r10, r28
    333e:	bd 1e       	adc	r11, r29
    3340:	21 2c       	mov	r2, r1
    3342:	31 2c       	mov	r3, r1
    3344:	21 01       	movw	r4, r2
    3346:	00 e0       	ldi	r16, 0x00	; 0
    3348:	10 e0       	ldi	r17, 0x00	; 0
        timeslot_offset = 0;
        for (int arr_index = 0; arr_index < 32; arr_index ++) {
            if (bin_array_pass[arr_index] == 1) {
    334a:	f5 01       	movw	r30, r10
    334c:	81 91       	ld	r24, Z+
    334e:	5f 01       	movw	r10, r30
    3350:	81 30       	cpi	r24, 0x01	; 1
    3352:	09 f0       	breq	.+2      	; 0x3356 <__stack+0x357>
    3354:	4a c0       	rjmp	.+148    	; 0x33ea <__stack+0x3eb>
                start_time = arr_index * (15 * 60) + timeslot_offset;
                end_time = start_time + (15 * 60);
                if ((arr_index + 1) <= 31) {
    3356:	0f 31       	cpi	r16, 0x1F	; 31
    3358:	11 05       	cpc	r17, r1
    335a:	34 f4       	brge	.+12     	; 0x3368 <__stack+0x369>
                    next_bin_value = bin_array_pass[arr_index + 1];
                    if (next_bin_value == 1) {
    335c:	77 24       	eor	r7, r7
    335e:	73 94       	inc	r7
    3360:	80 81       	ld	r24, Z
    3362:	81 30       	cpi	r24, 0x01	; 1
    3364:	09 f0       	breq	.+2      	; 0x3368 <__stack+0x369>
    3366:	71 2c       	mov	r7, r1
                        next_job = true;
                    } else {
                        next_job = false;
                    }
                }
                if (current_time  >= start_time && current_time <= (start_time + 60)) {
    3368:	c2 14       	cp	r12, r2
    336a:	d3 04       	cpc	r13, r3
    336c:	e4 04       	cpc	r14, r4
    336e:	f5 04       	cpc	r15, r5
    3370:	b8 f0       	brcs	.+46     	; 0x33a0 <__stack+0x3a1>
    3372:	d2 01       	movw	r26, r4
    3374:	c1 01       	movw	r24, r2
    3376:	cc 96       	adiw	r24, 0x3c	; 60
    3378:	a1 1d       	adc	r26, r1
    337a:	b1 1d       	adc	r27, r1
    337c:	8c 15       	cp	r24, r12
    337e:	9d 05       	cpc	r25, r13
    3380:	ae 05       	cpc	r26, r14
    3382:	bf 05       	cpc	r27, r15
    3384:	68 f0       	brcs	.+26     	; 0x33a0 <__stack+0x3a1>
                    //start pwm method
                    DEBUG_puts("!!!start pwm method-ICA3_ts0!!! \n \r");
    3386:	8c e5       	ldi	r24, 0x5C	; 92
    3388:	92 e2       	ldi	r25, 0x22	; 34
    338a:	0e 94 06 03 	call	0x60c	; 0x60c <DEBUG_puts>
                    pwm_toggle(3, true, 10, 10);
    338e:	2a e0       	ldi	r18, 0x0A	; 10
    3390:	30 e0       	ldi	r19, 0x00	; 0
    3392:	4a e0       	ldi	r20, 0x0A	; 10
    3394:	50 e0       	ldi	r21, 0x00	; 0
    3396:	61 e0       	ldi	r22, 0x01	; 1
    3398:	83 e0       	ldi	r24, 0x03	; 3
    339a:	90 e0       	ldi	r25, 0x00	; 0
    339c:	0e 94 83 11 	call	0x2306	; 0x2306 <pwm_toggle>
                }
                if (current_time >= end_time && current_time <= (end_time + 60)) {
    33a0:	d2 01       	movw	r26, r4
    33a2:	c1 01       	movw	r24, r2
    33a4:	8c 57       	subi	r24, 0x7C	; 124
    33a6:	9c 4f       	sbci	r25, 0xFC	; 252
    33a8:	af 4f       	sbci	r26, 0xFF	; 255
    33aa:	bf 4f       	sbci	r27, 0xFF	; 255
    33ac:	c8 16       	cp	r12, r24
    33ae:	d9 06       	cpc	r13, r25
    33b0:	ea 06       	cpc	r14, r26
    33b2:	fb 06       	cpc	r15, r27
    33b4:	d0 f0       	brcs	.+52     	; 0x33ea <__stack+0x3eb>
    33b6:	d2 01       	movw	r26, r4
    33b8:	c1 01       	movw	r24, r2
    33ba:	80 54       	subi	r24, 0x40	; 64
    33bc:	9c 4f       	sbci	r25, 0xFC	; 252
    33be:	af 4f       	sbci	r26, 0xFF	; 255
    33c0:	bf 4f       	sbci	r27, 0xFF	; 255
    33c2:	8c 15       	cp	r24, r12
    33c4:	9d 05       	cpc	r25, r13
    33c6:	ae 05       	cpc	r26, r14
    33c8:	bf 05       	cpc	r27, r15
    33ca:	78 f0       	brcs	.+30     	; 0x33ea <__stack+0x3eb>
                    if (next_job == false) {
    33cc:	71 10       	cpse	r7, r1
    33ce:	0d c0       	rjmp	.+26     	; 0x33ea <__stack+0x3eb>
                        DEBUG_puts("!!!end pwm method-ICA3_ts0!!! \n \r"); //////////complete for all ifs
    33d0:	80 e8       	ldi	r24, 0x80	; 128
    33d2:	92 e2       	ldi	r25, 0x22	; 34
    33d4:	0e 94 06 03 	call	0x60c	; 0x60c <DEBUG_puts>
                        pwm_toggle(3, false, 0, 0);
    33d8:	20 e0       	ldi	r18, 0x00	; 0
    33da:	30 e0       	ldi	r19, 0x00	; 0
    33dc:	40 e0       	ldi	r20, 0x00	; 0
    33de:	50 e0       	ldi	r21, 0x00	; 0
    33e0:	60 e0       	ldi	r22, 0x00	; 0
    33e2:	83 e0       	ldi	r24, 0x03	; 3
    33e4:	90 e0       	ldi	r25, 0x00	; 0
    33e6:	0e 94 83 11 	call	0x2306	; 0x2306 <pwm_toggle>
            }
        }
    }
    if (asset == "ICA3_ts0") {
        timeslot_offset = 0;
        for (int arr_index = 0; arr_index < 32; arr_index ++) {
    33ea:	0f 5f       	subi	r16, 0xFF	; 255
    33ec:	1f 4f       	sbci	r17, 0xFF	; 255
    33ee:	f4 e8       	ldi	r31, 0x84	; 132
    33f0:	2f 0e       	add	r2, r31
    33f2:	f3 e0       	ldi	r31, 0x03	; 3
    33f4:	3f 1e       	adc	r3, r31
    33f6:	41 1c       	adc	r4, r1
    33f8:	51 1c       	adc	r5, r1
    33fa:	00 32       	cpi	r16, 0x20	; 32
    33fc:	11 05       	cpc	r17, r1
    33fe:	09 f0       	breq	.+2      	; 0x3402 <__stack+0x403>
    3400:	a4 cf       	rjmp	.-184    	; 0x334a <__stack+0x34b>
    3402:	e7 c0       	rjmp	.+462    	; 0x35d2 <__stack+0x5d3>
                }

            }
        }
    }
    if (asset == "ICA3_ts1") {
    3404:	22 ea       	ldi	r18, 0xA2	; 162
    3406:	a2 16       	cp	r10, r18
    3408:	22 e2       	ldi	r18, 0x22	; 34
    340a:	b2 06       	cpc	r11, r18
    340c:	09 f0       	breq	.+2      	; 0x3410 <__stack+0x411>
    340e:	6c c0       	rjmp	.+216    	; 0x34e8 <__stack+0x4e9>
    3410:	aa 24       	eor	r10, r10
    3412:	a3 94       	inc	r10
    3414:	b1 2c       	mov	r11, r1
    3416:	ac 0e       	add	r10, r28
    3418:	bd 1e       	adc	r11, r29
    341a:	0f 2e       	mov	r0, r31
    341c:	f4 e0       	ldi	r31, 0x04	; 4
    341e:	2f 2e       	mov	r2, r31
    3420:	f4 e7       	ldi	r31, 0x74	; 116
    3422:	3f 2e       	mov	r3, r31
    3424:	41 2c       	mov	r4, r1
    3426:	51 2c       	mov	r5, r1
    3428:	f0 2d       	mov	r31, r0
    342a:	00 e0       	ldi	r16, 0x00	; 0
    342c:	10 e0       	ldi	r17, 0x00	; 0
        timeslot_offset = 8 * 60 * 60L;
        for (int arr_index = 0; arr_index < 32; arr_index ++) {
            if (bin_array_pass[arr_index] == 1) {
    342e:	f5 01       	movw	r30, r10
    3430:	81 91       	ld	r24, Z+
    3432:	5f 01       	movw	r10, r30
    3434:	81 30       	cpi	r24, 0x01	; 1
    3436:	09 f0       	breq	.+2      	; 0x343a <__stack+0x43b>
    3438:	4a c0       	rjmp	.+148    	; 0x34ce <__stack+0x4cf>
                start_time = arr_index * (15 * 60) + timeslot_offset;
                end_time = start_time + (15 * 60);
                if ((arr_index + 1) <= 31) {
    343a:	0f 31       	cpi	r16, 0x1F	; 31
    343c:	11 05       	cpc	r17, r1
    343e:	34 f4       	brge	.+12     	; 0x344c <__stack+0x44d>
                    next_bin_value = bin_array_pass[arr_index + 1];
                    if (next_bin_value == 1) {
    3440:	77 24       	eor	r7, r7
    3442:	73 94       	inc	r7
    3444:	80 81       	ld	r24, Z
    3446:	81 30       	cpi	r24, 0x01	; 1
    3448:	09 f0       	breq	.+2      	; 0x344c <__stack+0x44d>
    344a:	71 2c       	mov	r7, r1
                        next_job = true;
                    } else {
                        next_job = false;
                    }
                }
                if (current_time  >= start_time && current_time <= (start_time + 60)) {
    344c:	d2 01       	movw	r26, r4
    344e:	c1 01       	movw	r24, r2
    3450:	84 58       	subi	r24, 0x84	; 132
    3452:	93 40       	sbci	r25, 0x03	; 3
    3454:	a1 09       	sbc	r26, r1
    3456:	b1 09       	sbc	r27, r1
    3458:	c8 16       	cp	r12, r24
    345a:	d9 06       	cpc	r13, r25
    345c:	ea 06       	cpc	r14, r26
    345e:	fb 06       	cpc	r15, r27
    3460:	c0 f0       	brcs	.+48     	; 0x3492 <__stack+0x493>
    3462:	d2 01       	movw	r26, r4
    3464:	c1 01       	movw	r24, r2
    3466:	88 54       	subi	r24, 0x48	; 72
    3468:	93 40       	sbci	r25, 0x03	; 3
    346a:	a1 09       	sbc	r26, r1
    346c:	b1 09       	sbc	r27, r1
    346e:	8c 15       	cp	r24, r12
    3470:	9d 05       	cpc	r25, r13
    3472:	ae 05       	cpc	r26, r14
    3474:	bf 05       	cpc	r27, r15
    3476:	68 f0       	brcs	.+26     	; 0x3492 <__stack+0x493>
                    //start pwm method
                    DEBUG_puts("!!!start pwm method-ICA3_ts1!!! \n \r");
    3478:	8b ea       	ldi	r24, 0xAB	; 171
    347a:	92 e2       	ldi	r25, 0x22	; 34
    347c:	0e 94 06 03 	call	0x60c	; 0x60c <DEBUG_puts>
                    pwm_toggle(3, true, 10, 10);
    3480:	2a e0       	ldi	r18, 0x0A	; 10
    3482:	30 e0       	ldi	r19, 0x00	; 0
    3484:	4a e0       	ldi	r20, 0x0A	; 10
    3486:	50 e0       	ldi	r21, 0x00	; 0
    3488:	61 e0       	ldi	r22, 0x01	; 1
    348a:	83 e0       	ldi	r24, 0x03	; 3
    348c:	90 e0       	ldi	r25, 0x00	; 0
    348e:	0e 94 83 11 	call	0x2306	; 0x2306 <pwm_toggle>
                }
                if (current_time >= end_time && current_time <= (end_time + 60)) {
    3492:	c2 14       	cp	r12, r2
    3494:	d3 04       	cpc	r13, r3
    3496:	e4 04       	cpc	r14, r4
    3498:	f5 04       	cpc	r15, r5
    349a:	c8 f0       	brcs	.+50     	; 0x34ce <__stack+0x4cf>
    349c:	d2 01       	movw	r26, r4
    349e:	c1 01       	movw	r24, r2
    34a0:	cc 96       	adiw	r24, 0x3c	; 60
    34a2:	a1 1d       	adc	r26, r1
    34a4:	b1 1d       	adc	r27, r1
    34a6:	8c 15       	cp	r24, r12
    34a8:	9d 05       	cpc	r25, r13
    34aa:	ae 05       	cpc	r26, r14
    34ac:	bf 05       	cpc	r27, r15
    34ae:	78 f0       	brcs	.+30     	; 0x34ce <__stack+0x4cf>
                    if (next_job == false) {
    34b0:	71 10       	cpse	r7, r1
    34b2:	0d c0       	rjmp	.+26     	; 0x34ce <__stack+0x4cf>
                        DEBUG_puts("!!!end pwm method-ICA3_ts1!!! \n \r"); //////////complete for all ifs
    34b4:	8f ec       	ldi	r24, 0xCF	; 207
    34b6:	92 e2       	ldi	r25, 0x22	; 34
    34b8:	0e 94 06 03 	call	0x60c	; 0x60c <DEBUG_puts>
                        pwm_toggle(3, false, 0, 0);
    34bc:	20 e0       	ldi	r18, 0x00	; 0
    34be:	30 e0       	ldi	r19, 0x00	; 0
    34c0:	40 e0       	ldi	r20, 0x00	; 0
    34c2:	50 e0       	ldi	r21, 0x00	; 0
    34c4:	60 e0       	ldi	r22, 0x00	; 0
    34c6:	83 e0       	ldi	r24, 0x03	; 3
    34c8:	90 e0       	ldi	r25, 0x00	; 0
    34ca:	0e 94 83 11 	call	0x2306	; 0x2306 <pwm_toggle>
            }
        }
    }
    if (asset == "ICA3_ts1") {
        timeslot_offset = 8 * 60 * 60L;
        for (int arr_index = 0; arr_index < 32; arr_index ++) {
    34ce:	0f 5f       	subi	r16, 0xFF	; 255
    34d0:	1f 4f       	sbci	r17, 0xFF	; 255
    34d2:	f4 e8       	ldi	r31, 0x84	; 132
    34d4:	2f 0e       	add	r2, r31
    34d6:	f3 e0       	ldi	r31, 0x03	; 3
    34d8:	3f 1e       	adc	r3, r31
    34da:	41 1c       	adc	r4, r1
    34dc:	51 1c       	adc	r5, r1
    34de:	00 32       	cpi	r16, 0x20	; 32
    34e0:	11 05       	cpc	r17, r1
    34e2:	09 f0       	breq	.+2      	; 0x34e6 <__stack+0x4e7>
    34e4:	a4 cf       	rjmp	.-184    	; 0x342e <__stack+0x42f>
    34e6:	75 c0       	rjmp	.+234    	; 0x35d2 <__stack+0x5d3>
                }

            }
        }
    }
    if (asset == "ICA3_ts2") {
    34e8:	21 ef       	ldi	r18, 0xF1	; 241
    34ea:	a2 16       	cp	r10, r18
    34ec:	22 e2       	ldi	r18, 0x22	; 34
    34ee:	b2 06       	cpc	r11, r18
    34f0:	09 f0       	breq	.+2      	; 0x34f4 <__stack+0x4f5>
    34f2:	6f c0       	rjmp	.+222    	; 0x35d2 <__stack+0x5d3>
    34f4:	aa 24       	eor	r10, r10
    34f6:	a3 94       	inc	r10
    34f8:	b1 2c       	mov	r11, r1
    34fa:	ac 0e       	add	r10, r28
    34fc:	bd 1e       	adc	r11, r29
    34fe:	0f 2e       	mov	r0, r31
    3500:	f4 e8       	ldi	r31, 0x84	; 132
    3502:	2f 2e       	mov	r2, r31
    3504:	f4 ee       	ldi	r31, 0xE4	; 228
    3506:	3f 2e       	mov	r3, r31
    3508:	41 2c       	mov	r4, r1
    350a:	51 2c       	mov	r5, r1
    350c:	f0 2d       	mov	r31, r0
    350e:	00 e0       	ldi	r16, 0x00	; 0
    3510:	10 e0       	ldi	r17, 0x00	; 0
        timeslot_offset = 16 * 60 * 60L;
        for (int arr_index = 0; arr_index < 32; arr_index ++) {
            if (bin_array_pass[arr_index] == 1) {
    3512:	f5 01       	movw	r30, r10
    3514:	81 91       	ld	r24, Z+
    3516:	5f 01       	movw	r10, r30
    3518:	81 30       	cpi	r24, 0x01	; 1
    351a:	09 f0       	breq	.+2      	; 0x351e <__stack+0x51f>
    351c:	4a c0       	rjmp	.+148    	; 0x35b2 <__stack+0x5b3>
                start_time = arr_index * (15 * 60) + timeslot_offset;
                end_time = start_time + (15 * 60);
                if ((arr_index + 1) <= 31) {
    351e:	0f 31       	cpi	r16, 0x1F	; 31
    3520:	11 05       	cpc	r17, r1
    3522:	34 f4       	brge	.+12     	; 0x3530 <__stack+0x531>
                    next_bin_value = bin_array_pass[arr_index + 1];
                    if (next_bin_value == 1) {
    3524:	77 24       	eor	r7, r7
    3526:	73 94       	inc	r7
    3528:	80 81       	ld	r24, Z
    352a:	81 30       	cpi	r24, 0x01	; 1
    352c:	09 f0       	breq	.+2      	; 0x3530 <__stack+0x531>
    352e:	71 2c       	mov	r7, r1
                        next_job = true;
                    } else {
                        next_job = false;
                    }
                }
                if (current_time  >= start_time && current_time <= (start_time + 60)) {
    3530:	d2 01       	movw	r26, r4
    3532:	c1 01       	movw	r24, r2
    3534:	84 58       	subi	r24, 0x84	; 132
    3536:	93 40       	sbci	r25, 0x03	; 3
    3538:	a1 09       	sbc	r26, r1
    353a:	b1 09       	sbc	r27, r1
    353c:	c8 16       	cp	r12, r24
    353e:	d9 06       	cpc	r13, r25
    3540:	ea 06       	cpc	r14, r26
    3542:	fb 06       	cpc	r15, r27
    3544:	c0 f0       	brcs	.+48     	; 0x3576 <__stack+0x577>
    3546:	d2 01       	movw	r26, r4
    3548:	c1 01       	movw	r24, r2
    354a:	88 54       	subi	r24, 0x48	; 72
    354c:	93 40       	sbci	r25, 0x03	; 3
    354e:	a1 09       	sbc	r26, r1
    3550:	b1 09       	sbc	r27, r1
    3552:	8c 15       	cp	r24, r12
    3554:	9d 05       	cpc	r25, r13
    3556:	ae 05       	cpc	r26, r14
    3558:	bf 05       	cpc	r27, r15
    355a:	68 f0       	brcs	.+26     	; 0x3576 <__stack+0x577>
                    //start pwm method
                    DEBUG_puts("!!!start pwm method-ICA3_ts2!!! \n \r");
    355c:	8a ef       	ldi	r24, 0xFA	; 250
    355e:	92 e2       	ldi	r25, 0x22	; 34
    3560:	0e 94 06 03 	call	0x60c	; 0x60c <DEBUG_puts>
                    pwm_toggle(3, true, 10, 10);
    3564:	2a e0       	ldi	r18, 0x0A	; 10
    3566:	30 e0       	ldi	r19, 0x00	; 0
    3568:	4a e0       	ldi	r20, 0x0A	; 10
    356a:	50 e0       	ldi	r21, 0x00	; 0
    356c:	61 e0       	ldi	r22, 0x01	; 1
    356e:	83 e0       	ldi	r24, 0x03	; 3
    3570:	90 e0       	ldi	r25, 0x00	; 0
    3572:	0e 94 83 11 	call	0x2306	; 0x2306 <pwm_toggle>
                }
                if (current_time >= end_time && current_time <= (end_time + 60)) {
    3576:	c2 14       	cp	r12, r2
    3578:	d3 04       	cpc	r13, r3
    357a:	e4 04       	cpc	r14, r4
    357c:	f5 04       	cpc	r15, r5
    357e:	c8 f0       	brcs	.+50     	; 0x35b2 <__stack+0x5b3>
    3580:	d2 01       	movw	r26, r4
    3582:	c1 01       	movw	r24, r2
    3584:	cc 96       	adiw	r24, 0x3c	; 60
    3586:	a1 1d       	adc	r26, r1
    3588:	b1 1d       	adc	r27, r1
    358a:	8c 15       	cp	r24, r12
    358c:	9d 05       	cpc	r25, r13
    358e:	ae 05       	cpc	r26, r14
    3590:	bf 05       	cpc	r27, r15
    3592:	78 f0       	brcs	.+30     	; 0x35b2 <__stack+0x5b3>
                    if (next_job == false) {
    3594:	71 10       	cpse	r7, r1
    3596:	0d c0       	rjmp	.+26     	; 0x35b2 <__stack+0x5b3>
                        DEBUG_puts("!!!end pwm method-ICA3_ts2!!! \n \r"); //////////complete for all ifs
    3598:	8e e1       	ldi	r24, 0x1E	; 30
    359a:	93 e2       	ldi	r25, 0x23	; 35
    359c:	0e 94 06 03 	call	0x60c	; 0x60c <DEBUG_puts>
                        pwm_toggle(3, false, 0, 0);
    35a0:	20 e0       	ldi	r18, 0x00	; 0
    35a2:	30 e0       	ldi	r19, 0x00	; 0
    35a4:	40 e0       	ldi	r20, 0x00	; 0
    35a6:	50 e0       	ldi	r21, 0x00	; 0
    35a8:	60 e0       	ldi	r22, 0x00	; 0
    35aa:	83 e0       	ldi	r24, 0x03	; 3
    35ac:	90 e0       	ldi	r25, 0x00	; 0
    35ae:	0e 94 83 11 	call	0x2306	; 0x2306 <pwm_toggle>
            }
        }
    }
    if (asset == "ICA3_ts2") {
        timeslot_offset = 16 * 60 * 60L;
        for (int arr_index = 0; arr_index < 32; arr_index ++) {
    35b2:	0f 5f       	subi	r16, 0xFF	; 255
    35b4:	1f 4f       	sbci	r17, 0xFF	; 255
    35b6:	f4 e8       	ldi	r31, 0x84	; 132
    35b8:	2f 0e       	add	r2, r31
    35ba:	f3 e0       	ldi	r31, 0x03	; 3
    35bc:	3f 1e       	adc	r3, r31
    35be:	41 1c       	adc	r4, r1
    35c0:	51 1c       	adc	r5, r1
    35c2:	00 32       	cpi	r16, 0x20	; 32
    35c4:	11 05       	cpc	r17, r1
    35c6:	09 f0       	breq	.+2      	; 0x35ca <__stack+0x5cb>
    35c8:	a4 cf       	rjmp	.-184    	; 0x3512 <__stack+0x513>
    35ca:	03 c0       	rjmp	.+6      	; 0x35d2 <__stack+0x5d3>
    35cc:	01 97       	sbiw	r24, 0x01	; 1
                }

            }
        }
    }
    for (int x = 0; x < 32 ; x++) { //clear bin_array_pass
    35ce:	f1 f7       	brne	.-4      	; 0x35cc <__stack+0x5cd>
    35d0:	03 c0       	rjmp	.+6      	; 0x35d8 <__stack+0x5d9>
                }

            }
        }
    }
    if (asset == "ICA3_ts2") {
    35d2:	80 e2       	ldi	r24, 0x20	; 32
    35d4:	90 e0       	ldi	r25, 0x00	; 0
    35d6:	fa cf       	rjmp	.-12     	; 0x35cc <__stack+0x5cd>
    }
    for (int x = 0; x < 32 ; x++) { //clear bin_array_pass
        bin_array_pass[x] = 0;
    }

}//execute_jobs
    35d8:	a0 96       	adiw	r28, 0x20	; 32
    35da:	cd bf       	out	0x3d, r28	; 61
    35dc:	de bf       	out	0x3e, r29	; 62
    35de:	df 91       	pop	r29
    35e0:	cf 91       	pop	r28
    35e2:	1f 91       	pop	r17
    35e4:	0f 91       	pop	r16
    35e6:	ff 90       	pop	r15
    35e8:	ef 90       	pop	r14
    35ea:	df 90       	pop	r13
    35ec:	cf 90       	pop	r12
    35ee:	bf 90       	pop	r11
    35f0:	af 90       	pop	r10
    35f2:	9f 90       	pop	r9
    35f4:	8f 90       	pop	r8
    35f6:	7f 90       	pop	r7
    35f8:	6f 90       	pop	r6
    35fa:	5f 90       	pop	r5
    35fc:	4f 90       	pop	r4
    35fe:	3f 90       	pop	r3
    3600:	2f 90       	pop	r2
    3602:	08 95       	ret

00003604 <look_for_jobs>:
void look_for_jobs(void)
{
    3604:	af 92       	push	r10
    3606:	bf 92       	push	r11
    3608:	cf 92       	push	r12
    360a:	df 92       	push	r13
    360c:	ef 92       	push	r14
    360e:	ff 92       	push	r15
    3610:	0f 93       	push	r16
    3612:	1f 93       	push	r17
    3614:	cf 93       	push	r28
    3616:	df 93       	push	r29
    //check eeprom for scheduled jobs and execute them on the minute
    uint32_t current_time = rtc_get_time();
    3618:	0e 94 32 05 	call	0xa64	; 0xa64 <rtc_get_time>
    int8_t count = 0;
    static char scheduled_char_time[16];
    char eeprom_char_byte;
    for (int address = 0x0000; address <= 0x008F; address++) { //loop through entire eeprom address range
    361c:	c0 e0       	ldi	r28, 0x00	; 0
    361e:	d0 e0       	ldi	r29, 0x00	; 0
}//execute_jobs
void look_for_jobs(void)
{
    //check eeprom for scheduled jobs and execute them on the minute
    uint32_t current_time = rtc_get_time();
    int8_t count = 0;
    3620:	a1 2c       	mov	r10, r1
    for (int x = 0; x < 32 ; x++) { //clear bin_array_pass
        bin_array_pass[x] = 0;
    }

}//execute_jobs
void look_for_jobs(void)
    3622:	0f 2e       	mov	r0, r31
    3624:	fb eb       	ldi	r31, 0xBB	; 187
    3626:	ef 2e       	mov	r14, r31
    3628:	f5 e2       	ldi	r31, 0x25	; 37
    362a:	ff 2e       	mov	r15, r31
    362c:	f0 2d       	mov	r31, r0
            }
            if (address == 0x007F) {
                char* scheduled_char_time_ptr = &scheduled_char_time;
                execute_jobs(scheduled_char_time_ptr, count, "ICA3_ts1");
                for (int x = 0; x <= 15; x++) { //clear array
                    scheduled_char_time[x] = (char)(0xFF);
    362e:	bb 24       	eor	r11, r11
    3630:	ba 94       	dec	r11
    uint32_t current_time = rtc_get_time();
    int8_t count = 0;
    static char scheduled_char_time[16];
    char eeprom_char_byte;
    for (int address = 0x0000; address <= 0x008F; address++) { //loop through entire eeprom address range
        if (address <= 0x000F) { //ICA1_ts0
    3632:	c0 31       	cpi	r28, 0x10	; 16
    3634:	d1 05       	cpc	r29, r1
    3636:	14 f5       	brge	.+68     	; 0x367c <look_for_jobs+0x78>
            eeprom_char_byte = (char) nvm_eeprom_read_byte(address);
    3638:	ce 01       	movw	r24, r28
    363a:	0e 94 49 04 	call	0x892	; 0x892 <nvm_eeprom_read_byte>
            if ((Byte) eeprom_char_byte != 0xFF) {
    363e:	8f 3f       	cpi	r24, 0xFF	; 255
    3640:	41 f0       	breq	.+16     	; 0x3652 <look_for_jobs+0x4e>
                scheduled_char_time[count] = eeprom_char_byte;
    3642:	ea 2d       	mov	r30, r10
    3644:	ff 27       	eor	r31, r31
    3646:	e7 fd       	sbrc	r30, 7
    3648:	f0 95       	com	r31
    364a:	e5 55       	subi	r30, 0x55	; 85
    364c:	fa 4d       	sbci	r31, 0xDA	; 218
    364e:	80 83       	st	Z, r24
                count ++;
    3650:	a3 94       	inc	r10
            }
            if (address == 0x000F) {
    3652:	cf 30       	cpi	r28, 0x0F	; 15
    3654:	d1 05       	cpc	r29, r1
    3656:	91 f4       	brne	.+36     	; 0x367c <look_for_jobs+0x78>
                char* scheduled_char_time_ptr = &scheduled_char_time;
                execute_jobs(scheduled_char_time_ptr, count, "ICA1_ts0");
    3658:	49 e7       	ldi	r20, 0x79	; 121
    365a:	50 e2       	ldi	r21, 0x20	; 32
    365c:	6a 2d       	mov	r22, r10
    365e:	8b ea       	ldi	r24, 0xAB	; 171
    3660:	95 e2       	ldi	r25, 0x25	; 37
    3662:	ce da       	rcall	.-2660   	; 0x2c00 <execute_jobs>
    3664:	eb ea       	ldi	r30, 0xAB	; 171
    3666:	f5 e2       	ldi	r31, 0x25	; 37
                for (int x = 0; x <= 15; x++) { //clear array
                    scheduled_char_time[x] = (char)(0xFF);
    3668:	b1 92       	st	Z+, r11
                count ++;
            }
            if (address == 0x000F) {
                char* scheduled_char_time_ptr = &scheduled_char_time;
                execute_jobs(scheduled_char_time_ptr, count, "ICA1_ts0");
                for (int x = 0; x <= 15; x++) { //clear array
    366a:	ee 15       	cp	r30, r14
    366c:	ff 05       	cpc	r31, r15
    366e:	e1 f7       	brne	.-8      	; 0x3668 <look_for_jobs+0x64>
                    scheduled_char_time[x] = (char)(0xFF);
                }
                count = 0;
            }
        }//ICA1_ts0
        if (address >= 0x0010 && address <= 0x001F) { //ICA1_ts1
    3670:	0f 2e       	mov	r0, r31
    3672:	ff e0       	ldi	r31, 0x0F	; 15
    3674:	cf 2e       	mov	r12, r31
    3676:	d1 2c       	mov	r13, r1
    3678:	f0 2d       	mov	r31, r0
    367a:	1e c1       	rjmp	.+572    	; 0x38b8 <look_for_jobs+0x2b4>
    367c:	6e 01       	movw	r12, r28
    367e:	ce 01       	movw	r24, r28
    3680:	40 97       	sbiw	r24, 0x10	; 16
    3682:	40 97       	sbiw	r24, 0x10	; 16
    3684:	e8 f4       	brcc	.+58     	; 0x36c0 <look_for_jobs+0xbc>
            eeprom_char_byte = (char) nvm_eeprom_read_byte(address);
    3686:	ce 01       	movw	r24, r28
    3688:	0e 94 49 04 	call	0x892	; 0x892 <nvm_eeprom_read_byte>
            if ((Byte) eeprom_char_byte != 0xFF) {
    368c:	8f 3f       	cpi	r24, 0xFF	; 255
    368e:	41 f0       	breq	.+16     	; 0x36a0 <look_for_jobs+0x9c>
                scheduled_char_time[count] = eeprom_char_byte;
    3690:	ea 2d       	mov	r30, r10
    3692:	ff 27       	eor	r31, r31
    3694:	e7 fd       	sbrc	r30, 7
    3696:	f0 95       	com	r31
    3698:	e5 55       	subi	r30, 0x55	; 85
    369a:	fa 4d       	sbci	r31, 0xDA	; 218
    369c:	80 83       	st	Z, r24
                count ++;
    369e:	a3 94       	inc	r10
            }
            if (address == 0x001F) {
    36a0:	cf 31       	cpi	r28, 0x1F	; 31
    36a2:	d1 05       	cpc	r29, r1
    36a4:	69 f4       	brne	.+26     	; 0x36c0 <look_for_jobs+0xbc>
                char* scheduled_char_time_ptr = &scheduled_char_time;
                execute_jobs(scheduled_char_time_ptr, count, "ICA1_ts1");
    36a6:	48 ec       	ldi	r20, 0xC8	; 200
    36a8:	50 e2       	ldi	r21, 0x20	; 32
    36aa:	6a 2d       	mov	r22, r10
    36ac:	8b ea       	ldi	r24, 0xAB	; 171
    36ae:	95 e2       	ldi	r25, 0x25	; 37
    36b0:	a7 da       	rcall	.-2738   	; 0x2c00 <execute_jobs>
    36b2:	eb ea       	ldi	r30, 0xAB	; 171
    36b4:	f5 e2       	ldi	r31, 0x25	; 37
                for (int x = 0; x <= 15; x++) { //clear array
                    scheduled_char_time[x] = (char)(0xFF);
    36b6:	b1 92       	st	Z+, r11
                count ++;
            }
            if (address == 0x001F) {
                char* scheduled_char_time_ptr = &scheduled_char_time;
                execute_jobs(scheduled_char_time_ptr, count, "ICA1_ts1");
                for (int x = 0; x <= 15; x++) { //clear array
    36b8:	ee 15       	cp	r30, r14
    36ba:	ff 05       	cpc	r31, r15
    36bc:	e1 f7       	brne	.-8      	; 0x36b6 <look_for_jobs+0xb2>
    36be:	fc c0       	rjmp	.+504    	; 0x38b8 <look_for_jobs+0x2b4>
    for (int x = 0; x < 32 ; x++) { //clear bin_array_pass
        bin_array_pass[x] = 0;
    }

}//execute_jobs
void look_for_jobs(void)
    36c0:	8e 01       	movw	r16, r28
                    scheduled_char_time[x] = (char)(0xFF);
                }
                count = 0;
            }
        }//ICA1_ts1
        if (address >= 0x0020 && address <= 0x002F) { //ICA1_ts2
    36c2:	ce 01       	movw	r24, r28
    36c4:	80 97       	sbiw	r24, 0x20	; 32
    36c6:	40 97       	sbiw	r24, 0x10	; 16
    36c8:	f0 f4       	brcc	.+60     	; 0x3706 <look_for_jobs+0x102>
            eeprom_char_byte = (char) nvm_eeprom_read_byte(address);
    36ca:	c6 01       	movw	r24, r12
    36cc:	0e 94 49 04 	call	0x892	; 0x892 <nvm_eeprom_read_byte>
            if ((Byte) eeprom_char_byte != 0xFF) {
    36d0:	8f 3f       	cpi	r24, 0xFF	; 255
    36d2:	41 f0       	breq	.+16     	; 0x36e4 <look_for_jobs+0xe0>
                scheduled_char_time[count] = eeprom_char_byte;
    36d4:	ea 2d       	mov	r30, r10
    36d6:	ff 27       	eor	r31, r31
    36d8:	e7 fd       	sbrc	r30, 7
    36da:	f0 95       	com	r31
    36dc:	e5 55       	subi	r30, 0x55	; 85
    36de:	fa 4d       	sbci	r31, 0xDA	; 218
    36e0:	80 83       	st	Z, r24
                count ++;
    36e2:	a3 94       	inc	r10
            }
            if (address == 0x002F) {
    36e4:	cf 32       	cpi	r28, 0x2F	; 47
    36e6:	d1 05       	cpc	r29, r1
    36e8:	71 f4       	brne	.+28     	; 0x3706 <look_for_jobs+0x102>
                char* scheduled_char_time_ptr = &scheduled_char_time;
                execute_jobs(scheduled_char_time_ptr, count, "ICA1_ts2");
    36ea:	47 e1       	ldi	r20, 0x17	; 23
    36ec:	51 e2       	ldi	r21, 0x21	; 33
    36ee:	6a 2d       	mov	r22, r10
    36f0:	8b ea       	ldi	r24, 0xAB	; 171
    36f2:	95 e2       	ldi	r25, 0x25	; 37
    36f4:	85 da       	rcall	.-2806   	; 0x2c00 <execute_jobs>
    36f6:	eb ea       	ldi	r30, 0xAB	; 171
    36f8:	f5 e2       	ldi	r31, 0x25	; 37
                for (int x = 0; x <= 15; x++) { //clear array
                    scheduled_char_time[x] = (char)(0xFF);
    36fa:	b1 92       	st	Z+, r11
                count ++;
            }
            if (address == 0x002F) {
                char* scheduled_char_time_ptr = &scheduled_char_time;
                execute_jobs(scheduled_char_time_ptr, count, "ICA1_ts2");
                for (int x = 0; x <= 15; x++) { //clear array
    36fc:	ee 15       	cp	r30, r14
    36fe:	ff 05       	cpc	r31, r15
    3700:	e1 f7       	brne	.-8      	; 0x36fa <look_for_jobs+0xf6>
                    scheduled_char_time[x] = (char)(0xFF);
                }
                count = 0;
    3702:	a1 2c       	mov	r10, r1
    3704:	22 c0       	rjmp	.+68     	; 0x374a <look_for_jobs+0x146>
            }
        }//ICA1_ts2
        if (address >= 0x0030 && address <= 0x003F) { //ICA2_ts0
    3706:	c8 01       	movw	r24, r16
    3708:	c0 97       	sbiw	r24, 0x30	; 48
    370a:	40 97       	sbiw	r24, 0x10	; 16
    370c:	f0 f4       	brcc	.+60     	; 0x374a <look_for_jobs+0x146>
            eeprom_char_byte = (char) nvm_eeprom_read_byte(address);
    370e:	c6 01       	movw	r24, r12
    3710:	0e 94 49 04 	call	0x892	; 0x892 <nvm_eeprom_read_byte>
            if ((Byte) eeprom_char_byte != 0xFF) {
    3714:	8f 3f       	cpi	r24, 0xFF	; 255
    3716:	41 f0       	breq	.+16     	; 0x3728 <look_for_jobs+0x124>
                scheduled_char_time[count] = eeprom_char_byte;
    3718:	ea 2d       	mov	r30, r10
    371a:	ff 27       	eor	r31, r31
    371c:	e7 fd       	sbrc	r30, 7
    371e:	f0 95       	com	r31
    3720:	e5 55       	subi	r30, 0x55	; 85
    3722:	fa 4d       	sbci	r31, 0xDA	; 218
    3724:	80 83       	st	Z, r24
                count ++;
    3726:	a3 94       	inc	r10
            }
            if (address == 0x003F) {
    3728:	cf 33       	cpi	r28, 0x3F	; 63
    372a:	d1 05       	cpc	r29, r1
    372c:	71 f4       	brne	.+28     	; 0x374a <look_for_jobs+0x146>
                char* scheduled_char_time_ptr = &scheduled_char_time;
                execute_jobs(scheduled_char_time_ptr, count, "ICA2_ts0");
    372e:	46 e6       	ldi	r20, 0x66	; 102
    3730:	51 e2       	ldi	r21, 0x21	; 33
    3732:	6a 2d       	mov	r22, r10
    3734:	8b ea       	ldi	r24, 0xAB	; 171
    3736:	95 e2       	ldi	r25, 0x25	; 37
    3738:	63 da       	rcall	.-2874   	; 0x2c00 <execute_jobs>
    373a:	eb ea       	ldi	r30, 0xAB	; 171
    373c:	f5 e2       	ldi	r31, 0x25	; 37
                for (int x = 0; x <= 15; x++) { //clear array
                    scheduled_char_time[x] = (char)(0xFF);
    373e:	b1 92       	st	Z+, r11
                count ++;
            }
            if (address == 0x003F) {
                char* scheduled_char_time_ptr = &scheduled_char_time;
                execute_jobs(scheduled_char_time_ptr, count, "ICA2_ts0");
                for (int x = 0; x <= 15; x++) { //clear array
    3740:	ee 15       	cp	r30, r14
    3742:	ff 05       	cpc	r31, r15
    3744:	e1 f7       	brne	.-8      	; 0x373e <look_for_jobs+0x13a>
                    scheduled_char_time[x] = (char)(0xFF);
                }
                count = 0;
    3746:	a1 2c       	mov	r10, r1
    3748:	23 c0       	rjmp	.+70     	; 0x3790 <look_for_jobs+0x18c>
            }
        }//ICA2_ts0
        if (address >= 0x0040 && address <= 0x004F) { //ICA2_ts1
    374a:	c8 01       	movw	r24, r16
    374c:	80 54       	subi	r24, 0x40	; 64
    374e:	91 09       	sbc	r25, r1
    3750:	40 97       	sbiw	r24, 0x10	; 16
    3752:	f0 f4       	brcc	.+60     	; 0x3790 <look_for_jobs+0x18c>
            eeprom_char_byte = (char) nvm_eeprom_read_byte(address);
    3754:	c6 01       	movw	r24, r12
    3756:	0e 94 49 04 	call	0x892	; 0x892 <nvm_eeprom_read_byte>
            if ((Byte) eeprom_char_byte != 0xFF) {
    375a:	8f 3f       	cpi	r24, 0xFF	; 255
    375c:	41 f0       	breq	.+16     	; 0x376e <look_for_jobs+0x16a>
                scheduled_char_time[count] = eeprom_char_byte;
    375e:	ea 2d       	mov	r30, r10
    3760:	ff 27       	eor	r31, r31
    3762:	e7 fd       	sbrc	r30, 7
    3764:	f0 95       	com	r31
    3766:	e5 55       	subi	r30, 0x55	; 85
    3768:	fa 4d       	sbci	r31, 0xDA	; 218
    376a:	80 83       	st	Z, r24
                count ++;
    376c:	a3 94       	inc	r10
            }
            if (address == 0x004F) {
    376e:	cf 34       	cpi	r28, 0x4F	; 79
    3770:	d1 05       	cpc	r29, r1
    3772:	71 f4       	brne	.+28     	; 0x3790 <look_for_jobs+0x18c>
                char* scheduled_char_time_ptr = &scheduled_char_time;
                execute_jobs(scheduled_char_time_ptr, count, "ICA2_ts1");
    3774:	45 eb       	ldi	r20, 0xB5	; 181
    3776:	51 e2       	ldi	r21, 0x21	; 33
    3778:	6a 2d       	mov	r22, r10
    377a:	8b ea       	ldi	r24, 0xAB	; 171
    377c:	95 e2       	ldi	r25, 0x25	; 37
    377e:	40 da       	rcall	.-2944   	; 0x2c00 <execute_jobs>
    3780:	eb ea       	ldi	r30, 0xAB	; 171
    3782:	f5 e2       	ldi	r31, 0x25	; 37
                for (int x = 0; x <= 15; x++) { //clear array
                    scheduled_char_time[x] = (char)(0x00FF);
    3784:	b1 92       	st	Z+, r11
                count ++;
            }
            if (address == 0x004F) {
                char* scheduled_char_time_ptr = &scheduled_char_time;
                execute_jobs(scheduled_char_time_ptr, count, "ICA2_ts1");
                for (int x = 0; x <= 15; x++) { //clear array
    3786:	ee 15       	cp	r30, r14
    3788:	ff 05       	cpc	r31, r15
    378a:	e1 f7       	brne	.-8      	; 0x3784 <look_for_jobs+0x180>
                    scheduled_char_time[x] = (char)(0x00FF);
                }
                count = 0;
    378c:	a1 2c       	mov	r10, r1
    378e:	23 c0       	rjmp	.+70     	; 0x37d6 <look_for_jobs+0x1d2>
            }
        }//ICA2_ts1
        if (address >= 0x0050 && address <= 0x005F) { //ICA2_ts2
    3790:	c8 01       	movw	r24, r16
    3792:	80 55       	subi	r24, 0x50	; 80
    3794:	91 09       	sbc	r25, r1
    3796:	40 97       	sbiw	r24, 0x10	; 16
    3798:	f0 f4       	brcc	.+60     	; 0x37d6 <look_for_jobs+0x1d2>
            eeprom_char_byte = (char) nvm_eeprom_read_byte(address);
    379a:	c6 01       	movw	r24, r12
    379c:	0e 94 49 04 	call	0x892	; 0x892 <nvm_eeprom_read_byte>
            if ((Byte) eeprom_char_byte != 0xFF) {
    37a0:	8f 3f       	cpi	r24, 0xFF	; 255
    37a2:	41 f0       	breq	.+16     	; 0x37b4 <look_for_jobs+0x1b0>
                scheduled_char_time[count] = eeprom_char_byte;
    37a4:	ea 2d       	mov	r30, r10
    37a6:	ff 27       	eor	r31, r31
    37a8:	e7 fd       	sbrc	r30, 7
    37aa:	f0 95       	com	r31
    37ac:	e5 55       	subi	r30, 0x55	; 85
    37ae:	fa 4d       	sbci	r31, 0xDA	; 218
    37b0:	80 83       	st	Z, r24
                count ++;
    37b2:	a3 94       	inc	r10
            }
            if (address == 0x005F) {
    37b4:	cf 35       	cpi	r28, 0x5F	; 95
    37b6:	d1 05       	cpc	r29, r1
    37b8:	71 f4       	brne	.+28     	; 0x37d6 <look_for_jobs+0x1d2>
                char* scheduled_char_time_ptr = &scheduled_char_time;
                execute_jobs(scheduled_char_time_ptr, count, "ICA2_ts2");
    37ba:	44 e0       	ldi	r20, 0x04	; 4
    37bc:	52 e2       	ldi	r21, 0x22	; 34
    37be:	6a 2d       	mov	r22, r10
    37c0:	8b ea       	ldi	r24, 0xAB	; 171
    37c2:	95 e2       	ldi	r25, 0x25	; 37
    37c4:	1d da       	rcall	.-3014   	; 0x2c00 <execute_jobs>
    37c6:	eb ea       	ldi	r30, 0xAB	; 171
    37c8:	f5 e2       	ldi	r31, 0x25	; 37
                for (int x = 0; x <= 15; x++) { //clear array
                    scheduled_char_time[x] = (char)(0xFF);
    37ca:	b1 92       	st	Z+, r11
                count ++;
            }
            if (address == 0x005F) {
                char* scheduled_char_time_ptr = &scheduled_char_time;
                execute_jobs(scheduled_char_time_ptr, count, "ICA2_ts2");
                for (int x = 0; x <= 15; x++) { //clear array
    37cc:	ee 15       	cp	r30, r14
    37ce:	ff 05       	cpc	r31, r15
    37d0:	e1 f7       	brne	.-8      	; 0x37ca <look_for_jobs+0x1c6>
                    scheduled_char_time[x] = (char)(0xFF);
                }
                count = 0;
    37d2:	a1 2c       	mov	r10, r1
    37d4:	23 c0       	rjmp	.+70     	; 0x381c <look_for_jobs+0x218>
            }
        }
        if (address >= 0x0060 && address <= 0x006F) { //ICA3_ts0
    37d6:	c8 01       	movw	r24, r16
    37d8:	80 56       	subi	r24, 0x60	; 96
    37da:	91 09       	sbc	r25, r1
    37dc:	40 97       	sbiw	r24, 0x10	; 16
    37de:	f0 f4       	brcc	.+60     	; 0x381c <look_for_jobs+0x218>
            eeprom_char_byte = (char) nvm_eeprom_read_byte(address);
    37e0:	c6 01       	movw	r24, r12
    37e2:	0e 94 49 04 	call	0x892	; 0x892 <nvm_eeprom_read_byte>
            if ((Byte) eeprom_char_byte != 0xFF) {
    37e6:	8f 3f       	cpi	r24, 0xFF	; 255
    37e8:	41 f0       	breq	.+16     	; 0x37fa <look_for_jobs+0x1f6>
                scheduled_char_time[count] = eeprom_char_byte;
    37ea:	ea 2d       	mov	r30, r10
    37ec:	ff 27       	eor	r31, r31
    37ee:	e7 fd       	sbrc	r30, 7
    37f0:	f0 95       	com	r31
    37f2:	e5 55       	subi	r30, 0x55	; 85
    37f4:	fa 4d       	sbci	r31, 0xDA	; 218
    37f6:	80 83       	st	Z, r24
                count ++;
    37f8:	a3 94       	inc	r10
            }
            if (address == 0x006F) {
    37fa:	cf 36       	cpi	r28, 0x6F	; 111
    37fc:	d1 05       	cpc	r29, r1
    37fe:	71 f4       	brne	.+28     	; 0x381c <look_for_jobs+0x218>
                char* scheduled_char_time_ptr = &scheduled_char_time;
                execute_jobs(scheduled_char_time_ptr, count, "ICA3_ts0");
    3800:	43 e5       	ldi	r20, 0x53	; 83
    3802:	52 e2       	ldi	r21, 0x22	; 34
    3804:	6a 2d       	mov	r22, r10
    3806:	8b ea       	ldi	r24, 0xAB	; 171
    3808:	95 e2       	ldi	r25, 0x25	; 37
    380a:	fa d9       	rcall	.-3084   	; 0x2c00 <execute_jobs>
    380c:	eb ea       	ldi	r30, 0xAB	; 171
    380e:	f5 e2       	ldi	r31, 0x25	; 37
                for (int x = 0; x <= 15; x++) { //clear array
                    scheduled_char_time[x] = (char)(0xFF);
    3810:	b1 92       	st	Z+, r11
                count ++;
            }
            if (address == 0x006F) {
                char* scheduled_char_time_ptr = &scheduled_char_time;
                execute_jobs(scheduled_char_time_ptr, count, "ICA3_ts0");
                for (int x = 0; x <= 15; x++) { //clear array
    3812:	ee 15       	cp	r30, r14
    3814:	ff 05       	cpc	r31, r15
    3816:	e1 f7       	brne	.-8      	; 0x3810 <look_for_jobs+0x20c>
                    scheduled_char_time[x] = (char)(0xFF);
                }
                count = 0;
    3818:	a1 2c       	mov	r10, r1
    381a:	23 c0       	rjmp	.+70     	; 0x3862 <look_for_jobs+0x25e>
            }
        }//ICA3_ts0
        if (address >= 0x0070 && address <= 0x007F) { //ICA3_ts1
    381c:	c8 01       	movw	r24, r16
    381e:	80 57       	subi	r24, 0x70	; 112
    3820:	91 09       	sbc	r25, r1
    3822:	40 97       	sbiw	r24, 0x10	; 16
    3824:	f0 f4       	brcc	.+60     	; 0x3862 <look_for_jobs+0x25e>
            eeprom_char_byte = (char) nvm_eeprom_read_byte(address);
    3826:	c6 01       	movw	r24, r12
    3828:	0e 94 49 04 	call	0x892	; 0x892 <nvm_eeprom_read_byte>
            if ((Byte) eeprom_char_byte != 0xFF) {
    382c:	8f 3f       	cpi	r24, 0xFF	; 255
    382e:	41 f0       	breq	.+16     	; 0x3840 <look_for_jobs+0x23c>
                scheduled_char_time[count] = eeprom_char_byte;
    3830:	ea 2d       	mov	r30, r10
    3832:	ff 27       	eor	r31, r31
    3834:	e7 fd       	sbrc	r30, 7
    3836:	f0 95       	com	r31
    3838:	e5 55       	subi	r30, 0x55	; 85
    383a:	fa 4d       	sbci	r31, 0xDA	; 218
    383c:	80 83       	st	Z, r24
                count ++;
    383e:	a3 94       	inc	r10
            }
            if (address == 0x007F) {
    3840:	cf 37       	cpi	r28, 0x7F	; 127
    3842:	d1 05       	cpc	r29, r1
    3844:	71 f4       	brne	.+28     	; 0x3862 <look_for_jobs+0x25e>
                char* scheduled_char_time_ptr = &scheduled_char_time;
                execute_jobs(scheduled_char_time_ptr, count, "ICA3_ts1");
    3846:	42 ea       	ldi	r20, 0xA2	; 162
    3848:	52 e2       	ldi	r21, 0x22	; 34
    384a:	6a 2d       	mov	r22, r10
    384c:	8b ea       	ldi	r24, 0xAB	; 171
    384e:	95 e2       	ldi	r25, 0x25	; 37
    3850:	d7 d9       	rcall	.-3154   	; 0x2c00 <execute_jobs>
    3852:	eb ea       	ldi	r30, 0xAB	; 171
    3854:	f5 e2       	ldi	r31, 0x25	; 37
                for (int x = 0; x <= 15; x++) { //clear array
                    scheduled_char_time[x] = (char)(0xFF);
    3856:	b1 92       	st	Z+, r11
                count ++;
            }
            if (address == 0x007F) {
                char* scheduled_char_time_ptr = &scheduled_char_time;
                execute_jobs(scheduled_char_time_ptr, count, "ICA3_ts1");
                for (int x = 0; x <= 15; x++) { //clear array
    3858:	ee 15       	cp	r30, r14
    385a:	ff 05       	cpc	r31, r15
    385c:	e1 f7       	brne	.-8      	; 0x3856 <look_for_jobs+0x252>
                    scheduled_char_time[x] = (char)(0xFF);
                }
                count = 0;
    385e:	a1 2c       	mov	r10, r1
    3860:	25 c0       	rjmp	.+74     	; 0x38ac <look_for_jobs+0x2a8>
            }
        }//ICA3_ts1
        if (address >= 0x0080 && address <= 0x008F) { //ICA3_ts2
    3862:	00 58       	subi	r16, 0x80	; 128
    3864:	11 09       	sbc	r17, r1
    3866:	00 31       	cpi	r16, 0x10	; 16
    3868:	11 05       	cpc	r17, r1
    386a:	00 f5       	brcc	.+64     	; 0x38ac <look_for_jobs+0x2a8>
            eeprom_char_byte = (char) nvm_eeprom_read_byte(address);
    386c:	c6 01       	movw	r24, r12
    386e:	0e 94 49 04 	call	0x892	; 0x892 <nvm_eeprom_read_byte>
            if ((Byte) eeprom_char_byte != 0xFF) {
    3872:	8f 3f       	cpi	r24, 0xFF	; 255
    3874:	41 f0       	breq	.+16     	; 0x3886 <look_for_jobs+0x282>
                scheduled_char_time[count] = eeprom_char_byte;
    3876:	ea 2d       	mov	r30, r10
    3878:	ff 27       	eor	r31, r31
    387a:	e7 fd       	sbrc	r30, 7
    387c:	f0 95       	com	r31
    387e:	e5 55       	subi	r30, 0x55	; 85
    3880:	fa 4d       	sbci	r31, 0xDA	; 218
    3882:	80 83       	st	Z, r24
                count ++;
    3884:	a3 94       	inc	r10
            }
            if (address == 0x008F) {
    3886:	cf 38       	cpi	r28, 0x8F	; 143
    3888:	d1 05       	cpc	r29, r1
    388a:	81 f4       	brne	.+32     	; 0x38ac <look_for_jobs+0x2a8>
                char* scheduled_char_time_ptr = &scheduled_char_time;
                execute_jobs(scheduled_char_time_ptr, count, "ICA3_ts2");
    388c:	41 ef       	ldi	r20, 0xF1	; 241
    388e:	52 e2       	ldi	r21, 0x22	; 34
    3890:	6a 2d       	mov	r22, r10
    3892:	8b ea       	ldi	r24, 0xAB	; 171
    3894:	95 e2       	ldi	r25, 0x25	; 37
    3896:	b4 d9       	rcall	.-3224   	; 0x2c00 <execute_jobs>
    3898:	eb ea       	ldi	r30, 0xAB	; 171
    389a:	f5 e2       	ldi	r31, 0x25	; 37
    for (int x = 0; x < 32 ; x++) { //clear bin_array_pass
        bin_array_pass[x] = 0;
    }

}//execute_jobs
void look_for_jobs(void)
    389c:	8b eb       	ldi	r24, 0xBB	; 187
    389e:	95 e2       	ldi	r25, 0x25	; 37
            }
            if (address == 0x008F) {
                char* scheduled_char_time_ptr = &scheduled_char_time;
                execute_jobs(scheduled_char_time_ptr, count, "ICA3_ts2");
                for (int x = 0; x <= 15; x++) { //clear array
                    scheduled_char_time[x] = (char)(0xFF);
    38a0:	2f ef       	ldi	r18, 0xFF	; 255
    38a2:	21 93       	st	Z+, r18
                count ++;
            }
            if (address == 0x008F) {
                char* scheduled_char_time_ptr = &scheduled_char_time;
                execute_jobs(scheduled_char_time_ptr, count, "ICA3_ts2");
                for (int x = 0; x <= 15; x++) { //clear array
    38a4:	e8 17       	cp	r30, r24
    38a6:	f9 07       	cpc	r31, r25
    38a8:	e1 f7       	brne	.-8      	; 0x38a2 <look_for_jobs+0x29e>
    38aa:	09 c0       	rjmp	.+18     	; 0x38be <look_for_jobs+0x2ba>
    //check eeprom for scheduled jobs and execute them on the minute
    uint32_t current_time = rtc_get_time();
    int8_t count = 0;
    static char scheduled_char_time[16];
    char eeprom_char_byte;
    for (int address = 0x0000; address <= 0x008F; address++) { //loop through entire eeprom address range
    38ac:	21 96       	adiw	r28, 0x01	; 1
    38ae:	c0 39       	cpi	r28, 0x90	; 144
    38b0:	d1 05       	cpc	r29, r1
    38b2:	09 f0       	breq	.+2      	; 0x38b6 <look_for_jobs+0x2b2>
    38b4:	be ce       	rjmp	.-644    	; 0x3632 <look_for_jobs+0x2e>
    38b6:	03 c0       	rjmp	.+6      	; 0x38be <look_for_jobs+0x2ba>
    for (int x = 0; x < 32 ; x++) { //clear bin_array_pass
        bin_array_pass[x] = 0;
    }

}//execute_jobs
void look_for_jobs(void)
    38b8:	8e 01       	movw	r16, r28
    38ba:	a1 2c       	mov	r10, r1
    38bc:	24 cf       	rjmp	.-440    	; 0x3706 <look_for_jobs+0x102>
                count = 0;
            }
        }//ICA3_ts2
    }//loop through entire eeprom
    return 0;
}
    38be:	df 91       	pop	r29
    38c0:	cf 91       	pop	r28
    38c2:	1f 91       	pop	r17
    38c4:	0f 91       	pop	r16
    38c6:	ff 90       	pop	r15
    38c8:	ef 90       	pop	r14
    38ca:	df 90       	pop	r13
    38cc:	cf 90       	pop	r12
    38ce:	bf 90       	pop	r11
    38d0:	af 90       	pop	r10
    38d2:	08 95       	ret

000038d4 <main>:

int main(void)
{
    38d4:	cf 93       	push	r28
    38d6:	df 93       	push	r29
    38d8:	cd b7       	in	r28, 0x3d	; 61
    38da:	de b7       	in	r29, 0x3e	; 62
    38dc:	c0 54       	subi	r28, 0x40	; 64
    38de:	d1 09       	sbc	r29, r1
    38e0:	cd bf       	out	0x3d, r28	; 61
    38e2:	de bf       	out	0x3e, r29	; 62
    irq_initialize_vectors();
    38e4:	e0 ea       	ldi	r30, 0xA0	; 160
    38e6:	f0 e0       	ldi	r31, 0x00	; 0
    38e8:	87 e0       	ldi	r24, 0x07	; 7
    38ea:	82 83       	std	Z+2, r24	; 0x02
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    38ec:	82 83       	std	Z+2, r24	; 0x02
    pmic_init();
    sysclk_init();
    38ee:	0e 94 be 03 	call	0x77c	; 0x77c <sysclk_init>
    timeout_init();
    38f2:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <timeout_init>
    ioport_init();
    board_init();
    38f6:	0e 94 58 03 	call	0x6b0	; 0x6b0 <board_init>
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
    38fa:	10 92 bb 25 	sts	0x25BB, r1
    38fe:	10 92 bc 25 	sts	0x25BC, r1
    3902:	10 92 bd 25 	sts	0x25BD, r1
    3906:	10 92 be 25 	sts	0x25BE, r1
    390a:	10 92 bf 25 	sts	0x25BF, r1
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    390e:	81 e0       	ldi	r24, 0x01	; 1
    3910:	80 93 c0 25 	sts	0x25C0, r24
    sleepmgr_init();
    rtc_init();
    3914:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <rtc_init>
    cpu_irq_enable();
    3918:	78 94       	sei
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    391a:	88 e0       	ldi	r24, 0x08	; 8
    391c:	e0 e2       	ldi	r30, 0x20	; 32
    391e:	f6 e0       	ldi	r31, 0x06	; 6
    3920:	86 83       	std	Z+6, r24	; 0x06
    delay_init(F_CPU);

    ioport_set_pin_low(GPIO_LED1);
    _DEBUG_init();
    3922:	0e 94 a8 01 	call	0x350	; 0x350 <_uartc1_init>
    _DEBUG_enable_interrupt(USART_INT_LVL_LO);
    3926:	81 e0       	ldi	r24, 0x01	; 1
    3928:	90 e0       	ldi	r25, 0x00	; 0
    392a:	0e 94 9f 01 	call	0x33e	; 0x33e <_uartc1_enable_interrupt>
    _MODEM_init();
    392e:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_uarte0_init>
    _MODEM_enable_interrupt(USART_INT_LVL_LO);
    3932:	81 e0       	ldi	r24, 0x01	; 1
    3934:	90 e0       	ldi	r25, 0x00	; 0
    3936:	0e 94 74 02 	call	0x4e8	; 0x4e8 <_uarte0_enable_interrupt>
    uint32_t dummy_timer;
    uint32_t rtc_timer;
    uint32_t look_for_jobs_timer;
    uint32_t system_time_timer; //

    MODEM_raw_puts("at+awtda=c*");
    393a:	80 e4       	ldi	r24, 0x40	; 64
    393c:	93 e2       	ldi	r25, 0x23	; 35
    393e:	0e 94 4a 03 	call	0x694	; 0x694 <MODEM_raw_puts>
    MODEM_raw_putb('\r');
    3942:	8d e0       	ldi	r24, 0x0D	; 13
    3944:	0e 94 43 03 	call	0x686	; 0x686 <MODEM_raw_putb>
    MODEM_raw_putb('\n');
    3948:	8a e0       	ldi	r24, 0x0A	; 10
    394a:	0e 94 43 03 	call	0x686	; 0x686 <MODEM_raw_putb>
    394e:	80 e0       	ldi	r24, 0x00	; 0
    3950:	92 e1       	ldi	r25, 0x12	; 18
    3952:	aa e7       	ldi	r26, 0x7A	; 122
    3954:	b0 e0       	ldi	r27, 0x00	; 0
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	do { barrier(); } while (--n);
    3956:	01 97       	sbiw	r24, 0x01	; 1
    3958:	a1 09       	sbc	r26, r1
    395a:	b1 09       	sbc	r27, r1
    395c:	e1 f7       	brne	.-8      	; 0x3956 <main+0x82>
    delay_s(1.5);
    MODEM_raw_puts("at+awtda=d*");
    395e:	8c e4       	ldi	r24, 0x4C	; 76
    3960:	93 e2       	ldi	r25, 0x23	; 35
    3962:	0e 94 4a 03 	call	0x694	; 0x694 <MODEM_raw_puts>
    MODEM_raw_putb('\r');
    3966:	8d e0       	ldi	r24, 0x0D	; 13
    3968:	0e 94 43 03 	call	0x686	; 0x686 <MODEM_raw_putb>
    MODEM_raw_putb('\n');
    396c:	8a e0       	ldi	r24, 0x0A	; 10
    396e:	0e 94 43 03 	call	0x686	; 0x686 <MODEM_raw_putb>
    3972:	80 e0       	ldi	r24, 0x00	; 0
    3974:	92 e1       	ldi	r25, 0x12	; 18
    3976:	aa e7       	ldi	r26, 0x7A	; 122
    3978:	b0 e0       	ldi	r27, 0x00	; 0
    397a:	01 97       	sbiw	r24, 0x01	; 1
    397c:	a1 09       	sbc	r26, r1
    397e:	b1 09       	sbc	r27, r1
    3980:	e1 f7       	brne	.-8      	; 0x397a <main+0xa6>
    delay_s(1.5);
    MODEM_raw_puts(RTC_TIME);
    3982:	88 e5       	ldi	r24, 0x58	; 88
    3984:	93 e2       	ldi	r25, 0x23	; 35
    3986:	0e 94 4a 03 	call	0x694	; 0x694 <MODEM_raw_puts>
    MODEM_raw_putb('\r');
    398a:	8d e0       	ldi	r24, 0x0D	; 13
    398c:	0e 94 43 03 	call	0x686	; 0x686 <MODEM_raw_putb>
    MODEM_raw_putb('\n');
    3990:	8a e0       	ldi	r24, 0x0A	; 10
    3992:	0e 94 43 03 	call	0x686	; 0x686 <MODEM_raw_putb>
    3996:	80 e0       	ldi	r24, 0x00	; 0
    3998:	92 e1       	ldi	r25, 0x12	; 18
    399a:	aa e7       	ldi	r26, 0x7A	; 122
    399c:	b0 e0       	ldi	r27, 0x00	; 0
    399e:	01 97       	sbiw	r24, 0x01	; 1
    39a0:	a1 09       	sbc	r26, r1
    39a2:	b1 09       	sbc	r27, r1
    39a4:	e1 f7       	brne	.-8      	; 0x399e <main+0xca>

    //pwm_toggle(0, true, 10, 10);
    //delay_s(5);
    //pwm_toggle(0, false, 0, 0);

    dummy_timer = rtc_get_time();
    39a6:	0e 94 32 05 	call	0xa64	; 0xa64 <rtc_get_time>
    39aa:	2b 01       	movw	r4, r22
    39ac:	3c 01       	movw	r6, r24
    rtc_timer = rtc_get_time();
    39ae:	0e 94 32 05 	call	0xa64	; 0xa64 <rtc_get_time>
    39b2:	4b 01       	movw	r8, r22
    39b4:	5c 01       	movw	r10, r24
    while (1) {
        if ((rtc_get_time() - dummy_timer) >= 4) {
    39b6:	0e 94 32 05 	call	0xa64	; 0xa64 <rtc_get_time>
    39ba:	dc 01       	movw	r26, r24
    39bc:	cb 01       	movw	r24, r22
    39be:	84 19       	sub	r24, r4
    39c0:	95 09       	sbc	r25, r5
    39c2:	a6 09       	sbc	r26, r6
    39c4:	b7 09       	sbc	r27, r7
    39c6:	04 97       	sbiw	r24, 0x04	; 4
    39c8:	a1 05       	cpc	r26, r1
    39ca:	b1 05       	cpc	r27, r1
    39cc:	b0 f0       	brcs	.+44     	; 0x39fa <main+0x126>
            MODEM_raw_puts(DUMMY_WRITE);
    39ce:	80 e6       	ldi	r24, 0x60	; 96
    39d0:	93 e2       	ldi	r25, 0x23	; 35
    39d2:	0e 94 4a 03 	call	0x694	; 0x694 <MODEM_raw_puts>
            MODEM_raw_putb('\n');
    39d6:	8a e0       	ldi	r24, 0x0A	; 10
    39d8:	0e 94 43 03 	call	0x686	; 0x686 <MODEM_raw_putb>
            MODEM_raw_putb('\r');
    39dc:	8d e0       	ldi	r24, 0x0D	; 13
    39de:	0e 94 43 03 	call	0x686	; 0x686 <MODEM_raw_putb>
    39e2:	80 e0       	ldi	r24, 0x00	; 0
    39e4:	92 e1       	ldi	r25, 0x12	; 18
    39e6:	aa e7       	ldi	r26, 0x7A	; 122
    39e8:	b0 e0       	ldi	r27, 0x00	; 0
    39ea:	01 97       	sbiw	r24, 0x01	; 1
    39ec:	a1 09       	sbc	r26, r1
    39ee:	b1 09       	sbc	r27, r1
    39f0:	e1 f7       	brne	.-8      	; 0x39ea <main+0x116>
            delay_s(1.5);
            dummy_timer = rtc_get_time(); //update timer
    39f2:	0e 94 32 05 	call	0xa64	; 0xa64 <rtc_get_time>
    39f6:	2b 01       	movw	r4, r22
    39f8:	3c 01       	movw	r6, r24
        }

        if (_uarte0_byte_available() == true) { //modem uart gets unsolicted interrupt
    39fa:	0e 94 c6 02 	call	0x58c	; 0x58c <_uarte0_byte_available>
    39fe:	88 23       	and	r24, r24
    3a00:	19 f1       	breq	.+70     	; 0x3a48 <main+0x174>
            unsolicited_command_ptr = &unsolicited_command;
            get_unsolicited_commands(sizeof(unsolicited_command), unsolicited_command_ptr);
    3a02:	be 01       	movw	r22, r28
    3a04:	6f 5f       	subi	r22, 0xFF	; 255
    3a06:	7f 4f       	sbci	r23, 0xFF	; 255
    3a08:	8c e3       	ldi	r24, 0x3C	; 60
    3a0a:	90 e0       	ldi	r25, 0x00	; 0
    3a0c:	0e 94 21 11 	call	0x2242	; 0x2242 <get_unsolicited_commands>
            if (unsolicited_command[0] != '\n' && unsolicited_command[0] != '\r' && unsolicited_command[0] == '+') {
    3a10:	89 81       	ldd	r24, Y+1	; 0x01
    3a12:	8a 30       	cpi	r24, 0x0A	; 10
    3a14:	91 f0       	breq	.+36     	; 0x3a3a <main+0x166>
    3a16:	8b 32       	cpi	r24, 0x2B	; 43
    3a18:	81 f4       	brne	.+32     	; 0x3a3a <main+0x166>
                DEBUG_puts(unsolicited_command);
    3a1a:	ce 01       	movw	r24, r28
    3a1c:	01 96       	adiw	r24, 0x01	; 1
    3a1e:	0e 94 06 03 	call	0x60c	; 0x60c <DEBUG_puts>
                _DEBUG_putc('\n');
    3a22:	8a e0       	ldi	r24, 0x0A	; 10
    3a24:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <_uartc1_putc>
                _DEBUG_putc('\r');
    3a28:	8d e0       	ldi	r24, 0x0D	; 13
    3a2a:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <_uartc1_putc>
                asset_model* model_ptr = decode(unsolicited_command_ptr);
    3a2e:	ce 01       	movw	r24, r28
    3a30:	01 96       	adiw	r24, 0x01	; 1
    3a32:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <decode>
                schedule_job(model_ptr);
    3a36:	0e 94 56 13 	call	0x26ac	; 0x26ac <schedule_job>
                //print_eeprom();
            }
            clear_temp_string(sizeof(unsolicited_command_ptr), unsolicited_command_ptr);
    3a3a:	be 01       	movw	r22, r28
    3a3c:	6f 5f       	subi	r22, 0xFF	; 255
    3a3e:	7f 4f       	sbci	r23, 0xFF	; 255
    3a40:	82 e0       	ldi	r24, 0x02	; 2
    3a42:	90 e0       	ldi	r25, 0x00	; 0
    3a44:	0e 94 4c 11 	call	0x2298	; 0x2298 <clear_temp_string>
        }
        if ((rtc_get_time() - rtc_timer) >= 10) { //check currrent time
    3a48:	0e 94 32 05 	call	0xa64	; 0xa64 <rtc_get_time>
    3a4c:	dc 01       	movw	r26, r24
    3a4e:	cb 01       	movw	r24, r22
    3a50:	88 19       	sub	r24, r8
    3a52:	99 09       	sbc	r25, r9
    3a54:	aa 09       	sbc	r26, r10
    3a56:	bb 09       	sbc	r27, r11
    3a58:	0a 97       	sbiw	r24, 0x0a	; 10
    3a5a:	a1 05       	cpc	r26, r1
    3a5c:	b1 05       	cpc	r27, r1
    3a5e:	80 f0       	brcs	.+32     	; 0x3a80 <main+0x1ac>
            DEBUG_puts("Time : ");
    3a60:	8a e7       	ldi	r24, 0x7A	; 122
    3a62:	93 e2       	ldi	r25, 0x23	; 35
    3a64:	0e 94 06 03 	call	0x60c	; 0x60c <DEBUG_puts>
            uint32_t time = rtc_get_time();
    3a68:	0e 94 32 05 	call	0xa64	; 0xa64 <rtc_get_time>
            DEBUG_putu(time);
    3a6c:	0e 94 1a 03 	call	0x634	; 0x634 <DEBUG_putu>
            DEBUG_puts("\n \r");
    3a70:	84 ec       	ldi	r24, 0xC4	; 196
    3a72:	90 e2       	ldi	r25, 0x20	; 32
    3a74:	0e 94 06 03 	call	0x60c	; 0x60c <DEBUG_puts>
            rtc_timer = rtc_get_time(); //update timer
    3a78:	0e 94 32 05 	call	0xa64	; 0xa64 <rtc_get_time>
    3a7c:	4b 01       	movw	r8, r22
    3a7e:	5c 01       	movw	r10, r24
        }
        if (rtc_get_time() - look_for_jobs_timer >= 20) {
    3a80:	0e 94 32 05 	call	0xa64	; 0xa64 <rtc_get_time>
    3a84:	dc 01       	movw	r26, r24
    3a86:	cb 01       	movw	r24, r22
    3a88:	21 96       	adiw	r28, 0x01	; 1
    3a8a:	2c ad       	ldd	r18, Y+60	; 0x3c
    3a8c:	3d ad       	ldd	r19, Y+61	; 0x3d
    3a8e:	4e ad       	ldd	r20, Y+62	; 0x3e
    3a90:	5f ad       	ldd	r21, Y+63	; 0x3f
    3a92:	21 97       	sbiw	r28, 0x01	; 1
    3a94:	82 1b       	sub	r24, r18
    3a96:	93 0b       	sbc	r25, r19
    3a98:	a4 0b       	sbc	r26, r20
    3a9a:	b5 0b       	sbc	r27, r21
    3a9c:	44 97       	sbiw	r24, 0x14	; 20
    3a9e:	a1 05       	cpc	r26, r1
    3aa0:	b1 05       	cpc	r27, r1
    3aa2:	48 f0       	brcs	.+18     	; 0x3ab6 <main+0x1e2>
            look_for_jobs();
    3aa4:	af dd       	rcall	.-1186   	; 0x3604 <look_for_jobs>
            look_for_jobs_timer = rtc_get_time(); //update timer
    3aa6:	0e 94 32 05 	call	0xa64	; 0xa64 <rtc_get_time>
    3aaa:	21 96       	adiw	r28, 0x01	; 1
    3aac:	6c af       	std	Y+60, r22	; 0x3c
    3aae:	7d af       	std	Y+61, r23	; 0x3d
    3ab0:	8e af       	std	Y+62, r24	; 0x3e
    3ab2:	9f af       	std	Y+63, r25	; 0x3f
    3ab4:	21 97       	sbiw	r28, 0x01	; 1
        }
        if (rtc_get_time() - system_time_timer >= 60) { //update system time every minute
    3ab6:	0e 94 32 05 	call	0xa64	; 0xa64 <rtc_get_time>
    3aba:	dc 01       	movw	r26, r24
    3abc:	cb 01       	movw	r24, r22
    3abe:	8c 19       	sub	r24, r12
    3ac0:	9d 09       	sbc	r25, r13
    3ac2:	ae 09       	sbc	r26, r14
    3ac4:	bf 09       	sbc	r27, r15
    3ac6:	cc 97       	sbiw	r24, 0x3c	; 60
    3ac8:	a1 05       	cpc	r26, r1
    3aca:	b1 05       	cpc	r27, r1
    3acc:	08 f4       	brcc	.+2      	; 0x3ad0 <main+0x1fc>
    3ace:	73 cf       	rjmp	.-282    	; 0x39b6 <main+0xe2>
            MODEM_raw_puts(RTC_TIME);
    3ad0:	88 e5       	ldi	r24, 0x58	; 88
    3ad2:	93 e2       	ldi	r25, 0x23	; 35
    3ad4:	0e 94 4a 03 	call	0x694	; 0x694 <MODEM_raw_puts>
            MODEM_raw_putb('\r');
    3ad8:	8d e0       	ldi	r24, 0x0D	; 13
    3ada:	0e 94 43 03 	call	0x686	; 0x686 <MODEM_raw_putb>
            MODEM_raw_putb('\n');
    3ade:	8a e0       	ldi	r24, 0x0A	; 10
    3ae0:	0e 94 43 03 	call	0x686	; 0x686 <MODEM_raw_putb>
    3ae4:	80 e0       	ldi	r24, 0x00	; 0
    3ae6:	92 e1       	ldi	r25, 0x12	; 18
    3ae8:	aa e7       	ldi	r26, 0x7A	; 122
    3aea:	b0 e0       	ldi	r27, 0x00	; 0
    3aec:	01 97       	sbiw	r24, 0x01	; 1
    3aee:	a1 09       	sbc	r26, r1
    3af0:	b1 09       	sbc	r27, r1
    3af2:	e1 f7       	brne	.-8      	; 0x3aec <main+0x218>
            delay_s(1.5);
            system_time_timer = rtc_get_time(); //update timer
    3af4:	0e 94 32 05 	call	0xa64	; 0xa64 <rtc_get_time>
    3af8:	6b 01       	movw	r12, r22
    3afa:	7c 01       	movw	r14, r24
    3afc:	5c cf       	rjmp	.-328    	; 0x39b6 <main+0xe2>

00003afe <__mulsi3>:
    3afe:	db 01       	movw	r26, r22
    3b00:	8f 93       	push	r24
    3b02:	9f 93       	push	r25
    3b04:	39 d0       	rcall	.+114    	; 0x3b78 <__muluhisi3>
    3b06:	bf 91       	pop	r27
    3b08:	af 91       	pop	r26
    3b0a:	a2 9f       	mul	r26, r18
    3b0c:	80 0d       	add	r24, r0
    3b0e:	91 1d       	adc	r25, r1
    3b10:	a3 9f       	mul	r26, r19
    3b12:	90 0d       	add	r25, r0
    3b14:	b2 9f       	mul	r27, r18
    3b16:	90 0d       	add	r25, r0
    3b18:	11 24       	eor	r1, r1
    3b1a:	08 95       	ret

00003b1c <__udivmodsi4>:
    3b1c:	a1 e2       	ldi	r26, 0x21	; 33
    3b1e:	1a 2e       	mov	r1, r26
    3b20:	aa 1b       	sub	r26, r26
    3b22:	bb 1b       	sub	r27, r27
    3b24:	fd 01       	movw	r30, r26
    3b26:	0d c0       	rjmp	.+26     	; 0x3b42 <__udivmodsi4_ep>

00003b28 <__udivmodsi4_loop>:
    3b28:	aa 1f       	adc	r26, r26
    3b2a:	bb 1f       	adc	r27, r27
    3b2c:	ee 1f       	adc	r30, r30
    3b2e:	ff 1f       	adc	r31, r31
    3b30:	a2 17       	cp	r26, r18
    3b32:	b3 07       	cpc	r27, r19
    3b34:	e4 07       	cpc	r30, r20
    3b36:	f5 07       	cpc	r31, r21
    3b38:	20 f0       	brcs	.+8      	; 0x3b42 <__udivmodsi4_ep>
    3b3a:	a2 1b       	sub	r26, r18
    3b3c:	b3 0b       	sbc	r27, r19
    3b3e:	e4 0b       	sbc	r30, r20
    3b40:	f5 0b       	sbc	r31, r21

00003b42 <__udivmodsi4_ep>:
    3b42:	66 1f       	adc	r22, r22
    3b44:	77 1f       	adc	r23, r23
    3b46:	88 1f       	adc	r24, r24
    3b48:	99 1f       	adc	r25, r25
    3b4a:	1a 94       	dec	r1
    3b4c:	69 f7       	brne	.-38     	; 0x3b28 <__udivmodsi4_loop>
    3b4e:	60 95       	com	r22
    3b50:	70 95       	com	r23
    3b52:	80 95       	com	r24
    3b54:	90 95       	com	r25
    3b56:	9b 01       	movw	r18, r22
    3b58:	ac 01       	movw	r20, r24
    3b5a:	bd 01       	movw	r22, r26
    3b5c:	cf 01       	movw	r24, r30
    3b5e:	08 95       	ret

00003b60 <__umulhisi3>:
    3b60:	a2 9f       	mul	r26, r18
    3b62:	b0 01       	movw	r22, r0
    3b64:	b3 9f       	mul	r27, r19
    3b66:	c0 01       	movw	r24, r0
    3b68:	a3 9f       	mul	r26, r19
    3b6a:	01 d0       	rcall	.+2      	; 0x3b6e <__umulhisi3+0xe>
    3b6c:	b2 9f       	mul	r27, r18
    3b6e:	70 0d       	add	r23, r0
    3b70:	81 1d       	adc	r24, r1
    3b72:	11 24       	eor	r1, r1
    3b74:	91 1d       	adc	r25, r1
    3b76:	08 95       	ret

00003b78 <__muluhisi3>:
    3b78:	f3 df       	rcall	.-26     	; 0x3b60 <__umulhisi3>
    3b7a:	a5 9f       	mul	r26, r21
    3b7c:	90 0d       	add	r25, r0
    3b7e:	b4 9f       	mul	r27, r20
    3b80:	90 0d       	add	r25, r0
    3b82:	a4 9f       	mul	r26, r20
    3b84:	80 0d       	add	r24, r0
    3b86:	91 1d       	adc	r25, r1
    3b88:	11 24       	eor	r1, r1
    3b8a:	08 95       	ret

00003b8c <__mulshisi3>:
    3b8c:	b7 ff       	sbrs	r27, 7
    3b8e:	f4 cf       	rjmp	.-24     	; 0x3b78 <__muluhisi3>

00003b90 <__mulohisi3>:
    3b90:	f3 df       	rcall	.-26     	; 0x3b78 <__muluhisi3>
    3b92:	82 1b       	sub	r24, r18
    3b94:	93 0b       	sbc	r25, r19
    3b96:	08 95       	ret

00003b98 <strtok>:
    3b98:	4e e9       	ldi	r20, 0x9E	; 158
    3b9a:	53 e2       	ldi	r21, 0x23	; 35
    3b9c:	35 c0       	rjmp	.+106    	; 0x3c08 <strtok_r>

00003b9e <strcat>:
    3b9e:	fb 01       	movw	r30, r22
    3ba0:	dc 01       	movw	r26, r24
    3ba2:	0d 90       	ld	r0, X+
    3ba4:	00 20       	and	r0, r0
    3ba6:	e9 f7       	brne	.-6      	; 0x3ba2 <strcat+0x4>
    3ba8:	11 97       	sbiw	r26, 0x01	; 1
    3baa:	01 90       	ld	r0, Z+
    3bac:	0d 92       	st	X+, r0
    3bae:	00 20       	and	r0, r0
    3bb0:	e1 f7       	brne	.-8      	; 0x3baa <strcat+0xc>
    3bb2:	08 95       	ret

00003bb4 <strcmp>:
    3bb4:	fb 01       	movw	r30, r22
    3bb6:	dc 01       	movw	r26, r24
    3bb8:	8d 91       	ld	r24, X+
    3bba:	01 90       	ld	r0, Z+
    3bbc:	80 19       	sub	r24, r0
    3bbe:	01 10       	cpse	r0, r1
    3bc0:	d9 f3       	breq	.-10     	; 0x3bb8 <strcmp+0x4>
    3bc2:	99 0b       	sbc	r25, r25
    3bc4:	08 95       	ret

00003bc6 <strcpy>:
    3bc6:	fb 01       	movw	r30, r22
    3bc8:	dc 01       	movw	r26, r24
    3bca:	01 90       	ld	r0, Z+
    3bcc:	0d 92       	st	X+, r0
    3bce:	00 20       	and	r0, r0
    3bd0:	e1 f7       	brne	.-8      	; 0x3bca <strcpy+0x4>
    3bd2:	08 95       	ret

00003bd4 <strstr>:
    3bd4:	fb 01       	movw	r30, r22
    3bd6:	51 91       	ld	r21, Z+
    3bd8:	55 23       	and	r21, r21
    3bda:	a9 f0       	breq	.+42     	; 0x3c06 <strstr+0x32>
    3bdc:	bf 01       	movw	r22, r30
    3bde:	dc 01       	movw	r26, r24
    3be0:	4d 91       	ld	r20, X+
    3be2:	45 17       	cp	r20, r21
    3be4:	41 11       	cpse	r20, r1
    3be6:	e1 f7       	brne	.-8      	; 0x3be0 <strstr+0xc>
    3be8:	59 f4       	brne	.+22     	; 0x3c00 <strstr+0x2c>
    3bea:	cd 01       	movw	r24, r26
    3bec:	01 90       	ld	r0, Z+
    3bee:	00 20       	and	r0, r0
    3bf0:	49 f0       	breq	.+18     	; 0x3c04 <strstr+0x30>
    3bf2:	4d 91       	ld	r20, X+
    3bf4:	40 15       	cp	r20, r0
    3bf6:	41 11       	cpse	r20, r1
    3bf8:	c9 f3       	breq	.-14     	; 0x3bec <strstr+0x18>
    3bfa:	fb 01       	movw	r30, r22
    3bfc:	41 11       	cpse	r20, r1
    3bfe:	ef cf       	rjmp	.-34     	; 0x3bde <strstr+0xa>
    3c00:	81 e0       	ldi	r24, 0x01	; 1
    3c02:	90 e0       	ldi	r25, 0x00	; 0
    3c04:	01 97       	sbiw	r24, 0x01	; 1
    3c06:	08 95       	ret

00003c08 <strtok_r>:
    3c08:	fa 01       	movw	r30, r20
    3c0a:	a1 91       	ld	r26, Z+
    3c0c:	b0 81       	ld	r27, Z
    3c0e:	00 97       	sbiw	r24, 0x00	; 0
    3c10:	19 f4       	brne	.+6      	; 0x3c18 <strtok_r+0x10>
    3c12:	10 97       	sbiw	r26, 0x00	; 0
    3c14:	e1 f0       	breq	.+56     	; 0x3c4e <strtok_r+0x46>
    3c16:	cd 01       	movw	r24, r26
    3c18:	dc 01       	movw	r26, r24
    3c1a:	cd 01       	movw	r24, r26
    3c1c:	0d 90       	ld	r0, X+
    3c1e:	00 20       	and	r0, r0
    3c20:	11 f4       	brne	.+4      	; 0x3c26 <strtok_r+0x1e>
    3c22:	c0 01       	movw	r24, r0
    3c24:	13 c0       	rjmp	.+38     	; 0x3c4c <strtok_r+0x44>
    3c26:	fb 01       	movw	r30, r22
    3c28:	21 91       	ld	r18, Z+
    3c2a:	22 23       	and	r18, r18
    3c2c:	19 f0       	breq	.+6      	; 0x3c34 <strtok_r+0x2c>
    3c2e:	20 15       	cp	r18, r0
    3c30:	d9 f7       	brne	.-10     	; 0x3c28 <strtok_r+0x20>
    3c32:	f3 cf       	rjmp	.-26     	; 0x3c1a <strtok_r+0x12>
    3c34:	fb 01       	movw	r30, r22
    3c36:	21 91       	ld	r18, Z+
    3c38:	20 15       	cp	r18, r0
    3c3a:	19 f4       	brne	.+6      	; 0x3c42 <strtok_r+0x3a>
    3c3c:	1e 92       	st	-X, r1
    3c3e:	11 96       	adiw	r26, 0x01	; 1
    3c40:	06 c0       	rjmp	.+12     	; 0x3c4e <strtok_r+0x46>
    3c42:	22 23       	and	r18, r18
    3c44:	c1 f7       	brne	.-16     	; 0x3c36 <strtok_r+0x2e>
    3c46:	0d 90       	ld	r0, X+
    3c48:	00 20       	and	r0, r0
    3c4a:	a1 f7       	brne	.-24     	; 0x3c34 <strtok_r+0x2c>
    3c4c:	d0 01       	movw	r26, r0
    3c4e:	fa 01       	movw	r30, r20
    3c50:	a1 93       	st	Z+, r26
    3c52:	b0 83       	st	Z, r27
    3c54:	08 95       	ret

00003c56 <_exit>:
    3c56:	f8 94       	cli

00003c58 <__stop_program>:
    3c58:	ff cf       	rjmp	.-2      	; 0x3c58 <__stop_program>
