
IESM-XMEGA32A4U--GeyserMonitorLite.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006fd0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000003a4  00802000  00006fd0  00007064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000009f1  008023a4  008023a4  00007408  2**0
                  ALLOC
  3 .stab         00001698  00000000  00000000  00007408  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000072d  00000000  00000000  00008aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000091cd  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000008e8  00000000  00000000  00009200  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000144b5  00000000  00000000  00009ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000036f5  00000000  00000000  0001df9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000f967  00000000  00000000  00021692  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00002170  00000000  00000000  00030ffc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00028bcc  00000000  00000000  0003316c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00008f77  00000000  00000000  0005bd38  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000c58  00000000  00000000  00064cb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0000c30a  00000000  00000000  00065908  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
       2:	00 00       	nop
       4:	18 c1       	rjmp	.+560    	; 0x236 <__bad_interrupt>
       6:	00 00       	nop
       8:	0c 94 74 2c 	jmp	0x58e8	; 0x58e8 <__vector_2>
       c:	14 c1       	rjmp	.+552    	; 0x236 <__bad_interrupt>
       e:	00 00       	nop
      10:	12 c1       	rjmp	.+548    	; 0x236 <__bad_interrupt>
      12:	00 00       	nop
      14:	10 c1       	rjmp	.+544    	; 0x236 <__bad_interrupt>
      16:	00 00       	nop
      18:	0e c1       	rjmp	.+540    	; 0x236 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	0c c1       	rjmp	.+536    	; 0x236 <__bad_interrupt>
      1e:	00 00       	nop
      20:	0a c1       	rjmp	.+532    	; 0x236 <__bad_interrupt>
      22:	00 00       	nop
      24:	08 c1       	rjmp	.+528    	; 0x236 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 fd 15 	jmp	0x2bfa	; 0x2bfa <__vector_10>
      2c:	0c 94 16 16 	jmp	0x2c2c	; 0x2c2c <__vector_11>
      30:	02 c1       	rjmp	.+516    	; 0x236 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 d8 1b 	jmp	0x37b0	; 0x37b0 <__vector_13>
      38:	0c 94 8d 16 	jmp	0x2d1a	; 0x2d1a <__vector_14>
      3c:	0c 94 b6 16 	jmp	0x2d6c	; 0x2d6c <__vector_15>
      40:	0c 94 df 16 	jmp	0x2dbe	; 0x2dbe <__vector_16>
      44:	0c 94 08 17 	jmp	0x2e10	; 0x2e10 <__vector_17>
      48:	0c 94 31 17 	jmp	0x2e62	; 0x2e62 <__vector_18>
      4c:	0c 94 5a 17 	jmp	0x2eb4	; 0x2eb4 <__vector_19>
      50:	0c 94 83 17 	jmp	0x2f06	; 0x2f06 <__vector_20>
      54:	0c 94 ac 17 	jmp	0x2f58	; 0x2f58 <__vector_21>
      58:	0c 94 d5 17 	jmp	0x2faa	; 0x2faa <__vector_22>
      5c:	0c 94 fe 17 	jmp	0x2ffc	; 0x2ffc <__vector_23>
      60:	ea c0       	rjmp	.+468    	; 0x236 <__bad_interrupt>
      62:	00 00       	nop
      64:	e8 c0       	rjmp	.+464    	; 0x236 <__bad_interrupt>
      66:	00 00       	nop
      68:	e6 c0       	rjmp	.+460    	; 0x236 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	e4 c0       	rjmp	.+456    	; 0x236 <__bad_interrupt>
      6e:	00 00       	nop
      70:	0c 94 82 11 	jmp	0x2304	; 0x2304 <__vector_28>
      74:	0c 94 b6 11 	jmp	0x236c	; 0x236c <__vector_29>
      78:	0c 94 ac 11 	jmp	0x2358	; 0x2358 <__vector_30>
      7c:	dc c0       	rjmp	.+440    	; 0x236 <__bad_interrupt>
      7e:	00 00       	nop
      80:	da c0       	rjmp	.+436    	; 0x236 <__bad_interrupt>
      82:	00 00       	nop
      84:	d8 c0       	rjmp	.+432    	; 0x236 <__bad_interrupt>
      86:	00 00       	nop
      88:	0c 94 88 2c 	jmp	0x5910	; 0x5910 <__vector_34>
      8c:	d4 c0       	rjmp	.+424    	; 0x236 <__bad_interrupt>
      8e:	00 00       	nop
      90:	d2 c0       	rjmp	.+420    	; 0x236 <__bad_interrupt>
      92:	00 00       	nop
      94:	d0 c0       	rjmp	.+416    	; 0x236 <__bad_interrupt>
      96:	00 00       	nop
      98:	ce c0       	rjmp	.+412    	; 0x236 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	cc c0       	rjmp	.+408    	; 0x236 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	ca c0       	rjmp	.+404    	; 0x236 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	c8 c0       	rjmp	.+400    	; 0x236 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	c6 c0       	rjmp	.+396    	; 0x236 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	c4 c0       	rjmp	.+392    	; 0x236 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	c2 c0       	rjmp	.+388    	; 0x236 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c0 c0       	rjmp	.+384    	; 0x236 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0c 94 fb 1b 	jmp	0x37f6	; 0x37f6 <__vector_46>
      bc:	0c 94 c1 19 	jmp	0x3382	; 0x3382 <__vector_47>
      c0:	0c 94 ea 19 	jmp	0x33d4	; 0x33d4 <__vector_48>
      c4:	0c 94 13 1a 	jmp	0x3426	; 0x3426 <__vector_49>
      c8:	0c 94 3c 1a 	jmp	0x3478	; 0x3478 <__vector_50>
      cc:	0c 94 65 1a 	jmp	0x34ca	; 0x34ca <__vector_51>
      d0:	0c 94 8e 1a 	jmp	0x351c	; 0x351c <__vector_52>
      d4:	b0 c0       	rjmp	.+352    	; 0x236 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	ae c0       	rjmp	.+348    	; 0x236 <__bad_interrupt>
      da:	00 00       	nop
      dc:	ac c0       	rjmp	.+344    	; 0x236 <__bad_interrupt>
      de:	00 00       	nop
      e0:	aa c0       	rjmp	.+340    	; 0x236 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	a8 c0       	rjmp	.+336    	; 0x236 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	0c 94 58 12 	jmp	0x24b0	; 0x24b0 <__vector_58>
      ec:	0c 94 8c 12 	jmp	0x2518	; 0x2518 <__vector_59>
      f0:	0c 94 82 12 	jmp	0x2504	; 0x2504 <__vector_60>
      f4:	a0 c0       	rjmp	.+320    	; 0x236 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	9e c0       	rjmp	.+316    	; 0x236 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	9c c0       	rjmp	.+312    	; 0x236 <__bad_interrupt>
      fe:	00 00       	nop
     100:	0c 94 60 2c 	jmp	0x58c0	; 0x58c0 <__vector_64>
     104:	98 c0       	rjmp	.+304    	; 0x236 <__bad_interrupt>
     106:	00 00       	nop
     108:	0c 94 9c 2c 	jmp	0x5938	; 0x5938 <__vector_66>
     10c:	94 c0       	rjmp	.+296    	; 0x236 <__bad_interrupt>
     10e:	00 00       	nop
     110:	92 c0       	rjmp	.+292    	; 0x236 <__bad_interrupt>
     112:	00 00       	nop
     114:	90 c0       	rjmp	.+288    	; 0x236 <__bad_interrupt>
     116:	00 00       	nop
     118:	8e c0       	rjmp	.+284    	; 0x236 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	8c c0       	rjmp	.+280    	; 0x236 <__bad_interrupt>
     11e:	00 00       	nop
     120:	8a c0       	rjmp	.+276    	; 0x236 <__bad_interrupt>
     122:	00 00       	nop
     124:	88 c0       	rjmp	.+272    	; 0x236 <__bad_interrupt>
     126:	00 00       	nop
     128:	86 c0       	rjmp	.+268    	; 0x236 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	84 c0       	rjmp	.+264    	; 0x236 <__bad_interrupt>
     12e:	00 00       	nop
     130:	82 c0       	rjmp	.+260    	; 0x236 <__bad_interrupt>
     132:	00 00       	nop
     134:	0c 94 27 18 	jmp	0x304e	; 0x304e <__vector_77>
     138:	0c 94 50 18 	jmp	0x30a0	; 0x30a0 <__vector_78>
     13c:	0c 94 79 18 	jmp	0x30f2	; 0x30f2 <__vector_79>
     140:	0c 94 a2 18 	jmp	0x3144	; 0x3144 <__vector_80>
     144:	0c 94 cb 18 	jmp	0x3196	; 0x3196 <__vector_81>
     148:	0c 94 f4 18 	jmp	0x31e8	; 0x31e8 <__vector_82>
     14c:	0c 94 1d 19 	jmp	0x323a	; 0x323a <__vector_83>
     150:	0c 94 46 19 	jmp	0x328c	; 0x328c <__vector_84>
     154:	0c 94 6f 19 	jmp	0x32de	; 0x32de <__vector_85>
     158:	0c 94 98 19 	jmp	0x3330	; 0x3330 <__vector_86>
     15c:	6c c0       	rjmp	.+216    	; 0x236 <__bad_interrupt>
     15e:	00 00       	nop
     160:	6a c0       	rjmp	.+212    	; 0x236 <__bad_interrupt>
     162:	00 00       	nop
     164:	68 c0       	rjmp	.+208    	; 0x236 <__bad_interrupt>
     166:	00 00       	nop
     168:	66 c0       	rjmp	.+204    	; 0x236 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	64 c0       	rjmp	.+200    	; 0x236 <__bad_interrupt>
     16e:	00 00       	nop
     170:	62 c0       	rjmp	.+196    	; 0x236 <__bad_interrupt>
     172:	00 00       	nop
     174:	60 c0       	rjmp	.+192    	; 0x236 <__bad_interrupt>
     176:	00 00       	nop
     178:	5e c0       	rjmp	.+188    	; 0x236 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	5c c0       	rjmp	.+184    	; 0x236 <__bad_interrupt>
     17e:	00 00       	nop
     180:	5a c0       	rjmp	.+180    	; 0x236 <__bad_interrupt>
     182:	00 00       	nop
     184:	58 c0       	rjmp	.+176    	; 0x236 <__bad_interrupt>
     186:	00 00       	nop
     188:	56 c0       	rjmp	.+172    	; 0x236 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	54 c0       	rjmp	.+168    	; 0x236 <__bad_interrupt>
     18e:	00 00       	nop
     190:	52 c0       	rjmp	.+164    	; 0x236 <__bad_interrupt>
     192:	00 00       	nop
     194:	50 c0       	rjmp	.+160    	; 0x236 <__bad_interrupt>
     196:	00 00       	nop
     198:	4e c0       	rjmp	.+156    	; 0x236 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	4c c0       	rjmp	.+152    	; 0x236 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	4a c0       	rjmp	.+148    	; 0x236 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	48 c0       	rjmp	.+144    	; 0x236 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	46 c0       	rjmp	.+140    	; 0x236 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	44 c0       	rjmp	.+136    	; 0x236 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	42 c0       	rjmp	.+132    	; 0x236 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	40 c0       	rjmp	.+128    	; 0x236 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	3e c0       	rjmp	.+124    	; 0x236 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	3c c0       	rjmp	.+120    	; 0x236 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	3a c0       	rjmp	.+116    	; 0x236 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	38 c0       	rjmp	.+112    	; 0x236 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	36 c0       	rjmp	.+108    	; 0x236 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	34 c0       	rjmp	.+104    	; 0x236 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	32 c0       	rjmp	.+100    	; 0x236 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	30 c0       	rjmp	.+96     	; 0x236 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	2e c0       	rjmp	.+92     	; 0x236 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	2c c0       	rjmp	.+88     	; 0x236 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	2a c0       	rjmp	.+84     	; 0x236 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	28 c0       	rjmp	.+80     	; 0x236 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	26 c0       	rjmp	.+76     	; 0x236 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	24 c0       	rjmp	.+72     	; 0x236 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	22 c0       	rjmp	.+68     	; 0x236 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	20 c0       	rjmp	.+64     	; 0x236 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	1e c0       	rjmp	.+60     	; 0x236 <__bad_interrupt>
	...

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	df e2       	ldi	r29, 0x2F	; 47
     204:	de bf       	out	0x3e, r29	; 62
     206:	cd bf       	out	0x3d, r28	; 61

00000208 <__do_copy_data>:
     208:	13 e2       	ldi	r17, 0x23	; 35
     20a:	a0 e0       	ldi	r26, 0x00	; 0
     20c:	b0 e2       	ldi	r27, 0x20	; 32
     20e:	e0 ed       	ldi	r30, 0xD0	; 208
     210:	ff e6       	ldi	r31, 0x6F	; 111
     212:	02 c0       	rjmp	.+4      	; 0x218 <__do_copy_data+0x10>
     214:	05 90       	lpm	r0, Z+
     216:	0d 92       	st	X+, r0
     218:	a4 3a       	cpi	r26, 0xA4	; 164
     21a:	b1 07       	cpc	r27, r17
     21c:	d9 f7       	brne	.-10     	; 0x214 <__do_copy_data+0xc>

0000021e <__do_clear_bss>:
     21e:	2d e2       	ldi	r18, 0x2D	; 45
     220:	a4 ea       	ldi	r26, 0xA4	; 164
     222:	b3 e2       	ldi	r27, 0x23	; 35
     224:	01 c0       	rjmp	.+2      	; 0x228 <.do_clear_bss_start>

00000226 <.do_clear_bss_loop>:
     226:	1d 92       	st	X+, r1

00000228 <.do_clear_bss_start>:
     228:	a5 39       	cpi	r26, 0x95	; 149
     22a:	b2 07       	cpc	r27, r18
     22c:	e1 f7       	brne	.-8      	; 0x226 <.do_clear_bss_loop>
     22e:	0e 94 b0 2c 	call	0x5960	; 0x5960 <main>
     232:	0c 94 e6 37 	jmp	0x6fcc	; 0x6fcc <_exit>

00000236 <__bad_interrupt>:
     236:	e4 ce       	rjmp	.-568    	; 0x0 <__vectors>

00000238 <reset_state>:
static handlers_t handlers;
static modem_t modem;
static acks_t acks;

static void reset_state (rsp_state_t new_rsp_state)
{
     238:	cf 93       	push	r28
     23a:	df 93       	push	r29
     23c:	ec 01       	movw	r28, r24
    //if (handlers.cb_req_response != NULL) {
    //handlers.cb_req_response(false);
    //handlers.cb_req_response = NULL;
    //}
    if (handlers.cb_modem_up != NULL) {
     23e:	e0 91 bd 24 	lds	r30, 0x24BD
     242:	f0 91 be 24 	lds	r31, 0x24BE
     246:	30 97       	sbiw	r30, 0x00	; 0
     248:	11 f0       	breq	.+4      	; 0x24e <reset_state+0x16>
        handlers.cb_modem_up (false);
     24a:	80 e0       	ldi	r24, 0x00	; 0
     24c:	09 95       	icall
    }

    handlers.register_modem_data_callbacks = true;
     24e:	81 e0       	ldi	r24, 0x01	; 1
     250:	80 93 c5 24 	sts	0x24C5, r24
    handlers.register_modem_cmnd_callbacks = true;
     254:	80 93 c6 24 	sts	0x24C6, r24
    modem.enable_gpio_reset_signal = true;
     258:	80 93 b8 24 	sts	0x24B8, r24

    modem.gprs_up = false;
     25c:	10 92 b1 24 	sts	0x24B1, r1
    modem.wopen_state = WOPEN_STATE_UNKNOWN;
     260:	10 92 b4 24 	sts	0x24B4, r1
     264:	10 92 b5 24 	sts	0x24B5, r1
    modem.boot_counter = INT32_MAX;
     268:	4f ef       	ldi	r20, 0xFF	; 255
     26a:	5f ef       	ldi	r21, 0xFF	; 255
     26c:	6f ef       	ldi	r22, 0xFF	; 255
     26e:	7f e7       	ldi	r23, 0x7F	; 127
     270:	40 93 ad 24 	sts	0x24AD, r20
     274:	50 93 ae 24 	sts	0x24AE, r21
     278:	60 93 af 24 	sts	0x24AF, r22
     27c:	70 93 b0 24 	sts	0x24B0, r23
    modem.rsp.expect_awtda_up = false;
     280:	10 92 a7 24 	sts	0x24A7, r1
    modem.rsp.expect_sent = false;
     284:	10 92 a8 24 	sts	0x24A8, r1
    modem.rsp.state = new_rsp_state;
     288:	c0 93 a5 24 	sts	0x24A5, r28
     28c:	d0 93 a6 24 	sts	0x24A6, r29
    modem.rsp.line.len = 0;
     290:	10 92 a4 24 	sts	0x24A4, r1
    modem.rsp.line.search_crlf = true;
     294:	80 93 a4 23 	sts	0x23A4, r24
    modem.rsp.sequential_at_failures = 0;
     298:	10 92 aa 24 	sts	0x24AA, r1
    modem.rsp.sequential_awtda_failures = 0;
     29c:	10 92 ab 24 	sts	0x24AB, r1
    modem.rsp.secs_not_ready = 0;
     2a0:	10 92 ac 24 	sts	0x24AC, r1
    modem.query_modem_state = QUERY_BOOT;
     2a4:	10 92 b2 24 	sts	0x24B2, r1
     2a8:	10 92 b3 24 	sts	0x24B3, r1
    modem.query_state_accumulated_errors = 0;
     2ac:	10 92 b7 24 	sts	0x24B7, r1
    timeout_stop (TIMEOUT_AWT_QUERY_STATE_1_SEC_TIMER);
     2b0:	82 e0       	ldi	r24, 0x02	; 2
     2b2:	0e 94 9d 1f 	call	0x3f3a	; 0x3f3a <timeout_stop>
    timeout_start_periodic (TIMEOUT_AWT_QUERY_STATE_1_SEC_TIMER, TIMEOUT_TICK_HZ);
     2b6:	68 e0       	ldi	r22, 0x08	; 8
     2b8:	70 e0       	ldi	r23, 0x00	; 0
     2ba:	82 e0       	ldi	r24, 0x02	; 2
     2bc:	0e 94 76 1f 	call	0x3eec	; 0x3eec <timeout_start_periodic>
}
     2c0:	df 91       	pop	r29
     2c2:	cf 91       	pop	r28
     2c4:	08 95       	ret

000002c6 <poll_modem>:

//+AWTDA: c,992938,GML-001,set_rom_id,STR,FFFFFFFFFFFFFFFF,STR,FFFFFFFFFFFFFFFF,STR,FFFFFFFFFFFFFFFF,CRC6C


static void poll_modem (void)
{
     2c6:	2f 92       	push	r2
     2c8:	3f 92       	push	r3
     2ca:	4f 92       	push	r4
     2cc:	5f 92       	push	r5
     2ce:	6f 92       	push	r6
     2d0:	7f 92       	push	r7
     2d2:	8f 92       	push	r8
     2d4:	9f 92       	push	r9
     2d6:	af 92       	push	r10
     2d8:	bf 92       	push	r11
     2da:	cf 92       	push	r12
     2dc:	df 92       	push	r13
     2de:	ef 92       	push	r14
     2e0:	ff 92       	push	r15
     2e2:	0f 93       	push	r16
     2e4:	1f 93       	push	r17
     2e6:	cf 93       	push	r28
     2e8:	df 93       	push	r29
     2ea:	cd b7       	in	r28, 0x3d	; 61
     2ec:	de b7       	in	r29, 0x3e	; 62
     2ee:	e7 97       	sbiw	r28, 0x37	; 55
     2f0:	cd bf       	out	0x3d, r28	; 61
     2f2:	de bf       	out	0x3e, r29	; 62
            }
            continue;
        }

        // no more skipping necessary
        modem.rsp.line.search_crlf = false;
     2f4:	0f 2e       	mov	r0, r31
     2f6:	f4 ea       	ldi	r31, 0xA4	; 164
     2f8:	af 2e       	mov	r10, r31
     2fa:	f3 e2       	ldi	r31, 0x23	; 35
     2fc:	bf 2e       	mov	r11, r31
     2fe:	f0 2d       	mov	r31, r0

        // process any data in the receive buffer
        if (modem.rsp.line.len) {
     300:	0f 2e       	mov	r0, r31
     302:	f4 ea       	ldi	r31, 0xA4	; 164
     304:	cf 2e       	mov	r12, r31
     306:	f4 e2       	ldi	r31, 0x24	; 36
     308:	df 2e       	mov	r13, r31
     30a:	f0 2d       	mov	r31, r0
    }
    *pstr++ = '\x00';


    params = 0;
    while ((pstr = parse_param (pstr, &param[params])) != NULL) {
     30c:	88 24       	eor	r8, r8
     30e:	83 94       	inc	r8
     310:	91 2c       	mov	r9, r1
     312:	8c 0e       	add	r8, r28
     314:	9d 1e       	adc	r9, r29
     316:	39 2c       	mov	r3, r9
     318:	89 a6       	std	Y+41, r8	; 0x29
     31a:	9a a6       	std	Y+42, r9	; 0x2a
     31c:	98 2c       	mov	r9, r8
     31e:	73 2c       	mov	r7, r3

static void poll_modem (void)
{
    int16_t ch;

    while ((ch = MODEM_get_byte ()) >= 0) {
     320:	73 c4       	rjmp	.+2278   	; 0xc08 <poll_modem+0x942>
        // if it's not a carriage return of linefeed buffer it.
        if (! (ch == '\n' || ch == '\r')) {
     322:	8a 30       	cpi	r24, 0x0A	; 10
     324:	91 05       	cpc	r25, r1
     326:	f9 f0       	breq	.+62     	; 0x366 <poll_modem+0xa0>
     328:	8d 30       	cpi	r24, 0x0D	; 13
     32a:	91 05       	cpc	r25, r1
     32c:	e1 f0       	breq	.+56     	; 0x366 <poll_modem+0xa0>
            if (modem.rsp.line.search_crlf) {
     32e:	d5 01       	movw	r26, r10
     330:	2c 91       	ld	r18, X
     332:	21 11       	cpse	r18, r1
     334:	69 c4       	rjmp	.+2258   	; 0xc08 <poll_modem+0x942>
                continue;
            }
            modem.rsp.line.data[modem.rsp.line.len++] = ch;
     336:	f6 01       	movw	r30, r12
     338:	90 81       	ld	r25, Z
     33a:	e9 2f       	mov	r30, r25
     33c:	f0 e0       	ldi	r31, 0x00	; 0
     33e:	ec 55       	subi	r30, 0x5C	; 92
     340:	fc 4d       	sbci	r31, 0xDC	; 220
     342:	81 83       	std	Z+1, r24	; 0x01
     344:	89 2f       	mov	r24, r25
     346:	8f 5f       	subi	r24, 0xFF	; 255
     348:	d6 01       	movw	r26, r12
     34a:	8c 93       	st	X, r24
            modem.rsp.line.data[modem.rsp.line.len] = '\x00';
     34c:	e8 2f       	mov	r30, r24
     34e:	f0 e0       	ldi	r31, 0x00	; 0
     350:	ec 55       	subi	r30, 0x5C	; 92
     352:	fc 4d       	sbci	r31, 0xDC	; 220
     354:	11 82       	std	Z+1, r1	; 0x01

            // if we have a buffer overflow, discard it and skip over until the next CR/LF
            if (modem.rsp.line.len == sizeof modem.rsp.line.data - 1) {
     356:	8e 3f       	cpi	r24, 0xFE	; 254
     358:	09 f0       	breq	.+2      	; 0x35c <poll_modem+0x96>
     35a:	56 c4       	rjmp	.+2220   	; 0xc08 <poll_modem+0x942>
                modem.rsp.line.len = 0;
     35c:	1c 92       	st	X, r1
                modem.rsp.line.search_crlf = true;
     35e:	81 e0       	ldi	r24, 0x01	; 1
     360:	f5 01       	movw	r30, r10
     362:	80 83       	st	Z, r24
     364:	51 c4       	rjmp	.+2210   	; 0xc08 <poll_modem+0x942>
            }
            continue;
        }

        // no more skipping necessary
        modem.rsp.line.search_crlf = false;
     366:	d5 01       	movw	r26, r10
     368:	1c 92       	st	X, r1

        // process any data in the receive buffer
        if (modem.rsp.line.len) {
     36a:	f6 01       	movw	r30, r12
     36c:	80 81       	ld	r24, Z
     36e:	88 23       	and	r24, r24
     370:	09 f4       	brne	.+2      	; 0x374 <poll_modem+0xae>
     372:	4a c4       	rjmp	.+2196   	; 0xc08 <poll_modem+0x942>
            modem.rsp.line.len = 0;   // do not use len after this
     374:	10 82       	st	Z, r1
            if (strcmp (modem.rsp.line.data, "OK") == 0) {
     376:	62 e1       	ldi	r22, 0x12	; 18
     378:	70 e2       	ldi	r23, 0x20	; 32
     37a:	85 ea       	ldi	r24, 0xA5	; 165
     37c:	93 e2       	ldi	r25, 0x23	; 35
     37e:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <strcmp>
     382:	28 2f       	mov	r18, r24
     384:	39 2f       	mov	r19, r25
     386:	23 2b       	or	r18, r19
     388:	71 f4       	brne	.+28     	; 0x3a6 <poll_modem+0xe0>
                if (modem.rsp.state == RSP_STATE_REQ_BUSY) {
     38a:	80 91 a5 24 	lds	r24, 0x24A5
     38e:	90 91 a6 24 	lds	r25, 0x24A6
     392:	01 97       	sbiw	r24, 0x01	; 1
     394:	09 f0       	breq	.+2      	; 0x398 <poll_modem+0xd2>
     396:	38 c4       	rjmp	.+2160   	; 0xc08 <poll_modem+0x942>
                    modem.rsp.state = RSP_STATE_RSP_OK;
     398:	83 e0       	ldi	r24, 0x03	; 3
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	80 93 a5 24 	sts	0x24A5, r24
     3a0:	90 93 a6 24 	sts	0x24A6, r25
                    break;
     3a4:	66 c4       	rjmp	.+2252   	; 0xc72 <poll_modem+0x9ac>
                }
            } else if (strcmp (modem.rsp.line.data, "SENT") == 0) {
     3a6:	65 e1       	ldi	r22, 0x15	; 21
     3a8:	70 e2       	ldi	r23, 0x20	; 32
     3aa:	85 ea       	ldi	r24, 0xA5	; 165
     3ac:	93 e2       	ldi	r25, 0x23	; 35
     3ae:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <strcmp>
     3b2:	28 2f       	mov	r18, r24
     3b4:	39 2f       	mov	r19, r25
     3b6:	23 2b       	or	r18, r19
     3b8:	71 f4       	brne	.+28     	; 0x3d6 <poll_modem+0x110>
                if (modem.rsp.state == RSP_STATE_REQ_BUSY) {
     3ba:	80 91 a5 24 	lds	r24, 0x24A5
     3be:	90 91 a6 24 	lds	r25, 0x24A6
     3c2:	01 97       	sbiw	r24, 0x01	; 1
     3c4:	09 f0       	breq	.+2      	; 0x3c8 <poll_modem+0x102>
     3c6:	20 c4       	rjmp	.+2112   	; 0xc08 <poll_modem+0x942>
                    modem.rsp.state = RSP_STATE_RSP_SENT;
     3c8:	82 e0       	ldi	r24, 0x02	; 2
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	80 93 a5 24 	sts	0x24A5, r24
     3d0:	90 93 a6 24 	sts	0x24A6, r25
                    break;
     3d4:	4e c4       	rjmp	.+2204   	; 0xc72 <poll_modem+0x9ac>
                }
            } else if (strcmp (modem.rsp.line.data, "FAIL: TIMEOUT") == 0) {
     3d6:	6a e1       	ldi	r22, 0x1A	; 26
     3d8:	70 e2       	ldi	r23, 0x20	; 32
     3da:	85 ea       	ldi	r24, 0xA5	; 165
     3dc:	93 e2       	ldi	r25, 0x23	; 35
     3de:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <strcmp>
     3e2:	28 2f       	mov	r18, r24
     3e4:	39 2f       	mov	r19, r25
     3e6:	23 2b       	or	r18, r19
     3e8:	71 f4       	brne	.+28     	; 0x406 <poll_modem+0x140>
                if (modem.rsp.state == RSP_STATE_REQ_BUSY) {
     3ea:	80 91 a5 24 	lds	r24, 0x24A5
     3ee:	90 91 a6 24 	lds	r25, 0x24A6
     3f2:	01 97       	sbiw	r24, 0x01	; 1
     3f4:	09 f0       	breq	.+2      	; 0x3f8 <poll_modem+0x132>
     3f6:	08 c4       	rjmp	.+2064   	; 0xc08 <poll_modem+0x942>
                    modem.rsp.state = RSP_STATE_RSP_TIMEOUT;
     3f8:	85 e0       	ldi	r24, 0x05	; 5
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	80 93 a5 24 	sts	0x24A5, r24
     400:	90 93 a6 24 	sts	0x24A6, r25
                    break;
     404:	36 c4       	rjmp	.+2156   	; 0xc72 <poll_modem+0x9ac>
                }
            } else if (strcmp (modem.rsp.line.data, "FAIL: TECHNICAL") == 0) {
     406:	68 e2       	ldi	r22, 0x28	; 40
     408:	70 e2       	ldi	r23, 0x20	; 32
     40a:	85 ea       	ldi	r24, 0xA5	; 165
     40c:	93 e2       	ldi	r25, 0x23	; 35
     40e:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <strcmp>
     412:	28 2f       	mov	r18, r24
     414:	39 2f       	mov	r19, r25
     416:	23 2b       	or	r18, r19
     418:	71 f4       	brne	.+28     	; 0x436 <poll_modem+0x170>
                if (modem.rsp.state == RSP_STATE_REQ_BUSY) {
     41a:	80 91 a5 24 	lds	r24, 0x24A5
     41e:	90 91 a6 24 	lds	r25, 0x24A6
     422:	01 97       	sbiw	r24, 0x01	; 1
     424:	09 f0       	breq	.+2      	; 0x428 <poll_modem+0x162>
     426:	f0 c3       	rjmp	.+2016   	; 0xc08 <poll_modem+0x942>
                    modem.rsp.state = RSP_STATE_RSP_ERROR;
     428:	84 e0       	ldi	r24, 0x04	; 4
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	80 93 a5 24 	sts	0x24A5, r24
     430:	90 93 a6 24 	sts	0x24A6, r25
                    break;
     434:	1e c4       	rjmp	.+2108   	; 0xc72 <poll_modem+0x9ac>
                }
            } else if (strcmp (modem.rsp.line.data, "FAIL: PROCESSING") == 0) {
     436:	68 e3       	ldi	r22, 0x38	; 56
     438:	70 e2       	ldi	r23, 0x20	; 32
     43a:	85 ea       	ldi	r24, 0xA5	; 165
     43c:	93 e2       	ldi	r25, 0x23	; 35
     43e:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <strcmp>
     442:	28 2f       	mov	r18, r24
     444:	39 2f       	mov	r19, r25
     446:	23 2b       	or	r18, r19
     448:	71 f4       	brne	.+28     	; 0x466 <poll_modem+0x1a0>
                if (modem.rsp.state == RSP_STATE_REQ_BUSY) {
     44a:	80 91 a5 24 	lds	r24, 0x24A5
     44e:	90 91 a6 24 	lds	r25, 0x24A6
     452:	01 97       	sbiw	r24, 0x01	; 1
     454:	09 f0       	breq	.+2      	; 0x458 <poll_modem+0x192>
     456:	d8 c3       	rjmp	.+1968   	; 0xc08 <poll_modem+0x942>
                    modem.rsp.state = RSP_STATE_RSP_ERROR;
     458:	84 e0       	ldi	r24, 0x04	; 4
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	80 93 a5 24 	sts	0x24A5, r24
     460:	90 93 a6 24 	sts	0x24A6, r25
                    break;
     464:	06 c4       	rjmp	.+2060   	; 0xc72 <poll_modem+0x9ac>
                }
            } else if (strcmp (modem.rsp.line.data, "FAIL: FORMAT") == 0) {
     466:	69 e4       	ldi	r22, 0x49	; 73
     468:	70 e2       	ldi	r23, 0x20	; 32
     46a:	85 ea       	ldi	r24, 0xA5	; 165
     46c:	93 e2       	ldi	r25, 0x23	; 35
     46e:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <strcmp>
     472:	28 2f       	mov	r18, r24
     474:	39 2f       	mov	r19, r25
     476:	23 2b       	or	r18, r19
     478:	71 f4       	brne	.+28     	; 0x496 <poll_modem+0x1d0>
                //handlers.cb_reset_avr();
                if (modem.rsp.state == RSP_STATE_REQ_BUSY) {
     47a:	80 91 a5 24 	lds	r24, 0x24A5
     47e:	90 91 a6 24 	lds	r25, 0x24A6
     482:	01 97       	sbiw	r24, 0x01	; 1
     484:	09 f0       	breq	.+2      	; 0x488 <poll_modem+0x1c2>
     486:	c0 c3       	rjmp	.+1920   	; 0xc08 <poll_modem+0x942>
                    modem.rsp.state = RSP_STATE_RSP_ERROR;
     488:	84 e0       	ldi	r24, 0x04	; 4
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	80 93 a5 24 	sts	0x24A5, r24
     490:	90 93 a6 24 	sts	0x24A6, r25
                    break;
     494:	ee c3       	rjmp	.+2012   	; 0xc72 <poll_modem+0x9ac>
                }
            } else if (strcmp (modem.rsp.line.data, "FAIL: SEQUENCE") == 0) {
     496:	66 e5       	ldi	r22, 0x56	; 86
     498:	70 e2       	ldi	r23, 0x20	; 32
     49a:	85 ea       	ldi	r24, 0xA5	; 165
     49c:	93 e2       	ldi	r25, 0x23	; 35
     49e:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <strcmp>
     4a2:	28 2f       	mov	r18, r24
     4a4:	39 2f       	mov	r19, r25
     4a6:	23 2b       	or	r18, r19
     4a8:	71 f4       	brne	.+28     	; 0x4c6 <poll_modem+0x200>
                //handlers.cb_reset_avr();
                if (modem.rsp.state == RSP_STATE_REQ_BUSY) {
     4aa:	80 91 a5 24 	lds	r24, 0x24A5
     4ae:	90 91 a6 24 	lds	r25, 0x24A6
     4b2:	01 97       	sbiw	r24, 0x01	; 1
     4b4:	09 f0       	breq	.+2      	; 0x4b8 <poll_modem+0x1f2>
     4b6:	a8 c3       	rjmp	.+1872   	; 0xc08 <poll_modem+0x942>
                    modem.rsp.state = RSP_STATE_RSP_ERROR;
     4b8:	84 e0       	ldi	r24, 0x04	; 4
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	80 93 a5 24 	sts	0x24A5, r24
     4c0:	90 93 a6 24 	sts	0x24A6, r25
                    break;
     4c4:	d6 c3       	rjmp	.+1964   	; 0xc72 <poll_modem+0x9ac>
                }
            } else if (strcmp (modem.rsp.line.data, "FAIL: CRC") == 0) {
     4c6:	65 e6       	ldi	r22, 0x65	; 101
     4c8:	70 e2       	ldi	r23, 0x20	; 32
     4ca:	85 ea       	ldi	r24, 0xA5	; 165
     4cc:	93 e2       	ldi	r25, 0x23	; 35
     4ce:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <strcmp>
     4d2:	28 2f       	mov	r18, r24
     4d4:	39 2f       	mov	r19, r25
     4d6:	23 2b       	or	r18, r19
     4d8:	71 f4       	brne	.+28     	; 0x4f6 <poll_modem+0x230>
                if (modem.rsp.state == RSP_STATE_REQ_BUSY) {
     4da:	80 91 a5 24 	lds	r24, 0x24A5
     4de:	90 91 a6 24 	lds	r25, 0x24A6
     4e2:	01 97       	sbiw	r24, 0x01	; 1
     4e4:	09 f0       	breq	.+2      	; 0x4e8 <poll_modem+0x222>
     4e6:	90 c3       	rjmp	.+1824   	; 0xc08 <poll_modem+0x942>
                    modem.rsp.state = RSP_STATE_RSP_ERROR;
     4e8:	84 e0       	ldi	r24, 0x04	; 4
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	80 93 a5 24 	sts	0x24A5, r24
     4f0:	90 93 a6 24 	sts	0x24A6, r25
                    break;
     4f4:	be c3       	rjmp	.+1916   	; 0xc72 <poll_modem+0x9ac>
                }
            } else if (strcmp (modem.rsp.line.data, "ERROR") == 0) {
     4f6:	6f e6       	ldi	r22, 0x6F	; 111
     4f8:	70 e2       	ldi	r23, 0x20	; 32
     4fa:	85 ea       	ldi	r24, 0xA5	; 165
     4fc:	93 e2       	ldi	r25, 0x23	; 35
     4fe:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <strcmp>
     502:	28 2f       	mov	r18, r24
     504:	39 2f       	mov	r19, r25
     506:	23 2b       	or	r18, r19
     508:	71 f4       	brne	.+28     	; 0x526 <poll_modem+0x260>
                if (modem.rsp.state == RSP_STATE_REQ_BUSY) {
     50a:	80 91 a5 24 	lds	r24, 0x24A5
     50e:	90 91 a6 24 	lds	r25, 0x24A6
     512:	01 97       	sbiw	r24, 0x01	; 1
     514:	09 f0       	breq	.+2      	; 0x518 <poll_modem+0x252>
     516:	78 c3       	rjmp	.+1776   	; 0xc08 <poll_modem+0x942>
                    modem.rsp.state = RSP_STATE_RSP_ERROR;
     518:	84 e0       	ldi	r24, 0x04	; 4
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	80 93 a5 24 	sts	0x24A5, r24
     520:	90 93 a6 24 	sts	0x24A6, r25
                    break;
     524:	a6 c3       	rjmp	.+1868   	; 0xc72 <poll_modem+0x9ac>
                }
            } else if (strcmp (modem.rsp.line.data, "+WOPEN: 1") == 0) {
     526:	65 e7       	ldi	r22, 0x75	; 117
     528:	70 e2       	ldi	r23, 0x20	; 32
     52a:	85 ea       	ldi	r24, 0xA5	; 165
     52c:	93 e2       	ldi	r25, 0x23	; 35
     52e:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <strcmp>
     532:	28 2f       	mov	r18, r24
     534:	39 2f       	mov	r19, r25
     536:	23 2b       	or	r18, r19
     538:	39 f4       	brne	.+14     	; 0x548 <poll_modem+0x282>
                modem.wopen_state = WOPEN_STATE_ENABLED;
     53a:	81 e0       	ldi	r24, 0x01	; 1
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	80 93 b4 24 	sts	0x24B4, r24
     542:	90 93 b5 24 	sts	0x24B5, r25
     546:	60 c3       	rjmp	.+1728   	; 0xc08 <poll_modem+0x942>
            } else if (strcmp (modem.rsp.line.data, "+WOPEN: 0") == 0) {
     548:	6f e7       	ldi	r22, 0x7F	; 127
     54a:	70 e2       	ldi	r23, 0x20	; 32
     54c:	85 ea       	ldi	r24, 0xA5	; 165
     54e:	93 e2       	ldi	r25, 0x23	; 35
     550:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <strcmp>
     554:	28 2f       	mov	r18, r24
     556:	39 2f       	mov	r19, r25
     558:	23 2b       	or	r18, r19
     55a:	39 f4       	brne	.+14     	; 0x56a <poll_modem+0x2a4>
                modem.wopen_state = WOPEN_STATE_DISABLED;
     55c:	a2 e0       	ldi	r26, 0x02	; 2
     55e:	b0 e0       	ldi	r27, 0x00	; 0
     560:	a0 93 b4 24 	sts	0x24B4, r26
     564:	b0 93 b5 24 	sts	0x24B5, r27
     568:	4f c3       	rjmp	.+1694   	; 0xc08 <poll_modem+0x942>
            } else if (strcmp (modem.rsp.line.data, "+IPR:115200 +ICF:3,4 +IFC:2,2") == 0) {
     56a:	69 e8       	ldi	r22, 0x89	; 137
     56c:	70 e2       	ldi	r23, 0x20	; 32
     56e:	85 ea       	ldi	r24, 0xA5	; 165
     570:	93 e2       	ldi	r25, 0x23	; 35
     572:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <strcmp>
     576:	28 2f       	mov	r18, r24
     578:	39 2f       	mov	r19, r25
     57a:	23 2b       	or	r18, r19
     57c:	21 f4       	brne	.+8      	; 0x586 <poll_modem+0x2c0>
                modem.eeprom_flow_control_enabled = true;
     57e:	81 e0       	ldi	r24, 0x01	; 1
     580:	80 93 b6 24 	sts	0x24B6, r24
     584:	41 c3       	rjmp	.+1666   	; 0xc08 <poll_modem+0x942>
            } else if (strncmp (modem.rsp.line.data, "+EPOCH: ", 8) == 0) {
     586:	48 e0       	ldi	r20, 0x08	; 8
     588:	50 e0       	ldi	r21, 0x00	; 0
     58a:	67 ea       	ldi	r22, 0xA7	; 167
     58c:	70 e2       	ldi	r23, 0x20	; 32
     58e:	85 ea       	ldi	r24, 0xA5	; 165
     590:	93 e2       	ldi	r25, 0x23	; 35
     592:	0e 94 cf 36 	call	0x6d9e	; 0x6d9e <strncmp>
     596:	28 2f       	mov	r18, r24
     598:	39 2f       	mov	r19, r25
     59a:	23 2b       	or	r18, r19
     59c:	c1 f5       	brne	.+112    	; 0x60e <poll_modem+0x348>
                // there is no OK so treat this as OK
                uint32_t modem_epoch = strtoul (modem.rsp.line.data + 8, NULL, 10);
     59e:	4a e0       	ldi	r20, 0x0A	; 10
     5a0:	50 e0       	ldi	r21, 0x00	; 0
     5a2:	60 e0       	ldi	r22, 0x00	; 0
     5a4:	70 e0       	ldi	r23, 0x00	; 0
     5a6:	8d ea       	ldi	r24, 0xAD	; 173
     5a8:	93 e2       	ldi	r25, 0x23	; 35
     5aa:	0e 94 8c 35 	call	0x6b18	; 0x6b18 <strtoul>
     5ae:	6b 01       	movw	r12, r22
     5b0:	7c 01       	movw	r14, r24
                modem.rsp.state = RSP_STATE_RSP_OK;
     5b2:	83 e0       	ldi	r24, 0x03	; 3
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	80 93 a5 24 	sts	0x24A5, r24
     5ba:	90 93 a6 24 	sts	0x24A6, r25
                if (modem_epoch != 0) {
     5be:	c1 14       	cp	r12, r1
     5c0:	d1 04       	cpc	r13, r1
     5c2:	e1 04       	cpc	r14, r1
     5c4:	f1 04       	cpc	r15, r1
     5c6:	09 f4       	brne	.+2      	; 0x5ca <poll_modem+0x304>
     5c8:	54 c3       	rjmp	.+1704   	; 0xc72 <poll_modem+0x9ac>
                    uint32_t epoch = epoch_get ();
     5ca:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <epoch_get>
                    if (epoch > modem_epoch + 5 || epoch < modem_epoch - 5) {
     5ce:	97 01       	movw	r18, r14
     5d0:	86 01       	movw	r16, r12
     5d2:	0b 5f       	subi	r16, 0xFB	; 251
     5d4:	1f 4f       	sbci	r17, 0xFF	; 255
     5d6:	2f 4f       	sbci	r18, 0xFF	; 255
     5d8:	3f 4f       	sbci	r19, 0xFF	; 255
     5da:	06 17       	cp	r16, r22
     5dc:	17 07       	cpc	r17, r23
     5de:	28 07       	cpc	r18, r24
     5e0:	39 07       	cpc	r19, r25
     5e2:	60 f0       	brcs	.+24     	; 0x5fc <poll_modem+0x336>
     5e4:	97 01       	movw	r18, r14
     5e6:	86 01       	movw	r16, r12
     5e8:	05 50       	subi	r16, 0x05	; 5
     5ea:	11 09       	sbc	r17, r1
     5ec:	21 09       	sbc	r18, r1
     5ee:	31 09       	sbc	r19, r1
     5f0:	60 17       	cp	r22, r16
     5f2:	71 07       	cpc	r23, r17
     5f4:	82 07       	cpc	r24, r18
     5f6:	93 07       	cpc	r25, r19
     5f8:	08 f0       	brcs	.+2      	; 0x5fc <poll_modem+0x336>
     5fa:	3b c3       	rjmp	.+1654   	; 0xc72 <poll_modem+0x9ac>
                        epoch_set (modem_epoch);
     5fc:	c7 01       	movw	r24, r14
     5fe:	b6 01       	movw	r22, r12
     600:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <epoch_set>
                        epoch = modem_epoch;
                        DEBUG_puts ("SET TIMESTAMP : ");
     604:	80 eb       	ldi	r24, 0xB0	; 176
     606:	90 e2       	ldi	r25, 0x20	; 32
     608:	0e 94 44 13 	call	0x2688	; 0x2688 <DEBUG_puts>
     60c:	32 c3       	rjmp	.+1636   	; 0xc72 <poll_modem+0x9ac>
                    }
                    //DEBUG_putu (epoch);
                    //DEBUG_putcrlf (NULL);
                }
                break;
            } else if (strncmp (modem.rsp.line.data, "+BOOT: ", 7) == 0) {
     60e:	47 e0       	ldi	r20, 0x07	; 7
     610:	50 e0       	ldi	r21, 0x00	; 0
     612:	61 ec       	ldi	r22, 0xC1	; 193
     614:	70 e2       	ldi	r23, 0x20	; 32
     616:	85 ea       	ldi	r24, 0xA5	; 165
     618:	93 e2       	ldi	r25, 0x23	; 35
     61a:	0e 94 cf 36 	call	0x6d9e	; 0x6d9e <strncmp>
     61e:	28 2f       	mov	r18, r24
     620:	39 2f       	mov	r19, r25
     622:	23 2b       	or	r18, r19
     624:	59 f5       	brne	.+86     	; 0x67c <poll_modem+0x3b6>
                // there is no OK so treat this as OK
                int32_t count = atol (modem.rsp.line.data + 7);
     626:	8c ea       	ldi	r24, 0xAC	; 172
     628:	93 e2       	ldi	r25, 0x23	; 35
     62a:	0e 94 7b 36 	call	0x6cf6	; 0x6cf6 <atol>
     62e:	6b 01       	movw	r12, r22
     630:	7c 01       	movw	r14, r24
                modem.rsp.state = RSP_STATE_RSP_OK;
     632:	83 e0       	ldi	r24, 0x03	; 3
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	80 93 a5 24 	sts	0x24A5, r24
     63a:	90 93 a6 24 	sts	0x24A6, r25

                // if count is less than previous count the modem has reset.
                if (count <= modem.boot_counter) {
     63e:	80 91 ad 24 	lds	r24, 0x24AD
     642:	90 91 ae 24 	lds	r25, 0x24AE
     646:	a0 91 af 24 	lds	r26, 0x24AF
     64a:	b0 91 b0 24 	lds	r27, 0x24B0
     64e:	8c 15       	cp	r24, r12
     650:	9d 05       	cpc	r25, r13
     652:	ae 05       	cpc	r26, r14
     654:	bf 05       	cpc	r27, r15
     656:	4c f0       	brlt	.+18     	; 0x66a <poll_modem+0x3a4>
                    reset_state (RSP_STATE_RSP_OK);
     658:	83 e0       	ldi	r24, 0x03	; 3
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	ed dd       	rcall	.-1062   	; 0x238 <reset_state>
                    handlers.cb_modem_up (false);
     65e:	e0 91 bd 24 	lds	r30, 0x24BD
     662:	f0 91 be 24 	lds	r31, 0x24BE
     666:	80 e0       	ldi	r24, 0x00	; 0
     668:	09 95       	icall
                }
                modem.boot_counter = count;
     66a:	c0 92 ad 24 	sts	0x24AD, r12
     66e:	d0 92 ae 24 	sts	0x24AE, r13
     672:	e0 92 af 24 	sts	0x24AF, r14
     676:	f0 92 b0 24 	sts	0x24B0, r15
                break;
     67a:	fb c2       	rjmp	.+1526   	; 0xc72 <poll_modem+0x9ac>
            } else if (strncmp (modem.rsp.line.data, "+AWTDA: BOOT", 12) == 0) {
     67c:	4c e0       	ldi	r20, 0x0C	; 12
     67e:	50 e0       	ldi	r21, 0x00	; 0
     680:	69 ec       	ldi	r22, 0xC9	; 201
     682:	70 e2       	ldi	r23, 0x20	; 32
     684:	85 ea       	ldi	r24, 0xA5	; 165
     686:	93 e2       	ldi	r25, 0x23	; 35
     688:	0e 94 cf 36 	call	0x6d9e	; 0x6d9e <strncmp>
     68c:	28 2f       	mov	r18, r24
     68e:	39 2f       	mov	r19, r25
     690:	23 2b       	or	r18, r19
     692:	f1 f4       	brne	.+60     	; 0x6d0 <poll_modem+0x40a>
                reset_state (modem.rsp.state == RSP_STATE_REQ_BUSY ? RSP_STATE_RSP_TIMEOUT : RSP_STATE_IDLE);
     694:	80 91 a5 24 	lds	r24, 0x24A5
     698:	90 91 a6 24 	lds	r25, 0x24A6
     69c:	01 97       	sbiw	r24, 0x01	; 1
     69e:	19 f4       	brne	.+6      	; 0x6a6 <poll_modem+0x3e0>
     6a0:	85 e0       	ldi	r24, 0x05	; 5
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	02 c0       	rjmp	.+4      	; 0x6aa <poll_modem+0x3e4>
     6a6:	80 e0       	ldi	r24, 0x00	; 0
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	c6 dd       	rcall	.-1140   	; 0x238 <reset_state>
                handlers.cb_modem_up (false);
     6ac:	e0 91 bd 24 	lds	r30, 0x24BD
     6b0:	f0 91 be 24 	lds	r31, 0x24BE
     6b4:	80 e0       	ldi	r24, 0x00	; 0
     6b6:	09 95       	icall
                modem.boot_counter = 0;
     6b8:	10 92 ad 24 	sts	0x24AD, r1
     6bc:	10 92 ae 24 	sts	0x24AE, r1
     6c0:	10 92 af 24 	sts	0x24AF, r1
     6c4:	10 92 b0 24 	sts	0x24B0, r1
                modem.rsp.awtda_boot_signal = true;
     6c8:	81 e0       	ldi	r24, 0x01	; 1
     6ca:	80 93 a9 24 	sts	0x24A9, r24
     6ce:	9c c2       	rjmp	.+1336   	; 0xc08 <poll_modem+0x942>
            } else if (strncmp (modem.rsp.line.data, "+AWTDA: UP", 10) == 0) {
     6d0:	4a e0       	ldi	r20, 0x0A	; 10
     6d2:	50 e0       	ldi	r21, 0x00	; 0
     6d4:	66 ed       	ldi	r22, 0xD6	; 214
     6d6:	70 e2       	ldi	r23, 0x20	; 32
     6d8:	85 ea       	ldi	r24, 0xA5	; 165
     6da:	93 e2       	ldi	r25, 0x23	; 35
     6dc:	0e 94 cf 36 	call	0x6d9e	; 0x6d9e <strncmp>
     6e0:	28 2f       	mov	r18, r24
     6e2:	39 2f       	mov	r19, r25
     6e4:	23 2b       	or	r18, r19
     6e6:	b9 f4       	brne	.+46     	; 0x716 <poll_modem+0x450>
                modem.gprs_up = true;
     6e8:	81 e0       	ldi	r24, 0x01	; 1
     6ea:	e1 eb       	ldi	r30, 0xB1	; 177
     6ec:	f4 e2       	ldi	r31, 0x24	; 36
     6ee:	80 83       	st	Z, r24
                handlers.cb_modem_up (true);
     6f0:	e0 91 bd 24 	lds	r30, 0x24BD
     6f4:	f0 91 be 24 	lds	r31, 0x24BE
     6f8:	09 95       	icall
                if (modem.rsp.expect_awtda_up) {
     6fa:	80 91 a7 24 	lds	r24, 0x24A7
     6fe:	88 23       	and	r24, r24
     700:	09 f4       	brne	.+2      	; 0x704 <poll_modem+0x43e>
     702:	82 c2       	rjmp	.+1284   	; 0xc08 <poll_modem+0x942>
                    modem.rsp.expect_awtda_up = false;
     704:	10 92 a7 24 	sts	0x24A7, r1
                    modem.rsp.state = RSP_STATE_RSP_OK;
     708:	83 e0       	ldi	r24, 0x03	; 3
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	80 93 a5 24 	sts	0x24A5, r24
     710:	90 93 a6 24 	sts	0x24A6, r25
                    break;
     714:	ae c2       	rjmp	.+1372   	; 0xc72 <poll_modem+0x9ac>
                }
            } else if (strncmp (modem.rsp.line.data, "+AWTDA: DN", 10) == 0) {
     716:	4a e0       	ldi	r20, 0x0A	; 10
     718:	50 e0       	ldi	r21, 0x00	; 0
     71a:	61 ee       	ldi	r22, 0xE1	; 225
     71c:	70 e2       	ldi	r23, 0x20	; 32
     71e:	85 ea       	ldi	r24, 0xA5	; 165
     720:	93 e2       	ldi	r25, 0x23	; 35
     722:	0e 94 cf 36 	call	0x6d9e	; 0x6d9e <strncmp>
     726:	28 2f       	mov	r18, r24
     728:	39 2f       	mov	r19, r25
     72a:	23 2b       	or	r18, r19
     72c:	21 f5       	brne	.+72     	; 0x776 <poll_modem+0x4b0>
                modem.gprs_up = false;
     72e:	a1 eb       	ldi	r26, 0xB1	; 177
     730:	b4 e2       	ldi	r27, 0x24	; 36
     732:	1c 92       	st	X, r1
                handlers.cb_modem_up (false);
     734:	e0 91 bd 24 	lds	r30, 0x24BD
     738:	f0 91 be 24 	lds	r31, 0x24BE
     73c:	80 e0       	ldi	r24, 0x00	; 0
     73e:	09 95       	icall
                if (modem.rsp.expect_awtda_up) {
     740:	80 91 a7 24 	lds	r24, 0x24A7
     744:	88 23       	and	r24, r24
     746:	49 f0       	breq	.+18     	; 0x75a <poll_modem+0x494>
                    modem.rsp.expect_awtda_up = false;
     748:	10 92 a7 24 	sts	0x24A7, r1
                    modem.rsp.state = RSP_STATE_RSP_OK;
     74c:	83 e0       	ldi	r24, 0x03	; 3
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	80 93 a5 24 	sts	0x24A5, r24
     754:	90 93 a6 24 	sts	0x24A6, r25
                    break;
     758:	8c c2       	rjmp	.+1304   	; 0xc72 <poll_modem+0x9ac>
                } else if (modem.rsp.state == RSP_STATE_REQ_BUSY) {
     75a:	80 91 a5 24 	lds	r24, 0x24A5
     75e:	90 91 a6 24 	lds	r25, 0x24A6
     762:	01 97       	sbiw	r24, 0x01	; 1
     764:	09 f0       	breq	.+2      	; 0x768 <poll_modem+0x4a2>
     766:	50 c2       	rjmp	.+1184   	; 0xc08 <poll_modem+0x942>
                    modem.rsp.state = RSP_STATE_RSP_TIMEOUT;
     768:	85 e0       	ldi	r24, 0x05	; 5
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	80 93 a5 24 	sts	0x24A5, r24
     770:	90 93 a6 24 	sts	0x24A6, r25
                    break;
     774:	7e c2       	rjmp	.+1276   	; 0xc72 <poll_modem+0x9ac>
                }
            } else if (strncmp (modem.rsp.line.data, "+AWTDA: d,", 10) == 0) {
     776:	4a e0       	ldi	r20, 0x0A	; 10
     778:	50 e0       	ldi	r21, 0x00	; 0
     77a:	6c ee       	ldi	r22, 0xEC	; 236
     77c:	70 e2       	ldi	r23, 0x20	; 32
     77e:	85 ea       	ldi	r24, 0xA5	; 165
     780:	93 e2       	ldi	r25, 0x23	; 35
     782:	0e 94 cf 36 	call	0x6d9e	; 0x6d9e <strncmp>
     786:	28 2f       	mov	r18, r24
     788:	39 2f       	mov	r19, r25
     78a:	23 2b       	or	r18, r19
     78c:	09 f0       	breq	.+2      	; 0x790 <poll_modem+0x4ca>
     78e:	1c c1       	rjmp	.+568    	; 0x9c8 <poll_modem+0x702>
    uint32_t ticketid = 0;
    char* pstr = modem.rsp.line.data + 10;
    char* path;
    awt_var_t var[5];
    uint8_t vars;
    while (isdigit (*pstr)) {
     790:	f5 01       	movw	r30, r10
     792:	83 85       	ldd	r24, Z+11	; 0x0b
     794:	28 2f       	mov	r18, r24
     796:	33 27       	eor	r19, r19
     798:	27 fd       	sbrc	r18, 7
     79a:	30 95       	com	r19
     79c:	20 53       	subi	r18, 0x30	; 48
     79e:	31 09       	sbc	r19, r1
     7a0:	2a 30       	cpi	r18, 0x0A	; 10
     7a2:	31 05       	cpc	r19, r1
     7a4:	98 f5       	brcc	.+102    	; 0x80c <poll_modem+0x546>
     7a6:	e0 eb       	ldi	r30, 0xB0	; 176
     7a8:	f3 e2       	ldi	r31, 0x23	; 35
     7aa:	21 2c       	mov	r2, r1
     7ac:	31 2c       	mov	r3, r1
     7ae:	21 01       	movw	r4, r2
        ticketid *= 10;
     7b0:	92 01       	movw	r18, r4
     7b2:	81 01       	movw	r16, r2
     7b4:	00 0f       	add	r16, r16
     7b6:	11 1f       	adc	r17, r17
     7b8:	22 1f       	adc	r18, r18
     7ba:	33 1f       	adc	r19, r19
     7bc:	b9 01       	movw	r22, r18
     7be:	a8 01       	movw	r20, r16
     7c0:	44 0f       	add	r20, r20
     7c2:	55 1f       	adc	r21, r21
     7c4:	66 1f       	adc	r22, r22
     7c6:	77 1f       	adc	r23, r23
     7c8:	44 0f       	add	r20, r20
     7ca:	55 1f       	adc	r21, r21
     7cc:	66 1f       	adc	r22, r22
     7ce:	77 1f       	adc	r23, r23
     7d0:	40 0f       	add	r20, r16
     7d2:	51 1f       	adc	r21, r17
     7d4:	62 1f       	adc	r22, r18
     7d6:	73 1f       	adc	r23, r19
        ticketid += (*pstr - '0');
     7d8:	99 27       	eor	r25, r25
     7da:	87 fd       	sbrc	r24, 7
     7dc:	90 95       	com	r25
     7de:	c0 97       	sbiw	r24, 0x30	; 48
     7e0:	aa 27       	eor	r26, r26
     7e2:	97 fd       	sbrc	r25, 7
     7e4:	a0 95       	com	r26
     7e6:	ba 2f       	mov	r27, r26
     7e8:	1c 01       	movw	r2, r24
     7ea:	2d 01       	movw	r4, r26
     7ec:	24 0e       	add	r2, r20
     7ee:	35 1e       	adc	r3, r21
     7f0:	46 1e       	adc	r4, r22
     7f2:	57 1e       	adc	r5, r23
        pstr++;
     7f4:	df 01       	movw	r26, r30
    uint32_t ticketid = 0;
    char* pstr = modem.rsp.line.data + 10;
    char* path;
    awt_var_t var[5];
    uint8_t vars;
    while (isdigit (*pstr)) {
     7f6:	81 91       	ld	r24, Z+
     7f8:	28 2f       	mov	r18, r24
     7fa:	33 27       	eor	r19, r19
     7fc:	27 fd       	sbrc	r18, 7
     7fe:	30 95       	com	r19
     800:	20 53       	subi	r18, 0x30	; 48
     802:	31 09       	sbc	r19, r1
     804:	2a 30       	cpi	r18, 0x0A	; 10
     806:	31 05       	cpc	r19, r1
     808:	98 f2       	brcs	.-90     	; 0x7b0 <poll_modem+0x4ea>
     80a:	05 c0       	rjmp	.+10     	; 0x816 <poll_modem+0x550>
     80c:	af ea       	ldi	r26, 0xAF	; 175
     80e:	b3 e2       	ldi	r27, 0x23	; 35
     810:	21 2c       	mov	r2, r1
     812:	31 2c       	mov	r3, r1
     814:	21 01       	movw	r4, r2
        ticketid *= 10;
        ticketid += (*pstr - '0');
        pstr++;
    }
    pstr++;
     816:	cd 01       	movw	r24, r26
     818:	01 96       	adiw	r24, 0x01	; 1
     81a:	8a ab       	std	Y+50, r24	; 0x32
     81c:	9b ab       	std	Y+51, r25	; 0x33
    path = pstr;
    while (*pstr != ',') {
     81e:	11 96       	adiw	r26, 0x01	; 1
     820:	8c 91       	ld	r24, X
     822:	11 97       	sbiw	r26, 0x01	; 1
     824:	8c 32       	cpi	r24, 0x2C	; 44
     826:	39 f0       	breq	.+14     	; 0x836 <poll_modem+0x570>
}

//+AWTDA: c,992938,GML-001,set_rom_id,STR,FFFFFFFFFFFFFFFF,STR,FFFFFFFFFFFFFFFF,STR,FFFFFFFFFFFFFFFF,CRC6C


static void poll_modem (void)
     828:	12 96       	adiw	r26, 0x02	; 2
        pstr++;
    }
    pstr++;
    path = pstr;
    while (*pstr != ',') {
        pstr++;
     82a:	fd 01       	movw	r30, r26
     82c:	11 96       	adiw	r26, 0x01	; 1
        ticketid += (*pstr - '0');
        pstr++;
    }
    pstr++;
    path = pstr;
    while (*pstr != ',') {
     82e:	80 81       	ld	r24, Z
     830:	8c 32       	cpi	r24, 0x2C	; 44
     832:	d9 f7       	brne	.-10     	; 0x82a <poll_modem+0x564>
     834:	02 c0       	rjmp	.+4      	; 0x83a <poll_modem+0x574>
    while (isdigit (*pstr)) {
        ticketid *= 10;
        ticketid += (*pstr - '0');
        pstr++;
    }
    pstr++;
     836:	ea a9       	ldd	r30, Y+50	; 0x32
     838:	fb a9       	ldd	r31, Y+51	; 0x33
    path = pstr;
    while (*pstr != ',') {
        pstr++;
    }
    *pstr++ = '\x00';
     83a:	df 01       	movw	r26, r30
     83c:	1d 92       	st	X+, r1
     83e:	a8 ab       	std	Y+48, r26	; 0x30
     840:	b9 ab       	std	Y+49, r27	; 0x31
    vars = 0;
     842:	61 2c       	mov	r6, r1

static char* parse_var (char* pstr, awt_var_t* var)
{
    char* ptype;
    var->name = pstr;
    while (*pstr != '\x00' && *pstr != ',') {
     844:	ae ab       	std	Y+54, r26	; 0x36
     846:	bf ab       	std	Y+55, r27	; 0x37
}

//+AWTDA: c,992938,GML-001,set_rom_id,STR,FFFFFFFFFFFFFFFF,STR,FFFFFFFFFFFFFFFF,STR,FFFFFFFFFFFFFFFF,CRC6C


static void poll_modem (void)
     848:	cf 01       	movw	r24, r30
     84a:	02 96       	adiw	r24, 0x02	; 2
     84c:	8c ab       	std	Y+52, r24	; 0x34
     84e:	9d ab       	std	Y+53, r25	; 0x35
     850:	ab a6       	std	Y+43, r10	; 0x2b
     852:	bc a6       	std	Y+44, r11	; 0x2c
     854:	cd a6       	std	Y+45, r12	; 0x2d
     856:	de a6       	std	Y+46, r13	; 0x2e
     858:	d6 2c       	mov	r13, r6
     85a:	b9 2c       	mov	r11, r9
     85c:	7f a6       	std	Y+47, r7	; 0x2f
     85e:	01 c0       	rjmp	.+2      	; 0x862 <poll_modem+0x59c>
        pstr++;
    }
    *pstr++ = '\x00';
    vars = 0;
    while (parse_var (pstr, &var[vars]) != NULL) {
        vars++;
     860:	d3 94       	inc	r13
    while (*pstr != ',') {
        pstr++;
    }
    *pstr++ = '\x00';
    vars = 0;
    while (parse_var (pstr, &var[vars]) != NULL) {
     862:	69 a4       	ldd	r6, Y+41	; 0x29
     864:	7a a4       	ldd	r7, Y+42	; 0x2a
     866:	98 e0       	ldi	r25, 0x08	; 8
     868:	d9 9e       	mul	r13, r25
     86a:	60 0c       	add	r6, r0
     86c:	71 1c       	adc	r7, r1
     86e:	11 24       	eor	r1, r1


static char* parse_var (char* pstr, awt_var_t* var)
{
    char* ptype;
    var->name = pstr;
     870:	e8 a9       	ldd	r30, Y+48	; 0x30
     872:	f9 a9       	ldd	r31, Y+49	; 0x31
     874:	d3 01       	movw	r26, r6
     876:	ed 93       	st	X+, r30
     878:	fc 93       	st	X, r31
    while (*pstr != '\x00' && *pstr != ',') {
     87a:	80 81       	ld	r24, Z
     87c:	88 23       	and	r24, r24
     87e:	09 f4       	brne	.+2      	; 0x882 <poll_modem+0x5bc>
     880:	69 c0       	rjmp	.+210    	; 0x954 <poll_modem+0x68e>
     882:	8c 32       	cpi	r24, 0x2C	; 44
     884:	09 f4       	brne	.+2      	; 0x888 <poll_modem+0x5c2>
     886:	c6 c1       	rjmp	.+908    	; 0xc14 <poll_modem+0x94e>
}

//+AWTDA: c,992938,GML-001,set_rom_id,STR,FFFFFFFFFFFFFFFF,STR,FFFFFFFFFFFFFFFF,STR,FFFFFFFFFFFFFFFF,CRC6C


static void poll_modem (void)
     888:	ac a9       	ldd	r26, Y+52	; 0x34
     88a:	bd a9       	ldd	r27, Y+53	; 0x35
static char* parse_var (char* pstr, awt_var_t* var)
{
    char* ptype;
    var->name = pstr;
    while (*pstr != '\x00' && *pstr != ',') {
        pstr++;
     88c:	fd 01       	movw	r30, r26

static char* parse_var (char* pstr, awt_var_t* var)
{
    char* ptype;
    var->name = pstr;
    while (*pstr != '\x00' && *pstr != ',') {
     88e:	8d 91       	ld	r24, X+
     890:	88 23       	and	r24, r24
     892:	09 f4       	brne	.+2      	; 0x896 <poll_modem+0x5d0>
     894:	67 c0       	rjmp	.+206    	; 0x964 <poll_modem+0x69e>
     896:	8c 32       	cpi	r24, 0x2C	; 44
     898:	c9 f7       	brne	.-14     	; 0x88c <poll_modem+0x5c6>
     89a:	be c1       	rjmp	.+892    	; 0xc18 <poll_modem+0x952>
    if (*pstr == '\x00') {
        return NULL;
    }
    *pstr++ = '\x00';
    ptype = pstr;
    while (*pstr != '\x00' && *pstr != ',') {
     89c:	8c 32       	cpi	r24, 0x2C	; 44
     89e:	09 f4       	brne	.+2      	; 0x8a2 <poll_modem+0x5dc>
     8a0:	c9 c1       	rjmp	.+914    	; 0xc34 <poll_modem+0x96e>
}

//+AWTDA: c,992938,GML-001,set_rom_id,STR,FFFFFFFFFFFFFFFF,STR,FFFFFFFFFFFFFFFF,STR,FFFFFFFFFFFFFFFF,CRC6C


static void poll_modem (void)
     8a2:	32 96       	adiw	r30, 0x02	; 2
        return NULL;
    }
    *pstr++ = '\x00';
    ptype = pstr;
    while (*pstr != '\x00' && *pstr != ',') {
        pstr++;
     8a4:	8f 01       	movw	r16, r30
    if (*pstr == '\x00') {
        return NULL;
    }
    *pstr++ = '\x00';
    ptype = pstr;
    while (*pstr != '\x00' && *pstr != ',') {
     8a6:	81 91       	ld	r24, Z+
     8a8:	88 23       	and	r24, r24
     8aa:	09 f4       	brne	.+2      	; 0x8ae <poll_modem+0x5e8>
     8ac:	63 c0       	rjmp	.+198    	; 0x974 <poll_modem+0x6ae>
     8ae:	8c 32       	cpi	r24, 0x2C	; 44
     8b0:	c9 f7       	brne	.-14     	; 0x8a4 <poll_modem+0x5de>
     8b2:	c1 c1       	rjmp	.+898    	; 0xc36 <poll_modem+0x970>
    if (*pstr == '\x00') {
        return NULL;
    }
    *pstr++ = '\x00';
    if (strcmp (ptype, "INT32") == 0) {
        var->type = AWT_INT32;
     8b4:	d3 01       	movw	r26, r6
     8b6:	12 96       	adiw	r26, 0x02	; 2
     8b8:	1d 92       	st	X+, r1
     8ba:	1c 92       	st	X, r1
     8bc:	13 97       	sbiw	r26, 0x03	; 3
        var->val.i = atol (pstr);
     8be:	c4 01       	movw	r24, r8
     8c0:	0e 94 7b 36 	call	0x6cf6	; 0x6cf6 <atol>
     8c4:	f3 01       	movw	r30, r6
     8c6:	64 83       	std	Z+4, r22	; 0x04
     8c8:	75 83       	std	Z+5, r23	; 0x05
     8ca:	86 83       	std	Z+6, r24	; 0x06
     8cc:	97 83       	std	Z+7, r25	; 0x07
     8ce:	2e c0       	rjmp	.+92     	; 0x92c <poll_modem+0x666>
    } else if (strcmp (ptype, "BOOL") == 0) {
     8d0:	67 ef       	ldi	r22, 0xF7	; 247
     8d2:	70 e2       	ldi	r23, 0x20	; 32
     8d4:	c7 01       	movw	r24, r14
     8d6:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <strcmp>
     8da:	28 2f       	mov	r18, r24
     8dc:	39 2f       	mov	r19, r25
     8de:	23 2b       	or	r18, r19
     8e0:	89 f4       	brne	.+34     	; 0x904 <poll_modem+0x63e>
        var->type = AWT_BOOL;
     8e2:	e2 e0       	ldi	r30, 0x02	; 2
     8e4:	f0 e0       	ldi	r31, 0x00	; 0
     8e6:	d3 01       	movw	r26, r6
     8e8:	12 96       	adiw	r26, 0x02	; 2
     8ea:	ed 93       	st	X+, r30
     8ec:	fc 93       	st	X, r31
     8ee:	13 97       	sbiw	r26, 0x03	; 3
        var->val.b = (*pstr == 'T');
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	d8 01       	movw	r26, r16
     8f4:	11 96       	adiw	r26, 0x01	; 1
     8f6:	9c 91       	ld	r25, X
     8f8:	94 35       	cpi	r25, 0x54	; 84
     8fa:	09 f0       	breq	.+2      	; 0x8fe <poll_modem+0x638>
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	f3 01       	movw	r30, r6
     900:	84 83       	std	Z+4, r24	; 0x04
     902:	14 c0       	rjmp	.+40     	; 0x92c <poll_modem+0x666>
    } else if (strcmp (ptype, "STR") == 0) {
     904:	6c ef       	ldi	r22, 0xFC	; 252
     906:	70 e2       	ldi	r23, 0x20	; 32
     908:	c7 01       	movw	r24, r14
     90a:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <strcmp>
     90e:	28 2f       	mov	r18, r24
     910:	39 2f       	mov	r19, r25
     912:	23 2b       	or	r18, r19
     914:	b9 f5       	brne	.+110    	; 0x984 <poll_modem+0x6be>
        var->type = AWT_STR;
     916:	e1 e0       	ldi	r30, 0x01	; 1
     918:	f0 e0       	ldi	r31, 0x00	; 0
     91a:	d3 01       	movw	r26, r6
     91c:	12 96       	adiw	r26, 0x02	; 2
     91e:	ed 93       	st	X+, r30
     920:	fc 93       	st	X, r31
     922:	13 97       	sbiw	r26, 0x03	; 3
        var->val.s = pstr;
     924:	14 96       	adiw	r26, 0x04	; 4
     926:	8d 92       	st	X+, r8
     928:	9c 92       	st	X, r9
     92a:	15 97       	sbiw	r26, 0x05	; 5
    } else {
        return NULL;
    }
    if (*pstr == '\x00') {
     92c:	d8 01       	movw	r26, r16
     92e:	11 96       	adiw	r26, 0x01	; 1
     930:	8c 91       	ld	r24, X
     932:	11 97       	sbiw	r26, 0x01	; 1
     934:	88 23       	and	r24, r24
     936:	71 f1       	breq	.+92     	; 0x994 <poll_modem+0x6ce>
        return NULL;
    }
    *pstr++ = '\x00';
     938:	11 96       	adiw	r26, 0x01	; 1
     93a:	1c 92       	st	X, r1
    while (*pstr != ',') {
        pstr++;
    }
    *pstr++ = '\x00';
    vars = 0;
    while (parse_var (pstr, &var[vars]) != NULL) {
     93c:	0e 3f       	cpi	r16, 0xFE	; 254
     93e:	1f 4f       	sbci	r17, 0xFF	; 255
     940:	09 f0       	breq	.+2      	; 0x944 <poll_modem+0x67e>
     942:	8e cf       	rjmp	.-228    	; 0x860 <poll_modem+0x59a>
     944:	6d 2c       	mov	r6, r13
     946:	cd a4       	ldd	r12, Y+45	; 0x2d
     948:	de a4       	ldd	r13, Y+46	; 0x2e
     94a:	9b 2c       	mov	r9, r11
     94c:	ab a4       	ldd	r10, Y+43	; 0x2b
     94e:	bc a4       	ldd	r11, Y+44	; 0x2c
     950:	7f a4       	ldd	r7, Y+47	; 0x2f
     952:	27 c0       	rjmp	.+78     	; 0x9a2 <poll_modem+0x6dc>
     954:	6d 2c       	mov	r6, r13
     956:	cd a4       	ldd	r12, Y+45	; 0x2d
     958:	de a4       	ldd	r13, Y+46	; 0x2e
     95a:	9b 2c       	mov	r9, r11
     95c:	ab a4       	ldd	r10, Y+43	; 0x2b
     95e:	bc a4       	ldd	r11, Y+44	; 0x2c
     960:	7f a4       	ldd	r7, Y+47	; 0x2f
     962:	1f c0       	rjmp	.+62     	; 0x9a2 <poll_modem+0x6dc>
     964:	6d 2c       	mov	r6, r13
     966:	cd a4       	ldd	r12, Y+45	; 0x2d
     968:	de a4       	ldd	r13, Y+46	; 0x2e
     96a:	9b 2c       	mov	r9, r11
     96c:	ab a4       	ldd	r10, Y+43	; 0x2b
     96e:	bc a4       	ldd	r11, Y+44	; 0x2c
     970:	7f a4       	ldd	r7, Y+47	; 0x2f
     972:	17 c0       	rjmp	.+46     	; 0x9a2 <poll_modem+0x6dc>
     974:	6d 2c       	mov	r6, r13
     976:	cd a4       	ldd	r12, Y+45	; 0x2d
     978:	de a4       	ldd	r13, Y+46	; 0x2e
     97a:	9b 2c       	mov	r9, r11
     97c:	ab a4       	ldd	r10, Y+43	; 0x2b
     97e:	bc a4       	ldd	r11, Y+44	; 0x2c
     980:	7f a4       	ldd	r7, Y+47	; 0x2f
     982:	0f c0       	rjmp	.+30     	; 0x9a2 <poll_modem+0x6dc>
     984:	6d 2c       	mov	r6, r13
     986:	cd a4       	ldd	r12, Y+45	; 0x2d
     988:	de a4       	ldd	r13, Y+46	; 0x2e
     98a:	9b 2c       	mov	r9, r11
     98c:	ab a4       	ldd	r10, Y+43	; 0x2b
     98e:	bc a4       	ldd	r11, Y+44	; 0x2c
     990:	7f a4       	ldd	r7, Y+47	; 0x2f
     992:	07 c0       	rjmp	.+14     	; 0x9a2 <poll_modem+0x6dc>
     994:	6d 2c       	mov	r6, r13
     996:	cd a4       	ldd	r12, Y+45	; 0x2d
     998:	de a4       	ldd	r13, Y+46	; 0x2e
     99a:	9b 2c       	mov	r9, r11
     99c:	ab a4       	ldd	r10, Y+43	; 0x2b
     99e:	bc a4       	ldd	r11, Y+44	; 0x2c
     9a0:	7f a4       	ldd	r7, Y+47	; 0x2f
        vars++;
    }
    if (vars && handlers.cb_data != NULL) {
     9a2:	66 20       	and	r6, r6
     9a4:	09 f4       	brne	.+2      	; 0x9a8 <poll_modem+0x6e2>
     9a6:	30 c1       	rjmp	.+608    	; 0xc08 <poll_modem+0x942>
     9a8:	a1 ec       	ldi	r26, 0xC1	; 193
     9aa:	b4 e2       	ldi	r27, 0x24	; 36
     9ac:	ed 91       	ld	r30, X+
     9ae:	fc 91       	ld	r31, X
     9b0:	30 97       	sbiw	r30, 0x00	; 0
     9b2:	09 f4       	brne	.+2      	; 0x9b6 <poll_modem+0x6f0>
     9b4:	29 c1       	rjmp	.+594    	; 0xc08 <poll_modem+0x942>
        handlers.cb_data (ticketid, path, vars, var);
     9b6:	09 2d       	mov	r16, r9
     9b8:	17 2d       	mov	r17, r7
     9ba:	26 2d       	mov	r18, r6
     9bc:	4a a9       	ldd	r20, Y+50	; 0x32
     9be:	5b a9       	ldd	r21, Y+51	; 0x33
     9c0:	c2 01       	movw	r24, r4
     9c2:	b1 01       	movw	r22, r2
     9c4:	09 95       	icall
     9c6:	20 c1       	rjmp	.+576    	; 0xc08 <poll_modem+0x942>
                    modem.rsp.state = RSP_STATE_RSP_TIMEOUT;
                    break;
                }
            } else if (strncmp (modem.rsp.line.data, "+AWTDA: d,", 10) == 0) {
                route_incomming_data ();
            } else if (strncmp (modem.rsp.line.data, "+AWTDA: c,", 10) == 0) {
     9c8:	4a e0       	ldi	r20, 0x0A	; 10
     9ca:	50 e0       	ldi	r21, 0x00	; 0
     9cc:	60 e0       	ldi	r22, 0x00	; 0
     9ce:	71 e2       	ldi	r23, 0x21	; 33
     9d0:	85 ea       	ldi	r24, 0xA5	; 165
     9d2:	93 e2       	ldi	r25, 0x23	; 35
     9d4:	0e 94 cf 36 	call	0x6d9e	; 0x6d9e <strncmp>
     9d8:	28 2f       	mov	r18, r24
     9da:	39 2f       	mov	r19, r25
     9dc:	23 2b       	or	r18, r19
     9de:	09 f0       	breq	.+2      	; 0x9e2 <poll_modem+0x71c>
     9e0:	13 c1       	rjmp	.+550    	; 0xc08 <poll_modem+0x942>
    char* pstr = modem.rsp.line.data + 10;
    char* path;
    char* cmnd;
    awt_param_t param[5];
    uint8_t params;
    while (isdigit (*pstr)) {
     9e2:	f5 01       	movw	r30, r10
     9e4:	83 85       	ldd	r24, Z+11	; 0x0b
     9e6:	28 2f       	mov	r18, r24
     9e8:	33 27       	eor	r19, r19
     9ea:	27 fd       	sbrc	r18, 7
     9ec:	30 95       	com	r19
     9ee:	20 53       	subi	r18, 0x30	; 48
     9f0:	31 09       	sbc	r19, r1
     9f2:	2a 30       	cpi	r18, 0x0A	; 10
     9f4:	31 05       	cpc	r19, r1
     9f6:	98 f5       	brcc	.+102    	; 0xa5e <poll_modem+0x798>
     9f8:	e0 eb       	ldi	r30, 0xB0	; 176
     9fa:	f3 e2       	ldi	r31, 0x23	; 35
     9fc:	21 2c       	mov	r2, r1
     9fe:	31 2c       	mov	r3, r1
     a00:	21 01       	movw	r4, r2
        ticketid *= 10;
     a02:	92 01       	movw	r18, r4
     a04:	81 01       	movw	r16, r2
     a06:	00 0f       	add	r16, r16
     a08:	11 1f       	adc	r17, r17
     a0a:	22 1f       	adc	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	b9 01       	movw	r22, r18
     a10:	a8 01       	movw	r20, r16
     a12:	44 0f       	add	r20, r20
     a14:	55 1f       	adc	r21, r21
     a16:	66 1f       	adc	r22, r22
     a18:	77 1f       	adc	r23, r23
     a1a:	44 0f       	add	r20, r20
     a1c:	55 1f       	adc	r21, r21
     a1e:	66 1f       	adc	r22, r22
     a20:	77 1f       	adc	r23, r23
     a22:	40 0f       	add	r20, r16
     a24:	51 1f       	adc	r21, r17
     a26:	62 1f       	adc	r22, r18
     a28:	73 1f       	adc	r23, r19
        ticketid += (*pstr - '0');
     a2a:	99 27       	eor	r25, r25
     a2c:	87 fd       	sbrc	r24, 7
     a2e:	90 95       	com	r25
     a30:	c0 97       	sbiw	r24, 0x30	; 48
     a32:	aa 27       	eor	r26, r26
     a34:	97 fd       	sbrc	r25, 7
     a36:	a0 95       	com	r26
     a38:	ba 2f       	mov	r27, r26
     a3a:	1c 01       	movw	r2, r24
     a3c:	2d 01       	movw	r4, r26
     a3e:	24 0e       	add	r2, r20
     a40:	35 1e       	adc	r3, r21
     a42:	46 1e       	adc	r4, r22
     a44:	57 1e       	adc	r5, r23
        pstr++;
     a46:	df 01       	movw	r26, r30
    char* pstr = modem.rsp.line.data + 10;
    char* path;
    char* cmnd;
    awt_param_t param[5];
    uint8_t params;
    while (isdigit (*pstr)) {
     a48:	81 91       	ld	r24, Z+
     a4a:	28 2f       	mov	r18, r24
     a4c:	33 27       	eor	r19, r19
     a4e:	27 fd       	sbrc	r18, 7
     a50:	30 95       	com	r19
     a52:	20 53       	subi	r18, 0x30	; 48
     a54:	31 09       	sbc	r19, r1
     a56:	2a 30       	cpi	r18, 0x0A	; 10
     a58:	31 05       	cpc	r19, r1
     a5a:	98 f2       	brcs	.-90     	; 0xa02 <poll_modem+0x73c>
     a5c:	05 c0       	rjmp	.+10     	; 0xa68 <poll_modem+0x7a2>
     a5e:	af ea       	ldi	r26, 0xAF	; 175
     a60:	b3 e2       	ldi	r27, 0x23	; 35
     a62:	21 2c       	mov	r2, r1
     a64:	31 2c       	mov	r3, r1
     a66:	21 01       	movw	r4, r2
        ticketid *= 10;
        ticketid += (*pstr - '0');
        pstr++;
    }
    pstr++;
     a68:	cd 01       	movw	r24, r26
     a6a:	01 96       	adiw	r24, 0x01	; 1
     a6c:	8a ab       	std	Y+50, r24	; 0x32
     a6e:	9b ab       	std	Y+51, r25	; 0x33
    path = pstr;
    while (*pstr != ',') {
     a70:	11 96       	adiw	r26, 0x01	; 1
     a72:	8c 91       	ld	r24, X
     a74:	11 97       	sbiw	r26, 0x01	; 1
     a76:	8c 32       	cpi	r24, 0x2C	; 44
     a78:	39 f0       	breq	.+14     	; 0xa88 <poll_modem+0x7c2>
}

//+AWTDA: c,992938,GML-001,set_rom_id,STR,FFFFFFFFFFFFFFFF,STR,FFFFFFFFFFFFFFFF,STR,FFFFFFFFFFFFFFFF,CRC6C


static void poll_modem (void)
     a7a:	12 96       	adiw	r26, 0x02	; 2
        pstr++;
    }
    pstr++;
    path = pstr;
    while (*pstr != ',') {
        pstr++;
     a7c:	fd 01       	movw	r30, r26
     a7e:	11 96       	adiw	r26, 0x01	; 1
        ticketid += (*pstr - '0');
        pstr++;
    }
    pstr++;
    path = pstr;
    while (*pstr != ',') {
     a80:	80 81       	ld	r24, Z
     a82:	8c 32       	cpi	r24, 0x2C	; 44
     a84:	d9 f7       	brne	.-10     	; 0xa7c <poll_modem+0x7b6>
     a86:	02 c0       	rjmp	.+4      	; 0xa8c <poll_modem+0x7c6>
    while (isdigit (*pstr)) {
        ticketid *= 10;
        ticketid += (*pstr - '0');
        pstr++;
    }
    pstr++;
     a88:	ea a9       	ldd	r30, Y+50	; 0x32
     a8a:	fb a9       	ldd	r31, Y+51	; 0x33
    path = pstr;
    while (*pstr != ',') {
        pstr++;
    }
    *pstr++ = '\x00';
     a8c:	df 01       	movw	r26, r30
     a8e:	1d 92       	st	X+, r1
     a90:	a8 ab       	std	Y+48, r26	; 0x30
     a92:	b9 ab       	std	Y+49, r27	; 0x31

    cmnd = pstr;
    while (*pstr != ',') {
     a94:	81 81       	ldd	r24, Z+1	; 0x01
     a96:	8c 32       	cpi	r24, 0x2C	; 44
     a98:	39 f0       	breq	.+14     	; 0xaa8 <poll_modem+0x7e2>
}

//+AWTDA: c,992938,GML-001,set_rom_id,STR,FFFFFFFFFFFFFFFF,STR,FFFFFFFFFFFFFFFF,STR,FFFFFFFFFFFFFFFF,CRC6C


static void poll_modem (void)
     a9a:	32 96       	adiw	r30, 0x02	; 2
    }
    *pstr++ = '\x00';

    cmnd = pstr;
    while (*pstr != ',') {
        pstr++;
     a9c:	df 01       	movw	r26, r30
     a9e:	31 96       	adiw	r30, 0x01	; 1
        pstr++;
    }
    *pstr++ = '\x00';

    cmnd = pstr;
    while (*pstr != ',') {
     aa0:	8c 91       	ld	r24, X
     aa2:	8c 32       	cpi	r24, 0x2C	; 44
     aa4:	d9 f7       	brne	.-10     	; 0xa9c <poll_modem+0x7d6>
     aa6:	02 c0       	rjmp	.+4      	; 0xaac <poll_modem+0x7e6>
    pstr++;
    path = pstr;
    while (*pstr != ',') {
        pstr++;
    }
    *pstr++ = '\x00';
     aa8:	a8 a9       	ldd	r26, Y+48	; 0x30
     aaa:	b9 a9       	ldd	r27, Y+49	; 0x31

    cmnd = pstr;
    while (*pstr != ',') {
        pstr++;
    }
    *pstr++ = '\x00';
     aac:	fd 01       	movw	r30, r26
     aae:	11 92       	st	Z+, r1
     ab0:	8f 01       	movw	r16, r30


    params = 0;
     ab2:	61 2c       	mov	r6, r1
     ab4:	ab a6       	std	Y+43, r10	; 0x2b
     ab6:	bc a6       	std	Y+44, r11	; 0x2c
     ab8:	cd a6       	std	Y+45, r12	; 0x2d
     aba:	de a6       	std	Y+46, r13	; 0x2e
     abc:	d6 2c       	mov	r13, r6
     abe:	b9 2c       	mov	r11, r9
     ac0:	7f a6       	std	Y+47, r7	; 0x2f
     ac2:	01 c0       	rjmp	.+2      	; 0xac6 <poll_modem+0x800>
    while ((pstr = parse_param (pstr, &param[params])) != NULL) {
        params++;
     ac4:	d3 94       	inc	r13
    }
    *pstr++ = '\x00';


    params = 0;
    while ((pstr = parse_param (pstr, &param[params])) != NULL) {
     ac6:	8d 2d       	mov	r24, r13
     ac8:	90 e0       	ldi	r25, 0x00	; 0
     aca:	9c 01       	movw	r18, r24
     acc:	22 0f       	add	r18, r18
     ace:	33 1f       	adc	r19, r19
     ad0:	82 0f       	add	r24, r18
     ad2:	93 1f       	adc	r25, r19
     ad4:	3c 01       	movw	r6, r24
     ad6:	66 0c       	add	r6, r6
     ad8:	77 1c       	adc	r7, r7
     ada:	89 a5       	ldd	r24, Y+41	; 0x29
     adc:	9a a5       	ldd	r25, Y+42	; 0x2a
     ade:	68 0e       	add	r6, r24
     ae0:	79 1e       	adc	r7, r25
{
    char* ptype;
    ptype = pstr;

    // skip the type
    while (*pstr != '\x00' && *pstr != ',') {
     ae2:	d8 01       	movw	r26, r16
     ae4:	8c 91       	ld	r24, X
     ae6:	88 23       	and	r24, r24
     ae8:	09 f4       	brne	.+2      	; 0xaec <poll_modem+0x826>
     aea:	67 c0       	rjmp	.+206    	; 0xbba <poll_modem+0x8f4>
     aec:	8c 32       	cpi	r24, 0x2C	; 44
     aee:	09 f4       	brne	.+2      	; 0xaf2 <poll_modem+0x82c>
     af0:	b0 c0       	rjmp	.+352    	; 0xc52 <poll_modem+0x98c>
}

//+AWTDA: c,992938,GML-001,set_rom_id,STR,FFFFFFFFFFFFFFFF,STR,FFFFFFFFFFFFFFFF,STR,FFFFFFFFFFFFFFFF,CRC6C


static void poll_modem (void)
     af2:	f8 01       	movw	r30, r16
     af4:	31 96       	adiw	r30, 0x01	; 1
    char* ptype;
    ptype = pstr;

    // skip the type
    while (*pstr != '\x00' && *pstr != ',') {
        pstr++;
     af6:	4f 01       	movw	r8, r30
{
    char* ptype;
    ptype = pstr;

    // skip the type
    while (*pstr != '\x00' && *pstr != ',') {
     af8:	81 91       	ld	r24, Z+
     afa:	88 23       	and	r24, r24
     afc:	09 f4       	brne	.+2      	; 0xb00 <poll_modem+0x83a>
     afe:	65 c0       	rjmp	.+202    	; 0xbca <poll_modem+0x904>
     b00:	8c 32       	cpi	r24, 0x2C	; 44
     b02:	c9 f7       	brne	.-14     	; 0xaf6 <poll_modem+0x830>
     b04:	a7 c0       	rjmp	.+334    	; 0xc54 <poll_modem+0x98e>
    if (*pstr == '\x00') {
        return NULL;
    }


    if (strcmp (ptype, "INT32") == 0) {
     b06:	6b e0       	ldi	r22, 0x0B	; 11
     b08:	71 e2       	ldi	r23, 0x21	; 33
     b0a:	c8 01       	movw	r24, r16
     b0c:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <strcmp>
     b10:	28 2f       	mov	r18, r24
     b12:	39 2f       	mov	r19, r25
     b14:	23 2b       	or	r18, r19
     b16:	71 f4       	brne	.+28     	; 0xb34 <poll_modem+0x86e>
        param->type = AWT_INT32;
     b18:	f3 01       	movw	r30, r6
     b1a:	10 82       	st	Z, r1
     b1c:	11 82       	std	Z+1, r1	; 0x01
        param->val.i = atol (pstr);
     b1e:	c7 01       	movw	r24, r14
     b20:	0e 94 7b 36 	call	0x6cf6	; 0x6cf6 <atol>
     b24:	d3 01       	movw	r26, r6
     b26:	12 96       	adiw	r26, 0x02	; 2
     b28:	6d 93       	st	X+, r22
     b2a:	7d 93       	st	X+, r23
     b2c:	8d 93       	st	X+, r24
     b2e:	9c 93       	st	X, r25
     b30:	15 97       	sbiw	r26, 0x05	; 5
     b32:	26 c0       	rjmp	.+76     	; 0xb80 <poll_modem+0x8ba>
    } else if (strcmp (ptype, "BOOL") == 0) {
     b34:	67 ef       	ldi	r22, 0xF7	; 247
     b36:	70 e2       	ldi	r23, 0x20	; 32
     b38:	c8 01       	movw	r24, r16
     b3a:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <strcmp>
     b3e:	28 2f       	mov	r18, r24
     b40:	39 2f       	mov	r19, r25
     b42:	23 2b       	or	r18, r19
     b44:	69 f4       	brne	.+26     	; 0xb60 <poll_modem+0x89a>
        param->type = AWT_BOOL;
     b46:	82 e0       	ldi	r24, 0x02	; 2
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	f3 01       	movw	r30, r6
     b4c:	80 83       	st	Z, r24
     b4e:	91 83       	std	Z+1, r25	; 0x01
        param->val.b = (*pstr == 'T');
     b50:	81 e0       	ldi	r24, 0x01	; 1
     b52:	94 e5       	ldi	r25, 0x54	; 84
     b54:	c9 12       	cpse	r12, r25
     b56:	80 e0       	ldi	r24, 0x00	; 0
     b58:	d3 01       	movw	r26, r6
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8c 93       	st	X, r24
     b5e:	10 c0       	rjmp	.+32     	; 0xb80 <poll_modem+0x8ba>
    } else if (strcmp (ptype, "STR") == 0) {
     b60:	6c ef       	ldi	r22, 0xFC	; 252
     b62:	70 e2       	ldi	r23, 0x20	; 32
     b64:	c8 01       	movw	r24, r16
     b66:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <strcmp>
     b6a:	28 2f       	mov	r18, r24
     b6c:	39 2f       	mov	r19, r25
     b6e:	23 2b       	or	r18, r19
     b70:	a1 f5       	brne	.+104    	; 0xbda <poll_modem+0x914>
        param->type = AWT_STR;
     b72:	81 e0       	ldi	r24, 0x01	; 1
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	f3 01       	movw	r30, r6
     b78:	80 83       	st	Z, r24
     b7a:	91 83       	std	Z+1, r25	; 0x01
        param->val.s = pstr;
     b7c:	e2 82       	std	Z+2, r14	; 0x02
     b7e:	f3 82       	std	Z+3, r15	; 0x03
    } else {
        return NULL;
    }
    while (*pstr != '\x00' && *pstr != ',') {
     b80:	d4 01       	movw	r26, r8
     b82:	11 96       	adiw	r26, 0x01	; 1
     b84:	8c 91       	ld	r24, X
     b86:	88 23       	and	r24, r24
     b88:	51 f0       	breq	.+20     	; 0xb9e <poll_modem+0x8d8>
     b8a:	8c 32       	cpi	r24, 0x2C	; 44
     b8c:	41 f0       	breq	.+16     	; 0xb9e <poll_modem+0x8d8>
}

//+AWTDA: c,992938,GML-001,set_rom_id,STR,FFFFFFFFFFFFFFFF,STR,FFFFFFFFFFFFFFFF,STR,FFFFFFFFFFFFFFFF,CRC6C


static void poll_modem (void)
     b8e:	f4 01       	movw	r30, r8
     b90:	32 96       	adiw	r30, 0x02	; 2
        param->val.s = pstr;
    } else {
        return NULL;
    }
    while (*pstr != '\x00' && *pstr != ',') {
        pstr++;
     b92:	7f 01       	movw	r14, r30
        param->type = AWT_STR;
        param->val.s = pstr;
    } else {
        return NULL;
    }
    while (*pstr != '\x00' && *pstr != ',') {
     b94:	81 91       	ld	r24, Z+
     b96:	88 23       	and	r24, r24
     b98:	11 f0       	breq	.+4      	; 0xb9e <poll_modem+0x8d8>
     b9a:	8c 32       	cpi	r24, 0x2C	; 44
     b9c:	d1 f7       	brne	.-12     	; 0xb92 <poll_modem+0x8cc>
        pstr++;
    }
    *pstr++ = '\x00';
     b9e:	f7 01       	movw	r30, r14
     ba0:	11 92       	st	Z+, r1
     ba2:	8f 01       	movw	r16, r30
    }
    *pstr++ = '\x00';


    params = 0;
    while ((pstr = parse_param (pstr, &param[params])) != NULL) {
     ba4:	30 97       	sbiw	r30, 0x00	; 0
     ba6:	09 f0       	breq	.+2      	; 0xbaa <poll_modem+0x8e4>
     ba8:	8d cf       	rjmp	.-230    	; 0xac4 <poll_modem+0x7fe>
     baa:	6d 2c       	mov	r6, r13
     bac:	cd a4       	ldd	r12, Y+45	; 0x2d
     bae:	de a4       	ldd	r13, Y+46	; 0x2e
     bb0:	9b 2c       	mov	r9, r11
     bb2:	ab a4       	ldd	r10, Y+43	; 0x2b
     bb4:	bc a4       	ldd	r11, Y+44	; 0x2c
     bb6:	7f a4       	ldd	r7, Y+47	; 0x2f
     bb8:	17 c0       	rjmp	.+46     	; 0xbe8 <poll_modem+0x922>
     bba:	6d 2c       	mov	r6, r13
     bbc:	cd a4       	ldd	r12, Y+45	; 0x2d
     bbe:	de a4       	ldd	r13, Y+46	; 0x2e
     bc0:	9b 2c       	mov	r9, r11
     bc2:	ab a4       	ldd	r10, Y+43	; 0x2b
     bc4:	bc a4       	ldd	r11, Y+44	; 0x2c
     bc6:	7f a4       	ldd	r7, Y+47	; 0x2f
     bc8:	0f c0       	rjmp	.+30     	; 0xbe8 <poll_modem+0x922>
     bca:	6d 2c       	mov	r6, r13
     bcc:	cd a4       	ldd	r12, Y+45	; 0x2d
     bce:	de a4       	ldd	r13, Y+46	; 0x2e
     bd0:	9b 2c       	mov	r9, r11
     bd2:	ab a4       	ldd	r10, Y+43	; 0x2b
     bd4:	bc a4       	ldd	r11, Y+44	; 0x2c
     bd6:	7f a4       	ldd	r7, Y+47	; 0x2f
     bd8:	07 c0       	rjmp	.+14     	; 0xbe8 <poll_modem+0x922>
     bda:	6d 2c       	mov	r6, r13
     bdc:	cd a4       	ldd	r12, Y+45	; 0x2d
     bde:	de a4       	ldd	r13, Y+46	; 0x2e
     be0:	9b 2c       	mov	r9, r11
     be2:	ab a4       	ldd	r10, Y+43	; 0x2b
     be4:	bc a4       	ldd	r11, Y+44	; 0x2c
     be6:	7f a4       	ldd	r7, Y+47	; 0x2f
        params++;
    }
    if (handlers.cb_cmnd != NULL) {
     be8:	af eb       	ldi	r26, 0xBF	; 191
     bea:	b4 e2       	ldi	r27, 0x24	; 36
     bec:	ed 91       	ld	r30, X+
     bee:	fc 91       	ld	r31, X
     bf0:	30 97       	sbiw	r30, 0x00	; 0
     bf2:	51 f0       	breq	.+20     	; 0xc08 <poll_modem+0x942>
        handlers.cb_cmnd (ticketid, path, cmnd, params, param);
     bf4:	e9 2c       	mov	r14, r9
     bf6:	f7 2c       	mov	r15, r7
     bf8:	06 2d       	mov	r16, r6
     bfa:	28 a9       	ldd	r18, Y+48	; 0x30
     bfc:	39 a9       	ldd	r19, Y+49	; 0x31
     bfe:	4a a9       	ldd	r20, Y+50	; 0x32
     c00:	5b a9       	ldd	r21, Y+51	; 0x33
     c02:	c2 01       	movw	r24, r4
     c04:	b1 01       	movw	r22, r2
     c06:	09 95       	icall

static void poll_modem (void)
{
    int16_t ch;

    while ((ch = MODEM_get_byte ()) >= 0) {
     c08:	0e 94 7f 13 	call	0x26fe	; 0x26fe <MODEM_get_byte>
     c0c:	99 23       	and	r25, r25
     c0e:	0c f0       	brlt	.+2      	; 0xc12 <poll_modem+0x94c>
     c10:	88 cb       	rjmp	.-2288   	; 0x322 <poll_modem+0x5c>
     c12:	2f c0       	rjmp	.+94     	; 0xc72 <poll_modem+0x9ac>

static char* parse_var (char* pstr, awt_var_t* var)
{
    char* ptype;
    var->name = pstr;
    while (*pstr != '\x00' && *pstr != ',') {
     c14:	ee a9       	ldd	r30, Y+54	; 0x36
     c16:	ff a9       	ldd	r31, Y+55	; 0x37
        pstr++;
    }
    if (*pstr == '\x00') {
        return NULL;
    }
    *pstr++ = '\x00';
     c18:	df 01       	movw	r26, r30
     c1a:	1d 92       	st	X+, r1
     c1c:	7d 01       	movw	r14, r26
    ptype = pstr;
    while (*pstr != '\x00' && *pstr != ',') {
     c1e:	81 81       	ldd	r24, Z+1	; 0x01
     c20:	81 11       	cpse	r24, r1
     c22:	3c ce       	rjmp	.-904    	; 0x89c <poll_modem+0x5d6>
     c24:	6d 2c       	mov	r6, r13
     c26:	cd a4       	ldd	r12, Y+45	; 0x2d
     c28:	de a4       	ldd	r13, Y+46	; 0x2e
     c2a:	9b 2c       	mov	r9, r11
     c2c:	ab a4       	ldd	r10, Y+43	; 0x2b
     c2e:	bc a4       	ldd	r11, Y+44	; 0x2c
     c30:	7f a4       	ldd	r7, Y+47	; 0x2f
     c32:	b7 ce       	rjmp	.-658    	; 0x9a2 <poll_modem+0x6dc>
        pstr++;
    }
    if (*pstr == '\x00') {
        return NULL;
    }
    *pstr++ = '\x00';
     c34:	87 01       	movw	r16, r14
        pstr++;
    }
    if (*pstr == '\x00') {
        return NULL;
    }
    *pstr++ = '\x00';
     c36:	f8 01       	movw	r30, r16
     c38:	11 92       	st	Z+, r1
     c3a:	4f 01       	movw	r8, r30
    if (strcmp (ptype, "INT32") == 0) {
     c3c:	6b e0       	ldi	r22, 0x0B	; 11
     c3e:	71 e2       	ldi	r23, 0x21	; 33
     c40:	c7 01       	movw	r24, r14
     c42:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <strcmp>
     c46:	28 2f       	mov	r18, r24
     c48:	39 2f       	mov	r19, r25
     c4a:	23 2b       	or	r18, r19
     c4c:	09 f4       	brne	.+2      	; 0xc50 <poll_modem+0x98a>
     c4e:	32 ce       	rjmp	.-924    	; 0x8b4 <poll_modem+0x5ee>
     c50:	3f ce       	rjmp	.-898    	; 0x8d0 <poll_modem+0x60a>
{
    char* ptype;
    ptype = pstr;

    // skip the type
    while (*pstr != '\x00' && *pstr != ',') {
     c52:	48 01       	movw	r8, r16
    if (*pstr == '\x00') {
        return NULL;
    }

    // set ',' to '\x00'
    *pstr++ = '\x00';
     c54:	d4 01       	movw	r26, r8
     c56:	1d 92       	st	X+, r1
     c58:	7d 01       	movw	r14, r26
    if (*pstr == '\x00') {
     c5a:	f4 01       	movw	r30, r8
     c5c:	c1 80       	ldd	r12, Z+1	; 0x01
     c5e:	c1 10       	cpse	r12, r1
     c60:	52 cf       	rjmp	.-348    	; 0xb06 <poll_modem+0x840>
     c62:	6d 2c       	mov	r6, r13
     c64:	cd a4       	ldd	r12, Y+45	; 0x2d
     c66:	de a4       	ldd	r13, Y+46	; 0x2e
     c68:	9b 2c       	mov	r9, r11
     c6a:	ab a4       	ldd	r10, Y+43	; 0x2b
     c6c:	bc a4       	ldd	r11, Y+44	; 0x2c
     c6e:	7f a4       	ldd	r7, Y+47	; 0x2f
     c70:	bb cf       	rjmp	.-138    	; 0xbe8 <poll_modem+0x922>
            } else if (strncmp (modem.rsp.line.data, "+AWTDA: c,", 10) == 0) {
                route_incomming_command ();
            }
        }
    }
}
     c72:	e7 96       	adiw	r28, 0x37	; 55
     c74:	cd bf       	out	0x3d, r28	; 61
     c76:	de bf       	out	0x3e, r29	; 62
     c78:	df 91       	pop	r29
     c7a:	cf 91       	pop	r28
     c7c:	1f 91       	pop	r17
     c7e:	0f 91       	pop	r16
     c80:	ff 90       	pop	r15
     c82:	ef 90       	pop	r14
     c84:	df 90       	pop	r13
     c86:	cf 90       	pop	r12
     c88:	bf 90       	pop	r11
     c8a:	af 90       	pop	r10
     c8c:	9f 90       	pop	r9
     c8e:	8f 90       	pop	r8
     c90:	7f 90       	pop	r7
     c92:	6f 90       	pop	r6
     c94:	5f 90       	pop	r5
     c96:	4f 90       	pop	r4
     c98:	3f 90       	pop	r3
     c9a:	2f 90       	pop	r2
     c9c:	08 95       	ret

00000c9e <blocked_poll_response>:


static void blocked_poll_response (void (*update_asset_state) (void), uint16_t timeout_S)
{
     c9e:	0f 93       	push	r16
     ca0:	1f 93       	push	r17
     ca2:	cf 93       	push	r28
     ca4:	df 93       	push	r29
     ca6:	ec 01       	movw	r28, r24
    timeout_start_singleshot (TIMEOUT_AWT_AT_RSP, timeout_S * TIMEOUT_TICK_HZ);
     ca8:	66 0f       	add	r22, r22
     caa:	77 1f       	adc	r23, r23
     cac:	66 0f       	add	r22, r22
     cae:	77 1f       	adc	r23, r23
     cb0:	66 0f       	add	r22, r22
     cb2:	77 1f       	adc	r23, r23
     cb4:	83 e0       	ldi	r24, 0x03	; 3
     cb6:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <timeout_start_singleshot>
    while (modem.rsp.state == RSP_STATE_REQ_BUSY) {
     cba:	05 ea       	ldi	r16, 0xA5	; 165
     cbc:	14 e2       	ldi	r17, 0x24	; 36
     cbe:	11 c0       	rjmp	.+34     	; 0xce2 <blocked_poll_response+0x44>
        if (timeout_test_and_clear_expired (TIMEOUT_AWT_AT_RSP)) {
     cc0:	83 e0       	ldi	r24, 0x03	; 3
     cc2:	0e 94 78 1f 	call	0x3ef0	; 0x3ef0 <timeout_test_and_clear_expired>
     cc6:	88 23       	and	r24, r24
     cc8:	39 f0       	breq	.+14     	; 0xcd8 <blocked_poll_response+0x3a>
            modem.rsp.state = RSP_STATE_RSP_TIMEOUT;
     cca:	85 e0       	ldi	r24, 0x05	; 5
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	80 93 a5 24 	sts	0x24A5, r24
     cd2:	90 93 a6 24 	sts	0x24A6, r25
            break;
     cd6:	0b c0       	rjmp	.+22     	; 0xcee <blocked_poll_response+0x50>
        }
        poll_modem ();
     cd8:	f6 da       	rcall	.-2580   	; 0x2c6 <poll_modem>
        if (update_asset_state != NULL) {
     cda:	20 97       	sbiw	r28, 0x00	; 0
     cdc:	11 f0       	breq	.+4      	; 0xce2 <blocked_poll_response+0x44>
            update_asset_state ();
     cde:	fe 01       	movw	r30, r28
     ce0:	09 95       	icall


static void blocked_poll_response (void (*update_asset_state) (void), uint16_t timeout_S)
{
    timeout_start_singleshot (TIMEOUT_AWT_AT_RSP, timeout_S * TIMEOUT_TICK_HZ);
    while (modem.rsp.state == RSP_STATE_REQ_BUSY) {
     ce2:	f8 01       	movw	r30, r16
     ce4:	20 81       	ld	r18, Z
     ce6:	31 81       	ldd	r19, Z+1	; 0x01
     ce8:	21 30       	cpi	r18, 0x01	; 1
     cea:	31 05       	cpc	r19, r1
     cec:	49 f3       	breq	.-46     	; 0xcc0 <blocked_poll_response+0x22>
        poll_modem ();
        if (update_asset_state != NULL) {
            update_asset_state ();
        }
    }
    timeout_stop (TIMEOUT_AWT_AT_RSP);
     cee:	83 e0       	ldi	r24, 0x03	; 3
     cf0:	0e 94 9d 1f 	call	0x3f3a	; 0x3f3a <timeout_stop>
}
     cf4:	df 91       	pop	r29
     cf6:	cf 91       	pop	r28
     cf8:	1f 91       	pop	r17
     cfa:	0f 91       	pop	r16
     cfc:	08 95       	ret

00000cfe <blocked_at_req>:
    return MODEM_crc_puts (crc, "\",");
}


static bool blocked_at_req (void (*update_asset_state) (void), char* req, uint16_t timeout_S)
{
     cfe:	cf 92       	push	r12
     d00:	df 92       	push	r13
     d02:	ef 92       	push	r14
     d04:	ff 92       	push	r15
     d06:	0f 93       	push	r16
     d08:	1f 93       	push	r17
     d0a:	cf 93       	push	r28
     d0c:	df 93       	push	r29
     d0e:	ec 01       	movw	r28, r24
     d10:	7b 01       	movw	r14, r22
     d12:	8a 01       	movw	r16, r20
    poll_modem ();
     d14:	d8 da       	rcall	.-2640   	; 0x2c6 <poll_modem>
    if (modem.rsp.state != RSP_STATE_IDLE) {
     d16:	20 91 a5 24 	lds	r18, 0x24A5
     d1a:	30 91 a6 24 	lds	r19, 0x24A6
     d1e:	23 2b       	or	r18, r19
     d20:	51 f5       	brne	.+84     	; 0xd76 <blocked_at_req+0x78>
        return false;
    }
    //wdt_set_timeout_period(WDT_TIMEOUT_PERIOD_8KCLK);
    //wdt_enable();
    modem.rsp.state = RSP_STATE_REQ_BUSY;
     d22:	0f 2e       	mov	r0, r31
     d24:	f5 ea       	ldi	r31, 0xA5	; 165
     d26:	cf 2e       	mov	r12, r31
     d28:	f4 e2       	ldi	r31, 0x24	; 36
     d2a:	df 2e       	mov	r13, r31
     d2c:	f0 2d       	mov	r31, r0
     d2e:	81 e0       	ldi	r24, 0x01	; 1
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	f6 01       	movw	r30, r12
     d34:	80 83       	st	Z, r24
     d36:	91 83       	std	Z+1, r25	; 0x01
    MODEM_raw_puts (req);
     d38:	c7 01       	movw	r24, r14
     d3a:	0e 94 92 13 	call	0x2724	; 0x2724 <MODEM_raw_puts>
    MODEM_raw_putb ('\r');
     d3e:	8d e0       	ldi	r24, 0x0D	; 13
     d40:	0e 94 8b 13 	call	0x2716	; 0x2716 <MODEM_raw_putb>
    //wdt_disable();
    blocked_poll_response (update_asset_state, timeout_S);
     d44:	b8 01       	movw	r22, r16
     d46:	ce 01       	movw	r24, r28
     d48:	aa df       	rcall	.-172    	; 0xc9e <blocked_poll_response>
    bool rsp = modem.rsp.state == RSP_STATE_RSP_OK;
     d4a:	81 e0       	ldi	r24, 0x01	; 1
     d4c:	f6 01       	movw	r30, r12
     d4e:	20 81       	ld	r18, Z
     d50:	31 81       	ldd	r19, Z+1	; 0x01
     d52:	23 30       	cpi	r18, 0x03	; 3
     d54:	31 05       	cpc	r19, r1
     d56:	09 f0       	breq	.+2      	; 0xd5a <blocked_at_req+0x5c>
     d58:	80 e0       	ldi	r24, 0x00	; 0
    modem.rsp.state = RSP_STATE_IDLE;
     d5a:	10 92 a5 24 	sts	0x24A5, r1
     d5e:	10 92 a6 24 	sts	0x24A6, r1
    modem.rsp.sequential_at_failures = rsp ? 0 : modem.rsp.sequential_at_failures + 1;
     d62:	81 11       	cpse	r24, r1
     d64:	04 c0       	rjmp	.+8      	; 0xd6e <blocked_at_req+0x70>
     d66:	90 91 aa 24 	lds	r25, 0x24AA
     d6a:	9f 5f       	subi	r25, 0xFF	; 255
     d6c:	01 c0       	rjmp	.+2      	; 0xd70 <blocked_at_req+0x72>
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	90 93 aa 24 	sts	0x24AA, r25
    return rsp;
     d74:	01 c0       	rjmp	.+2      	; 0xd78 <blocked_at_req+0x7a>

static bool blocked_at_req (void (*update_asset_state) (void), char* req, uint16_t timeout_S)
{
    poll_modem ();
    if (modem.rsp.state != RSP_STATE_IDLE) {
        return false;
     d76:	80 e0       	ldi	r24, 0x00	; 0
    blocked_poll_response (update_asset_state, timeout_S);
    bool rsp = modem.rsp.state == RSP_STATE_RSP_OK;
    modem.rsp.state = RSP_STATE_IDLE;
    modem.rsp.sequential_at_failures = rsp ? 0 : modem.rsp.sequential_at_failures + 1;
    return rsp;
}
     d78:	df 91       	pop	r29
     d7a:	cf 91       	pop	r28
     d7c:	1f 91       	pop	r17
     d7e:	0f 91       	pop	r16
     d80:	ff 90       	pop	r15
     d82:	ef 90       	pop	r14
     d84:	df 90       	pop	r13
     d86:	cf 90       	pop	r12
     d88:	08 95       	ret

00000d8a <blocked_sync_modem>:
    return true;
}


static bool blocked_sync_modem (void (*update_asset_state) (void))
{
     d8a:	df 92       	push	r13
     d8c:	ef 92       	push	r14
     d8e:	ff 92       	push	r15
     d90:	0f 93       	push	r16
     d92:	1f 93       	push	r17
     d94:	cf 93       	push	r28
     d96:	df 93       	push	r29
     d98:	7c 01       	movw	r14, r24
     d9a:	68 94       	set
     d9c:	dd 24       	eor	r13, r13
     d9e:	d2 f8       	bld	r13, 2
    for (uint8_t retry = 0; retry < 4; retry++) {
        modem.rsp.line.search_crlf = false;
     da0:	04 ea       	ldi	r16, 0xA4	; 164
     da2:	13 e2       	ldi	r17, 0x23	; 35
        modem.rsp.line.len = 0;
     da4:	c4 ea       	ldi	r28, 0xA4	; 164
     da6:	d4 e2       	ldi	r29, 0x24	; 36


static bool blocked_sync_modem (void (*update_asset_state) (void))
{
    for (uint8_t retry = 0; retry < 4; retry++) {
        modem.rsp.line.search_crlf = false;
     da8:	f8 01       	movw	r30, r16
     daa:	10 82       	st	Z, r1
        modem.rsp.line.len = 0;
     dac:	18 82       	st	Y, r1
        poll_modem ();
     dae:	8b da       	rcall	.-2794   	; 0x2c6 <poll_modem>
        if (blocked_at_req (update_asset_state, "AT", 1)) {
     db0:	41 e0       	ldi	r20, 0x01	; 1
     db2:	50 e0       	ldi	r21, 0x00	; 0
     db4:	63 e5       	ldi	r22, 0x53	; 83
     db6:	70 e2       	ldi	r23, 0x20	; 32
     db8:	c7 01       	movw	r24, r14
     dba:	a1 df       	rcall	.-190    	; 0xcfe <blocked_at_req>
     dbc:	81 11       	cpse	r24, r1
     dbe:	03 c0       	rjmp	.+6      	; 0xdc6 <blocked_sync_modem+0x3c>
     dc0:	da 94       	dec	r13
}


static bool blocked_sync_modem (void (*update_asset_state) (void))
{
    for (uint8_t retry = 0; retry < 4; retry++) {
     dc2:	91 f7       	brne	.-28     	; 0xda8 <blocked_sync_modem+0x1e>
     dc4:	01 c0       	rjmp	.+2      	; 0xdc8 <blocked_sync_modem+0x3e>
        modem.rsp.line.search_crlf = false;
        modem.rsp.line.len = 0;
        poll_modem ();
        if (blocked_at_req (update_asset_state, "AT", 1)) {
            return true;
     dc6:	81 e0       	ldi	r24, 0x01	; 1
        }
    }
    return false;
}
     dc8:	df 91       	pop	r29
     dca:	cf 91       	pop	r28
     dcc:	1f 91       	pop	r17
     dce:	0f 91       	pop	r16
     dd0:	ff 90       	pop	r15
     dd2:	ef 90       	pop	r14
     dd4:	df 90       	pop	r13
     dd6:	08 95       	ret

00000dd8 <put_path>:
    timeout_stop (TIMEOUT_AWT_AT_RSP);
}


static uint8_t put_path (uint8_t crc, const char* path)
{
     dd8:	cf 93       	push	r28
     dda:	df 93       	push	r29
     ddc:	eb 01       	movw	r28, r22
    crc = MODEM_crc_puts (crc, ",\"");
     dde:	61 e1       	ldi	r22, 0x11	; 17
     de0:	71 e2       	ldi	r23, 0x21	; 33
     de2:	0e 94 ab 13 	call	0x2756	; 0x2756 <MODEM_crc_puts>
    crc = MODEM_crc_puts (crc, path);
     de6:	be 01       	movw	r22, r28
     de8:	0e 94 ab 13 	call	0x2756	; 0x2756 <MODEM_crc_puts>
    return MODEM_crc_puts (crc, "\",");
     dec:	64 e1       	ldi	r22, 0x14	; 20
     dee:	71 e2       	ldi	r23, 0x21	; 33
     df0:	0e 94 ab 13 	call	0x2756	; 0x2756 <MODEM_crc_puts>
}
     df4:	df 91       	pop	r29
     df6:	cf 91       	pop	r28
     df8:	08 95       	ret

00000dfa <awt_dispatch_event_req>:
    return rsp;
}


bool awt_dispatch_event_req (awt_req_result_handler_t handler, char* path, awt_event_t* event)
{
     dfa:	bf 92       	push	r11
     dfc:	cf 92       	push	r12
     dfe:	df 92       	push	r13
     e00:	ef 92       	push	r14
     e02:	ff 92       	push	r15
     e04:	0f 93       	push	r16
     e06:	1f 93       	push	r17
     e08:	cf 93       	push	r28
     e0a:	df 93       	push	r29
     e0c:	cd b7       	in	r28, 0x3d	; 61
     e0e:	de b7       	in	r29, 0x3e	; 62
     e10:	60 97       	sbiw	r28, 0x10	; 16
     e12:	cd bf       	out	0x3d, r28	; 61
     e14:	de bf       	out	0x3e, r29	; 62
     e16:	7c 01       	movw	r14, r24
     e18:	6b 01       	movw	r12, r22
     e1a:	8a 01       	movw	r16, r20
    char tmp[16];
    uint8_t crc;

    poll_modem ();
     e1c:	54 da       	rcall	.-2904   	; 0x2c6 <poll_modem>
    if (modem.rsp.state != RSP_STATE_IDLE) {
     e1e:	80 91 a5 24 	lds	r24, 0x24A5
     e22:	90 91 a6 24 	lds	r25, 0x24A6
     e26:	89 2b       	or	r24, r25
     e28:	09 f0       	breq	.+2      	; 0xe2c <awt_dispatch_event_req+0x32>
     e2a:	66 c0       	rjmp	.+204    	; 0xef8 <awt_dispatch_event_req+0xfe>
        return false;
    }

    modem.rsp.state = RSP_STATE_REQ_BUSY;
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	80 93 a5 24 	sts	0x24A5, r24
     e34:	90 93 a6 24 	sts	0x24A6, r25
    //wdt_set_timeout_period(WDT_TIMEOUT_PERIOD_8KCLK);
    //wdt_enable();
    timeout_start_singleshot (TIMEOUT_AWT_AT_RSP, AWTDA_RSP_TIMEOUT_S * TIMEOUT_TICK_HZ);
     e38:	68 e6       	ldi	r22, 0x68	; 104
     e3a:	71 e0       	ldi	r23, 0x01	; 1
     e3c:	83 e0       	ldi	r24, 0x03	; 3
     e3e:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <timeout_start_singleshot>
    MODEM_raw_puts ("ATE0;+AWTDA=");
     e42:	87 e1       	ldi	r24, 0x17	; 23
     e44:	91 e2       	ldi	r25, 0x21	; 33
     e46:	0e 94 92 13 	call	0x2724	; 0x2724 <MODEM_raw_puts>
    crc = MODEM_crc_puts (0xFF, "eg,");
     e4a:	64 e2       	ldi	r22, 0x24	; 36
     e4c:	71 e2       	ldi	r23, 0x21	; 33
     e4e:	8f ef       	ldi	r24, 0xFF	; 255
     e50:	0e 94 ab 13 	call	0x2756	; 0x2756 <MODEM_crc_puts>
     e54:	b8 2e       	mov	r11, r24
    crc = MODEM_crc_puts (crc, ultoa (epoch_get (), tmp, 10));
     e56:	e3 d6       	rcall	.+3526   	; 0x1c1e <epoch_get>
     e58:	2a e0       	ldi	r18, 0x0A	; 10
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	ae 01       	movw	r20, r28
     e5e:	4f 5f       	subi	r20, 0xFF	; 255
     e60:	5f 4f       	sbci	r21, 0xFF	; 255
     e62:	0e 94 52 37 	call	0x6ea4	; 0x6ea4 <ultoa>
     e66:	bc 01       	movw	r22, r24
     e68:	8b 2d       	mov	r24, r11
     e6a:	0e 94 ab 13 	call	0x2756	; 0x2756 <MODEM_crc_puts>
    crc = put_path (crc, path);
     e6e:	b6 01       	movw	r22, r12
     e70:	b3 df       	rcall	.-154    	; 0xdd8 <put_path>
     e72:	d8 2e       	mov	r13, r24
    crc = MODEM_crc_puts (crc, itoa (event->code, tmp, 10));
     e74:	4a e0       	ldi	r20, 0x0A	; 10
     e76:	50 e0       	ldi	r21, 0x00	; 0
     e78:	be 01       	movw	r22, r28
     e7a:	6f 5f       	subi	r22, 0xFF	; 255
     e7c:	7f 4f       	sbci	r23, 0xFF	; 255
     e7e:	f8 01       	movw	r30, r16
     e80:	84 81       	ldd	r24, Z+4	; 0x04
     e82:	95 81       	ldd	r25, Z+5	; 0x05
     e84:	0e 94 ec 36 	call	0x6dd8	; 0x6dd8 <itoa>
     e88:	bc 01       	movw	r22, r24
     e8a:	8d 2d       	mov	r24, r13
     e8c:	0e 94 ab 13 	call	0x2756	; 0x2756 <MODEM_crc_puts>
     e90:	d8 2e       	mov	r13, r24
    if (event->text != NULL) {
     e92:	f8 01       	movw	r30, r16
     e94:	20 85       	ldd	r18, Z+8	; 0x08
     e96:	31 85       	ldd	r19, Z+9	; 0x09
     e98:	23 2b       	or	r18, r19
     e9a:	69 f0       	breq	.+26     	; 0xeb6 <awt_dispatch_event_req+0xbc>
        crc = MODEM_crc_puts (crc, ",\"");
     e9c:	61 e1       	ldi	r22, 0x11	; 17
     e9e:	71 e2       	ldi	r23, 0x21	; 33
     ea0:	0e 94 ab 13 	call	0x2756	; 0x2756 <MODEM_crc_puts>
        crc = MODEM_crc_puts (crc, event->text);
     ea4:	f8 01       	movw	r30, r16
     ea6:	60 85       	ldd	r22, Z+8	; 0x08
     ea8:	71 85       	ldd	r23, Z+9	; 0x09
     eaa:	0e 94 ab 13 	call	0x2756	; 0x2756 <MODEM_crc_puts>
        crc = MODEM_crc_putb (crc, '"');
     eae:	62 e2       	ldi	r22, 0x22	; 34
     eb0:	0e 94 a0 13 	call	0x2740	; 0x2740 <MODEM_crc_putb>
     eb4:	d8 2e       	mov	r13, r24
    }
    MODEM_raw_puts (",CRC");
     eb6:	88 e2       	ldi	r24, 0x28	; 40
     eb8:	91 e2       	ldi	r25, 0x21	; 33
     eba:	0e 94 92 13 	call	0x2724	; 0x2724 <MODEM_raw_puts>
    MODEM_raw_putb (ram_hex[crc / 16]);
     ebe:	ad 2d       	mov	r26, r13
     ec0:	a2 95       	swap	r26
     ec2:	af 70       	andi	r26, 0x0F	; 15
     ec4:	b0 e0       	ldi	r27, 0x00	; 0
     ec6:	a3 52       	subi	r26, 0x23	; 35
     ec8:	be 4d       	sbci	r27, 0xDE	; 222
     eca:	8c 91       	ld	r24, X
     ecc:	0e 94 8b 13 	call	0x2716	; 0x2716 <MODEM_raw_putb>
    MODEM_raw_putb (ram_hex[crc % 16]);
     ed0:	ed 2d       	mov	r30, r13
     ed2:	ef 70       	andi	r30, 0x0F	; 15
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	e3 52       	subi	r30, 0x23	; 35
     ed8:	fe 4d       	sbci	r31, 0xDE	; 222
     eda:	80 81       	ld	r24, Z
     edc:	0e 94 8b 13 	call	0x2716	; 0x2716 <MODEM_raw_putb>
    handlers.cb_req_response = handler;
     ee0:	e0 92 c3 24 	sts	0x24C3, r14
     ee4:	f0 92 c4 24 	sts	0x24C4, r15
    modem.rsp.expect_sent = true;
     ee8:	81 e0       	ldi	r24, 0x01	; 1
     eea:	80 93 a8 24 	sts	0x24A8, r24
    MODEM_raw_putb ('\r');
     eee:	8d e0       	ldi	r24, 0x0D	; 13
     ef0:	0e 94 8b 13 	call	0x2716	; 0x2716 <MODEM_raw_putb>
    //wdt_disable();
    return true;
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	01 c0       	rjmp	.+2      	; 0xefa <awt_dispatch_event_req+0x100>
    char tmp[16];
    uint8_t crc;

    poll_modem ();
    if (modem.rsp.state != RSP_STATE_IDLE) {
        return false;
     ef8:	80 e0       	ldi	r24, 0x00	; 0
    handlers.cb_req_response = handler;
    modem.rsp.expect_sent = true;
    MODEM_raw_putb ('\r');
    //wdt_disable();
    return true;
}
     efa:	60 96       	adiw	r28, 0x10	; 16
     efc:	cd bf       	out	0x3d, r28	; 61
     efe:	de bf       	out	0x3e, r29	; 62
     f00:	df 91       	pop	r29
     f02:	cf 91       	pop	r28
     f04:	1f 91       	pop	r17
     f06:	0f 91       	pop	r16
     f08:	ff 90       	pop	r15
     f0a:	ef 90       	pop	r14
     f0c:	df 90       	pop	r13
     f0e:	cf 90       	pop	r12
     f10:	bf 90       	pop	r11
     f12:	08 95       	ret

00000f14 <awt_dispatch_data_req>:


bool awt_dispatch_data_req (awt_req_result_handler_t handler, char* path, uint8_t vars, awt_var_t* var)
{
     f14:	8f 92       	push	r8
     f16:	9f 92       	push	r9
     f18:	af 92       	push	r10
     f1a:	bf 92       	push	r11
     f1c:	cf 92       	push	r12
     f1e:	df 92       	push	r13
     f20:	ef 92       	push	r14
     f22:	ff 92       	push	r15
     f24:	0f 93       	push	r16
     f26:	1f 93       	push	r17
     f28:	cf 93       	push	r28
     f2a:	df 93       	push	r29
     f2c:	cd b7       	in	r28, 0x3d	; 61
     f2e:	de b7       	in	r29, 0x3e	; 62
     f30:	60 97       	sbiw	r28, 0x10	; 16
     f32:	cd bf       	out	0x3d, r28	; 61
     f34:	de bf       	out	0x3e, r29	; 62
     f36:	7c 01       	movw	r14, r24
     f38:	8b 01       	movw	r16, r22
     f3a:	b4 2e       	mov	r11, r20
     f3c:	a2 2e       	mov	r10, r18
     f3e:	c3 2e       	mov	r12, r19
            break;
        }
        return MODEM_crc_putb (crc, '"');
    }

    poll_modem ();
     f40:	c2 d9       	rcall	.-3196   	; 0x2c6 <poll_modem>
    if (modem.rsp.state != RSP_STATE_IDLE) {
     f42:	80 91 a5 24 	lds	r24, 0x24A5
     f46:	90 91 a6 24 	lds	r25, 0x24A6
     f4a:	89 2b       	or	r24, r25
     f4c:	09 f0       	breq	.+2      	; 0xf50 <awt_dispatch_data_req+0x3c>
     f4e:	a0 c0       	rjmp	.+320    	; 0x1090 <awt_dispatch_data_req+0x17c>
        return false;
    }
    modem.rsp.state = RSP_STATE_REQ_BUSY;
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	80 93 a5 24 	sts	0x24A5, r24
     f58:	90 93 a6 24 	sts	0x24A6, r25
    //wdt_set_timeout_period(WDT_TIMEOUT_PERIOD_8KCLK);
    //wdt_enable();

    timeout_start_singleshot (TIMEOUT_AWT_AT_RSP, AWTDA_RSP_TIMEOUT_S * TIMEOUT_TICK_HZ);
     f5c:	68 e6       	ldi	r22, 0x68	; 104
     f5e:	71 e0       	ldi	r23, 0x01	; 1
     f60:	83 e0       	ldi	r24, 0x03	; 3
     f62:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <timeout_start_singleshot>
    MODEM_raw_puts ("ATE0;+AWTDA=");
     f66:	87 e1       	ldi	r24, 0x17	; 23
     f68:	91 e2       	ldi	r25, 0x21	; 33
     f6a:	0e 94 92 13 	call	0x2724	; 0x2724 <MODEM_raw_puts>
    crc = MODEM_crc_putb (0xFF, 'd');
     f6e:	64 e6       	ldi	r22, 0x64	; 100
     f70:	8f ef       	ldi	r24, 0xFF	; 255
     f72:	0e 94 a0 13 	call	0x2740	; 0x2740 <MODEM_crc_putb>
    crc = MODEM_crc_putb (crc, 'c');
     f76:	63 e6       	ldi	r22, 0x63	; 99
     f78:	0e 94 a0 13 	call	0x2740	; 0x2740 <MODEM_crc_putb>
    crc = put_path (crc, path);
     f7c:	b8 01       	movw	r22, r16
     f7e:	2c df       	rcall	.-424    	; 0xdd8 <put_path>
     f80:	18 2f       	mov	r17, r24
    crc = MODEM_crc_puts (crc, utoa (vars, tmp, 10));
     f82:	4a e0       	ldi	r20, 0x0A	; 10
     f84:	50 e0       	ldi	r21, 0x00	; 0
     f86:	be 01       	movw	r22, r28
     f88:	6f 5f       	subi	r22, 0xFF	; 255
     f8a:	7f 4f       	sbci	r23, 0xFF	; 255
     f8c:	8b 2d       	mov	r24, r11
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	0e 94 75 37 	call	0x6eea	; 0x6eea <utoa>
     f94:	bc 01       	movw	r22, r24
     f96:	81 2f       	mov	r24, r17
     f98:	0e 94 ab 13 	call	0x2756	; 0x2756 <MODEM_crc_puts>
     f9c:	d8 2e       	mov	r13, r24
    while (vars--) {
     f9e:	bb 20       	and	r11, r11
     fa0:	09 f4       	brne	.+2      	; 0xfa4 <awt_dispatch_data_req+0x90>
     fa2:	55 c0       	rjmp	.+170    	; 0x104e <awt_dispatch_data_req+0x13a>
     fa4:	0a 2d       	mov	r16, r10
     fa6:	1c 2d       	mov	r17, r12
            crc = MODEM_crc_puts (crc, ",STR,");
            crc = MODEM_crc_puts (crc, var->val.s);
            break;
        case AWT_BOOL :
            crc = MODEM_crc_puts (crc, ",BOOL,");
            crc = MODEM_crc_putb (crc, var->val.b ? 'T' : 'F');
     fa8:	0f 2e       	mov	r0, r31
     faa:	f6 e4       	ldi	r31, 0x46	; 70
     fac:	9f 2e       	mov	r9, r31
     fae:	f0 2d       	mov	r31, r0
     fb0:	0f 2e       	mov	r0, r31
     fb2:	f4 e5       	ldi	r31, 0x54	; 84
     fb4:	af 2e       	mov	r10, r31
     fb6:	f0 2d       	mov	r31, r0
{
    char tmp[16];
    uint8_t crc;

    uint8_t dispatch_var (uint8_t crc, awt_var_t * var) {
        crc = MODEM_crc_puts (crc, ",\"");
     fb8:	61 e1       	ldi	r22, 0x11	; 17
     fba:	71 e2       	ldi	r23, 0x21	; 33
     fbc:	8d 2d       	mov	r24, r13
     fbe:	0e 94 ab 13 	call	0x2756	; 0x2756 <MODEM_crc_puts>
        crc = MODEM_crc_puts (crc, var->name);
     fc2:	f8 01       	movw	r30, r16
     fc4:	60 81       	ld	r22, Z
     fc6:	71 81       	ldd	r23, Z+1	; 0x01
     fc8:	0e 94 ab 13 	call	0x2756	; 0x2756 <MODEM_crc_puts>
        switch (var->type) {
     fcc:	f8 01       	movw	r30, r16
     fce:	22 81       	ldd	r18, Z+2	; 0x02
     fd0:	33 81       	ldd	r19, Z+3	; 0x03
     fd2:	21 30       	cpi	r18, 0x01	; 1
     fd4:	31 05       	cpc	r19, r1
     fd6:	d9 f0       	breq	.+54     	; 0x100e <awt_dispatch_data_req+0xfa>
     fd8:	20 f0       	brcs	.+8      	; 0xfe2 <awt_dispatch_data_req+0xce>
     fda:	22 30       	cpi	r18, 0x02	; 2
     fdc:	31 05       	cpc	r19, r1
     fde:	71 f5       	brne	.+92     	; 0x103c <awt_dispatch_data_req+0x128>
     fe0:	20 c0       	rjmp	.+64     	; 0x1022 <awt_dispatch_data_req+0x10e>
        case AWT_INT32 :
            crc = MODEM_crc_puts (crc, ",INT32,");
     fe2:	6d e2       	ldi	r22, 0x2D	; 45
     fe4:	71 e2       	ldi	r23, 0x21	; 33
     fe6:	0e 94 ab 13 	call	0x2756	; 0x2756 <MODEM_crc_puts>
     fea:	88 2e       	mov	r8, r24
            crc = MODEM_crc_puts (crc, ltoa (var->val.i, tmp, 10));
     fec:	f8 01       	movw	r30, r16
     fee:	64 81       	ldd	r22, Z+4	; 0x04
     ff0:	75 81       	ldd	r23, Z+5	; 0x05
     ff2:	86 81       	ldd	r24, Z+6	; 0x06
     ff4:	97 81       	ldd	r25, Z+7	; 0x07
     ff6:	2a e0       	ldi	r18, 0x0A	; 10
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	ae 01       	movw	r20, r28
     ffc:	4f 5f       	subi	r20, 0xFF	; 255
     ffe:	5f 4f       	sbci	r21, 0xFF	; 255
    1000:	0e 94 0b 37 	call	0x6e16	; 0x6e16 <ltoa>
    1004:	bc 01       	movw	r22, r24
    1006:	88 2d       	mov	r24, r8
    1008:	0e 94 ab 13 	call	0x2756	; 0x2756 <MODEM_crc_puts>
    100c:	17 c0       	rjmp	.+46     	; 0x103c <awt_dispatch_data_req+0x128>
            break;
        case AWT_STR :
            crc = MODEM_crc_puts (crc, ",STR,");
    100e:	65 e3       	ldi	r22, 0x35	; 53
    1010:	71 e2       	ldi	r23, 0x21	; 33
    1012:	0e 94 ab 13 	call	0x2756	; 0x2756 <MODEM_crc_puts>
            crc = MODEM_crc_puts (crc, var->val.s);
    1016:	f8 01       	movw	r30, r16
    1018:	64 81       	ldd	r22, Z+4	; 0x04
    101a:	75 81       	ldd	r23, Z+5	; 0x05
    101c:	0e 94 ab 13 	call	0x2756	; 0x2756 <MODEM_crc_puts>
    1020:	0d c0       	rjmp	.+26     	; 0x103c <awt_dispatch_data_req+0x128>
            break;
        case AWT_BOOL :
            crc = MODEM_crc_puts (crc, ",BOOL,");
    1022:	6b e3       	ldi	r22, 0x3B	; 59
    1024:	71 e2       	ldi	r23, 0x21	; 33
    1026:	0e 94 ab 13 	call	0x2756	; 0x2756 <MODEM_crc_puts>
            crc = MODEM_crc_putb (crc, var->val.b ? 'T' : 'F');
    102a:	f8 01       	movw	r30, r16
    102c:	94 81       	ldd	r25, Z+4	; 0x04
    102e:	99 23       	and	r25, r25
    1030:	11 f0       	breq	.+4      	; 0x1036 <awt_dispatch_data_req+0x122>
    1032:	6a 2d       	mov	r22, r10
    1034:	01 c0       	rjmp	.+2      	; 0x1038 <awt_dispatch_data_req+0x124>
    1036:	69 2d       	mov	r22, r9
    1038:	0e 94 a0 13 	call	0x2740	; 0x2740 <MODEM_crc_putb>
            break;
        }
        return MODEM_crc_putb (crc, '"');
    103c:	62 e2       	ldi	r22, 0x22	; 34
    103e:	0e 94 a0 13 	call	0x2740	; 0x2740 <MODEM_crc_putb>
    1042:	d8 2e       	mov	r13, r24
    1044:	08 5f       	subi	r16, 0xF8	; 248
    1046:	1f 4f       	sbci	r17, 0xFF	; 255
    1048:	ba 94       	dec	r11
    MODEM_raw_puts ("ATE0;+AWTDA=");
    crc = MODEM_crc_putb (0xFF, 'd');
    crc = MODEM_crc_putb (crc, 'c');
    crc = put_path (crc, path);
    crc = MODEM_crc_puts (crc, utoa (vars, tmp, 10));
    while (vars--) {
    104a:	09 f0       	breq	.+2      	; 0x104e <awt_dispatch_data_req+0x13a>
    104c:	b5 cf       	rjmp	.-150    	; 0xfb8 <awt_dispatch_data_req+0xa4>
        crc = dispatch_var (crc, var++);
    }
    MODEM_raw_puts (",CRC");
    104e:	88 e2       	ldi	r24, 0x28	; 40
    1050:	91 e2       	ldi	r25, 0x21	; 33
    1052:	0e 94 92 13 	call	0x2724	; 0x2724 <MODEM_raw_puts>
    MODEM_raw_putb (ram_hex[crc / 16]);
    1056:	ad 2d       	mov	r26, r13
    1058:	a2 95       	swap	r26
    105a:	af 70       	andi	r26, 0x0F	; 15
    105c:	b0 e0       	ldi	r27, 0x00	; 0
    105e:	a3 52       	subi	r26, 0x23	; 35
    1060:	be 4d       	sbci	r27, 0xDE	; 222
    1062:	8c 91       	ld	r24, X
    1064:	0e 94 8b 13 	call	0x2716	; 0x2716 <MODEM_raw_putb>
    MODEM_raw_putb (ram_hex[crc % 16]);
    1068:	ed 2d       	mov	r30, r13
    106a:	ef 70       	andi	r30, 0x0F	; 15
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	e3 52       	subi	r30, 0x23	; 35
    1070:	fe 4d       	sbci	r31, 0xDE	; 222
    1072:	80 81       	ld	r24, Z
    1074:	0e 94 8b 13 	call	0x2716	; 0x2716 <MODEM_raw_putb>
    modem.rsp.expect_sent = true;
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	80 93 a8 24 	sts	0x24A8, r24
    handlers.cb_req_response = handler;
    107e:	e0 92 c3 24 	sts	0x24C3, r14
    1082:	f0 92 c4 24 	sts	0x24C4, r15
    MODEM_raw_putb ('\r');
    1086:	8d e0       	ldi	r24, 0x0D	; 13
    1088:	0e 94 8b 13 	call	0x2716	; 0x2716 <MODEM_raw_putb>
    //wdt_disable();
    return true;
    108c:	81 e0       	ldi	r24, 0x01	; 1
    108e:	01 c0       	rjmp	.+2      	; 0x1092 <awt_dispatch_data_req+0x17e>
        return MODEM_crc_putb (crc, '"');
    }

    poll_modem ();
    if (modem.rsp.state != RSP_STATE_IDLE) {
        return false;
    1090:	80 e0       	ldi	r24, 0x00	; 0
    modem.rsp.expect_sent = true;
    handlers.cb_req_response = handler;
    MODEM_raw_putb ('\r');
    //wdt_disable();
    return true;
}
    1092:	60 96       	adiw	r28, 0x10	; 16
    1094:	cd bf       	out	0x3d, r28	; 61
    1096:	de bf       	out	0x3e, r29	; 62
    1098:	df 91       	pop	r29
    109a:	cf 91       	pop	r28
    109c:	1f 91       	pop	r17
    109e:	0f 91       	pop	r16
    10a0:	ff 90       	pop	r15
    10a2:	ef 90       	pop	r14
    10a4:	df 90       	pop	r13
    10a6:	cf 90       	pop	r12
    10a8:	bf 90       	pop	r11
    10aa:	af 90       	pop	r10
    10ac:	9f 90       	pop	r9
    10ae:	8f 90       	pop	r8
    10b0:	08 95       	ret

000010b2 <awt_send_any_enqueued_acks>:
    return false;
}


void awt_send_any_enqueued_acks (void (*update_asset_state) (void))
{
    10b2:	2f 92       	push	r2
    10b4:	3f 92       	push	r3
    10b6:	4f 92       	push	r4
    10b8:	5f 92       	push	r5
    10ba:	6f 92       	push	r6
    10bc:	7f 92       	push	r7
    10be:	8f 92       	push	r8
    10c0:	9f 92       	push	r9
    10c2:	af 92       	push	r10
    10c4:	bf 92       	push	r11
    10c6:	cf 92       	push	r12
    10c8:	df 92       	push	r13
    10ca:	ef 92       	push	r14
    10cc:	ff 92       	push	r15
    10ce:	0f 93       	push	r16
    10d0:	1f 93       	push	r17
    10d2:	cf 93       	push	r28
    10d4:	df 93       	push	r29
    10d6:	cd b7       	in	r28, 0x3d	; 61
    10d8:	de b7       	in	r29, 0x3e	; 62
    10da:	62 97       	sbiw	r28, 0x12	; 18
    10dc:	cd bf       	out	0x3d, r28	; 61
    10de:	de bf       	out	0x3e, r29	; 62
    10e0:	89 8b       	std	Y+17, r24	; 0x11
    10e2:	9a 8b       	std	Y+18, r25	; 0x12
    while (acks.front != acks.back) {
    10e4:	80 91 c7 24 	lds	r24, 0x24C7
    10e8:	90 91 c8 24 	lds	r25, 0x24C8
    10ec:	89 17       	cp	r24, r25
    10ee:	09 f4       	brne	.+2      	; 0x10f2 <awt_send_any_enqueued_acks+0x40>
    10f0:	8b c0       	rjmp	.+278    	; 0x1208 <awt_send_any_enqueued_acks+0x156>
        if (!blocked_dispatch_ack_req (update_asset_state, acks.ack[acks.front].ack, acks.ack[acks.front].path,
                                       acks.ack[acks.front].ticketid)) {
    10f2:	0f 2e       	mov	r0, r31
    10f4:	f7 e3       	ldi	r31, 0x37	; 55
    10f6:	3f 2e       	mov	r3, r31
    10f8:	f0 2d       	mov	r31, r0
{
    char tmp_str[16];
    uint8_t crc;

    poll_modem ();
    if (modem.rsp.state != RSP_STATE_IDLE) {
    10fa:	05 ea       	ldi	r16, 0xA5	; 165
    10fc:	14 e2       	ldi	r17, 0x24	; 36
        return false;
    }
    //wdt_set_timeout_period(WDT_TIMEOUT_PERIOD_8KCLK);
    //wdt_enable();
    modem.rsp.state = RSP_STATE_REQ_BUSY;
    10fe:	88 24       	eor	r8, r8
    1100:	83 94       	inc	r8
    1102:	91 2c       	mov	r9, r1
    crc = put_path (crc, path);
    crc = MODEM_crc_puts (crc, ultoa (ticketid, tmp_str, 10));
    MODEM_raw_puts (",CRC");
    MODEM_raw_putb (ram_hex[crc / 16]);
    MODEM_raw_putb (ram_hex[crc % 16]);
    modem.rsp.expect_sent = false;
    1104:	0f 2e       	mov	r0, r31
    1106:	f8 ea       	ldi	r31, 0xA8	; 168
    1108:	af 2e       	mov	r10, r31
    110a:	f4 e2       	ldi	r31, 0x24	; 36
    110c:	bf 2e       	mov	r11, r31
    110e:	f0 2d       	mov	r31, r0
    while (acks.front != acks.back) {
        if (!blocked_dispatch_ack_req (update_asset_state, acks.ack[acks.front].ack, acks.ack[acks.front].path,
                                       acks.ack[acks.front].ticketid)) {
            break;
        }
        acks.front = (acks.front + 1) & MAX_ACKS_MASK;
    1110:	0f 2e       	mov	r0, r31
    1112:	f7 ec       	ldi	r31, 0xC7	; 199
    1114:	cf 2e       	mov	r12, r31
    1116:	f4 e2       	ldi	r31, 0x24	; 36
    1118:	df 2e       	mov	r13, r31
    111a:	f0 2d       	mov	r31, r0

void awt_send_any_enqueued_acks (void (*update_asset_state) (void))
{
    while (acks.front != acks.back) {
        if (!blocked_dispatch_ack_req (update_asset_state, acks.ack[acks.front].ack, acks.ack[acks.front].path,
                                       acks.ack[acks.front].ticketid)) {
    111c:	e8 2e       	mov	r14, r24
    111e:	f1 2c       	mov	r15, r1
    1120:	3e 9c       	mul	r3, r14
    1122:	f0 01       	movw	r30, r0
    1124:	3f 9c       	mul	r3, r15
    1126:	f0 0d       	add	r31, r0
    1128:	11 24       	eor	r1, r1
    112a:	e9 53       	subi	r30, 0x39	; 57
    112c:	fb 4d       	sbci	r31, 0xDB	; 219
    112e:	44 a8       	ldd	r4, Z+52	; 0x34
    1130:	55 a8       	ldd	r5, Z+53	; 0x35
    1132:	66 a8       	ldd	r6, Z+54	; 0x36
    1134:	77 a8       	ldd	r7, Z+55	; 0x37


void awt_send_any_enqueued_acks (void (*update_asset_state) (void))
{
    while (acks.front != acks.back) {
        if (!blocked_dispatch_ack_req (update_asset_state, acks.ack[acks.front].ack, acks.ack[acks.front].path,
    1136:	20 ac       	ldd	r2, Z+56	; 0x38
static bool blocked_dispatch_ack_req (void (*update_asset_state) (void), const bool ack, const char* path, uint32_t ticketid)
{
    char tmp_str[16];
    uint8_t crc;

    poll_modem ();
    1138:	c6 d8       	rcall	.-3700   	; 0x2c6 <poll_modem>
    if (modem.rsp.state != RSP_STATE_IDLE) {
    113a:	f8 01       	movw	r30, r16
    113c:	80 81       	ld	r24, Z
    113e:	91 81       	ldd	r25, Z+1	; 0x01
    1140:	89 2b       	or	r24, r25
    1142:	09 f0       	breq	.+2      	; 0x1146 <awt_send_any_enqueued_acks+0x94>
    1144:	61 c0       	rjmp	.+194    	; 0x1208 <awt_send_any_enqueued_acks+0x156>
        return false;
    }
    //wdt_set_timeout_period(WDT_TIMEOUT_PERIOD_8KCLK);
    //wdt_enable();
    modem.rsp.state = RSP_STATE_REQ_BUSY;
    1146:	80 82       	st	Z, r8
    1148:	91 82       	std	Z+1, r9	; 0x01
    MODEM_raw_puts ("ATE0;+AWTDA=");
    114a:	87 e1       	ldi	r24, 0x17	; 23
    114c:	91 e2       	ldi	r25, 0x21	; 33
    114e:	0e 94 92 13 	call	0x2724	; 0x2724 <MODEM_raw_puts>
    if (ack) {
    1152:	22 20       	and	r2, r2
    1154:	29 f0       	breq	.+10     	; 0x1160 <awt_send_any_enqueued_acks+0xae>
        crc = MODEM_crc_putb (0xFF, 'a');
    1156:	61 e6       	ldi	r22, 0x61	; 97
    1158:	8f ef       	ldi	r24, 0xFF	; 255
    115a:	0e 94 a0 13 	call	0x2740	; 0x2740 <MODEM_crc_putb>
    115e:	04 c0       	rjmp	.+8      	; 0x1168 <awt_send_any_enqueued_acks+0xb6>
    } else {
        crc = MODEM_crc_putb (0xFF, 'n');
    1160:	6e e6       	ldi	r22, 0x6E	; 110
    1162:	8f ef       	ldi	r24, 0xFF	; 255
    1164:	0e 94 a0 13 	call	0x2740	; 0x2740 <MODEM_crc_putb>


void awt_send_any_enqueued_acks (void (*update_asset_state) (void))
{
    while (acks.front != acks.back) {
        if (!blocked_dispatch_ack_req (update_asset_state, acks.ack[acks.front].ack, acks.ack[acks.front].path,
    1168:	3e 9c       	mul	r3, r14
    116a:	b0 01       	movw	r22, r0
    116c:	3f 9c       	mul	r3, r15
    116e:	70 0d       	add	r23, r0
    1170:	11 24       	eor	r1, r1
    1172:	67 53       	subi	r22, 0x37	; 55
    1174:	7b 4d       	sbci	r23, 0xDB	; 219
    if (ack) {
        crc = MODEM_crc_putb (0xFF, 'a');
    } else {
        crc = MODEM_crc_putb (0xFF, 'n');
    }
    crc = put_path (crc, path);
    1176:	30 de       	rcall	.-928    	; 0xdd8 <put_path>
    1178:	f8 2e       	mov	r15, r24
    crc = MODEM_crc_puts (crc, ultoa (ticketid, tmp_str, 10));
    117a:	2a e0       	ldi	r18, 0x0A	; 10
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	ae 01       	movw	r20, r28
    1180:	4f 5f       	subi	r20, 0xFF	; 255
    1182:	5f 4f       	sbci	r21, 0xFF	; 255
    1184:	c3 01       	movw	r24, r6
    1186:	b2 01       	movw	r22, r4
    1188:	0e 94 52 37 	call	0x6ea4	; 0x6ea4 <ultoa>
    118c:	bc 01       	movw	r22, r24
    118e:	8f 2d       	mov	r24, r15
    1190:	0e 94 ab 13 	call	0x2756	; 0x2756 <MODEM_crc_puts>
    1194:	f8 2e       	mov	r15, r24
    MODEM_raw_puts (",CRC");
    1196:	88 e2       	ldi	r24, 0x28	; 40
    1198:	91 e2       	ldi	r25, 0x21	; 33
    119a:	0e 94 92 13 	call	0x2724	; 0x2724 <MODEM_raw_puts>
    MODEM_raw_putb (ram_hex[crc / 16]);
    119e:	ef 2d       	mov	r30, r15
    11a0:	e2 95       	swap	r30
    11a2:	ef 70       	andi	r30, 0x0F	; 15
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	e3 52       	subi	r30, 0x23	; 35
    11a8:	fe 4d       	sbci	r31, 0xDE	; 222
    11aa:	80 81       	ld	r24, Z
    11ac:	0e 94 8b 13 	call	0x2716	; 0x2716 <MODEM_raw_putb>
    MODEM_raw_putb (ram_hex[crc % 16]);
    11b0:	ef 2d       	mov	r30, r15
    11b2:	ef 70       	andi	r30, 0x0F	; 15
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	e3 52       	subi	r30, 0x23	; 35
    11b8:	fe 4d       	sbci	r31, 0xDE	; 222
    11ba:	80 81       	ld	r24, Z
    11bc:	0e 94 8b 13 	call	0x2716	; 0x2716 <MODEM_raw_putb>
    modem.rsp.expect_sent = false;
    11c0:	f5 01       	movw	r30, r10
    11c2:	10 82       	st	Z, r1
    MODEM_raw_putb ('\r');
    11c4:	8d e0       	ldi	r24, 0x0D	; 13
    11c6:	0e 94 8b 13 	call	0x2716	; 0x2716 <MODEM_raw_putb>
    //wdt_disable();
    blocked_poll_response (update_asset_state, AWTDA_RSP_TIMEOUT_S);
    11ca:	6d e2       	ldi	r22, 0x2D	; 45
    11cc:	70 e0       	ldi	r23, 0x00	; 0
    11ce:	89 89       	ldd	r24, Y+17	; 0x11
    11d0:	9a 89       	ldd	r25, Y+18	; 0x12
    11d2:	65 dd       	rcall	.-1334   	; 0xc9e <blocked_poll_response>
    bool rsp = modem.rsp.state == RSP_STATE_RSP_OK;
    11d4:	f8 01       	movw	r30, r16
    11d6:	80 81       	ld	r24, Z
    11d8:	91 81       	ldd	r25, Z+1	; 0x01
    modem.rsp.state = RSP_STATE_IDLE;
    11da:	10 82       	st	Z, r1
    11dc:	11 82       	std	Z+1, r1	; 0x01
    modem.rsp.sequential_awtda_failures = rsp ? 0 : modem.rsp.sequential_awtda_failures + 1;
    11de:	03 97       	sbiw	r24, 0x03	; 3
    11e0:	31 f0       	breq	.+12     	; 0x11ee <awt_send_any_enqueued_acks+0x13c>
    11e2:	eb ea       	ldi	r30, 0xAB	; 171
    11e4:	f4 e2       	ldi	r31, 0x24	; 36
    11e6:	80 81       	ld	r24, Z
    11e8:	8f 5f       	subi	r24, 0xFF	; 255
    11ea:	80 83       	st	Z, r24
    11ec:	0d c0       	rjmp	.+26     	; 0x1208 <awt_send_any_enqueued_acks+0x156>
    11ee:	eb ea       	ldi	r30, 0xAB	; 171
    11f0:	f4 e2       	ldi	r31, 0x24	; 36
    11f2:	10 82       	st	Z, r1
    while (acks.front != acks.back) {
        if (!blocked_dispatch_ack_req (update_asset_state, acks.ack[acks.front].ack, acks.ack[acks.front].path,
                                       acks.ack[acks.front].ticketid)) {
            break;
        }
        acks.front = (acks.front + 1) & MAX_ACKS_MASK;
    11f4:	f6 01       	movw	r30, r12
    11f6:	80 81       	ld	r24, Z
    11f8:	8f 5f       	subi	r24, 0xFF	; 255
    11fa:	87 70       	andi	r24, 0x07	; 7
    11fc:	80 83       	st	Z, r24
}


void awt_send_any_enqueued_acks (void (*update_asset_state) (void))
{
    while (acks.front != acks.back) {
    11fe:	e8 ec       	ldi	r30, 0xC8	; 200
    1200:	f4 e2       	ldi	r31, 0x24	; 36
    1202:	90 81       	ld	r25, Z
    1204:	98 13       	cpse	r25, r24
    1206:	8a cf       	rjmp	.-236    	; 0x111c <awt_send_any_enqueued_acks+0x6a>
                                       acks.ack[acks.front].ticketid)) {
            break;
        }
        acks.front = (acks.front + 1) & MAX_ACKS_MASK;
    }
}
    1208:	62 96       	adiw	r28, 0x12	; 18
    120a:	cd bf       	out	0x3d, r28	; 61
    120c:	de bf       	out	0x3e, r29	; 62
    120e:	df 91       	pop	r29
    1210:	cf 91       	pop	r28
    1212:	1f 91       	pop	r17
    1214:	0f 91       	pop	r16
    1216:	ff 90       	pop	r15
    1218:	ef 90       	pop	r14
    121a:	df 90       	pop	r13
    121c:	cf 90       	pop	r12
    121e:	bf 90       	pop	r11
    1220:	af 90       	pop	r10
    1222:	9f 90       	pop	r9
    1224:	8f 90       	pop	r8
    1226:	7f 90       	pop	r7
    1228:	6f 90       	pop	r6
    122a:	5f 90       	pop	r5
    122c:	4f 90       	pop	r4
    122e:	3f 90       	pop	r3
    1230:	2f 90       	pop	r2
    1232:	08 95       	ret

00001234 <awt_buffer_ack_req>:


bool awt_buffer_ack_req (const bool ack, const char* path, uint32_t ticketid)
{
    1234:	cf 92       	push	r12
    1236:	df 92       	push	r13
    1238:	ef 92       	push	r14
    123a:	ff 92       	push	r15
    123c:	cf 93       	push	r28
    123e:	df 93       	push	r29
    1240:	69 01       	movw	r12, r18
    1242:	7a 01       	movw	r14, r20
    uint8_t back = (acks.back + 1) & MAX_ACKS_MASK;
    1244:	20 91 c8 24 	lds	r18, 0x24C8
    1248:	c2 2f       	mov	r28, r18
    124a:	cf 5f       	subi	r28, 0xFF	; 255
    124c:	c7 70       	andi	r28, 0x07	; 7
    if (back == acks.front) {
    124e:	90 91 c7 24 	lds	r25, 0x24C7
    1252:	9c 17       	cp	r25, r28
    1254:	01 f1       	breq	.+64     	; 0x1296 <awt_buffer_ack_req+0x62>
        return false;
    }
    acks.ack[acks.back].ack = ack;
    1256:	d7 e3       	ldi	r29, 0x37	; 55
    1258:	d2 9f       	mul	r29, r18
    125a:	90 01       	movw	r18, r0
    125c:	11 24       	eor	r1, r1
    125e:	f9 01       	movw	r30, r18
    1260:	e9 53       	subi	r30, 0x39	; 57
    1262:	fb 4d       	sbci	r31, 0xDB	; 219
    1264:	80 af       	std	Z+56, r24	; 0x38
    strncpy (acks.ack[acks.back].path, path, sizeof acks.ack[acks.back].path);
    1266:	42 e3       	ldi	r20, 0x32	; 50
    1268:	50 e0       	ldi	r21, 0x00	; 0
    126a:	c9 01       	movw	r24, r18
    126c:	87 53       	subi	r24, 0x37	; 55
    126e:	9b 4d       	sbci	r25, 0xDB	; 219
    1270:	0e 94 dd 36 	call	0x6dba	; 0x6dba <strncpy>
    acks.ack[acks.back].ticketid = ticketid;
    1274:	e8 ec       	ldi	r30, 0xC8	; 200
    1276:	f4 e2       	ldi	r31, 0x24	; 36
    1278:	a0 81       	ld	r26, Z
    127a:	da 9f       	mul	r29, r26
    127c:	d0 01       	movw	r26, r0
    127e:	11 24       	eor	r1, r1
    1280:	a9 53       	subi	r26, 0x39	; 57
    1282:	bb 4d       	sbci	r27, 0xDB	; 219
    1284:	d4 96       	adiw	r26, 0x34	; 52
    1286:	cd 92       	st	X+, r12
    1288:	dd 92       	st	X+, r13
    128a:	ed 92       	st	X+, r14
    128c:	fc 92       	st	X, r15
    128e:	d7 97       	sbiw	r26, 0x37	; 55
    acks.back = back;
    1290:	c0 83       	st	Z, r28
    return true;
    1292:	81 e0       	ldi	r24, 0x01	; 1
    1294:	01 c0       	rjmp	.+2      	; 0x1298 <awt_buffer_ack_req+0x64>

bool awt_buffer_ack_req (const bool ack, const char* path, uint32_t ticketid)
{
    uint8_t back = (acks.back + 1) & MAX_ACKS_MASK;
    if (back == acks.front) {
        return false;
    1296:	80 e0       	ldi	r24, 0x00	; 0
    acks.ack[acks.back].ack = ack;
    strncpy (acks.ack[acks.back].path, path, sizeof acks.ack[acks.back].path);
    acks.ack[acks.back].ticketid = ticketid;
    acks.back = back;
    return true;
}
    1298:	df 91       	pop	r29
    129a:	cf 91       	pop	r28
    129c:	ff 90       	pop	r15
    129e:	ef 90       	pop	r14
    12a0:	df 90       	pop	r13
    12a2:	cf 90       	pop	r12
    12a4:	08 95       	ret

000012a6 <awt_reset_modem>:


void awt_reset_modem (void (*update_asset_state) (void), int line)
{
    12a6:	ef 92       	push	r14
    12a8:	ff 92       	push	r15
    12aa:	0f 93       	push	r16
    12ac:	1f 93       	push	r17
    12ae:	cf 93       	push	r28
    12b0:	df 93       	push	r29
    12b2:	ec 01       	movw	r28, r24
    12b4:	8b 01       	movw	r16, r22
    DEBUG_puts ("RESET ");
    12b6:	82 e4       	ldi	r24, 0x42	; 66
    12b8:	91 e2       	ldi	r25, 0x21	; 33
    12ba:	0e 94 44 13 	call	0x2688	; 0x2688 <DEBUG_puts>
    DEBUG_putu (line);
    12be:	b8 01       	movw	r22, r16
    12c0:	88 27       	eor	r24, r24
    12c2:	77 fd       	sbrc	r23, 7
    12c4:	80 95       	com	r24
    12c6:	98 2f       	mov	r25, r24
    12c8:	0e 94 58 13 	call	0x26b0	; 0x26b0 <DEBUG_putu>
    DEBUG_putcrlf (NULL);
    12cc:	80 e0       	ldi	r24, 0x00	; 0
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	0e 94 52 13 	call	0x26a4	; 0x26a4 <DEBUG_putcrlf>
    handlers.cb_reset (AWT_RESET_BUSY);
    12d4:	e0 91 bb 24 	lds	r30, 0x24BB
    12d8:	f0 91 bc 24 	lds	r31, 0x24BC
    12dc:	80 e0       	ldi	r24, 0x00	; 0
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	09 95       	icall
    12e2:	1a e0       	ldi	r17, 0x0A	; 10

    // start by sending 10 '\r' gobbling any response
    for (uint8_t i = 0; i < 10; i++) {
        MODEM_raw_puts ("\r");
    12e4:	89 e4       	ldi	r24, 0x49	; 73
    12e6:	91 e2       	ldi	r25, 0x21	; 33
    12e8:	0e 94 92 13 	call	0x2724	; 0x2724 <MODEM_raw_puts>
        timeout_start_singleshot (TIMEOUT_ALL_PAUSE, TIMEOUT_TICK_HZ);
    12ec:	68 e0       	ldi	r22, 0x08	; 8
    12ee:	70 e0       	ldi	r23, 0x00	; 0
    12f0:	80 e0       	ldi	r24, 0x00	; 0
    12f2:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <timeout_start_singleshot>
        while (!timeout_test_and_clear_expired (TIMEOUT_ALL_PAUSE)) {
    12f6:	06 c0       	rjmp	.+12     	; 0x1304 <awt_reset_modem+0x5e>
            MODEM_get_byte ();
    12f8:	0e 94 7f 13 	call	0x26fe	; 0x26fe <MODEM_get_byte>
            if (update_asset_state != NULL) {
    12fc:	20 97       	sbiw	r28, 0x00	; 0
    12fe:	11 f0       	breq	.+4      	; 0x1304 <awt_reset_modem+0x5e>
                update_asset_state ();
    1300:	fe 01       	movw	r30, r28
    1302:	09 95       	icall

    // start by sending 10 '\r' gobbling any response
    for (uint8_t i = 0; i < 10; i++) {
        MODEM_raw_puts ("\r");
        timeout_start_singleshot (TIMEOUT_ALL_PAUSE, TIMEOUT_TICK_HZ);
        while (!timeout_test_and_clear_expired (TIMEOUT_ALL_PAUSE)) {
    1304:	80 e0       	ldi	r24, 0x00	; 0
    1306:	0e 94 78 1f 	call	0x3ef0	; 0x3ef0 <timeout_test_and_clear_expired>
    130a:	88 23       	and	r24, r24
    130c:	a9 f3       	breq	.-22     	; 0x12f8 <awt_reset_modem+0x52>
    130e:	11 50       	subi	r17, 0x01	; 1
    DEBUG_putu (line);
    DEBUG_putcrlf (NULL);
    handlers.cb_reset (AWT_RESET_BUSY);

    // start by sending 10 '\r' gobbling any response
    for (uint8_t i = 0; i < 10; i++) {
    1310:	49 f7       	brne	.-46     	; 0x12e4 <awt_reset_modem+0x3e>
            }
        }
    }

    // reset our state
    reset_state (RSP_STATE_IDLE);
    1312:	80 e0       	ldi	r24, 0x00	; 0
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	0e 94 1c 01 	call	0x238	; 0x238 <reset_state>

    // try reset by toggling the modem's GPIO pin and then poll for "AT+AWTDA: BOOT"
    modem.rsp.awtda_boot_signal = false;
    131a:	10 92 a9 24 	sts	0x24A9, r1
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    131e:	82 e0       	ldi	r24, 0x02	; 2
    1320:	e0 e2       	ldi	r30, 0x20	; 32
    1322:	f6 e0       	ldi	r31, 0x06	; 6
    1324:	85 83       	std	Z+5, r24	; 0x05
    1326:	68 94       	set
    1328:	ff 24       	eor	r15, r15
    132a:	f3 f8       	bld	r15, 3

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	base->OUTTGL = arch_ioport_pin_to_mask(pin);
    132c:	00 e2       	ldi	r16, 0x20	; 32
    132e:	16 e0       	ldi	r17, 0x06	; 6
    1330:	68 94       	set
    1332:	ee 24       	eor	r14, r14
    1334:	e1 f8       	bld	r14, 1
    1336:	f8 01       	movw	r30, r16
    1338:	e7 82       	std	Z+7, r14	; 0x07
    ioport_set_pin_high (GPIO_SL_WDOG);
    for (uint8_t p = 0; p < 8; p++) {
        ioport_toggle_pin (GPIO_SL_WDOG);         // gpio_set_pin_low(GPIO_SL_WDOG); 
        timeout_start_singleshot (TIMEOUT_ALL_PAUSE, TIMEOUT_TICK_HZ / 5);
    133a:	61 e0       	ldi	r22, 0x01	; 1
    133c:	70 e0       	ldi	r23, 0x00	; 0
    133e:	80 e0       	ldi	r24, 0x00	; 0
    1340:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <timeout_start_singleshot>
        while (!timeout_test_and_clear_expired (TIMEOUT_ALL_PAUSE)) {
    1344:	04 c0       	rjmp	.+8      	; 0x134e <awt_reset_modem+0xa8>
            if (update_asset_state != NULL) {
    1346:	20 97       	sbiw	r28, 0x00	; 0
    1348:	11 f0       	breq	.+4      	; 0x134e <awt_reset_modem+0xa8>
                update_asset_state ();
    134a:	fe 01       	movw	r30, r28
    134c:	09 95       	icall
    modem.rsp.awtda_boot_signal = false;
    ioport_set_pin_high (GPIO_SL_WDOG);
    for (uint8_t p = 0; p < 8; p++) {
        ioport_toggle_pin (GPIO_SL_WDOG);         // gpio_set_pin_low(GPIO_SL_WDOG); 
        timeout_start_singleshot (TIMEOUT_ALL_PAUSE, TIMEOUT_TICK_HZ / 5);
        while (!timeout_test_and_clear_expired (TIMEOUT_ALL_PAUSE)) {
    134e:	80 e0       	ldi	r24, 0x00	; 0
    1350:	0e 94 78 1f 	call	0x3ef0	; 0x3ef0 <timeout_test_and_clear_expired>
    1354:	88 23       	and	r24, r24
    1356:	b9 f3       	breq	.-18     	; 0x1346 <awt_reset_modem+0xa0>
    1358:	fa 94       	dec	r15
    reset_state (RSP_STATE_IDLE);

    // try reset by toggling the modem's GPIO pin and then poll for "AT+AWTDA: BOOT"
    modem.rsp.awtda_boot_signal = false;
    ioport_set_pin_high (GPIO_SL_WDOG);
    for (uint8_t p = 0; p < 8; p++) {
    135a:	69 f7       	brne	.-38     	; 0x1336 <awt_reset_modem+0x90>
            if (update_asset_state != NULL) {
                update_asset_state ();
            }
        }
    }
    timeout_start_singleshot (TIMEOUT_ALL_PAUSE, TIMEOUT_TICK_HZ * 60);
    135c:	60 ee       	ldi	r22, 0xE0	; 224
    135e:	71 e0       	ldi	r23, 0x01	; 1
    1360:	80 e0       	ldi	r24, 0x00	; 0
    1362:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <timeout_start_singleshot>
    while (modem.rsp.awtda_boot_signal == false && !timeout_test_and_clear_expired (TIMEOUT_ALL_PAUSE)) {
    1366:	09 ea       	ldi	r16, 0xA9	; 169
    1368:	14 e2       	ldi	r17, 0x24	; 36
    136a:	06 c0       	rjmp	.+12     	; 0x1378 <awt_reset_modem+0xd2>
        poll_modem ();
    136c:	0e 94 63 01 	call	0x2c6	; 0x2c6 <poll_modem>
        if (update_asset_state != NULL) {
    1370:	20 97       	sbiw	r28, 0x00	; 0
    1372:	11 f0       	breq	.+4      	; 0x1378 <awt_reset_modem+0xd2>
            update_asset_state ();
    1374:	fe 01       	movw	r30, r28
    1376:	09 95       	icall
                update_asset_state ();
            }
        }
    }
    timeout_start_singleshot (TIMEOUT_ALL_PAUSE, TIMEOUT_TICK_HZ * 60);
    while (modem.rsp.awtda_boot_signal == false && !timeout_test_and_clear_expired (TIMEOUT_ALL_PAUSE)) {
    1378:	f8 01       	movw	r30, r16
    137a:	80 81       	ld	r24, Z
    137c:	81 11       	cpse	r24, r1
    137e:	04 c0       	rjmp	.+8      	; 0x1388 <awt_reset_modem+0xe2>
    1380:	0e 94 78 1f 	call	0x3ef0	; 0x3ef0 <timeout_test_and_clear_expired>
    1384:	88 23       	and	r24, r24
    1386:	91 f3       	breq	.-28     	; 0x136c <awt_reset_modem+0xc6>
        poll_modem ();
        if (update_asset_state != NULL) {
            update_asset_state ();
        }
    }
    timeout_stop (TIMEOUT_ALL_PAUSE);
    1388:	80 e0       	ldi	r24, 0x00	; 0
    138a:	0e 94 9d 1f 	call	0x3f3a	; 0x3f3a <timeout_stop>

    //if we are sync'd (AT -> OK) with the modem all is well.
    if (modem.rsp.awtda_boot_signal && blocked_sync_modem (NULL)) {
    138e:	80 91 a9 24 	lds	r24, 0x24A9
    1392:	88 23       	and	r24, r24
    1394:	49 f1       	breq	.+82     	; 0x13e8 <awt_reset_modem+0x142>
    1396:	80 e0       	ldi	r24, 0x00	; 0
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	f7 dc       	rcall	.-1554   	; 0xd8a <blocked_sync_modem>
    139c:	88 23       	and	r24, r24
    139e:	21 f1       	breq	.+72     	; 0x13e8 <awt_reset_modem+0x142>
        timeout_start_singleshot (TIMEOUT_ALL_PAUSE, TIMEOUT_TICK_HZ * 2);
    13a0:	60 e1       	ldi	r22, 0x10	; 16
    13a2:	70 e0       	ldi	r23, 0x00	; 0
    13a4:	80 e0       	ldi	r24, 0x00	; 0
    13a6:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <timeout_start_singleshot>
        modem.boot_counter = -1;
    13aa:	8f ef       	ldi	r24, 0xFF	; 255
    13ac:	9f ef       	ldi	r25, 0xFF	; 255
    13ae:	dc 01       	movw	r26, r24
    13b0:	80 93 ad 24 	sts	0x24AD, r24
    13b4:	90 93 ae 24 	sts	0x24AE, r25
    13b8:	a0 93 af 24 	sts	0x24AF, r26
    13bc:	b0 93 b0 24 	sts	0x24B0, r27
        handlers.cb_reset (AWT_RESET_DONE);
    13c0:	e0 91 bb 24 	lds	r30, 0x24BB
    13c4:	f0 91 bc 24 	lds	r31, 0x24BC
    13c8:	81 e0       	ldi	r24, 0x01	; 1
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	09 95       	icall
        // need to give awt agent a few seconds to get ready
        while (!timeout_test_and_clear_expired (TIMEOUT_ALL_PAUSE)) {
    13ce:	06 c0       	rjmp	.+12     	; 0x13dc <awt_reset_modem+0x136>
            poll_modem ();
    13d0:	0e 94 63 01 	call	0x2c6	; 0x2c6 <poll_modem>
            if (update_asset_state != NULL) {
    13d4:	20 97       	sbiw	r28, 0x00	; 0
    13d6:	11 f0       	breq	.+4      	; 0x13dc <awt_reset_modem+0x136>
                update_asset_state ();
    13d8:	fe 01       	movw	r30, r28
    13da:	09 95       	icall
    if (modem.rsp.awtda_boot_signal && blocked_sync_modem (NULL)) {
        timeout_start_singleshot (TIMEOUT_ALL_PAUSE, TIMEOUT_TICK_HZ * 2);
        modem.boot_counter = -1;
        handlers.cb_reset (AWT_RESET_DONE);
        // need to give awt agent a few seconds to get ready
        while (!timeout_test_and_clear_expired (TIMEOUT_ALL_PAUSE)) {
    13dc:	80 e0       	ldi	r24, 0x00	; 0
    13de:	0e 94 78 1f 	call	0x3ef0	; 0x3ef0 <timeout_test_and_clear_expired>
    13e2:	88 23       	and	r24, r24
    13e4:	a9 f3       	breq	.-22     	; 0x13d0 <awt_reset_modem+0x12a>
    13e6:	17 c0       	rjmp	.+46     	; 0x1416 <awt_reset_modem+0x170>
                update_asset_state ();
            }
        }
    } else {
        uint8_t i;
        blocked_sync_modem (NULL);
    13e8:	80 e0       	ldi	r24, 0x00	; 0
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	ce dc       	rcall	.-1636   	; 0xd8a <blocked_sync_modem>
        for (i = 0; i < 3; i++) {
    13ee:	10 e0       	ldi	r17, 0x00	; 0
            if (blocked_at_req (update_asset_state, "AT+IFC=0,0;E0;+CFUN=1", 5)) {
    13f0:	45 e0       	ldi	r20, 0x05	; 5
    13f2:	50 e0       	ldi	r21, 0x00	; 0
    13f4:	6b e4       	ldi	r22, 0x4B	; 75
    13f6:	71 e2       	ldi	r23, 0x21	; 33
    13f8:	ce 01       	movw	r24, r28
    13fa:	81 dc       	rcall	.-1790   	; 0xcfe <blocked_at_req>
    13fc:	81 11       	cpse	r24, r1
    13fe:	04 c0       	rjmp	.+8      	; 0x1408 <awt_reset_modem+0x162>
            }
        }
    } else {
        uint8_t i;
        blocked_sync_modem (NULL);
        for (i = 0; i < 3; i++) {
    1400:	1f 5f       	subi	r17, 0xFF	; 255
    1402:	13 30       	cpi	r17, 0x03	; 3
    1404:	a9 f7       	brne	.-22     	; 0x13f0 <awt_reset_modem+0x14a>
    1406:	02 c0       	rjmp	.+4      	; 0x140c <awt_reset_modem+0x166>
            if (blocked_at_req (update_asset_state, "AT+IFC=0,0;E0;+CFUN=1", 5)) {
                break;
            }
        }
        if (i == 3) {
    1408:	13 30       	cpi	r17, 0x03	; 3
    140a:	29 f4       	brne	.+10     	; 0x1416 <awt_reset_modem+0x170>
            handlers.cb_reset_avr ();
    140c:	e0 91 b9 24 	lds	r30, 0x24B9
    1410:	f0 91 ba 24 	lds	r31, 0x24BA
    1414:	09 95       	icall
        }
    }
    handlers.cb_reset (AWT_RESET_DONE);
    1416:	e0 91 bb 24 	lds	r30, 0x24BB
    141a:	f0 91 bc 24 	lds	r31, 0x24BC
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	09 95       	icall
}
    1424:	df 91       	pop	r29
    1426:	cf 91       	pop	r28
    1428:	1f 91       	pop	r17
    142a:	0f 91       	pop	r16
    142c:	ff 90       	pop	r15
    142e:	ef 90       	pop	r14
    1430:	08 95       	ret

00001432 <awt_service>:
    }
}


void awt_service (void (*update_asset_state) (void))
{
    1432:	ff 92       	push	r15
    1434:	0f 93       	push	r16
    1436:	1f 93       	push	r17
    1438:	cf 93       	push	r28
    143a:	df 93       	push	r29
    143c:	ec 01       	movw	r28, r24
    if (handlers.cb_req_response != NULL) {
    143e:	20 91 c3 24 	lds	r18, 0x24C3
    1442:	30 91 c4 24 	lds	r19, 0x24C4
    1446:	23 2b       	or	r18, r19
    1448:	09 f4       	brne	.+2      	; 0x144c <awt_service+0x1a>
    144a:	86 c0       	rjmp	.+268    	; 0x1558 <awt_service+0x126>
    handlers.cb_reset (AWT_RESET_DONE);
}

static void check_async_response (void)
{
    poll_modem ();
    144c:	0e 94 63 01 	call	0x2c6	; 0x2c6 <poll_modem>
    if (modem.rsp.state == RSP_STATE_REQ_BUSY) {
    1450:	20 91 a5 24 	lds	r18, 0x24A5
    1454:	30 91 a6 24 	lds	r19, 0x24A6
    1458:	21 30       	cpi	r18, 0x01	; 1
    145a:	31 05       	cpc	r19, r1
    145c:	d1 f4       	brne	.+52     	; 0x1492 <awt_service+0x60>
        if (timeout_test_and_clear_expired (TIMEOUT_AWT_AT_RSP)) {
    145e:	83 e0       	ldi	r24, 0x03	; 3
    1460:	0e 94 78 1f 	call	0x3ef0	; 0x3ef0 <timeout_test_and_clear_expired>
    1464:	88 23       	and	r24, r24
    1466:	09 f4       	brne	.+2      	; 0x146a <awt_service+0x38>
    1468:	69 c0       	rjmp	.+210    	; 0x153c <awt_service+0x10a>
            modem.rsp.state = RSP_STATE_IDLE;
    146a:	10 92 a5 24 	sts	0x24A5, r1
    146e:	10 92 a6 24 	sts	0x24A6, r1
            modem.rsp.sequential_awtda_failures++;
    1472:	eb ea       	ldi	r30, 0xAB	; 171
    1474:	f4 e2       	ldi	r31, 0x24	; 36
    1476:	80 81       	ld	r24, Z
    1478:	8f 5f       	subi	r24, 0xFF	; 255
    147a:	80 83       	st	Z, r24
            handlers.cb_req_response (false);
    147c:	03 ec       	ldi	r16, 0xC3	; 195
    147e:	14 e2       	ldi	r17, 0x24	; 36
    1480:	d8 01       	movw	r26, r16
    1482:	ed 91       	ld	r30, X+
    1484:	fc 91       	ld	r31, X
    1486:	80 e0       	ldi	r24, 0x00	; 0
    1488:	09 95       	icall
            handlers.cb_req_response = NULL;
    148a:	f8 01       	movw	r30, r16
    148c:	10 82       	st	Z, r1
    148e:	11 82       	std	Z+1, r1	; 0x01
    1490:	55 c0       	rjmp	.+170    	; 0x153c <awt_service+0x10a>
        }
    } else {
        if (modem.rsp.expect_sent) {
    1492:	80 91 a8 24 	lds	r24, 0x24A8
    1496:	88 23       	and	r24, r24
    1498:	b1 f1       	breq	.+108    	; 0x1506 <awt_service+0xd4>
            modem.rsp.expect_sent = false;
    149a:	10 92 a8 24 	sts	0x24A8, r1
            if (modem.rsp.state == RSP_STATE_RSP_SENT) {
    149e:	22 30       	cpi	r18, 0x02	; 2
    14a0:	31 05       	cpc	r19, r1
    14a2:	69 f4       	brne	.+26     	; 0x14be <awt_service+0x8c>
                modem.rsp.sequential_awtda_failures = 0;
    14a4:	10 92 ab 24 	sts	0x24AB, r1
                handlers.cb_req_response (true);
    14a8:	03 ec       	ldi	r16, 0xC3	; 195
    14aa:	14 e2       	ldi	r17, 0x24	; 36
    14ac:	d8 01       	movw	r26, r16
    14ae:	ed 91       	ld	r30, X+
    14b0:	fc 91       	ld	r31, X
    14b2:	81 e0       	ldi	r24, 0x01	; 1
    14b4:	09 95       	icall
                handlers.cb_req_response = NULL;
    14b6:	f8 01       	movw	r30, r16
    14b8:	10 82       	st	Z, r1
    14ba:	11 82       	std	Z+1, r1	; 0x01
    14bc:	1f c0       	rjmp	.+62     	; 0x14fc <awt_service+0xca>
            } else if (modem.rsp.state == RSP_STATE_RSP_OK) {
    14be:	23 30       	cpi	r18, 0x03	; 3
    14c0:	31 05       	cpc	r19, r1
    14c2:	69 f4       	brne	.+26     	; 0x14de <awt_service+0xac>
                modem.rsp.sequential_awtda_failures = 0;
    14c4:	10 92 ab 24 	sts	0x24AB, r1
                handlers.cb_req_response (false);
    14c8:	03 ec       	ldi	r16, 0xC3	; 195
    14ca:	14 e2       	ldi	r17, 0x24	; 36
    14cc:	d8 01       	movw	r26, r16
    14ce:	ed 91       	ld	r30, X+
    14d0:	fc 91       	ld	r31, X
    14d2:	80 e0       	ldi	r24, 0x00	; 0
    14d4:	09 95       	icall
                handlers.cb_req_response = NULL;
    14d6:	f8 01       	movw	r30, r16
    14d8:	10 82       	st	Z, r1
    14da:	11 82       	std	Z+1, r1	; 0x01
    14dc:	0f c0       	rjmp	.+30     	; 0x14fc <awt_service+0xca>
            } else {
                modem.rsp.sequential_awtda_failures++;
    14de:	eb ea       	ldi	r30, 0xAB	; 171
    14e0:	f4 e2       	ldi	r31, 0x24	; 36
    14e2:	80 81       	ld	r24, Z
    14e4:	8f 5f       	subi	r24, 0xFF	; 255
    14e6:	80 83       	st	Z, r24
                handlers.cb_req_response (false);
    14e8:	03 ec       	ldi	r16, 0xC3	; 195
    14ea:	14 e2       	ldi	r17, 0x24	; 36
    14ec:	d8 01       	movw	r26, r16
    14ee:	ed 91       	ld	r30, X+
    14f0:	fc 91       	ld	r31, X
    14f2:	80 e0       	ldi	r24, 0x00	; 0
    14f4:	09 95       	icall
                handlers.cb_req_response = NULL;
    14f6:	f8 01       	movw	r30, r16
    14f8:	10 82       	st	Z, r1
    14fa:	11 82       	std	Z+1, r1	; 0x01
            }
            modem.rsp.state = RSP_STATE_IDLE;
    14fc:	10 92 a5 24 	sts	0x24A5, r1
    1500:	10 92 a6 24 	sts	0x24A6, r1
    1504:	1b c0       	rjmp	.+54     	; 0x153c <awt_service+0x10a>
        } else {
            bool rsp = modem.rsp.state == RSP_STATE_RSP_OK;
    1506:	81 e0       	ldi	r24, 0x01	; 1
    1508:	23 30       	cpi	r18, 0x03	; 3
    150a:	31 05       	cpc	r19, r1
    150c:	09 f0       	breq	.+2      	; 0x1510 <awt_service+0xde>
    150e:	80 e0       	ldi	r24, 0x00	; 0
            modem.rsp.state = RSP_STATE_IDLE;
    1510:	10 92 a5 24 	sts	0x24A5, r1
    1514:	10 92 a6 24 	sts	0x24A6, r1
            modem.rsp.sequential_awtda_failures = rsp ? 0 : modem.rsp.sequential_awtda_failures + 1;
    1518:	81 11       	cpse	r24, r1
    151a:	04 c0       	rjmp	.+8      	; 0x1524 <awt_service+0xf2>
    151c:	90 91 ab 24 	lds	r25, 0x24AB
    1520:	9f 5f       	subi	r25, 0xFF	; 255
    1522:	01 c0       	rjmp	.+2      	; 0x1526 <awt_service+0xf4>
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	90 93 ab 24 	sts	0x24AB, r25
            handlers.cb_req_response (rsp);
    152a:	03 ec       	ldi	r16, 0xC3	; 195
    152c:	14 e2       	ldi	r17, 0x24	; 36
    152e:	d8 01       	movw	r26, r16
    1530:	ed 91       	ld	r30, X+
    1532:	fc 91       	ld	r31, X
    1534:	09 95       	icall
            handlers.cb_req_response = NULL;
    1536:	f8 01       	movw	r30, r16
    1538:	10 82       	st	Z, r1
    153a:	11 82       	std	Z+1, r1	; 0x01

void awt_service (void (*update_asset_state) (void))
{
    if (handlers.cb_req_response != NULL) {
        check_async_response ();
        if (modem.rsp.sequential_awtda_failures >= 3 || modem.rsp.sequential_at_failures >= 3) {
    153c:	80 91 ab 24 	lds	r24, 0x24AB
    1540:	83 30       	cpi	r24, 0x03	; 3
    1542:	28 f4       	brcc	.+10     	; 0x154e <awt_service+0x11c>
    1544:	80 91 aa 24 	lds	r24, 0x24AA
    1548:	83 30       	cpi	r24, 0x03	; 3
    154a:	08 f4       	brcc	.+2      	; 0x154e <awt_service+0x11c>
    154c:	58 c1       	rjmp	.+688    	; 0x17fe <awt_service+0x3cc>
            awt_reset_modem (update_asset_state, __LINE__);
    154e:	6f ef       	ldi	r22, 0xFF	; 255
    1550:	72 e0       	ldi	r23, 0x02	; 2
    1552:	ce 01       	movw	r24, r28
    1554:	a8 de       	rcall	.-688    	; 0x12a6 <awt_reset_modem>
    1556:	53 c1       	rjmp	.+678    	; 0x17fe <awt_service+0x3cc>
        }
        return;
    }
    poll_modem ();
    1558:	0e 94 63 01 	call	0x2c6	; 0x2c6 <poll_modem>

    // on boot and after a modem reset we need to register a data and command callback handlers
    if (handlers.register_modem_data_callbacks) {
    155c:	80 91 c5 24 	lds	r24, 0x24C5
    1560:	88 23       	and	r24, r24
    1562:	09 f4       	brne	.+2      	; 0x1566 <awt_service+0x134>
    1564:	52 c0       	rjmp	.+164    	; 0x160a <awt_service+0x1d8>

static bool blocked_data_handler_req (void (*update_asset_state) (void))
{
    uint8_t crc;

    poll_modem ();
    1566:	0e 94 63 01 	call	0x2c6	; 0x2c6 <poll_modem>
    if (modem.rsp.state != RSP_STATE_IDLE) {
    156a:	80 91 a5 24 	lds	r24, 0x24A5
    156e:	90 91 a6 24 	lds	r25, 0x24A6
    1572:	89 2b       	or	r24, r25
    1574:	09 f0       	breq	.+2      	; 0x1578 <awt_service+0x146>
    1576:	44 c0       	rjmp	.+136    	; 0x1600 <awt_service+0x1ce>
        return false;
    }
    //wdt_set_timeout_period(WDT_TIMEOUT_PERIOD_8KCLK);
    //wdt_enable();
    modem.rsp.state = RSP_STATE_REQ_BUSY;
    1578:	05 ea       	ldi	r16, 0xA5	; 165
    157a:	14 e2       	ldi	r17, 0x24	; 36
    157c:	81 e0       	ldi	r24, 0x01	; 1
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	d8 01       	movw	r26, r16
    1582:	8d 93       	st	X+, r24
    1584:	9c 93       	st	X, r25
    MODEM_raw_puts ("ATE0;+AWTDA=");
    1586:	87 e1       	ldi	r24, 0x17	; 23
    1588:	91 e2       	ldi	r25, 0x21	; 33
    158a:	0e 94 92 13 	call	0x2724	; 0x2724 <MODEM_raw_puts>
    crc = MODEM_crc_putb (0xFF, 'd');
    158e:	64 e6       	ldi	r22, 0x64	; 100
    1590:	8f ef       	ldi	r24, 0xFF	; 255
    1592:	0e 94 a0 13 	call	0x2740	; 0x2740 <MODEM_crc_putb>
    crc = MODEM_crc_putb (crc, '*');
    1596:	6a e2       	ldi	r22, 0x2A	; 42
    1598:	0e 94 a0 13 	call	0x2740	; 0x2740 <MODEM_crc_putb>
    159c:	f8 2e       	mov	r15, r24
    MODEM_raw_puts (",CRC");
    159e:	88 e2       	ldi	r24, 0x28	; 40
    15a0:	91 e2       	ldi	r25, 0x21	; 33
    15a2:	0e 94 92 13 	call	0x2724	; 0x2724 <MODEM_raw_puts>
    MODEM_raw_putb (ram_hex[crc / 16]);
    15a6:	af 2d       	mov	r26, r15
    15a8:	a2 95       	swap	r26
    15aa:	af 70       	andi	r26, 0x0F	; 15
    15ac:	b0 e0       	ldi	r27, 0x00	; 0
    15ae:	a3 52       	subi	r26, 0x23	; 35
    15b0:	be 4d       	sbci	r27, 0xDE	; 222
    15b2:	8c 91       	ld	r24, X
    15b4:	0e 94 8b 13 	call	0x2716	; 0x2716 <MODEM_raw_putb>
    MODEM_raw_putb (ram_hex[crc % 16]);
    15b8:	ef 2d       	mov	r30, r15
    15ba:	ef 70       	andi	r30, 0x0F	; 15
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	e3 52       	subi	r30, 0x23	; 35
    15c0:	fe 4d       	sbci	r31, 0xDE	; 222
    15c2:	80 81       	ld	r24, Z
    15c4:	0e 94 8b 13 	call	0x2716	; 0x2716 <MODEM_raw_putb>
    MODEM_raw_putb ('\r');
    15c8:	8d e0       	ldi	r24, 0x0D	; 13
    15ca:	0e 94 8b 13 	call	0x2716	; 0x2716 <MODEM_raw_putb>
    //wdt_disable();
    blocked_poll_response (update_asset_state, TIMEOUT_AWT_AT_RSP);
    15ce:	63 e0       	ldi	r22, 0x03	; 3
    15d0:	70 e0       	ldi	r23, 0x00	; 0
    15d2:	ce 01       	movw	r24, r28
    15d4:	64 db       	rcall	.-2360   	; 0xc9e <blocked_poll_response>
    bool rsp = modem.rsp.state == RSP_STATE_RSP_OK;
    15d6:	21 e0       	ldi	r18, 0x01	; 1
    15d8:	f8 01       	movw	r30, r16
    15da:	80 81       	ld	r24, Z
    15dc:	91 81       	ldd	r25, Z+1	; 0x01
    15de:	03 97       	sbiw	r24, 0x03	; 3
    15e0:	09 f0       	breq	.+2      	; 0x15e4 <awt_service+0x1b2>
    15e2:	20 e0       	ldi	r18, 0x00	; 0
    modem.rsp.state = RSP_STATE_IDLE;
    15e4:	10 92 a5 24 	sts	0x24A5, r1
    15e8:	10 92 a6 24 	sts	0x24A6, r1
    modem.rsp.sequential_at_failures = rsp ? 0 : modem.rsp.sequential_at_failures + 1;
    15ec:	21 11       	cpse	r18, r1
    15ee:	04 c0       	rjmp	.+8      	; 0x15f8 <awt_service+0x1c6>
    15f0:	80 91 aa 24 	lds	r24, 0x24AA
    15f4:	8f 5f       	subi	r24, 0xFF	; 255
    15f6:	01 c0       	rjmp	.+2      	; 0x15fa <awt_service+0x1c8>
    15f8:	80 e0       	ldi	r24, 0x00	; 0
    15fa:	80 93 aa 24 	sts	0x24AA, r24
    15fe:	01 c0       	rjmp	.+2      	; 0x1602 <awt_service+0x1d0>
{
    uint8_t crc;

    poll_modem ();
    if (modem.rsp.state != RSP_STATE_IDLE) {
        return false;
    1600:	20 e0       	ldi	r18, 0x00	; 0
    }
    poll_modem ();

    // on boot and after a modem reset we need to register a data and command callback handlers
    if (handlers.register_modem_data_callbacks) {
        handlers.register_modem_data_callbacks = !blocked_data_handler_req (update_asset_state);
    1602:	81 e0       	ldi	r24, 0x01	; 1
    1604:	28 27       	eor	r18, r24
    1606:	20 93 c5 24 	sts	0x24C5, r18
    }
    if (handlers.register_modem_cmnd_callbacks) {
    160a:	80 91 c6 24 	lds	r24, 0x24C6
    160e:	88 23       	and	r24, r24
    1610:	09 f4       	brne	.+2      	; 0x1614 <awt_service+0x1e2>
    1612:	52 c0       	rjmp	.+164    	; 0x16b8 <awt_service+0x286>

static bool blocked_cmnd_handler_req (void (*update_asset_state) (void))
{
    uint8_t crc;

    poll_modem ();
    1614:	0e 94 63 01 	call	0x2c6	; 0x2c6 <poll_modem>
    if (modem.rsp.state != RSP_STATE_IDLE) {
    1618:	80 91 a5 24 	lds	r24, 0x24A5
    161c:	90 91 a6 24 	lds	r25, 0x24A6
    1620:	89 2b       	or	r24, r25
    1622:	09 f0       	breq	.+2      	; 0x1626 <awt_service+0x1f4>
    1624:	44 c0       	rjmp	.+136    	; 0x16ae <awt_service+0x27c>
        return false;
    }
    //wdt_set_timeout_period(WDT_TIMEOUT_PERIOD_8KCLK);
    //wdt_enable();
    modem.rsp.state = RSP_STATE_REQ_BUSY;
    1626:	05 ea       	ldi	r16, 0xA5	; 165
    1628:	14 e2       	ldi	r17, 0x24	; 36
    162a:	81 e0       	ldi	r24, 0x01	; 1
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	d8 01       	movw	r26, r16
    1630:	8d 93       	st	X+, r24
    1632:	9c 93       	st	X, r25
    MODEM_raw_puts ("ATE0;+AWTDA=");
    1634:	87 e1       	ldi	r24, 0x17	; 23
    1636:	91 e2       	ldi	r25, 0x21	; 33
    1638:	0e 94 92 13 	call	0x2724	; 0x2724 <MODEM_raw_puts>
    crc = MODEM_crc_putb (0xFF, 'c');
    163c:	63 e6       	ldi	r22, 0x63	; 99
    163e:	8f ef       	ldi	r24, 0xFF	; 255
    1640:	0e 94 a0 13 	call	0x2740	; 0x2740 <MODEM_crc_putb>
    crc = MODEM_crc_putb (crc, '*');
    1644:	6a e2       	ldi	r22, 0x2A	; 42
    1646:	0e 94 a0 13 	call	0x2740	; 0x2740 <MODEM_crc_putb>
    164a:	f8 2e       	mov	r15, r24
    MODEM_raw_puts (",CRC");
    164c:	88 e2       	ldi	r24, 0x28	; 40
    164e:	91 e2       	ldi	r25, 0x21	; 33
    1650:	0e 94 92 13 	call	0x2724	; 0x2724 <MODEM_raw_puts>
    MODEM_raw_putb (ram_hex[crc / 16]);
    1654:	af 2d       	mov	r26, r15
    1656:	a2 95       	swap	r26
    1658:	af 70       	andi	r26, 0x0F	; 15
    165a:	b0 e0       	ldi	r27, 0x00	; 0
    165c:	a3 52       	subi	r26, 0x23	; 35
    165e:	be 4d       	sbci	r27, 0xDE	; 222
    1660:	8c 91       	ld	r24, X
    1662:	0e 94 8b 13 	call	0x2716	; 0x2716 <MODEM_raw_putb>
    MODEM_raw_putb (ram_hex[crc % 16]);
    1666:	ef 2d       	mov	r30, r15
    1668:	ef 70       	andi	r30, 0x0F	; 15
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	e3 52       	subi	r30, 0x23	; 35
    166e:	fe 4d       	sbci	r31, 0xDE	; 222
    1670:	80 81       	ld	r24, Z
    1672:	0e 94 8b 13 	call	0x2716	; 0x2716 <MODEM_raw_putb>
    MODEM_raw_putb ('\r');
    1676:	8d e0       	ldi	r24, 0x0D	; 13
    1678:	0e 94 8b 13 	call	0x2716	; 0x2716 <MODEM_raw_putb>
    //wdt_disable();
    blocked_poll_response (update_asset_state, TIMEOUT_AWT_AT_RSP);
    167c:	63 e0       	ldi	r22, 0x03	; 3
    167e:	70 e0       	ldi	r23, 0x00	; 0
    1680:	ce 01       	movw	r24, r28
    1682:	0d db       	rcall	.-2534   	; 0xc9e <blocked_poll_response>
    bool rsp = modem.rsp.state == RSP_STATE_RSP_OK;
    1684:	21 e0       	ldi	r18, 0x01	; 1
    1686:	f8 01       	movw	r30, r16
    1688:	80 81       	ld	r24, Z
    168a:	91 81       	ldd	r25, Z+1	; 0x01
    168c:	03 97       	sbiw	r24, 0x03	; 3
    168e:	09 f0       	breq	.+2      	; 0x1692 <awt_service+0x260>
    1690:	20 e0       	ldi	r18, 0x00	; 0
    modem.rsp.state = RSP_STATE_IDLE;
    1692:	10 92 a5 24 	sts	0x24A5, r1
    1696:	10 92 a6 24 	sts	0x24A6, r1
    modem.rsp.sequential_at_failures = rsp ? 0 : modem.rsp.sequential_at_failures + 1;
    169a:	21 11       	cpse	r18, r1
    169c:	04 c0       	rjmp	.+8      	; 0x16a6 <awt_service+0x274>
    169e:	80 91 aa 24 	lds	r24, 0x24AA
    16a2:	8f 5f       	subi	r24, 0xFF	; 255
    16a4:	01 c0       	rjmp	.+2      	; 0x16a8 <awt_service+0x276>
    16a6:	80 e0       	ldi	r24, 0x00	; 0
    16a8:	80 93 aa 24 	sts	0x24AA, r24
    16ac:	01 c0       	rjmp	.+2      	; 0x16b0 <awt_service+0x27e>
{
    uint8_t crc;

    poll_modem ();
    if (modem.rsp.state != RSP_STATE_IDLE) {
        return false;
    16ae:	20 e0       	ldi	r18, 0x00	; 0
    // on boot and after a modem reset we need to register a data and command callback handlers
    if (handlers.register_modem_data_callbacks) {
        handlers.register_modem_data_callbacks = !blocked_data_handler_req (update_asset_state);
    }
    if (handlers.register_modem_cmnd_callbacks) {
        handlers.register_modem_cmnd_callbacks = !blocked_cmnd_handler_req (update_asset_state);
    16b0:	81 e0       	ldi	r24, 0x01	; 1
    16b2:	28 27       	eor	r18, r24
    16b4:	20 93 c6 24 	sts	0x24C6, r18
    }

    // on boot and after a modem reset we need to get the modem to monitor GPIO19 for reset toggles.
    if (modem.enable_gpio_reset_signal) {
    16b8:	80 91 b8 24 	lds	r24, 0x24B8
    16bc:	88 23       	and	r24, r24
    16be:	51 f0       	breq	.+20     	; 0x16d4 <awt_service+0x2a2>
#if defined(XTEND_RST_SGL)
        modem.enable_gpio_reset_signal = !blocked_at_req (XTEND_RST_SGL, 1);
#else
        modem.enable_gpio_reset_signal = !blocked_at_req (update_asset_state, "ATE0;+GPIORSTSGL=19,0", 1);
    16c0:	41 e0       	ldi	r20, 0x01	; 1
    16c2:	50 e0       	ldi	r21, 0x00	; 0
    16c4:	61 e6       	ldi	r22, 0x61	; 97
    16c6:	71 e2       	ldi	r23, 0x21	; 33
    16c8:	ce 01       	movw	r24, r28
    16ca:	19 db       	rcall	.-2510   	; 0xcfe <blocked_at_req>
    16cc:	91 e0       	ldi	r25, 0x01	; 1
    16ce:	89 27       	eor	r24, r25
    16d0:	80 93 b8 24 	sts	0x24B8, r24
#endif
    }

    if (timeout_test_and_clear_expired (TIMEOUT_AWT_QUERY_STATE_1_SEC_TIMER)) {
    16d4:	82 e0       	ldi	r24, 0x02	; 2
    16d6:	0e 94 78 1f 	call	0x3ef0	; 0x3ef0 <timeout_test_and_clear_expired>
    16da:	88 23       	and	r24, r24
    16dc:	09 f4       	brne	.+2      	; 0x16e0 <awt_service+0x2ae>
    16de:	81 c0       	rjmp	.+258    	; 0x17e2 <awt_service+0x3b0>
        if (modem.rsp.state != RSP_STATE_IDLE) {
    16e0:	80 91 a5 24 	lds	r24, 0x24A5
    16e4:	90 91 a6 24 	lds	r25, 0x24A6
    16e8:	89 2b       	or	r24, r25
    16ea:	91 f0       	breq	.+36     	; 0x1710 <awt_service+0x2de>
            if (++modem.rsp.secs_not_ready == 60) {
    16ec:	ec ea       	ldi	r30, 0xAC	; 172
    16ee:	f4 e2       	ldi	r31, 0x24	; 36
    16f0:	80 81       	ld	r24, Z
    16f2:	8f 5f       	subi	r24, 0xFF	; 255
    16f4:	80 83       	st	Z, r24
    16f6:	8c 33       	cpi	r24, 0x3C	; 60
    16f8:	09 f0       	breq	.+2      	; 0x16fc <awt_service+0x2ca>
    16fa:	73 c0       	rjmp	.+230    	; 0x17e2 <awt_service+0x3b0>
                awt_reset_modem (update_asset_state, __LINE__);
    16fc:	69 e1       	ldi	r22, 0x19	; 25
    16fe:	73 e0       	ldi	r23, 0x03	; 3
    1700:	ce 01       	movw	r24, r28
    1702:	d1 dd       	rcall	.-1118   	; 0x12a6 <awt_reset_modem>
                handlers.cb_reset_avr ();
    1704:	e0 91 b9 24 	lds	r30, 0x24B9
    1708:	f0 91 ba 24 	lds	r31, 0x24BA
    170c:	09 95       	icall
    170e:	69 c0       	rjmp	.+210    	; 0x17e2 <awt_service+0x3b0>
            }
        } else {
            modem.rsp.secs_not_ready = 0;
    1710:	10 92 ac 24 	sts	0x24AC, r1
            switch (modem.query_modem_state) {
    1714:	80 91 b2 24 	lds	r24, 0x24B2
    1718:	90 91 b3 24 	lds	r25, 0x24B3
    171c:	81 30       	cpi	r24, 0x01	; 1
    171e:	91 05       	cpc	r25, r1
    1720:	e1 f1       	breq	.+120    	; 0x179a <awt_service+0x368>
    1722:	20 f0       	brcs	.+8      	; 0x172c <awt_service+0x2fa>
    1724:	02 97       	sbiw	r24, 0x02	; 2
    1726:	09 f0       	breq	.+2      	; 0x172a <awt_service+0x2f8>
    1728:	4f c0       	rjmp	.+158    	; 0x17c8 <awt_service+0x396>
    172a:	17 c0       	rjmp	.+46     	; 0x175a <awt_service+0x328>
            case QUERY_BOOT:
                if (blocked_at_req (update_asset_state, "ATE0;+BOOT?", 10)) {
    172c:	4a e0       	ldi	r20, 0x0A	; 10
    172e:	50 e0       	ldi	r21, 0x00	; 0
    1730:	67 e7       	ldi	r22, 0x77	; 119
    1732:	71 e2       	ldi	r23, 0x21	; 33
    1734:	ce 01       	movw	r24, r28
    1736:	e3 da       	rcall	.-2618   	; 0xcfe <blocked_at_req>
    1738:	88 23       	and	r24, r24
    173a:	49 f0       	breq	.+18     	; 0x174e <awt_service+0x31c>
                    modem.query_modem_state = QUERY_TIMESTAMP;
    173c:	82 e0       	ldi	r24, 0x02	; 2
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	80 93 b2 24 	sts	0x24B2, r24
    1744:	90 93 b3 24 	sts	0x24B3, r25
                    modem.query_state_accumulated_errors = 0;
    1748:	10 92 b7 24 	sts	0x24B7, r1
    174c:	4a c0       	rjmp	.+148    	; 0x17e2 <awt_service+0x3b0>
                } else {
                    modem.query_state_accumulated_errors++;
    174e:	e7 eb       	ldi	r30, 0xB7	; 183
    1750:	f4 e2       	ldi	r31, 0x24	; 36
    1752:	80 81       	ld	r24, Z
    1754:	8f 5f       	subi	r24, 0xFF	; 255
    1756:	80 83       	st	Z, r24
    1758:	37 c0       	rjmp	.+110    	; 0x17c8 <awt_service+0x396>
                }
                break;
            case QUERY_TIMESTAMP:
                if (blocked_at_req (update_asset_state, "ATE0;+EPOCH?", 10)) {
    175a:	4a e0       	ldi	r20, 0x0A	; 10
    175c:	50 e0       	ldi	r21, 0x00	; 0
    175e:	63 e8       	ldi	r22, 0x83	; 131
    1760:	71 e2       	ldi	r23, 0x21	; 33
    1762:	ce 01       	movw	r24, r28
    1764:	cc da       	rcall	.-2664   	; 0xcfe <blocked_at_req>
    1766:	88 23       	and	r24, r24
    1768:	91 f0       	breq	.+36     	; 0x178e <awt_service+0x35c>
                    if (modem.gprs_up) {
    176a:	80 91 b1 24 	lds	r24, 0x24B1
    176e:	88 23       	and	r24, r24
    1770:	29 f0       	breq	.+10     	; 0x177c <awt_service+0x34a>
                        modem.query_modem_state = QUERY_BOOT;
    1772:	10 92 b2 24 	sts	0x24B2, r1
    1776:	10 92 b3 24 	sts	0x24B3, r1
    177a:	06 c0       	rjmp	.+12     	; 0x1788 <awt_service+0x356>
                    } else {
                        modem.query_modem_state = QUERY_AWTDA_UP;
    177c:	81 e0       	ldi	r24, 0x01	; 1
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	80 93 b2 24 	sts	0x24B2, r24
    1784:	90 93 b3 24 	sts	0x24B3, r25
                    }
                    modem.query_state_accumulated_errors = 0;
    1788:	10 92 b7 24 	sts	0x24B7, r1
    178c:	2a c0       	rjmp	.+84     	; 0x17e2 <awt_service+0x3b0>
                } else {
                    modem.query_state_accumulated_errors++;
    178e:	e7 eb       	ldi	r30, 0xB7	; 183
    1790:	f4 e2       	ldi	r31, 0x24	; 36
    1792:	80 81       	ld	r24, Z
    1794:	8f 5f       	subi	r24, 0xFF	; 255
    1796:	80 83       	st	Z, r24
    1798:	17 c0       	rjmp	.+46     	; 0x17c8 <awt_service+0x396>
                }
                break;
            case QUERY_AWTDA_UP:
                modem.rsp.expect_awtda_up = true;
    179a:	81 e0       	ldi	r24, 0x01	; 1
    179c:	80 93 a7 24 	sts	0x24A7, r24
                if (blocked_at_req (update_asset_state, "ATE0;+AWTDA?",10)) {
    17a0:	4a e0       	ldi	r20, 0x0A	; 10
    17a2:	50 e0       	ldi	r21, 0x00	; 0
    17a4:	60 e9       	ldi	r22, 0x90	; 144
    17a6:	71 e2       	ldi	r23, 0x21	; 33
    17a8:	ce 01       	movw	r24, r28
    17aa:	a9 da       	rcall	.-2734   	; 0xcfe <blocked_at_req>
    17ac:	88 23       	and	r24, r24
    17ae:	39 f0       	breq	.+14     	; 0x17be <awt_service+0x38c>
                    modem.query_modem_state = QUERY_BOOT;
    17b0:	10 92 b2 24 	sts	0x24B2, r1
    17b4:	10 92 b3 24 	sts	0x24B3, r1
                    modem.query_state_accumulated_errors = 0;
    17b8:	10 92 b7 24 	sts	0x24B7, r1
    17bc:	12 c0       	rjmp	.+36     	; 0x17e2 <awt_service+0x3b0>
                } else {
                    modem.query_state_accumulated_errors++;
    17be:	e7 eb       	ldi	r30, 0xB7	; 183
    17c0:	f4 e2       	ldi	r31, 0x24	; 36
    17c2:	80 81       	ld	r24, Z
    17c4:	8f 5f       	subi	r24, 0xFF	; 255
    17c6:	80 83       	st	Z, r24
                }
                break;
            }
            // in case modem is rebooting give it 120 secs = 120 / (1 sec timeouts for every query)
            if (modem.query_state_accumulated_errors == 120 / 1) {
    17c8:	80 91 b7 24 	lds	r24, 0x24B7
    17cc:	88 37       	cpi	r24, 0x78	; 120
    17ce:	49 f4       	brne	.+18     	; 0x17e2 <awt_service+0x3b0>
                awt_reset_modem (update_asset_state, __LINE__);
    17d0:	6f e3       	ldi	r22, 0x3F	; 63
    17d2:	73 e0       	ldi	r23, 0x03	; 3
    17d4:	ce 01       	movw	r24, r28
    17d6:	67 dd       	rcall	.-1330   	; 0x12a6 <awt_reset_modem>
                handlers.cb_reset_avr ();
    17d8:	e0 91 b9 24 	lds	r30, 0x24B9
    17dc:	f0 91 ba 24 	lds	r31, 0x24BA
    17e0:	09 95       	icall
            }
        }
    }

    if (modem.rsp.sequential_awtda_failures >= 3 || modem.rsp.sequential_at_failures >= 3) {
    17e2:	80 91 ab 24 	lds	r24, 0x24AB
    17e6:	83 30       	cpi	r24, 0x03	; 3
    17e8:	20 f4       	brcc	.+8      	; 0x17f2 <awt_service+0x3c0>
    17ea:	80 91 aa 24 	lds	r24, 0x24AA
    17ee:	83 30       	cpi	r24, 0x03	; 3
    17f0:	20 f0       	brcs	.+8      	; 0x17fa <awt_service+0x3c8>
        awt_reset_modem (update_asset_state, __LINE__);
    17f2:	66 e4       	ldi	r22, 0x46	; 70
    17f4:	73 e0       	ldi	r23, 0x03	; 3
    17f6:	ce 01       	movw	r24, r28
    17f8:	56 dd       	rcall	.-1364   	; 0x12a6 <awt_reset_modem>
    }

    // send any buffered acks
    awt_send_any_enqueued_acks (update_asset_state);
    17fa:	ce 01       	movw	r24, r28
    17fc:	5a dc       	rcall	.-1868   	; 0x10b2 <awt_send_any_enqueued_acks>
}
    17fe:	df 91       	pop	r29
    1800:	cf 91       	pop	r28
    1802:	1f 91       	pop	r17
    1804:	0f 91       	pop	r16
    1806:	ff 90       	pop	r15
    1808:	08 95       	ret

0000180a <awt_init>:
bool awt_init (awt_reset_avr_t reset_avr_handler,
               awt_reset_handler_t r_handler,
               awt_modem_up_handler_t m_handler,
               awt_cmnd_handler_t c_handler,
               awt_data_handler_t d_handler)
{
    180a:	0f 93       	push	r16
    180c:	1f 93       	push	r17
    handlers.cb_reset_avr = reset_avr_handler;
    180e:	80 93 b9 24 	sts	0x24B9, r24
    1812:	90 93 ba 24 	sts	0x24BA, r25
    handlers.cb_req_response = NULL;
    1816:	10 92 c3 24 	sts	0x24C3, r1
    181a:	10 92 c4 24 	sts	0x24C4, r1
    handlers.cb_reset = r_handler;
    181e:	60 93 bb 24 	sts	0x24BB, r22
    1822:	70 93 bc 24 	sts	0x24BC, r23
    handlers.cb_modem_up = m_handler;
    1826:	40 93 bd 24 	sts	0x24BD, r20
    182a:	50 93 be 24 	sts	0x24BE, r21
    handlers.cb_data = d_handler;
    182e:	00 93 c1 24 	sts	0x24C1, r16
    1832:	10 93 c2 24 	sts	0x24C2, r17
    handlers.cb_cmnd = c_handler;
    1836:	20 93 bf 24 	sts	0x24BF, r18
    183a:	30 93 c0 24 	sts	0x24C0, r19
    handlers.register_modem_data_callbacks = false;
    183e:	10 92 c5 24 	sts	0x24C5, r1
    handlers.register_modem_cmnd_callbacks = false;
    1842:	10 92 c6 24 	sts	0x24C6, r1

    memset (&modem, 0, sizeof modem);
    1846:	85 e1       	ldi	r24, 0x15	; 21
    1848:	91 e0       	ldi	r25, 0x01	; 1
    184a:	e4 ea       	ldi	r30, 0xA4	; 164
    184c:	f3 e2       	ldi	r31, 0x23	; 35
    184e:	df 01       	movw	r26, r30
    1850:	9c 01       	movw	r18, r24
    1852:	1d 92       	st	X+, r1
    1854:	21 50       	subi	r18, 0x01	; 1
    1856:	30 40       	sbci	r19, 0x00	; 0
    1858:	e1 f7       	brne	.-8      	; 0x1852 <awt_init+0x48>
    reset_state (RSP_STATE_IDLE);
    185a:	80 e0       	ldi	r24, 0x00	; 0
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	0e 94 1c 01 	call	0x238	; 0x238 <reset_state>
    acks.front = 0;
    1862:	10 92 c7 24 	sts	0x24C7, r1
    acks.back = 0;
    1866:	10 92 c8 24 	sts	0x24C8, r1
    _MODEM_init ();
    186a:	8e d6       	rcall	.+3356   	; 0x2588 <_uarte0_init>
    _MODEM_enable_interrupt (USART_INT_LVL_MED);
    186c:	82 e0       	ldi	r24, 0x02	; 2
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	82 d6       	rcall	.+3332   	; 0x2576 <_uarte0_enable_interrupt>

    while (MODEM_get_byte () >= 0) {
    1872:	45 d7       	rcall	.+3722   	; 0x26fe <MODEM_get_byte>
    1874:	99 23       	and	r25, r25
    1876:	ec f7       	brge	.-6      	; 0x1872 <awt_init+0x68>
    1878:	14 e0       	ldi	r17, 0x04	; 4
        ;
    }

    for (uint8_t retry = 0; retry < 4; retry++) {
        if (blocked_sync_modem (NULL)) {
    187a:	80 e0       	ldi	r24, 0x00	; 0
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	85 da       	rcall	.-2806   	; 0xd8a <blocked_sync_modem>
    1880:	88 23       	and	r24, r24
    1882:	09 f4       	brne	.+2      	; 0x1886 <awt_init+0x7c>
    1884:	5b c0       	rjmp	.+182    	; 0x193c <awt_init+0x132>
            modem.eeprom_flow_control_enabled = false;
    1886:	10 92 b6 24 	sts	0x24B6, r1
            if (!blocked_at_req (NULL, "at&v1", 2)) {
    188a:	42 e0       	ldi	r20, 0x02	; 2
    188c:	50 e0       	ldi	r21, 0x00	; 0
    188e:	6d e9       	ldi	r22, 0x9D	; 157
    1890:	71 e2       	ldi	r23, 0x21	; 33
    1892:	80 e0       	ldi	r24, 0x00	; 0
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	33 da       	rcall	.-2970   	; 0xcfe <blocked_at_req>
    1898:	81 11       	cpse	r24, r1
    189a:	05 c0       	rjmp	.+10     	; 0x18a6 <awt_init+0x9c>
                handlers.cb_reset_avr ();
    189c:	e0 91 b9 24 	lds	r30, 0x24B9
    18a0:	f0 91 ba 24 	lds	r31, 0x24BA
    18a4:	09 95       	icall
            }
            if (modem.eeprom_flow_control_enabled) {
    18a6:	80 91 b6 24 	lds	r24, 0x24B6
    18aa:	88 23       	and	r24, r24
    18ac:	61 f0       	breq	.+24     	; 0x18c6 <awt_init+0xbc>
                blocked_at_req (NULL, "AT+IFC=0,0;E0;&W", 2);
    18ae:	42 e0       	ldi	r20, 0x02	; 2
    18b0:	50 e0       	ldi	r21, 0x00	; 0
    18b2:	63 ea       	ldi	r22, 0xA3	; 163
    18b4:	71 e2       	ldi	r23, 0x21	; 33
    18b6:	80 e0       	ldi	r24, 0x00	; 0
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	21 da       	rcall	.-3006   	; 0xcfe <blocked_at_req>
                handlers.cb_reset_avr ();
    18bc:	e0 91 b9 24 	lds	r30, 0x24B9
    18c0:	f0 91 ba 24 	lds	r31, 0x24BA
    18c4:	09 95       	icall
            }
            if (!blocked_at_req (NULL, "ate0;+wopen?", 2)) {
    18c6:	42 e0       	ldi	r20, 0x02	; 2
    18c8:	50 e0       	ldi	r21, 0x00	; 0
    18ca:	64 eb       	ldi	r22, 0xB4	; 180
    18cc:	71 e2       	ldi	r23, 0x21	; 33
    18ce:	80 e0       	ldi	r24, 0x00	; 0
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	15 da       	rcall	.-3030   	; 0xcfe <blocked_at_req>
    18d4:	81 11       	cpse	r24, r1
    18d6:	05 c0       	rjmp	.+10     	; 0x18e2 <awt_init+0xd8>
                handlers.cb_reset_avr ();
    18d8:	e0 91 b9 24 	lds	r30, 0x24B9
    18dc:	f0 91 ba 24 	lds	r31, 0x24BA
    18e0:	09 95       	icall
            }
            if (modem.wopen_state == WOPEN_STATE_UNKNOWN) {
    18e2:	80 91 b4 24 	lds	r24, 0x24B4
    18e6:	90 91 b5 24 	lds	r25, 0x24B5
    18ea:	00 97       	sbiw	r24, 0x00	; 0
    18ec:	31 f4       	brne	.+12     	; 0x18fa <awt_init+0xf0>
                handlers.cb_reset_avr ();
    18ee:	e0 91 b9 24 	lds	r30, 0x24B9
    18f2:	f0 91 ba 24 	lds	r31, 0x24BA
    18f6:	09 95       	icall
    18f8:	0e c0       	rjmp	.+28     	; 0x1916 <awt_init+0x10c>
            } else if (modem.wopen_state == WOPEN_STATE_DISABLED) {
    18fa:	02 97       	sbiw	r24, 0x02	; 2
    18fc:	61 f4       	brne	.+24     	; 0x1916 <awt_init+0x10c>
                blocked_at_req (NULL, "ate0;+wopen=1", 45);
    18fe:	4d e2       	ldi	r20, 0x2D	; 45
    1900:	50 e0       	ldi	r21, 0x00	; 0
    1902:	61 ec       	ldi	r22, 0xC1	; 193
    1904:	71 e2       	ldi	r23, 0x21	; 33
    1906:	80 e0       	ldi	r24, 0x00	; 0
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	f9 d9       	rcall	.-3086   	; 0xcfe <blocked_at_req>
                handlers.cb_reset_avr ();
    190c:	e0 91 b9 24 	lds	r30, 0x24B9
    1910:	f0 91 ba 24 	lds	r31, 0x24BA
    1914:	09 95       	icall
            }
            timeout_start_singleshot (TIMEOUT_ALL_PAUSE, TIMEOUT_TICK_HZ * 2);
    1916:	60 e1       	ldi	r22, 0x10	; 16
    1918:	70 e0       	ldi	r23, 0x00	; 0
    191a:	80 e0       	ldi	r24, 0x00	; 0
    191c:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <timeout_start_singleshot>
            while (!timeout_test_and_clear_expired (TIMEOUT_ALL_PAUSE)) {
    1920:	80 e0       	ldi	r24, 0x00	; 0
    1922:	0e 94 78 1f 	call	0x3ef0	; 0x3ef0 <timeout_test_and_clear_expired>
    1926:	88 23       	and	r24, r24
    1928:	d9 f3       	breq	.-10     	; 0x1920 <awt_init+0x116>
                ;
            }
            blocked_at_req (NULL, "ATE0;+AWTDA?", 1);
    192a:	41 e0       	ldi	r20, 0x01	; 1
    192c:	50 e0       	ldi	r21, 0x00	; 0
    192e:	60 e9       	ldi	r22, 0x90	; 144
    1930:	71 e2       	ldi	r23, 0x21	; 33
    1932:	80 e0       	ldi	r24, 0x00	; 0
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	e3 d9       	rcall	.-3130   	; 0xcfe <blocked_at_req>
            return true;
    1938:	81 e0       	ldi	r24, 0x01	; 1
    193a:	15 c0       	rjmp	.+42     	; 0x1966 <awt_init+0x15c>
        }
        timeout_start_singleshot (TIMEOUT_ALL_PAUSE, TIMEOUT_TICK_HZ / 2);
    193c:	64 e0       	ldi	r22, 0x04	; 4
    193e:	70 e0       	ldi	r23, 0x00	; 0
    1940:	80 e0       	ldi	r24, 0x00	; 0
    1942:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <timeout_start_singleshot>
        while (!timeout_test_and_clear_expired (TIMEOUT_ALL_PAUSE)) {
    1946:	80 e0       	ldi	r24, 0x00	; 0
    1948:	0e 94 78 1f 	call	0x3ef0	; 0x3ef0 <timeout_test_and_clear_expired>
    194c:	88 23       	and	r24, r24
    194e:	d9 f3       	breq	.-10     	; 0x1946 <awt_init+0x13c>
            ;
        }
        blocked_at_req (NULL, "AT+IFC=0,0;E0", 1);
    1950:	41 e0       	ldi	r20, 0x01	; 1
    1952:	50 e0       	ldi	r21, 0x00	; 0
    1954:	6f ec       	ldi	r22, 0xCF	; 207
    1956:	71 e2       	ldi	r23, 0x21	; 33
    1958:	80 e0       	ldi	r24, 0x00	; 0
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	d0 d9       	rcall	.-3168   	; 0xcfe <blocked_at_req>
    195e:	11 50       	subi	r17, 0x01	; 1

    while (MODEM_get_byte () >= 0) {
        ;
    }

    for (uint8_t retry = 0; retry < 4; retry++) {
    1960:	09 f0       	breq	.+2      	; 0x1964 <awt_init+0x15a>
    1962:	8b cf       	rjmp	.-234    	; 0x187a <awt_init+0x70>
        while (!timeout_test_and_clear_expired (TIMEOUT_ALL_PAUSE)) {
            ;
        }
        blocked_at_req (NULL, "AT+IFC=0,0;E0", 1);
    }
    return false;
    1964:	80 e0       	ldi	r24, 0x00	; 0
}
    1966:	1f 91       	pop	r17
    1968:	0f 91       	pop	r16
    196a:	08 95       	ret

0000196c <crc8_update>:
    for (uint16_t counter = 0; counter < len; counter++)
    {
        seed = crc_ccitt16_update(seed, *buf++);
    }
    return seed;
}
    196c:	86 27       	eor	r24, r22
    196e:	98 e0       	ldi	r25, 0x08	; 8
    1970:	2c e8       	ldi	r18, 0x8C	; 140
    1972:	80 ff       	sbrs	r24, 0
    1974:	03 c0       	rjmp	.+6      	; 0x197c <crc8_update+0x10>
    1976:	86 95       	lsr	r24
    1978:	82 27       	eor	r24, r18
    197a:	01 c0       	rjmp	.+2      	; 0x197e <crc8_update+0x12>
    197c:	86 95       	lsr	r24
    197e:	91 50       	subi	r25, 0x01	; 1
    1980:	c1 f7       	brne	.-16     	; 0x1972 <crc8_update+0x6>
    1982:	08 95       	ret

00001984 <crc8_compute>:

uint8_t crc8_compute(uint8_t* buffer, uint8_t buffer_length)
{
    1984:	1f 93       	push	r17
    1986:	cf 93       	push	r28
    1988:	df 93       	push	r29
    198a:	ec 01       	movw	r28, r24
    uint8_t crc8 = 0;
    while (buffer_length--)
    198c:	16 2f       	mov	r17, r22
    198e:	11 50       	subi	r17, 0x01	; 1
    1990:	66 23       	and	r22, r22
    1992:	31 f0       	breq	.+12     	; 0x19a0 <crc8_compute+0x1c>
    return seed;
}

uint8_t crc8_compute(uint8_t* buffer, uint8_t buffer_length)
{
    uint8_t crc8 = 0;
    1994:	80 e0       	ldi	r24, 0x00	; 0
    while (buffer_length--)
    {
        crc8 = crc8_update(crc8, *buffer++);
    1996:	69 91       	ld	r22, Y+
    1998:	e9 df       	rcall	.-46     	; 0x196c <crc8_update>
}

uint8_t crc8_compute(uint8_t* buffer, uint8_t buffer_length)
{
    uint8_t crc8 = 0;
    while (buffer_length--)
    199a:	11 50       	subi	r17, 0x01	; 1
    199c:	e0 f7       	brcc	.-8      	; 0x1996 <crc8_compute+0x12>
    199e:	01 c0       	rjmp	.+2      	; 0x19a2 <crc8_compute+0x1e>
    return seed;
}

uint8_t crc8_compute(uint8_t* buffer, uint8_t buffer_length)
{
    uint8_t crc8 = 0;
    19a0:	80 e0       	ldi	r24, 0x00	; 0
    while (buffer_length--)
    {
        crc8 = crc8_update(crc8, *buffer++);
    }
    return crc8;
}
    19a2:	df 91       	pop	r29
    19a4:	cf 91       	pop	r28
    19a6:	1f 91       	pop	r17
    19a8:	08 95       	ret

000019aa <ds18b20_update_sensors>:
int16_t ds18b20_temperature[OW_MAX_DEVICES];
static uint8_t selected_device;
static bool start_conversion;

void ds18b20_update_sensors(void)
{
    19aa:	ff 92       	push	r15
    19ac:	0f 93       	push	r16
    19ae:	1f 93       	push	r17
    19b0:	cf 93       	push	r28
    19b2:	df 93       	push	r29
    if (start_conversion) {
    19b4:	80 91 81 26 	lds	r24, 0x2681
    19b8:	88 23       	and	r24, r24
    19ba:	09 f1       	breq	.+66     	; 0x19fe <ds18b20_update_sensors+0x54>
        if (ow_match(ow_rom_codes[selected_device]) && ow_write_byte_power(DS18B20_CONVERT)) {
    19bc:	80 91 82 26 	lds	r24, 0x2682
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	88 0f       	add	r24, r24
    19c4:	99 1f       	adc	r25, r25
    19c6:	88 0f       	add	r24, r24
    19c8:	99 1f       	adc	r25, r25
    19ca:	88 0f       	add	r24, r24
    19cc:	99 1f       	adc	r25, r25
    19ce:	8c 5f       	subi	r24, 0xFC	; 252
    19d0:	92 4d       	sbci	r25, 0xD2	; 210
    19d2:	c7 d3       	rcall	.+1934   	; 0x2162 <ow_match>
    19d4:	88 23       	and	r24, r24
    19d6:	39 f0       	breq	.+14     	; 0x19e6 <ds18b20_update_sensors+0x3c>
    19d8:	84 e4       	ldi	r24, 0x44	; 68
    19da:	62 d3       	rcall	.+1732   	; 0x20a0 <ow_write_byte_power>
    19dc:	88 23       	and	r24, r24
    19de:	19 f0       	breq	.+6      	; 0x19e6 <ds18b20_update_sensors+0x3c>
            start_conversion = false;
    19e0:	10 92 81 26 	sts	0x2681, r1
    19e4:	8b c0       	rjmp	.+278    	; 0x1afc <ds18b20_update_sensors+0x152>
        } else {
            selected_device = (selected_device + 1) % ow_count;
    19e6:	80 91 82 26 	lds	r24, 0x2682
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	01 96       	adiw	r24, 0x01	; 1
    19ee:	60 91 84 2d 	lds	r22, 0x2D84
    19f2:	70 e0       	ldi	r23, 0x00	; 0
    19f4:	0e 94 4b 35 	call	0x6a96	; 0x6a96 <__divmodhi4>
    19f8:	80 93 82 26 	sts	0x2682, r24
    19fc:	7f c0       	rjmp	.+254    	; 0x1afc <ds18b20_update_sensors+0x152>
        }
    } else {
        if (ow_match(ow_rom_codes[selected_device]) && ow_write_byte_power(DS18B20_READ_SCRATCH_PAD)) {
    19fe:	80 91 82 26 	lds	r24, 0x2682
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	88 0f       	add	r24, r24
    1a06:	99 1f       	adc	r25, r25
    1a08:	88 0f       	add	r24, r24
    1a0a:	99 1f       	adc	r25, r25
    1a0c:	88 0f       	add	r24, r24
    1a0e:	99 1f       	adc	r25, r25
    1a10:	8c 5f       	subi	r24, 0xFC	; 252
    1a12:	92 4d       	sbci	r25, 0xD2	; 210
    1a14:	a6 d3       	rcall	.+1868   	; 0x2162 <ow_match>
    1a16:	88 23       	and	r24, r24
    1a18:	09 f4       	brne	.+2      	; 0x1a1c <ds18b20_update_sensors+0x72>
    1a1a:	4a c0       	rjmp	.+148    	; 0x1ab0 <ds18b20_update_sensors+0x106>
    1a1c:	8e eb       	ldi	r24, 0xBE	; 190
    1a1e:	40 d3       	rcall	.+1664   	; 0x20a0 <ow_write_byte_power>
    1a20:	88 23       	and	r24, r24
    1a22:	09 f4       	brne	.+2      	; 0x1a26 <ds18b20_update_sensors+0x7c>
    1a24:	45 c0       	rjmp	.+138    	; 0x1ab0 <ds18b20_update_sensors+0x106>
    1a26:	03 e8       	ldi	r16, 0x83	; 131
    1a28:	16 e2       	ldi	r17, 0x26	; 38
    1a2a:	c0 e0       	ldi	r28, 0x00	; 0
    1a2c:	d0 e0       	ldi	r29, 0x00	; 0
    1a2e:	f1 2c       	mov	r15, r1
            static uint8_t scratch_pad[9];
            uint8_t crc = 0;
            for (uint8_t i = 0; i < 9; i++) {
                if (!(ow_read_byte(&scratch_pad[i]))) {
    1a30:	ce 01       	movw	r24, r28
    1a32:	8d 57       	subi	r24, 0x7D	; 125
    1a34:	99 4d       	sbci	r25, 0xD9	; 217
    1a36:	3f d3       	rcall	.+1662   	; 0x20b6 <ow_read_byte>
    1a38:	88 23       	and	r24, r24
    1a3a:	59 f0       	breq	.+22     	; 0x1a52 <ds18b20_update_sensors+0xa8>
                    crc = 0xFF;
                    break;
                }
                crc = crc8_update(crc, scratch_pad[i]);
    1a3c:	f8 01       	movw	r30, r16
    1a3e:	61 91       	ld	r22, Z+
    1a40:	8f 01       	movw	r16, r30
    1a42:	8f 2d       	mov	r24, r15
    1a44:	93 df       	rcall	.-218    	; 0x196c <crc8_update>
    1a46:	f8 2e       	mov	r15, r24
    1a48:	21 96       	adiw	r28, 0x01	; 1
        }
    } else {
        if (ow_match(ow_rom_codes[selected_device]) && ow_write_byte_power(DS18B20_READ_SCRATCH_PAD)) {
            static uint8_t scratch_pad[9];
            uint8_t crc = 0;
            for (uint8_t i = 0; i < 9; i++) {
    1a4a:	c9 30       	cpi	r28, 0x09	; 9
    1a4c:	d1 05       	cpc	r29, r1
    1a4e:	81 f7       	brne	.-32     	; 0x1a30 <ds18b20_update_sensors+0x86>
    1a50:	02 c0       	rjmp	.+4      	; 0x1a56 <ds18b20_update_sensors+0xac>
                if (!(ow_read_byte(&scratch_pad[i]))) {
                    crc = 0xFF;
    1a52:	ff 24       	eor	r15, r15
    1a54:	fa 94       	dec	r15
                    break;
                }
                crc = crc8_update(crc, scratch_pad[i]);
            }
            if (sequential_errors[selected_device] < 250) {
    1a56:	20 91 82 26 	lds	r18, 0x2682
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	f9 01       	movw	r30, r18
    1a5e:	e4 57       	subi	r30, 0x74	; 116
    1a60:	f9 4d       	sbci	r31, 0xD9	; 217
    1a62:	80 81       	ld	r24, Z
    1a64:	8a 3f       	cpi	r24, 0xFA	; 250
    1a66:	28 f4       	brcc	.+10     	; 0x1a72 <ds18b20_update_sensors+0xc8>
                sequential_errors[selected_device]++;
    1a68:	f9 01       	movw	r30, r18
    1a6a:	e4 57       	subi	r30, 0x74	; 116
    1a6c:	f9 4d       	sbci	r31, 0xD9	; 217
    1a6e:	8f 5f       	subi	r24, 0xFF	; 255
    1a70:	80 83       	st	Z, r24
            }
            if (crc == 0) {
    1a72:	f1 10       	cpse	r15, r1
    1a74:	1d c0       	rjmp	.+58     	; 0x1ab0 <ds18b20_update_sensors+0x106>
                int16_t temperature = ((uint16_t)(scratch_pad[1]) << 8) | scratch_pad[0];
    1a76:	90 91 84 26 	lds	r25, 0x2684
    1a7a:	80 e0       	ldi	r24, 0x00	; 0
    1a7c:	40 91 83 26 	lds	r20, 0x2683
    1a80:	84 2b       	or	r24, r20
                if (temperature != 0x550 && temperature >= -160 && temperature <= 1360) { // probe reset temperature and accuracy filter
    1a82:	80 35       	cpi	r24, 0x50	; 80
    1a84:	f5 e0       	ldi	r31, 0x05	; 5
    1a86:	9f 07       	cpc	r25, r31
    1a88:	99 f0       	breq	.+38     	; 0x1ab0 <ds18b20_update_sensors+0x106>
    1a8a:	80 36       	cpi	r24, 0x60	; 96
    1a8c:	4f ef       	ldi	r20, 0xFF	; 255
    1a8e:	94 07       	cpc	r25, r20
    1a90:	7c f0       	brlt	.+30     	; 0x1ab0 <ds18b20_update_sensors+0x106>
    1a92:	81 35       	cpi	r24, 0x51	; 81
    1a94:	e5 e0       	ldi	r30, 0x05	; 5
    1a96:	9e 07       	cpc	r25, r30
    1a98:	5c f4       	brge	.+22     	; 0x1ab0 <ds18b20_update_sensors+0x106>
                    ds18b20_temperature[selected_device] = ((uint16_t)(scratch_pad[1]) << 8) | scratch_pad[0];
    1a9a:	f9 01       	movw	r30, r18
    1a9c:	ee 0f       	add	r30, r30
    1a9e:	ff 1f       	adc	r31, r31
    1aa0:	ec 52       	subi	r30, 0x2C	; 44
    1aa2:	f4 4d       	sbci	r31, 0xD4	; 212
    1aa4:	80 83       	st	Z, r24
    1aa6:	91 83       	std	Z+1, r25	; 0x01
                    sequential_errors[selected_device] = 0;
    1aa8:	f9 01       	movw	r30, r18
    1aaa:	e4 57       	subi	r30, 0x74	; 116
    1aac:	f9 4d       	sbci	r31, 0xD9	; 217
    1aae:	10 82       	st	Z, r1
                }
            }
        }
        selected_device = (selected_device + 1) % ow_count;
    1ab0:	20 91 84 2d 	lds	r18, 0x2D84
    1ab4:	80 91 82 26 	lds	r24, 0x2682
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	01 96       	adiw	r24, 0x01	; 1
    1abc:	62 2f       	mov	r22, r18
    1abe:	70 e0       	ldi	r23, 0x00	; 0
    1ac0:	0e 94 4b 35 	call	0x6a96	; 0x6a96 <__divmodhi4>
    1ac4:	80 93 82 26 	sts	0x2682, r24
        start_conversion = true;
    1ac8:	81 e0       	ldi	r24, 0x01	; 1
    1aca:	80 93 81 26 	sts	0x2681, r24
        if (ow_count) {
    1ace:	22 23       	and	r18, r18
    1ad0:	a9 f0       	breq	.+42     	; 0x1afc <ds18b20_update_sensors+0x152>
    1ad2:	ec e8       	ldi	r30, 0x8C	; 140
    1ad4:	f6 e2       	ldi	r31, 0x26	; 38
    1ad6:	a4 ed       	ldi	r26, 0xD4	; 212
    1ad8:	bb e2       	ldi	r27, 0x2B	; 43
uint8_t _ds18b20_operational_count;
int16_t ds18b20_temperature[OW_MAX_DEVICES];
static uint8_t selected_device;
static bool start_conversion;

void ds18b20_update_sensors(void)
    1ada:	21 50       	subi	r18, 0x01	; 1
    1adc:	82 2f       	mov	r24, r18
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	83 57       	subi	r24, 0x73	; 115
    1ae2:	99 4d       	sbci	r25, 0xD9	; 217
        selected_device = (selected_device + 1) % ow_count;
        start_conversion = true;
        if (ow_count) {
            for (uint8_t s = 0; s < ow_count; s++) {
                if (sequential_errors[s] >= 3) {
                    ds18b20_temperature[s] = INT16_MIN;
    1ae4:	20 e0       	ldi	r18, 0x00	; 0
    1ae6:	30 e8       	ldi	r19, 0x80	; 128
        }
        selected_device = (selected_device + 1) % ow_count;
        start_conversion = true;
        if (ow_count) {
            for (uint8_t s = 0; s < ow_count; s++) {
                if (sequential_errors[s] >= 3) {
    1ae8:	41 91       	ld	r20, Z+
    1aea:	43 30       	cpi	r20, 0x03	; 3
    1aec:	18 f0       	brcs	.+6      	; 0x1af4 <ds18b20_update_sensors+0x14a>
                    ds18b20_temperature[s] = INT16_MIN;
    1aee:	2d 93       	st	X+, r18
    1af0:	3c 93       	st	X, r19
    1af2:	11 97       	sbiw	r26, 0x01	; 1
    1af4:	12 96       	adiw	r26, 0x02	; 2
            }
        }
        selected_device = (selected_device + 1) % ow_count;
        start_conversion = true;
        if (ow_count) {
            for (uint8_t s = 0; s < ow_count; s++) {
    1af6:	e8 17       	cp	r30, r24
    1af8:	f9 07       	cpc	r31, r25
    1afa:	b1 f7       	brne	.-20     	; 0x1ae8 <ds18b20_update_sensors+0x13e>
                    ds18b20_temperature[s] = INT16_MIN;
                }
            }
        }
    }
}
    1afc:	df 91       	pop	r29
    1afe:	cf 91       	pop	r28
    1b00:	1f 91       	pop	r17
    1b02:	0f 91       	pop	r16
    1b04:	ff 90       	pop	r15
    1b06:	08 95       	ret

00001b08 <ds18b20_init>:

void ds18b20_init(void)
{
    uint8_t s;
    _ds18b20_operational_count = 0;
    1b08:	10 92 d3 2b 	sts	0x2BD3, r1
    selected_device = 0;
    1b0c:	10 92 82 26 	sts	0x2682, r1
    start_conversion = true;
    1b10:	81 e0       	ldi	r24, 0x01	; 1
    1b12:	80 93 81 26 	sts	0x2681, r24
    1b16:	ec e8       	ldi	r30, 0x8C	; 140
    1b18:	f6 e2       	ldi	r31, 0x26	; 38
    1b1a:	a4 ed       	ldi	r26, 0xD4	; 212
    1b1c:	bb e2       	ldi	r27, 0x2B	; 43
            }
        }
    }
}

void ds18b20_init(void)
    1b1e:	2c e9       	ldi	r18, 0x9C	; 156
    1b20:	36 e2       	ldi	r19, 0x26	; 38
    _ds18b20_operational_count = 0;
    selected_device = 0;
    start_conversion = true;
    for (s = 0; s < OW_MAX_DEVICES; s++) {
        sequential_errors[s] = 0;
        ds18b20_temperature[s] = INT16_MIN;
    1b22:	80 e0       	ldi	r24, 0x00	; 0
    1b24:	90 e8       	ldi	r25, 0x80	; 128
    uint8_t s;
    _ds18b20_operational_count = 0;
    selected_device = 0;
    start_conversion = true;
    for (s = 0; s < OW_MAX_DEVICES; s++) {
        sequential_errors[s] = 0;
    1b26:	11 92       	st	Z+, r1
        ds18b20_temperature[s] = INT16_MIN;
    1b28:	8d 93       	st	X+, r24
    1b2a:	9d 93       	st	X+, r25
{
    uint8_t s;
    _ds18b20_operational_count = 0;
    selected_device = 0;
    start_conversion = true;
    for (s = 0; s < OW_MAX_DEVICES; s++) {
    1b2c:	e2 17       	cp	r30, r18
    1b2e:	f3 07       	cpc	r31, r19
    1b30:	d1 f7       	brne	.-12     	; 0x1b26 <ds18b20_init+0x1e>
        sequential_errors[s] = 0;
        ds18b20_temperature[s] = INT16_MIN;
    }
}
    1b32:	08 95       	ret

00001b34 <epoch_set>:
}

uint32_t epoch_isr_get (void)
{
    return epoch;
}
    1b34:	4f 92       	push	r4
    1b36:	5f 92       	push	r5
    1b38:	6f 92       	push	r6
    1b3a:	7f 92       	push	r7
    1b3c:	8f 92       	push	r8
    1b3e:	9f 92       	push	r9
    1b40:	af 92       	push	r10
    1b42:	bf 92       	push	r11
    1b44:	cf 92       	push	r12
    1b46:	df 92       	push	r13
    1b48:	ef 92       	push	r14
    1b4a:	ff 92       	push	r15
    1b4c:	1f 93       	push	r17
    1b4e:	cf 93       	push	r28
    1b50:	df 93       	push	r29
    1b52:	00 d0       	rcall	.+0      	; 0x1b54 <epoch_set+0x20>
    1b54:	00 d0       	rcall	.+0      	; 0x1b56 <epoch_set+0x22>
    1b56:	cd b7       	in	r28, 0x3d	; 61
    1b58:	de b7       	in	r29, 0x3e	; 62
    1b5a:	6b 01       	movw	r12, r22
    1b5c:	7c 01       	movw	r14, r24
    1b5e:	1f b7       	in	r17, 0x3f	; 63
    1b60:	f8 94       	cli
    1b62:	80 91 9c 26 	lds	r24, 0x269C
    1b66:	90 91 9d 26 	lds	r25, 0x269D
    1b6a:	a0 91 9e 26 	lds	r26, 0x269E
    1b6e:	b0 91 9f 26 	lds	r27, 0x269F
    1b72:	8c 15       	cp	r24, r12
    1b74:	9d 05       	cpc	r25, r13
    1b76:	ae 05       	cpc	r26, r14
    1b78:	bf 05       	cpc	r27, r15
    1b7a:	e9 f1       	breq	.+122    	; 0x1bf6 <epoch_set+0xc2>
    1b7c:	80 91 9c 26 	lds	r24, 0x269C
    1b80:	90 91 9d 26 	lds	r25, 0x269D
    1b84:	a0 91 9e 26 	lds	r26, 0x269E
    1b88:	b0 91 9f 26 	lds	r27, 0x269F
    1b8c:	89 83       	std	Y+1, r24	; 0x01
    1b8e:	9a 83       	std	Y+2, r25	; 0x02
    1b90:	ab 83       	std	Y+3, r26	; 0x03
    1b92:	bc 83       	std	Y+4, r27	; 0x04
    1b94:	c7 01       	movw	r24, r14
    1b96:	b6 01       	movw	r22, r12
    1b98:	60 5e       	subi	r22, 0xE0	; 224
    1b9a:	73 4e       	sbci	r23, 0xE3	; 227
    1b9c:	8f 4f       	sbci	r24, 0xFF	; 255
    1b9e:	9f 4f       	sbci	r25, 0xFF	; 255
    1ba0:	0f 2e       	mov	r0, r31
    1ba2:	f0 e8       	ldi	r31, 0x80	; 128
    1ba4:	8f 2e       	mov	r8, r31
    1ba6:	f1 e5       	ldi	r31, 0x51	; 81
    1ba8:	9f 2e       	mov	r9, r31
    1baa:	aa 24       	eor	r10, r10
    1bac:	a3 94       	inc	r10
    1bae:	b1 2c       	mov	r11, r1
    1bb0:	f0 2d       	mov	r31, r0
    1bb2:	a5 01       	movw	r20, r10
    1bb4:	94 01       	movw	r18, r8
    1bb6:	0e 94 5e 35 	call	0x6abc	; 0x6abc <__udivmodsi4>
    1bba:	2b 01       	movw	r4, r22
    1bbc:	3c 01       	movw	r6, r24
    1bbe:	69 81       	ldd	r22, Y+1	; 0x01
    1bc0:	7a 81       	ldd	r23, Y+2	; 0x02
    1bc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc4:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc6:	60 5e       	subi	r22, 0xE0	; 224
    1bc8:	73 4e       	sbci	r23, 0xE3	; 227
    1bca:	8f 4f       	sbci	r24, 0xFF	; 255
    1bcc:	9f 4f       	sbci	r25, 0xFF	; 255
    1bce:	a5 01       	movw	r20, r10
    1bd0:	94 01       	movw	r18, r8
    1bd2:	0e 94 5e 35 	call	0x6abc	; 0x6abc <__udivmodsi4>
    1bd6:	46 16       	cp	r4, r22
    1bd8:	57 06       	cpc	r5, r23
    1bda:	68 06       	cpc	r6, r24
    1bdc:	79 06       	cpc	r7, r25
    1bde:	18 f4       	brcc	.+6      	; 0x1be6 <epoch_set+0xb2>
    1be0:	81 e0       	ldi	r24, 0x01	; 1
    1be2:	80 93 a0 26 	sts	0x26A0, r24
    1be6:	c0 92 9c 26 	sts	0x269C, r12
    1bea:	d0 92 9d 26 	sts	0x269D, r13
    1bee:	e0 92 9e 26 	sts	0x269E, r14
    1bf2:	f0 92 9f 26 	sts	0x269F, r15
    1bf6:	1f bf       	out	0x3f, r17	; 63
    1bf8:	24 96       	adiw	r28, 0x04	; 4
    1bfa:	cd bf       	out	0x3d, r28	; 61
    1bfc:	de bf       	out	0x3e, r29	; 62
    1bfe:	df 91       	pop	r29
    1c00:	cf 91       	pop	r28
    1c02:	1f 91       	pop	r17
    1c04:	ff 90       	pop	r15
    1c06:	ef 90       	pop	r14
    1c08:	df 90       	pop	r13
    1c0a:	cf 90       	pop	r12
    1c0c:	bf 90       	pop	r11
    1c0e:	af 90       	pop	r10
    1c10:	9f 90       	pop	r9
    1c12:	8f 90       	pop	r8
    1c14:	7f 90       	pop	r7
    1c16:	6f 90       	pop	r6
    1c18:	5f 90       	pop	r5
    1c1a:	4f 90       	pop	r4
    1c1c:	08 95       	ret

00001c1e <epoch_get>:

uint32_t epoch_get (void)
{
    1c1e:	0f 93       	push	r16
    1c20:	1f 93       	push	r17

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1c22:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    1c24:	f8 94       	cli
    uint32_t ts;
    irqflags_t f = cpu_irq_save ();
    ts = epoch;
    1c26:	00 91 9c 26 	lds	r16, 0x269C
    1c2a:	10 91 9d 26 	lds	r17, 0x269D
    1c2e:	20 91 9e 26 	lds	r18, 0x269E
    1c32:	30 91 9f 26 	lds	r19, 0x269F
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1c36:	8f bf       	out	0x3f, r24	; 63
    cpu_irq_restore (f);
    return ts;
}
    1c38:	60 2f       	mov	r22, r16
    1c3a:	71 2f       	mov	r23, r17
    1c3c:	82 2f       	mov	r24, r18
    1c3e:	93 2f       	mov	r25, r19
    1c40:	1f 91       	pop	r17
    1c42:	0f 91       	pop	r16
    1c44:	08 95       	ret

00001c46 <epoch_inc>:

void epoch_inc (void)
{
    1c46:	cf 93       	push	r28

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1c48:	cf b7       	in	r28, 0x3f	; 63
	cpu_irq_disable();
    1c4a:	f8 94       	cli
    irqflags_t f = cpu_irq_save ();
    if (epoch) {
    1c4c:	80 91 9c 26 	lds	r24, 0x269C
    1c50:	90 91 9d 26 	lds	r25, 0x269D
    1c54:	a0 91 9e 26 	lds	r26, 0x269E
    1c58:	b0 91 9f 26 	lds	r27, 0x269F
    1c5c:	89 2b       	or	r24, r25
    1c5e:	8a 2b       	or	r24, r26
    1c60:	8b 2b       	or	r24, r27
    1c62:	d1 f1       	breq	.+116    	; 0x1cd8 <epoch_inc+0x92>
        epoch++;
    1c64:	80 91 9c 26 	lds	r24, 0x269C
    1c68:	90 91 9d 26 	lds	r25, 0x269D
    1c6c:	a0 91 9e 26 	lds	r26, 0x269E
    1c70:	b0 91 9f 26 	lds	r27, 0x269F
    1c74:	01 96       	adiw	r24, 0x01	; 1
    1c76:	a1 1d       	adc	r26, r1
    1c78:	b1 1d       	adc	r27, r1
    1c7a:	80 93 9c 26 	sts	0x269C, r24
    1c7e:	90 93 9d 26 	sts	0x269D, r25
    1c82:	a0 93 9e 26 	sts	0x269E, r26
    1c86:	b0 93 9f 26 	sts	0x269F, r27
        local_midnight = local_midnight || (((epoch + EPOCH_LOCAL_OFFSET) % (24UL * 60UL * 60UL)) == 0);
    1c8a:	80 91 a0 26 	lds	r24, 0x26A0
    1c8e:	81 11       	cpse	r24, r1
    1c90:	1e c0       	rjmp	.+60     	; 0x1cce <epoch_inc+0x88>
    1c92:	80 91 9c 26 	lds	r24, 0x269C
    1c96:	90 91 9d 26 	lds	r25, 0x269D
    1c9a:	a0 91 9e 26 	lds	r26, 0x269E
    1c9e:	b0 91 9f 26 	lds	r27, 0x269F
    1ca2:	bc 01       	movw	r22, r24
    1ca4:	cd 01       	movw	r24, r26
    1ca6:	60 5e       	subi	r22, 0xE0	; 224
    1ca8:	73 4e       	sbci	r23, 0xE3	; 227
    1caa:	8f 4f       	sbci	r24, 0xFF	; 255
    1cac:	9f 4f       	sbci	r25, 0xFF	; 255
    1cae:	20 e8       	ldi	r18, 0x80	; 128
    1cb0:	31 e5       	ldi	r19, 0x51	; 81
    1cb2:	41 e0       	ldi	r20, 0x01	; 1
    1cb4:	50 e0       	ldi	r21, 0x00	; 0
    1cb6:	0e 94 5e 35 	call	0x6abc	; 0x6abc <__udivmodsi4>
    1cba:	21 e0       	ldi	r18, 0x01	; 1
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	67 2b       	or	r22, r23
    1cc0:	68 2b       	or	r22, r24
    1cc2:	69 2b       	or	r22, r25
    1cc4:	11 f0       	breq	.+4      	; 0x1cca <epoch_inc+0x84>
    1cc6:	20 e0       	ldi	r18, 0x00	; 0
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	c9 01       	movw	r24, r18
    1ccc:	02 c0       	rjmp	.+4      	; 0x1cd2 <epoch_inc+0x8c>
    1cce:	81 e0       	ldi	r24, 0x01	; 1
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	81 70       	andi	r24, 0x01	; 1
    1cd4:	80 93 a0 26 	sts	0x26A0, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1cd8:	cf bf       	out	0x3f, r28	; 63
    }
    cpu_irq_restore (f);
}
    1cda:	cf 91       	pop	r28
    1cdc:	08 95       	ret

00001cde <ds2483_read>:
uint8_t ow_count;
static search_state_t search;
//static uint8_t c1WS, cSPU, cPDN, cAPU;

static bool ds2483_read (uint8_t len, uint8_t* data)
{
    1cde:	cf 93       	push	r28
    1ce0:	df 93       	push	r29
    1ce2:	cd b7       	in	r28, 0x3d	; 61
    1ce4:	de b7       	in	r29, 0x3e	; 62
    1ce6:	2b 97       	sbiw	r28, 0x0b	; 11
    1ce8:	cd bf       	out	0x3d, r28	; 61
    1cea:	de bf       	out	0x3e, r29	; 62
    twi_package_t pkt;
    pkt.chip = DS2483_ADDR;
    1cec:	98 e1       	ldi	r25, 0x18	; 24
    1cee:	99 83       	std	Y+1, r25	; 0x01
    pkt.addr[0] = 0;
    1cf0:	1a 82       	std	Y+2, r1	; 0x02
    pkt.addr_length = 0;
    1cf2:	1d 82       	std	Y+5, r1	; 0x05
    1cf4:	1e 82       	std	Y+6, r1	; 0x06
    pkt.buffer = data;
    1cf6:	6f 83       	std	Y+7, r22	; 0x07
    1cf8:	78 87       	std	Y+8, r23	; 0x08
    pkt.length = len;
    1cfa:	89 87       	std	Y+9, r24	; 0x09
    1cfc:	1a 86       	std	Y+10, r1	; 0x0a
    pkt.no_wait = false;
    1cfe:	1b 86       	std	Y+11, r1	; 0x0b
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, true);
    1d00:	41 e0       	ldi	r20, 0x01	; 1
    1d02:	be 01       	movw	r22, r28
    1d04:	6f 5f       	subi	r22, 0xFF	; 255
    1d06:	7f 4f       	sbci	r23, 0xFF	; 255
    1d08:	80 e8       	ldi	r24, 0x80	; 128
    1d0a:	94 e0       	ldi	r25, 0x04	; 4
    1d0c:	0e 94 36 1c 	call	0x386c	; 0x386c <twi_master_transfer>
    return twi_master_read (TWI_IESM, &pkt) == TWI_SUCCESS;
    1d10:	21 e0       	ldi	r18, 0x01	; 1
    1d12:	89 2b       	or	r24, r25
    1d14:	09 f0       	breq	.+2      	; 0x1d18 <ds2483_read+0x3a>
    1d16:	20 e0       	ldi	r18, 0x00	; 0
}
    1d18:	82 2f       	mov	r24, r18
    1d1a:	2b 96       	adiw	r28, 0x0b	; 11
    1d1c:	cd bf       	out	0x3d, r28	; 61
    1d1e:	de bf       	out	0x3e, r29	; 62
    1d20:	df 91       	pop	r29
    1d22:	cf 91       	pop	r28
    1d24:	08 95       	ret

00001d26 <ds2483_1wire_reset>:
    }
    return true;
}

static bool ds2483_1wire_reset (void)
{
    1d26:	0f 93       	push	r16
    1d28:	1f 93       	push	r17
    1d2a:	cf 93       	push	r28
    1d2c:	df 93       	push	r29
    1d2e:	cd b7       	in	r28, 0x3d	; 61
    1d30:	de b7       	in	r29, 0x3e	; 62
    1d32:	2c 97       	sbiw	r28, 0x0c	; 12
    1d34:	cd bf       	out	0x3d, r28	; 61
    1d36:	de bf       	out	0x3e, r29	; 62
    uint8_t status;
    twi_package_t pkt;
    pkt.chip = DS2483_ADDR;
    1d38:	88 e1       	ldi	r24, 0x18	; 24
    1d3a:	8a 83       	std	Y+2, r24	; 0x02
    pkt.addr[0] = DS2483_CMD_1WIRE_RESET;
    1d3c:	84 eb       	ldi	r24, 0xB4	; 180
    1d3e:	8b 83       	std	Y+3, r24	; 0x03
    pkt.addr_length = 1;
    1d40:	21 e0       	ldi	r18, 0x01	; 1
    1d42:	30 e0       	ldi	r19, 0x00	; 0
    1d44:	2e 83       	std	Y+6, r18	; 0x06
    1d46:	3f 83       	std	Y+7, r19	; 0x07
    pkt.buffer = NULL;
    1d48:	18 86       	std	Y+8, r1	; 0x08
    1d4a:	19 86       	std	Y+9, r1	; 0x09
    pkt.length = 0;
    1d4c:	1a 86       	std	Y+10, r1	; 0x0a
    1d4e:	1b 86       	std	Y+11, r1	; 0x0b
    pkt.no_wait = false;
    1d50:	1c 86       	std	Y+12, r1	; 0x0c
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
    1d52:	40 e0       	ldi	r20, 0x00	; 0
    1d54:	be 01       	movw	r22, r28
    1d56:	6e 5f       	subi	r22, 0xFE	; 254
    1d58:	7f 4f       	sbci	r23, 0xFF	; 255
    1d5a:	80 e8       	ldi	r24, 0x80	; 128
    1d5c:	94 e0       	ldi	r25, 0x04	; 4
    1d5e:	0e 94 36 1c 	call	0x386c	; 0x386c <twi_master_transfer>
    if (twi_master_write (TWI_IESM, &pkt) != TWI_SUCCESS) {
    1d62:	89 2b       	or	r24, r25
    1d64:	b1 f4       	brne	.+44     	; 0x1d92 <ds2483_1wire_reset+0x6c>
        return false;
    }
    do {
        ds2483_read (1, &status);
    1d66:	be 01       	movw	r22, r28
    1d68:	6f 5f       	subi	r22, 0xFF	; 255
    1d6a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d6c:	81 e0       	ldi	r24, 0x01	; 1
    1d6e:	b7 df       	rcall	.-146    	; 0x1cde <ds2483_read>
    } while ((status & DS2483_STATUS_1WB_MASK) == DS2483_STATUS_1WB_MASK);
    1d70:	89 81       	ldd	r24, Y+1	; 0x01
    1d72:	80 fd       	sbrc	r24, 0
    1d74:	f8 cf       	rjmp	.-16     	; 0x1d66 <ds2483_1wire_reset+0x40>
    return (status & DS2483_STATUS_PPD_MASK) == DS2483_STATUS_PPD_MASK && (status & DS2483_STATUS_SD_MASK) == 0x00;
    1d76:	81 ff       	sbrs	r24, 1
    1d78:	07 c0       	rjmp	.+14     	; 0x1d88 <ds2483_1wire_reset+0x62>
    1d7a:	86 95       	lsr	r24
    1d7c:	86 95       	lsr	r24
    1d7e:	91 e0       	ldi	r25, 0x01	; 1
    1d80:	89 27       	eor	r24, r25
    1d82:	08 2f       	mov	r16, r24
    1d84:	01 70       	andi	r16, 0x01	; 1
    1d86:	02 c0       	rjmp	.+4      	; 0x1d8c <ds2483_1wire_reset+0x66>
    1d88:	00 e0       	ldi	r16, 0x00	; 0
    1d8a:	10 e0       	ldi	r17, 0x00	; 0
    1d8c:	80 2f       	mov	r24, r16
    1d8e:	81 70       	andi	r24, 0x01	; 1
    1d90:	01 c0       	rjmp	.+2      	; 0x1d94 <ds2483_1wire_reset+0x6e>
    pkt.addr_length = 1;
    pkt.buffer = NULL;
    pkt.length = 0;
    pkt.no_wait = false;
    if (twi_master_write (TWI_IESM, &pkt) != TWI_SUCCESS) {
        return false;
    1d92:	80 e0       	ldi	r24, 0x00	; 0
    }
    do {
        ds2483_read (1, &status);
    } while ((status & DS2483_STATUS_1WB_MASK) == DS2483_STATUS_1WB_MASK);
    return (status & DS2483_STATUS_PPD_MASK) == DS2483_STATUS_PPD_MASK && (status & DS2483_STATUS_SD_MASK) == 0x00;
}
    1d94:	2c 96       	adiw	r28, 0x0c	; 12
    1d96:	cd bf       	out	0x3d, r28	; 61
    1d98:	de bf       	out	0x3e, r29	; 62
    1d9a:	df 91       	pop	r29
    1d9c:	cf 91       	pop	r28
    1d9e:	1f 91       	pop	r17
    1da0:	0f 91       	pop	r16
    1da2:	08 95       	ret

00001da4 <ds2483_1wire_write_byte>:
    }
    return ds2483_read_reg (DS2483_REG_READ_DATA, byte);
}

static bool ds2483_1wire_write_byte (uint8_t byte)
{
    1da4:	cf 93       	push	r28
    1da6:	df 93       	push	r29
    1da8:	cd b7       	in	r28, 0x3d	; 61
    1daa:	de b7       	in	r29, 0x3e	; 62
    1dac:	2c 97       	sbiw	r28, 0x0c	; 12
    1dae:	cd bf       	out	0x3d, r28	; 61
    1db0:	de bf       	out	0x3e, r29	; 62
    twi_package_t pkt;
    uint8_t status;
    pkt.chip = DS2483_ADDR;
    1db2:	98 e1       	ldi	r25, 0x18	; 24
    1db4:	99 83       	std	Y+1, r25	; 0x01
    pkt.addr[0] = DS2483_CMD_1WIRE_WRITE_BYTE;
    1db6:	95 ea       	ldi	r25, 0xA5	; 165
    1db8:	9a 83       	std	Y+2, r25	; 0x02
    pkt.addr[1] = byte;
    1dba:	8b 83       	std	Y+3, r24	; 0x03
    pkt.addr_length = 2;
    1dbc:	82 e0       	ldi	r24, 0x02	; 2
    1dbe:	90 e0       	ldi	r25, 0x00	; 0
    1dc0:	8d 83       	std	Y+5, r24	; 0x05
    1dc2:	9e 83       	std	Y+6, r25	; 0x06
    pkt.buffer = &status;
    1dc4:	ce 01       	movw	r24, r28
    1dc6:	0c 96       	adiw	r24, 0x0c	; 12
    1dc8:	8f 83       	std	Y+7, r24	; 0x07
    1dca:	98 87       	std	Y+8, r25	; 0x08
    pkt.length = 1;
    1dcc:	81 e0       	ldi	r24, 0x01	; 1
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	89 87       	std	Y+9, r24	; 0x09
    1dd2:	9a 87       	std	Y+10, r25	; 0x0a
    pkt.no_wait = false;
    1dd4:	1b 86       	std	Y+11, r1	; 0x0b
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, true);
    1dd6:	41 e0       	ldi	r20, 0x01	; 1
    1dd8:	be 01       	movw	r22, r28
    1dda:	6f 5f       	subi	r22, 0xFF	; 255
    1ddc:	7f 4f       	sbci	r23, 0xFF	; 255
    1dde:	80 e8       	ldi	r24, 0x80	; 128
    1de0:	94 e0       	ldi	r25, 0x04	; 4
    1de2:	0e 94 36 1c 	call	0x386c	; 0x386c <twi_master_transfer>
    if (twi_master_read (TWI_IESM, &pkt) != TWI_SUCCESS) {
    1de6:	89 2b       	or	r24, r25
    1de8:	69 f4       	brne	.+26     	; 0x1e04 <ds2483_1wire_write_byte+0x60>
        return false;
    }
    while ((status & DS2483_STATUS_1WB_MASK) == DS2483_STATUS_1WB_MASK) {
    1dea:	8c 85       	ldd	r24, Y+12	; 0x0c
    1dec:	80 ff       	sbrs	r24, 0
    1dee:	0c c0       	rjmp	.+24     	; 0x1e08 <ds2483_1wire_write_byte+0x64>
        ds2483_read (1, &status);
    1df0:	be 01       	movw	r22, r28
    1df2:	64 5f       	subi	r22, 0xF4	; 244
    1df4:	7f 4f       	sbci	r23, 0xFF	; 255
    1df6:	81 e0       	ldi	r24, 0x01	; 1
    1df8:	72 df       	rcall	.-284    	; 0x1cde <ds2483_read>
    pkt.length = 1;
    pkt.no_wait = false;
    if (twi_master_read (TWI_IESM, &pkt) != TWI_SUCCESS) {
        return false;
    }
    while ((status & DS2483_STATUS_1WB_MASK) == DS2483_STATUS_1WB_MASK) {
    1dfa:	8c 85       	ldd	r24, Y+12	; 0x0c
    1dfc:	80 fd       	sbrc	r24, 0
    1dfe:	f8 cf       	rjmp	.-16     	; 0x1df0 <ds2483_1wire_write_byte+0x4c>
        ds2483_read (1, &status);
    }
    return true;
    1e00:	81 e0       	ldi	r24, 0x01	; 1
    1e02:	03 c0       	rjmp	.+6      	; 0x1e0a <ds2483_1wire_write_byte+0x66>
    pkt.addr_length = 2;
    pkt.buffer = &status;
    pkt.length = 1;
    pkt.no_wait = false;
    if (twi_master_read (TWI_IESM, &pkt) != TWI_SUCCESS) {
        return false;
    1e04:	80 e0       	ldi	r24, 0x00	; 0
    1e06:	01 c0       	rjmp	.+2      	; 0x1e0a <ds2483_1wire_write_byte+0x66>
    }
    while ((status & DS2483_STATUS_1WB_MASK) == DS2483_STATUS_1WB_MASK) {
        ds2483_read (1, &status);
    }
    return true;
    1e08:	81 e0       	ldi	r24, 0x01	; 1
}
    1e0a:	2c 96       	adiw	r28, 0x0c	; 12
    1e0c:	cd bf       	out	0x3d, r28	; 61
    1e0e:	de bf       	out	0x3e, r29	; 62
    1e10:	df 91       	pop	r29
    1e12:	cf 91       	pop	r28
    1e14:	08 95       	ret

00001e16 <ds2483_configure>:
    //}
    return (status & 0xF7) == DS2483_STATUS_RST_MASK;
}

static bool ds2483_configure (void)
{
    1e16:	cf 93       	push	r28
    1e18:	df 93       	push	r29
    1e1a:	cd b7       	in	r28, 0x3d	; 61
    1e1c:	de b7       	in	r29, 0x3e	; 62
    1e1e:	2b 97       	sbiw	r28, 0x0b	; 11
    1e20:	cd bf       	out	0x3d, r28	; 61
    1e22:	de bf       	out	0x3e, r29	; 62
// Returns:  TRUE   : config written and response correct
//           FALSE  : response incorrect
static bool ds2483_write_device_configuration (uint8_t config)
{
    twi_package_t pkt;
    pkt.chip = DS2483_ADDR;
    1e24:	88 e1       	ldi	r24, 0x18	; 24
    1e26:	89 83       	std	Y+1, r24	; 0x01
    pkt.addr[0] =  DS2483_CMD_WRITE_DEVICE_CONFIGURATION;
    1e28:	82 ed       	ldi	r24, 0xD2	; 210
    1e2a:	8a 83       	std	Y+2, r24	; 0x02
    pkt.addr[1] =  config | ((~config) << 4);
    1e2c:	84 eb       	ldi	r24, 0xB4	; 180
    1e2e:	8b 83       	std	Y+3, r24	; 0x03
    pkt.addr_length = 2;
    1e30:	82 e0       	ldi	r24, 0x02	; 2
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	8d 83       	std	Y+5, r24	; 0x05
    1e36:	9e 83       	std	Y+6, r25	; 0x06
    pkt.buffer = NULL;
    1e38:	1f 82       	std	Y+7, r1	; 0x07
    1e3a:	18 86       	std	Y+8, r1	; 0x08
    pkt.length = 0;
    1e3c:	19 86       	std	Y+9, r1	; 0x09
    1e3e:	1a 86       	std	Y+10, r1	; 0x0a
    pkt.no_wait = false;
    1e40:	1b 86       	std	Y+11, r1	; 0x0b
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
    1e42:	40 e0       	ldi	r20, 0x00	; 0
    1e44:	be 01       	movw	r22, r28
    1e46:	6f 5f       	subi	r22, 0xFF	; 255
    1e48:	7f 4f       	sbci	r23, 0xFF	; 255
    1e4a:	80 e8       	ldi	r24, 0x80	; 128
    1e4c:	94 e0       	ldi	r25, 0x04	; 4
    1e4e:	0e 94 36 1c 	call	0x386c	; 0x386c <twi_master_transfer>
    return twi_master_write (TWI_IESM, &pkt) == TWI_SUCCESS;
    1e52:	21 e0       	ldi	r18, 0x01	; 1
    1e54:	89 2b       	or	r24, r25
    1e56:	09 f0       	breq	.+2      	; 0x1e5a <ds2483_configure+0x44>
    1e58:	20 e0       	ldi	r18, 0x00	; 0
}

static bool ds2483_configure (void)
{
    return ds2483_write_device_configuration (DS2483_DEVCFG_SPU_MASK);
}
    1e5a:	82 2f       	mov	r24, r18
    1e5c:	2b 96       	adiw	r28, 0x0b	; 11
    1e5e:	cd bf       	out	0x3d, r28	; 61
    1e60:	de bf       	out	0x3e, r29	; 62
    1e62:	df 91       	pop	r29
    1e64:	cf 91       	pop	r28
    1e66:	08 95       	ret

00001e68 <OWNext>:
    //DEBUG_putcrlf (NULL);
    return search_result;
}

static bool OWNext (uint8_t* rom)
{
    1e68:	2f 92       	push	r2
    1e6a:	3f 92       	push	r3
    1e6c:	4f 92       	push	r4
    1e6e:	5f 92       	push	r5
    1e70:	6f 92       	push	r6
    1e72:	7f 92       	push	r7
    1e74:	8f 92       	push	r8
    1e76:	9f 92       	push	r9
    1e78:	af 92       	push	r10
    1e7a:	bf 92       	push	r11
    1e7c:	cf 92       	push	r12
    1e7e:	df 92       	push	r13
    1e80:	ef 92       	push	r14
    1e82:	ff 92       	push	r15
    1e84:	0f 93       	push	r16
    1e86:	1f 93       	push	r17
    1e88:	cf 93       	push	r28
    1e8a:	df 93       	push	r29
    1e8c:	cd b7       	in	r28, 0x3d	; 61
    1e8e:	de b7       	in	r29, 0x3e	; 62
    1e90:	2d 97       	sbiw	r28, 0x0d	; 13
    1e92:	cd bf       	out	0x3d, r28	; 61
    1e94:	de bf       	out	0x3e, r29	; 62
    1e96:	7c 01       	movw	r14, r24
    bit_number = 1;
    last_00 = 0;
    rom_byte_number = 0;
    rom_byte_mask = 1;
    search_result = false;
    search.crc8 = 0;
    1e98:	10 92 ab 26 	sts	0x26AB, r1
    // if the last call was not the last one
    if (!search.LastDeviceFlag) {
    1e9c:	80 91 aa 26 	lds	r24, 0x26AA
    1ea0:	81 11       	cpse	r24, r1
    1ea2:	d4 c0       	rjmp	.+424    	; 0x204c <OWNext+0x1e4>

static bool ds2483_set_read_pointer (uint8_t rp)
{
    twi_package_t pkt;
    //uint8_t status;
    pkt.chip = DS2483_ADDR;
    1ea4:	88 e1       	ldi	r24, 0x18	; 24
    1ea6:	89 83       	std	Y+1, r24	; 0x01
    pkt.addr[0] = DS2483_CMD_SET_READ_POINTER;
    1ea8:	81 ee       	ldi	r24, 0xE1	; 225
    1eaa:	8a 83       	std	Y+2, r24	; 0x02
    pkt.addr[1] = rp;
    1eac:	80 ef       	ldi	r24, 0xF0	; 240
    1eae:	8b 83       	std	Y+3, r24	; 0x03
    pkt.addr_length = 2;
    1eb0:	82 e0       	ldi	r24, 0x02	; 2
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	8d 83       	std	Y+5, r24	; 0x05
    1eb6:	9e 83       	std	Y+6, r25	; 0x06
    pkt.buffer = NULL;
    1eb8:	1f 82       	std	Y+7, r1	; 0x07
    1eba:	18 86       	std	Y+8, r1	; 0x08
    pkt.length = 0;
    1ebc:	19 86       	std	Y+9, r1	; 0x09
    1ebe:	1a 86       	std	Y+10, r1	; 0x0a
    pkt.no_wait = false;
    1ec0:	1b 86       	std	Y+11, r1	; 0x0b
    1ec2:	40 e0       	ldi	r20, 0x00	; 0
    1ec4:	be 01       	movw	r22, r28
    1ec6:	6f 5f       	subi	r22, 0xFF	; 255
    1ec8:	7f 4f       	sbci	r23, 0xFF	; 255
    1eca:	80 e8       	ldi	r24, 0x80	; 128
    1ecc:	94 e0       	ldi	r25, 0x04	; 4
    1ece:	0e 94 36 1c 	call	0x386c	; 0x386c <twi_master_transfer>
static bool ow_reset (void)
{
    uint8_t status;
    ds2483_set_read_pointer (DS2483_REG_STATUS);
    do {
        ds2483_read (1, &status);
    1ed2:	be 01       	movw	r22, r28
    1ed4:	64 5f       	subi	r22, 0xF4	; 244
    1ed6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ed8:	81 e0       	ldi	r24, 0x01	; 1
    1eda:	01 df       	rcall	.-510    	; 0x1cde <ds2483_read>
    } while ((status & DS2483_STATUS_1WB_MASK) == DS2483_STATUS_1WB_MASK);
    1edc:	8c 85       	ldd	r24, Y+12	; 0x0c
    1ede:	80 fd       	sbrc	r24, 0
    1ee0:	f8 cf       	rjmp	.-16     	; 0x1ed2 <OWNext+0x6a>
    return ds2483_1wire_reset ();
    1ee2:	21 df       	rcall	.-446    	; 0x1d26 <ds2483_1wire_reset>
    search_result = false;
    search.crc8 = 0;
    // if the last call was not the last one
    if (!search.LastDeviceFlag) {
        // 1-Wire reset
        if (!ow_reset ()) {
    1ee4:	81 11       	cpse	r24, r1
    1ee6:	05 c0       	rjmp	.+10     	; 0x1ef2 <OWNext+0x8a>
            // reset the search
            search.LastDiscrepancy = 0;
    1ee8:	10 92 a9 26 	sts	0x26A9, r1
            search.LastDeviceFlag = false;
    1eec:	10 92 aa 26 	sts	0x26AA, r1
    1ef0:	c0 c0       	rjmp	.+384    	; 0x2072 <OWNext+0x20a>
            return false;
        }
        ds2483_configure ();
    1ef2:	91 df       	rcall	.-222    	; 0x1e16 <ds2483_configure>
        // issue the search command
        ds2483_1wire_write_byte (NORMAL_SEARCH_ROM);
    1ef4:	80 ef       	ldi	r24, 0xF0	; 240
    1ef6:	56 df       	rcall	.-340    	; 0x1da4 <ds2483_1wire_write_byte>

    // initialize for search
    bit_number = 1;
    last_00 = 0;
    rom_byte_number = 0;
    rom_byte_mask = 1;
    1ef8:	77 24       	eor	r7, r7
    1efa:	73 94       	inc	r7
    // DEBUG_puts (" ");

    // initialize for search
    bit_number = 1;
    last_00 = 0;
    rom_byte_number = 0;
    1efc:	61 2c       	mov	r6, r1
    // DEBUG_puts (__FUNCTION__);
    // DEBUG_puts (" ");

    // initialize for search
    bit_number = 1;
    last_00 = 0;
    1efe:	1d 86       	std	Y+13, r1	; 0x0d

    // DEBUG_puts (__FUNCTION__);
    // DEBUG_puts (" ");

    // initialize for search
    bit_number = 1;
    1f00:	55 24       	eor	r5, r5
    1f02:	53 94       	inc	r5
        ds2483_configure ();
        // issue the search command
        ds2483_1wire_write_byte (NORMAL_SEARCH_ROM);
        // loop to do the search
        do {
            if (bit_number < search.LastDiscrepancy) {
    1f04:	0f 2e       	mov	r0, r31
    1f06:	f9 ea       	ldi	r31, 0xA9	; 169
    1f08:	8f 2e       	mov	r8, r31
    1f0a:	f6 e2       	ldi	r31, 0x26	; 38
    1f0c:	9f 2e       	mov	r9, r31
    1f0e:	f0 2d       	mov	r31, r0

static uint8_t ds2483_search_triplet (uint8_t search_direction)
{
    twi_package_t pkt;
    uint8_t status = 0;
    pkt.chip = DS2483_ADDR;
    1f10:	0f 2e       	mov	r0, r31
    1f12:	f8 e1       	ldi	r31, 0x18	; 24
    1f14:	2f 2e       	mov	r2, r31
    1f16:	f0 2d       	mov	r31, r0
    pkt.addr[0] = DS2483_CMD_1WIRE_TRIPLET;
    1f18:	0f 2e       	mov	r0, r31
    1f1a:	f8 e7       	ldi	r31, 0x78	; 120
    1f1c:	3f 2e       	mov	r3, r31
    1f1e:	f0 2d       	mov	r31, r0
    pkt.addr[1] = search_direction ? 0x80 : 0x00;
    pkt.addr_length = 2;
    1f20:	68 94       	set
    1f22:	aa 24       	eor	r10, r10
    1f24:	a1 f8       	bld	r10, 1
    1f26:	b1 2c       	mov	r11, r1
    pkt.buffer = &status;
    1f28:	8e 01       	movw	r16, r28
    1f2a:	04 5f       	subi	r16, 0xF4	; 244
    1f2c:	1f 4f       	sbci	r17, 0xFF	; 255
    pkt.length = 1;
    1f2e:	cc 24       	eor	r12, r12
    1f30:	c3 94       	inc	r12
    1f32:	d1 2c       	mov	r13, r1
        ds2483_configure ();
        // issue the search command
        ds2483_1wire_write_byte (NORMAL_SEARCH_ROM);
        // loop to do the search
        do {
            if (bit_number < search.LastDiscrepancy) {
    1f34:	25 2d       	mov	r18, r5
    1f36:	30 e0       	ldi	r19, 0x00	; 0
    1f38:	f4 01       	movw	r30, r8
    1f3a:	80 81       	ld	r24, Z
    1f3c:	99 27       	eor	r25, r25
    1f3e:	87 fd       	sbrc	r24, 7
    1f40:	90 95       	com	r25
    1f42:	28 17       	cp	r18, r24
    1f44:	39 07       	cpc	r19, r25
    1f46:	64 f4       	brge	.+24     	; 0x1f60 <OWNext+0xf8>
                dir_bit = (search.ROM_NO[rom_byte_number] & rom_byte_mask) ? 1 : 0;
    1f48:	e6 2d       	mov	r30, r6
    1f4a:	f0 e0       	ldi	r31, 0x00	; 0
    1f4c:	ef 55       	subi	r30, 0x5F	; 95
    1f4e:	f9 4d       	sbci	r31, 0xD9	; 217
    1f50:	80 81       	ld	r24, Z
    1f52:	87 21       	and	r24, r7
    1f54:	44 24       	eor	r4, r4
    1f56:	43 94       	inc	r4
    1f58:	81 11       	cpse	r24, r1
    1f5a:	08 c0       	rjmp	.+16     	; 0x1f6c <OWNext+0x104>
    1f5c:	41 2c       	mov	r4, r1
    1f5e:	06 c0       	rjmp	.+12     	; 0x1f6c <OWNext+0x104>
            } else if (bit_number == search.LastDiscrepancy) {
    1f60:	44 24       	eor	r4, r4
    1f62:	43 94       	inc	r4
    1f64:	28 17       	cp	r18, r24
    1f66:	39 07       	cpc	r19, r25
    1f68:	09 f0       	breq	.+2      	; 0x1f6c <OWNext+0x104>
    1f6a:	41 2c       	mov	r4, r1
            } else {
                dir_bit = 0;
            }

            // Perform a triple operation on the DS2482 which will perform 2 read bits and 1 write bit
            ds2483_configure ();
    1f6c:	54 df       	rcall	.-344    	; 0x1e16 <ds2483_configure>
}

static uint8_t ds2483_search_triplet (uint8_t search_direction)
{
    twi_package_t pkt;
    uint8_t status = 0;
    1f6e:	1c 86       	std	Y+12, r1	; 0x0c
    pkt.chip = DS2483_ADDR;
    1f70:	29 82       	std	Y+1, r2	; 0x01
    pkt.addr[0] = DS2483_CMD_1WIRE_TRIPLET;
    1f72:	3a 82       	std	Y+2, r3	; 0x02
    pkt.addr[1] = search_direction ? 0x80 : 0x00;
    1f74:	44 20       	and	r4, r4
    1f76:	11 f0       	breq	.+4      	; 0x1f7c <OWNext+0x114>
    1f78:	80 e8       	ldi	r24, 0x80	; 128
    1f7a:	01 c0       	rjmp	.+2      	; 0x1f7e <OWNext+0x116>
    1f7c:	80 e0       	ldi	r24, 0x00	; 0
    1f7e:	8b 83       	std	Y+3, r24	; 0x03
    pkt.addr_length = 2;
    1f80:	ad 82       	std	Y+5, r10	; 0x05
    1f82:	be 82       	std	Y+6, r11	; 0x06
    pkt.buffer = &status;
    1f84:	0f 83       	std	Y+7, r16	; 0x07
    1f86:	18 87       	std	Y+8, r17	; 0x08
    pkt.length = 1;
    1f88:	c9 86       	std	Y+9, r12	; 0x09
    1f8a:	da 86       	std	Y+10, r13	; 0x0a
    pkt.no_wait = false;
    1f8c:	1b 86       	std	Y+11, r1	; 0x0b
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, true);
    1f8e:	41 e0       	ldi	r20, 0x01	; 1
    1f90:	be 01       	movw	r22, r28
    1f92:	6f 5f       	subi	r22, 0xFF	; 255
    1f94:	7f 4f       	sbci	r23, 0xFF	; 255
    1f96:	80 e8       	ldi	r24, 0x80	; 128
    1f98:	94 e0       	ldi	r25, 0x04	; 4
    1f9a:	0e 94 36 1c 	call	0x386c	; 0x386c <twi_master_transfer>
    if (twi_master_read (TWI_IESM, &pkt) == TWI_SUCCESS) {
    1f9e:	89 2b       	or	r24, r25
    1fa0:	49 f4       	brne	.+18     	; 0x1fb4 <OWNext+0x14c>
        while ((status & DS2483_STATUS_1WB_MASK) == DS2483_STATUS_1WB_MASK) {
    1fa2:	8c 85       	ldd	r24, Y+12	; 0x0c
    1fa4:	80 ff       	sbrs	r24, 0
    1fa6:	06 c0       	rjmp	.+12     	; 0x1fb4 <OWNext+0x14c>
            ds2483_read (1, &status);
    1fa8:	b8 01       	movw	r22, r16
    1faa:	81 e0       	ldi	r24, 0x01	; 1
    1fac:	98 de       	rcall	.-720    	; 0x1cde <ds2483_read>
    pkt.addr_length = 2;
    pkt.buffer = &status;
    pkt.length = 1;
    pkt.no_wait = false;
    if (twi_master_read (TWI_IESM, &pkt) == TWI_SUCCESS) {
        while ((status & DS2483_STATUS_1WB_MASK) == DS2483_STATUS_1WB_MASK) {
    1fae:	8c 85       	ldd	r24, Y+12	; 0x0c
    1fb0:	80 fd       	sbrc	r24, 0
    1fb2:	fa cf       	rjmp	.-12     	; 0x1fa8 <OWNext+0x140>
            ds2483_read (1, &status);
        }
    }
    return status;
    1fb4:	8c 85       	ldd	r24, Y+12	; 0x0c
            // Perform a triple operation on the DS2482 which will perform 2 read bits and 1 write bit
            ds2483_configure ();
            status = ds2483_search_triplet (dir_bit);
            // check bit results in status byte
            _1st_bit = ((status & DS2483_STATUS_SBR_MASK) == DS2483_STATUS_SBR_MASK);
            _2nd_bit = ((status & DS2483_STATUS_TSB_MASK) == DS2483_STATUS_TSB_MASK);
    1fb6:	86 fb       	bst	r24, 6
    1fb8:	99 27       	eor	r25, r25
    1fba:	90 f9       	bld	r25, 0
            dir_bit = ((status & DS2483_STATUS_DIR_MASK) == DS2483_STATUS_DIR_MASK) ? (uint8_t) 1 : (uint8_t) 0;
    1fbc:	28 2f       	mov	r18, r24
    1fbe:	22 1f       	adc	r18, r18
    1fc0:	22 27       	eor	r18, r18
    1fc2:	22 1f       	adc	r18, r18
            // check for no devices on 1-Wire
            if (_1st_bit && _2nd_bit) {
    1fc4:	85 ff       	sbrs	r24, 5
    1fc6:	03 c0       	rjmp	.+6      	; 0x1fce <OWNext+0x166>
    1fc8:	99 23       	and	r25, r25
    1fca:	31 f0       	breq	.+12     	; 0x1fd8 <OWNext+0x170>
    1fcc:	2f c0       	rjmp	.+94     	; 0x202c <OWNext+0x1c4>
                break;
            } else {
                if (_1st_bit == 0 && _2nd_bit == 0) {
    1fce:	91 11       	cpse	r25, r1
    1fd0:	03 c0       	rjmp	.+6      	; 0x1fd8 <OWNext+0x170>
                    //ioport_set_pin_low (GPIO_X3);
                    if (dir_bit == 0) {
    1fd2:	22 23       	and	r18, r18
    1fd4:	59 f0       	breq	.+22     	; 0x1fec <OWNext+0x184>
    1fd6:	02 c0       	rjmp	.+4      	; 0x1fdc <OWNext+0x174>
                    }
                    //ioport_set_pin_high (GPIO_X3);
                }

                // set or clear the bit in the ROM byte rom_byte_number with mask rom_byte_mask
                if (dir_bit) {
    1fd8:	22 23       	and	r18, r18
    1fda:	49 f0       	breq	.+18     	; 0x1fee <OWNext+0x186>
                    search.ROM_NO[rom_byte_number] |= rom_byte_mask;
    1fdc:	e6 2d       	mov	r30, r6
    1fde:	f0 e0       	ldi	r31, 0x00	; 0
    1fe0:	ef 55       	subi	r30, 0x5F	; 95
    1fe2:	f9 4d       	sbci	r31, 0xD9	; 217
    1fe4:	80 81       	ld	r24, Z
    1fe6:	87 29       	or	r24, r7
    1fe8:	80 83       	st	Z, r24
    1fea:	0a c0       	rjmp	.+20     	; 0x2000 <OWNext+0x198>
            if (_1st_bit && _2nd_bit) {
                break;
            } else {
                if (_1st_bit == 0 && _2nd_bit == 0) {
                    //ioport_set_pin_low (GPIO_X3);
                    if (dir_bit == 0) {
    1fec:	5d 86       	std	Y+13, r5	; 0x0d
                // set or clear the bit in the ROM byte rom_byte_number with mask rom_byte_mask
                if (dir_bit) {
                    search.ROM_NO[rom_byte_number] |= rom_byte_mask;
                    // DEBUG_puts ("1");
                } else {
                    search.ROM_NO[rom_byte_number] &= (uint8_t) ~rom_byte_mask;
    1fee:	e6 2d       	mov	r30, r6
    1ff0:	f0 e0       	ldi	r31, 0x00	; 0
    1ff2:	ef 55       	subi	r30, 0x5F	; 95
    1ff4:	f9 4d       	sbci	r31, 0xD9	; 217
    1ff6:	87 2d       	mov	r24, r7
    1ff8:	80 95       	com	r24
    1ffa:	90 81       	ld	r25, Z
    1ffc:	89 23       	and	r24, r25
    1ffe:	80 83       	st	Z, r24
                    // DEBUG_puts ("0");
                }

                // increment the byte counter id_bit_number and shift the mask rom_byte_mask
                bit_number++;
    2000:	53 94       	inc	r5
                rom_byte_mask <<= 1;
    2002:	77 0c       	add	r7, r7
                // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
                if (rom_byte_mask == 0) {
    2004:	79 f4       	brne	.+30     	; 0x2024 <OWNext+0x1bc>
                    search.crc8 = crc8_update (search.crc8, search.ROM_NO[rom_byte_number]); // accumulate the CRC
    2006:	e6 2d       	mov	r30, r6
    2008:	f0 e0       	ldi	r31, 0x00	; 0
    200a:	ef 55       	subi	r30, 0x5F	; 95
    200c:	f9 4d       	sbci	r31, 0xD9	; 217
    200e:	60 81       	ld	r22, Z
    2010:	eb ea       	ldi	r30, 0xAB	; 171
    2012:	f6 e2       	ldi	r31, 0x26	; 38
    2014:	80 81       	ld	r24, Z
    2016:	aa dc       	rcall	.-1708   	; 0x196c <crc8_update>
    2018:	eb ea       	ldi	r30, 0xAB	; 171
    201a:	f6 e2       	ldi	r31, 0x26	; 38
    201c:	80 83       	st	Z, r24
                    rom_byte_number++;
    201e:	63 94       	inc	r6
                    rom_byte_mask = 1;
    2020:	77 24       	eor	r7, r7
    2022:	73 94       	inc	r7
                }
            }
        } while (rom_byte_number < 8); // loop until through all ROM bytes 0-7
    2024:	f7 e0       	ldi	r31, 0x07	; 7
    2026:	f6 15       	cp	r31, r6
    2028:	08 f0       	brcs	.+2      	; 0x202c <OWNext+0x1c4>
    202a:	84 cf       	rjmp	.-248    	; 0x1f34 <OWNext+0xcc>
        // if the search was successful then
        if (bit_number > 64 && search.crc8 == 0) {
    202c:	80 e4       	ldi	r24, 0x40	; 64
    202e:	85 15       	cp	r24, r5
    2030:	68 f4       	brcc	.+26     	; 0x204c <OWNext+0x1e4>
    2032:	80 91 ab 26 	lds	r24, 0x26AB
    2036:	81 11       	cpse	r24, r1
    2038:	09 c0       	rjmp	.+18     	; 0x204c <OWNext+0x1e4>
            // search successful so set LastDiscrepancy,LastDeviceFlag,search_result
            search.LastDiscrepancy = last_00;
    203a:	ed 85       	ldd	r30, Y+13	; 0x0d
    203c:	e0 93 a9 26 	sts	0x26A9, r30
            if (search.LastDiscrepancy == 0) {
    2040:	e1 11       	cpse	r30, r1
    2042:	09 c0       	rjmp	.+18     	; 0x2056 <OWNext+0x1ee>
                search.LastDeviceFlag = true;
    2044:	81 e0       	ldi	r24, 0x01	; 1
    2046:	80 93 aa 26 	sts	0x26AA, r24
    204a:	05 c0       	rjmp	.+10     	; 0x2056 <OWNext+0x1ee>
            //}
        }
    }
    // if no device found then reset counters so next 'search' will be like a first
    if (!search_result || (search.ROM_NO[0] == 0)) {
        search.LastDiscrepancy = 0;
    204c:	10 92 a9 26 	sts	0x26A9, r1
        search.LastDeviceFlag = false;
    2050:	10 92 aa 26 	sts	0x26AA, r1
    2054:	0e c0       	rjmp	.+28     	; 0x2072 <OWNext+0x20a>
            //    DEBUG_putcrlf (" BITS");
            //}
        }
    }
    // if no device found then reset counters so next 'search' will be like a first
    if (!search_result || (search.ROM_NO[0] == 0)) {
    2056:	80 91 a1 26 	lds	r24, 0x26A1
    205a:	88 23       	and	r24, r24
    205c:	b9 f3       	breq	.-18     	; 0x204c <OWNext+0x1e4>

static bool OWNext (uint8_t* rom)
{
    bool status = OWSearch ();
    if (status) {
        memcpy (rom, search.ROM_NO, 8);
    205e:	88 e0       	ldi	r24, 0x08	; 8
    2060:	e1 ea       	ldi	r30, 0xA1	; 161
    2062:	f6 e2       	ldi	r31, 0x26	; 38
    2064:	d7 01       	movw	r26, r14
    2066:	01 90       	ld	r0, Z+
    2068:	0d 92       	st	X+, r0
    206a:	8a 95       	dec	r24
    206c:	e1 f7       	brne	.-8      	; 0x2066 <OWNext+0x1fe>
    206e:	81 e0       	ldi	r24, 0x01	; 1
    2070:	01 c0       	rjmp	.+2      	; 0x2074 <OWNext+0x20c>
                rom_byte_mask <<= 1;
                // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
                if (rom_byte_mask == 0) {
                    search.crc8 = crc8_update (search.crc8, search.ROM_NO[rom_byte_number]); // accumulate the CRC
                    rom_byte_number++;
                    rom_byte_mask = 1;
    2072:	80 e0       	ldi	r24, 0x00	; 0
    bool status = OWSearch ();
    if (status) {
        memcpy (rom, search.ROM_NO, 8);
    }
    return status;
}
    2074:	2d 96       	adiw	r28, 0x0d	; 13
    2076:	cd bf       	out	0x3d, r28	; 61
    2078:	de bf       	out	0x3e, r29	; 62
    207a:	df 91       	pop	r29
    207c:	cf 91       	pop	r28
    207e:	1f 91       	pop	r17
    2080:	0f 91       	pop	r16
    2082:	ff 90       	pop	r15
    2084:	ef 90       	pop	r14
    2086:	df 90       	pop	r13
    2088:	cf 90       	pop	r12
    208a:	bf 90       	pop	r11
    208c:	af 90       	pop	r10
    208e:	9f 90       	pop	r9
    2090:	8f 90       	pop	r8
    2092:	7f 90       	pop	r7
    2094:	6f 90       	pop	r6
    2096:	5f 90       	pop	r5
    2098:	4f 90       	pop	r4
    209a:	3f 90       	pop	r3
    209c:	2f 90       	pop	r2
    209e:	08 95       	ret

000020a0 <ow_write_byte_power>:
// 'sendbyte' - 8 bits to send (least significant bit)
//
// Returns: TRUE  :     bytes written and echo was the same, strong pullup now on
//          FALSE :     echo was not the same
bool ow_write_byte_power (uint8_t sendbyte)
{
    20a0:	cf 93       	push	r28
    20a2:	c8 2f       	mov	r28, r24
    //cSPU = DS2483_DEVCFG_SPU_MASK;
    if (!ds2483_configure ()) {
    20a4:	b8 de       	rcall	.-656    	; 0x1e16 <ds2483_configure>
    20a6:	88 23       	and	r24, r24
    20a8:	19 f0       	breq	.+6      	; 0x20b0 <ow_write_byte_power+0x10>
        return false;
    }
    return ds2483_1wire_write_byte (sendbyte);
    20aa:	8c 2f       	mov	r24, r28
    20ac:	7b de       	rcall	.-778    	; 0x1da4 <ds2483_1wire_write_byte>
    20ae:	01 c0       	rjmp	.+2      	; 0x20b2 <ow_write_byte_power+0x12>
//          FALSE :     echo was not the same
bool ow_write_byte_power (uint8_t sendbyte)
{
    //cSPU = DS2483_DEVCFG_SPU_MASK;
    if (!ds2483_configure ()) {
        return false;
    20b0:	80 e0       	ldi	r24, 0x00	; 0
    }
    return ds2483_1wire_write_byte (sendbyte);
}
    20b2:	cf 91       	pop	r28
    20b4:	08 95       	ret

000020b6 <ow_read_byte>:

bool ow_read_byte (uint8_t* byte)
{
    20b6:	0f 93       	push	r16
    20b8:	1f 93       	push	r17
    20ba:	cf 93       	push	r28
    20bc:	df 93       	push	r29
    20be:	cd b7       	in	r28, 0x3d	; 61
    20c0:	de b7       	in	r29, 0x3e	; 62
    20c2:	67 97       	sbiw	r28, 0x17	; 23
    20c4:	cd bf       	out	0x3d, r28	; 61
    20c6:	de bf       	out	0x3e, r29	; 62
    20c8:	8c 01       	movw	r16, r24

static bool ds2483_1wire_read_byte (uint8_t* byte)
{
    twi_package_t pkt;
    uint8_t status;
    pkt.chip = DS2483_ADDR;
    20ca:	88 e1       	ldi	r24, 0x18	; 24
    20cc:	8c 87       	std	Y+12, r24	; 0x0c
    pkt.addr[0] = DS2483_CMD_1WIRE_READ_BYTE;
    20ce:	86 e9       	ldi	r24, 0x96	; 150
    20d0:	8d 87       	std	Y+13, r24	; 0x0d
    pkt.addr_length = 1;
    20d2:	21 e0       	ldi	r18, 0x01	; 1
    20d4:	30 e0       	ldi	r19, 0x00	; 0
    20d6:	28 8b       	std	Y+16, r18	; 0x10
    20d8:	39 8b       	std	Y+17, r19	; 0x11
    pkt.buffer = &status;
    20da:	ae 01       	movw	r20, r28
    20dc:	49 5e       	subi	r20, 0xE9	; 233
    20de:	5f 4f       	sbci	r21, 0xFF	; 255
    20e0:	4a 8b       	std	Y+18, r20	; 0x12
    20e2:	5b 8b       	std	Y+19, r21	; 0x13
    pkt.length = 1;
    20e4:	2c 8b       	std	Y+20, r18	; 0x14
    20e6:	3d 8b       	std	Y+21, r19	; 0x15
    pkt.no_wait = false;
    20e8:	1e 8a       	std	Y+22, r1	; 0x16
    20ea:	41 e0       	ldi	r20, 0x01	; 1
    20ec:	be 01       	movw	r22, r28
    20ee:	64 5f       	subi	r22, 0xF4	; 244
    20f0:	7f 4f       	sbci	r23, 0xFF	; 255
    20f2:	80 e8       	ldi	r24, 0x80	; 128
    20f4:	94 e0       	ldi	r25, 0x04	; 4
    20f6:	0e 94 36 1c 	call	0x386c	; 0x386c <twi_master_transfer>
    if (twi_master_read (TWI_IESM, &pkt) != TWI_SUCCESS) {
    20fa:	89 2b       	or	r24, r25
    20fc:	41 f5       	brne	.+80     	; 0x214e <ow_read_byte+0x98>
        return false;
    }
    while ((status & DS2483_STATUS_1WB_MASK) == DS2483_STATUS_1WB_MASK) {
    20fe:	8f 89       	ldd	r24, Y+23	; 0x17
    2100:	80 ff       	sbrs	r24, 0
    2102:	08 c0       	rjmp	.+16     	; 0x2114 <ow_read_byte+0x5e>
        ds2483_read (1, &status);
    2104:	be 01       	movw	r22, r28
    2106:	69 5e       	subi	r22, 0xE9	; 233
    2108:	7f 4f       	sbci	r23, 0xFF	; 255
    210a:	81 e0       	ldi	r24, 0x01	; 1
    210c:	e8 dd       	rcall	.-1072   	; 0x1cde <ds2483_read>
    pkt.length = 1;
    pkt.no_wait = false;
    if (twi_master_read (TWI_IESM, &pkt) != TWI_SUCCESS) {
        return false;
    }
    while ((status & DS2483_STATUS_1WB_MASK) == DS2483_STATUS_1WB_MASK) {
    210e:	8f 89       	ldd	r24, Y+23	; 0x17
    2110:	80 fd       	sbrc	r24, 0
    2112:	f8 cf       	rjmp	.-16     	; 0x2104 <ow_read_byte+0x4e>

static bool ds2483_read_reg (uint8_t reg, uint8_t* val)
{
    twi_package_t pkt;
    //uint8_t status;
    pkt.chip = DS2483_ADDR;
    2114:	88 e1       	ldi	r24, 0x18	; 24
    2116:	89 83       	std	Y+1, r24	; 0x01
    pkt.addr[0] = DS2483_CMD_SET_READ_POINTER;
    2118:	81 ee       	ldi	r24, 0xE1	; 225
    211a:	8a 83       	std	Y+2, r24	; 0x02
    pkt.addr[1] = reg;
    211c:	8b 83       	std	Y+3, r24	; 0x03
    pkt.addr_length = 2;
    211e:	82 e0       	ldi	r24, 0x02	; 2
    2120:	90 e0       	ldi	r25, 0x00	; 0
    2122:	8d 83       	std	Y+5, r24	; 0x05
    2124:	9e 83       	std	Y+6, r25	; 0x06
    pkt.buffer = val;
    2126:	0f 83       	std	Y+7, r16	; 0x07
    2128:	18 87       	std	Y+8, r17	; 0x08
    pkt.length = 1;
    212a:	81 e0       	ldi	r24, 0x01	; 1
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	89 87       	std	Y+9, r24	; 0x09
    2130:	9a 87       	std	Y+10, r25	; 0x0a
    pkt.no_wait = false;
    2132:	1b 86       	std	Y+11, r1	; 0x0b
    2134:	41 e0       	ldi	r20, 0x01	; 1
    2136:	be 01       	movw	r22, r28
    2138:	6f 5f       	subi	r22, 0xFF	; 255
    213a:	7f 4f       	sbci	r23, 0xFF	; 255
    213c:	80 e8       	ldi	r24, 0x80	; 128
    213e:	94 e0       	ldi	r25, 0x04	; 4
    2140:	0e 94 36 1c 	call	0x386c	; 0x386c <twi_master_transfer>
    return twi_master_read (TWI_IESM, &pkt) == TWI_SUCCESS;
    2144:	21 e0       	ldi	r18, 0x01	; 1
    2146:	89 2b       	or	r24, r25
    2148:	19 f0       	breq	.+6      	; 0x2150 <ow_read_byte+0x9a>
    214a:	20 e0       	ldi	r18, 0x00	; 0
    214c:	01 c0       	rjmp	.+2      	; 0x2150 <ow_read_byte+0x9a>
    pkt.addr_length = 1;
    pkt.buffer = &status;
    pkt.length = 1;
    pkt.no_wait = false;
    if (twi_master_read (TWI_IESM, &pkt) != TWI_SUCCESS) {
        return false;
    214e:	20 e0       	ldi	r18, 0x00	; 0
}

bool ow_read_byte (uint8_t* byte)
{
    return ds2483_1wire_read_byte (byte);
}
    2150:	82 2f       	mov	r24, r18
    2152:	67 96       	adiw	r28, 0x17	; 23
    2154:	cd bf       	out	0x3d, r28	; 61
    2156:	de bf       	out	0x3e, r29	; 62
    2158:	df 91       	pop	r29
    215a:	cf 91       	pop	r28
    215c:	1f 91       	pop	r17
    215e:	0f 91       	pop	r16
    2160:	08 95       	ret

00002162 <ow_match>:
    } while ((status & DS2483_STATUS_1WB_MASK) == DS2483_STATUS_1WB_MASK);
    return ds2483_1wire_reset ();
}

bool ow_match (uint8_t* rom)
{
    2162:	0f 93       	push	r16
    2164:	1f 93       	push	r17
    2166:	cf 93       	push	r28
    2168:	df 93       	push	r29
    216a:	08 2f       	mov	r16, r24
    216c:	19 2f       	mov	r17, r25
    uint8_t i;
    if (!ds2483_1wire_reset ()) {
    216e:	db dd       	rcall	.-1098   	; 0x1d26 <ds2483_1wire_reset>
    2170:	88 23       	and	r24, r24
    2172:	79 f0       	breq	.+30     	; 0x2192 <ow_match+0x30>
        return false;
    }
    if (!ds2483_1wire_write_byte (MATCH_ROM)) {
    2174:	85 e5       	ldi	r24, 0x55	; 85
    2176:	16 de       	rcall	.-980    	; 0x1da4 <ds2483_1wire_write_byte>
    2178:	88 23       	and	r24, r24
    217a:	69 f0       	breq	.+26     	; 0x2196 <ow_match+0x34>
    217c:	c0 2f       	mov	r28, r16
    217e:	d1 2f       	mov	r29, r17
    2180:	18 e0       	ldi	r17, 0x08	; 8
        return false;
    }
    for (i = 0; i < 8; i++) {
        if (!ds2483_1wire_write_byte (rom[i])) {
    2182:	89 91       	ld	r24, Y+
    2184:	0f de       	rcall	.-994    	; 0x1da4 <ds2483_1wire_write_byte>
    2186:	88 23       	and	r24, r24
    2188:	41 f0       	breq	.+16     	; 0x219a <ow_match+0x38>
    218a:	11 50       	subi	r17, 0x01	; 1
        return false;
    }
    if (!ds2483_1wire_write_byte (MATCH_ROM)) {
        return false;
    }
    for (i = 0; i < 8; i++) {
    218c:	d1 f7       	brne	.-12     	; 0x2182 <ow_match+0x20>
        if (!ds2483_1wire_write_byte (rom[i])) {
            return false;
        }
    }
    return true;
    218e:	81 e0       	ldi	r24, 0x01	; 1
    2190:	05 c0       	rjmp	.+10     	; 0x219c <ow_match+0x3a>

bool ow_match (uint8_t* rom)
{
    uint8_t i;
    if (!ds2483_1wire_reset ()) {
        return false;
    2192:	80 e0       	ldi	r24, 0x00	; 0
    2194:	03 c0       	rjmp	.+6      	; 0x219c <ow_match+0x3a>
    }
    if (!ds2483_1wire_write_byte (MATCH_ROM)) {
        return false;
    2196:	80 e0       	ldi	r24, 0x00	; 0
    2198:	01 c0       	rjmp	.+2      	; 0x219c <ow_match+0x3a>
    }
    for (i = 0; i < 8; i++) {
        if (!ds2483_1wire_write_byte (rom[i])) {
            return false;
    219a:	80 e0       	ldi	r24, 0x00	; 0
        }
    }
    return true;
}
    219c:	df 91       	pop	r29
    219e:	cf 91       	pop	r28
    21a0:	1f 91       	pop	r17
    21a2:	0f 91       	pop	r16
    21a4:	08 95       	ret

000021a6 <ow_detect_sensors>:
    //cAPU = DS2483_DEVCFG_APU_MASK;
    //return ds2483_write_device_configuration (c1WS | cSPU | cPDN | cAPU);
}

uint8_t ow_detect_sensors (void)
{
    21a6:	cf 92       	push	r12
    21a8:	df 92       	push	r13
    21aa:	ef 92       	push	r14
    21ac:	ff 92       	push	r15
    21ae:	0f 93       	push	r16
    21b0:	1f 93       	push	r17
    21b2:	cf 93       	push	r28
    21b4:	df 93       	push	r29
    21b6:	cd b7       	in	r28, 0x3d	; 61
    21b8:	de b7       	in	r29, 0x3e	; 62
    21ba:	2c 97       	sbiw	r28, 0x0c	; 12
    21bc:	cd bf       	out	0x3d, r28	; 61
    21be:	de bf       	out	0x3e, r29	; 62
    ow_count = 0;
    21c0:	10 92 84 2d 	sts	0x2D84, r1
//          FALSE   device not detected or failure to perform reset
static bool ds2483_device_reset (void)
{
    twi_package_t pkt;
    uint8_t status;
    pkt.chip = DS2483_ADDR;
    21c4:	88 e1       	ldi	r24, 0x18	; 24
    21c6:	89 83       	std	Y+1, r24	; 0x01
    pkt.addr[0] = DS2483_CMD_DEVICE_RESET;
    21c8:	80 ef       	ldi	r24, 0xF0	; 240
    21ca:	8a 83       	std	Y+2, r24	; 0x02
    pkt.addr_length = 1;
    21cc:	81 e0       	ldi	r24, 0x01	; 1
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	8d 83       	std	Y+5, r24	; 0x05
    21d2:	9e 83       	std	Y+6, r25	; 0x06
    pkt.buffer = NULL;
    21d4:	1f 82       	std	Y+7, r1	; 0x07
    21d6:	18 86       	std	Y+8, r1	; 0x08
    pkt.length = 0;
    21d8:	19 86       	std	Y+9, r1	; 0x09
    21da:	1a 86       	std	Y+10, r1	; 0x0a
    pkt.no_wait = false;
    21dc:	1b 86       	std	Y+11, r1	; 0x0b
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
    21de:	40 e0       	ldi	r20, 0x00	; 0
    21e0:	be 01       	movw	r22, r28
    21e2:	6f 5f       	subi	r22, 0xFF	; 255
    21e4:	7f 4f       	sbci	r23, 0xFF	; 255
    21e6:	80 e8       	ldi	r24, 0x80	; 128
    21e8:	94 e0       	ldi	r25, 0x04	; 4
    21ea:	0e 94 36 1c 	call	0x386c	; 0x386c <twi_master_transfer>
    if (twi_master_write (TWI_IESM, &pkt) != TWI_SUCCESS) {
    21ee:	89 2b       	or	r24, r25
    21f0:	09 f0       	breq	.+2      	; 0x21f4 <ow_detect_sensors+0x4e>
    21f2:	7a c0       	rjmp	.+244    	; 0x22e8 <ow_detect_sensors+0x142>
        return false;
    }
    do {
        status = 0;
    21f4:	1c 86       	std	Y+12, r1	; 0x0c
        ds2483_read (1, &status);
    21f6:	be 01       	movw	r22, r28
    21f8:	64 5f       	subi	r22, 0xF4	; 244
    21fa:	7f 4f       	sbci	r23, 0xFF	; 255
    21fc:	81 e0       	ldi	r24, 0x01	; 1
    21fe:	6f dd       	rcall	.-1314   	; 0x1cde <ds2483_read>
    } while ((status & DS2483_STATUS_1WB_MASK) == DS2483_STATUS_1WB_MASK);
    2200:	8c 85       	ldd	r24, Y+12	; 0x0c
    2202:	80 fd       	sbrc	r24, 0
    2204:	f7 cf       	rjmp	.-18     	; 0x21f4 <ow_detect_sensors+0x4e>
    //if ((status & DS2483_STATUS_SD_MASK) == DS2483_STATUS_SD_MASK) {
        //DEBUG_putcrlf ("******* SHORT DETECTED *******");
    //}
    return (status & 0xF7) == DS2483_STATUS_RST_MASK;
    2206:	87 7f       	andi	r24, 0xF7	; 247
    return OWNext (rom);
}

static bool ds2483_detect (void)
{
    if (!ds2483_device_reset ()) {
    2208:	80 31       	cpi	r24, 0x10	; 16
    220a:	09 f0       	breq	.+2      	; 0x220e <ow_detect_sensors+0x68>
    220c:	6d c0       	rjmp	.+218    	; 0x22e8 <ow_detect_sensors+0x142>
        return false;
    }
    return ds2483_configure ();
    220e:	03 de       	rcall	.-1018   	; 0x1e16 <ds2483_configure>
}

uint8_t ow_detect_sensors (void)
{
    ow_count = 0;
    if (ds2483_detect () && OWFirst (ow_rom_codes[ow_count])) {
    2210:	88 23       	and	r24, r24
    2212:	09 f4       	brne	.+2      	; 0x2216 <ow_detect_sensors+0x70>
    2214:	69 c0       	rjmp	.+210    	; 0x22e8 <ow_detect_sensors+0x142>
    2216:	80 91 84 2d 	lds	r24, 0x2D84
    221a:	90 e0       	ldi	r25, 0x00	; 0
    221c:	88 0f       	add	r24, r24
    221e:	99 1f       	adc	r25, r25
    2220:	88 0f       	add	r24, r24
    2222:	99 1f       	adc	r25, r25
    2224:	88 0f       	add	r24, r24
    2226:	99 1f       	adc	r25, r25
    return status;
}

static bool OWFirst (uint8_t* rom)
{
    search.LastDiscrepancy = 0;
    2228:	10 92 a9 26 	sts	0x26A9, r1
    search.LastDeviceFlag = false;
    222c:	10 92 aa 26 	sts	0x26AA, r1
    //search.LastFamilyDiscrepancy = 0;
    return OWNext (rom);
    2230:	8c 5f       	subi	r24, 0xFC	; 252
    2232:	92 4d       	sbci	r25, 0xD2	; 210
    2234:	19 de       	rcall	.-974    	; 0x1e68 <OWNext>
}

uint8_t ow_detect_sensors (void)
{
    ow_count = 0;
    if (ds2483_detect () && OWFirst (ow_rom_codes[ow_count])) {
    2236:	88 23       	and	r24, r24
    2238:	09 f4       	brne	.+2      	; 0x223c <ow_detect_sensors+0x96>
    223a:	56 c0       	rjmp	.+172    	; 0x22e8 <ow_detect_sensors+0x142>
        do {
            ow_count++;
    223c:	80 91 84 2d 	lds	r24, 0x2D84
    2240:	8f 5f       	subi	r24, 0xFF	; 255
    2242:	80 93 84 2d 	sts	0x2D84, r24
        } while (ow_count < OW_MAX_DEVICES && OWNext (ow_rom_codes[ow_count]));
    2246:	80 31       	cpi	r24, 0x10	; 16
    2248:	28 f0       	brcs	.+10     	; 0x2254 <ow_detect_sensors+0xae>
        for (uint8_t i = 0; i < ow_count; i++) {
    224a:	f0 90 84 2d 	lds	r15, 0x2D84
    224e:	f1 10       	cpse	r15, r1
    2250:	0e c0       	rjmp	.+28     	; 0x226e <ow_detect_sensors+0xc8>
    2252:	4a c0       	rjmp	.+148    	; 0x22e8 <ow_detect_sensors+0x142>
{
    ow_count = 0;
    if (ds2483_detect () && OWFirst (ow_rom_codes[ow_count])) {
        do {
            ow_count++;
        } while (ow_count < OW_MAX_DEVICES && OWNext (ow_rom_codes[ow_count]));
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	88 0f       	add	r24, r24
    2258:	99 1f       	adc	r25, r25
    225a:	88 0f       	add	r24, r24
    225c:	99 1f       	adc	r25, r25
    225e:	88 0f       	add	r24, r24
    2260:	99 1f       	adc	r25, r25
    2262:	8c 5f       	subi	r24, 0xFC	; 252
    2264:	92 4d       	sbci	r25, 0xD2	; 210
    2266:	00 de       	rcall	.-1024   	; 0x1e68 <OWNext>
    2268:	81 11       	cpse	r24, r1
    226a:	e8 cf       	rjmp	.-48     	; 0x223c <ow_detect_sensors+0x96>
    226c:	ee cf       	rjmp	.-36     	; 0x224a <ow_detect_sensors+0xa4>
        for (uint8_t i = 0; i < ow_count; i++) {
    226e:	60 e0       	ldi	r22, 0x00	; 0
    2270:	70 e0       	ldi	r23, 0x00	; 0
            char* pchar = ow_rom_codes_str[i];
    2272:	0f 2e       	mov	r0, r31
    2274:	f1 e1       	ldi	r31, 0x11	; 17
    2276:	ef 2e       	mov	r14, r31
    2278:	f0 2d       	mov	r31, r0
    227a:	e6 9e       	mul	r14, r22
    227c:	80 01       	movw	r16, r0
    227e:	e7 9e       	mul	r14, r23
    2280:	10 0d       	add	r17, r0
    2282:	11 24       	eor	r1, r1
    2284:	0c 50       	subi	r16, 0x0C	; 12
    2286:	14 4d       	sbci	r17, 0xD4	; 212
    //cPDN = 0;
    //cAPU = DS2483_DEVCFG_APU_MASK;
    //return ds2483_write_device_configuration (c1WS | cSPU | cPDN | cAPU);
}

uint8_t ow_detect_sensors (void)
    2288:	db 01       	movw	r26, r22
    228a:	aa 0f       	add	r26, r26
    228c:	bb 1f       	adc	r27, r27
    228e:	aa 0f       	add	r26, r26
    2290:	bb 1f       	adc	r27, r27
    2292:	aa 0f       	add	r26, r26
    2294:	bb 1f       	adc	r27, r27
    2296:	0f 2e       	mov	r0, r31
    2298:	f4 e0       	ldi	r31, 0x04	; 4
    229a:	cf 2e       	mov	r12, r31
    229c:	fd e2       	ldi	r31, 0x2D	; 45
    229e:	df 2e       	mov	r13, r31
    22a0:	f0 2d       	mov	r31, r0
    22a2:	ca 0e       	add	r12, r26
    22a4:	db 1e       	adc	r13, r27
    22a6:	a8 01       	movw	r20, r16
    22a8:	40 5f       	subi	r20, 0xF0	; 240
    22aa:	5f 4f       	sbci	r21, 0xFF	; 255
    if (ds2483_detect () && OWFirst (ow_rom_codes[ow_count])) {
        do {
            ow_count++;
        } while (ow_count < OW_MAX_DEVICES && OWNext (ow_rom_codes[ow_count]));
        for (uint8_t i = 0; i < ow_count; i++) {
            char* pchar = ow_rom_codes_str[i];
    22ac:	f8 01       	movw	r30, r16
            for (uint8_t j = 0; j < 8; j++) {
                *pchar++ = ram_hex[ (ow_rom_codes[i][j]) >> 4];
    22ae:	d6 01       	movw	r26, r12
    22b0:	8d 91       	ld	r24, X+
    22b2:	6d 01       	movw	r12, r26
    22b4:	28 2f       	mov	r18, r24
    22b6:	22 95       	swap	r18
    22b8:	2f 70       	andi	r18, 0x0F	; 15
    22ba:	30 e0       	ldi	r19, 0x00	; 0
    22bc:	23 52       	subi	r18, 0x23	; 35
    22be:	3e 4d       	sbci	r19, 0xDE	; 222
    22c0:	d9 01       	movw	r26, r18
    22c2:	9c 91       	ld	r25, X
    22c4:	90 83       	st	Z, r25
                *pchar++ = ram_hex[ (ow_rom_codes[i][j]) & 0x0F];
    22c6:	8f 70       	andi	r24, 0x0F	; 15
    22c8:	90 e0       	ldi	r25, 0x00	; 0
    22ca:	83 52       	subi	r24, 0x23	; 35
    22cc:	9e 4d       	sbci	r25, 0xDE	; 222
    22ce:	dc 01       	movw	r26, r24
    22d0:	8c 91       	ld	r24, X
    22d2:	81 83       	std	Z+1, r24	; 0x01
    //cPDN = 0;
    //cAPU = DS2483_DEVCFG_APU_MASK;
    //return ds2483_write_device_configuration (c1WS | cSPU | cPDN | cAPU);
}

uint8_t ow_detect_sensors (void)
    22d4:	32 96       	adiw	r30, 0x02	; 2
        do {
            ow_count++;
        } while (ow_count < OW_MAX_DEVICES && OWNext (ow_rom_codes[ow_count]));
        for (uint8_t i = 0; i < ow_count; i++) {
            char* pchar = ow_rom_codes_str[i];
            for (uint8_t j = 0; j < 8; j++) {
    22d6:	e4 17       	cp	r30, r20
    22d8:	f5 07       	cpc	r31, r21
    22da:	49 f7       	brne	.-46     	; 0x22ae <ow_detect_sensors+0x108>
                *pchar++ = ram_hex[ (ow_rom_codes[i][j]) >> 4];
                *pchar++ = ram_hex[ (ow_rom_codes[i][j]) & 0x0F];
            }
            *pchar = '\x00';
    22dc:	f8 01       	movw	r30, r16
    22de:	10 8a       	std	Z+16, r1	; 0x10
    22e0:	6f 5f       	subi	r22, 0xFF	; 255
    22e2:	7f 4f       	sbci	r23, 0xFF	; 255
    ow_count = 0;
    if (ds2483_detect () && OWFirst (ow_rom_codes[ow_count])) {
        do {
            ow_count++;
        } while (ow_count < OW_MAX_DEVICES && OWNext (ow_rom_codes[ow_count]));
        for (uint8_t i = 0; i < ow_count; i++) {
    22e4:	6f 15       	cp	r22, r15
    22e6:	48 f2       	brcs	.-110    	; 0x227a <ow_detect_sensors+0xd4>
            }
            *pchar = '\x00';
        }
    }
    return ow_count;
}
    22e8:	80 91 84 2d 	lds	r24, 0x2D84
    22ec:	2c 96       	adiw	r28, 0x0c	; 12
    22ee:	cd bf       	out	0x3d, r28	; 61
    22f0:	de bf       	out	0x3e, r29	; 62
    22f2:	df 91       	pop	r29
    22f4:	cf 91       	pop	r28
    22f6:	1f 91       	pop	r17
    22f8:	0f 91       	pop	r16
    22fa:	ff 90       	pop	r15
    22fc:	ef 90       	pop	r14
    22fe:	df 90       	pop	r13
    2300:	cf 90       	pop	r12
    2302:	08 95       	ret

00002304 <__vector_28>:
}

bool _uartc1_byte_available(void)
{
    return buffer.rx_front != buffer.rx_back;
}
    2304:	1f 92       	push	r1
    2306:	0f 92       	push	r0
    2308:	0f b6       	in	r0, 0x3f	; 63
    230a:	0f 92       	push	r0
    230c:	11 24       	eor	r1, r1
    230e:	2f 93       	push	r18
    2310:	8f 93       	push	r24
    2312:	9f 93       	push	r25
    2314:	af 93       	push	r26
    2316:	bf 93       	push	r27
    2318:	ef 93       	push	r30
    231a:	ff 93       	push	r31
    231c:	20 91 b0 08 	lds	r18, 0x08B0
    2320:	80 91 3c 27 	lds	r24, 0x273C
    2324:	8f 5f       	subi	r24, 0xFF	; 255
    2326:	8f 70       	andi	r24, 0x0F	; 15
    2328:	90 91 3d 27 	lds	r25, 0x273D
    232c:	98 17       	cp	r25, r24
    232e:	41 f0       	breq	.+16     	; 0x2340 <__vector_28+0x3c>
    2330:	ec e3       	ldi	r30, 0x3C	; 60
    2332:	f7 e2       	ldi	r31, 0x27	; 39
    2334:	a0 81       	ld	r26, Z
    2336:	b0 e0       	ldi	r27, 0x00	; 0
    2338:	a4 55       	subi	r26, 0x54	; 84
    233a:	b9 4d       	sbci	r27, 0xD9	; 217
    233c:	2c 93       	st	X, r18
    233e:	80 83       	st	Z, r24
    2340:	ff 91       	pop	r31
    2342:	ef 91       	pop	r30
    2344:	bf 91       	pop	r27
    2346:	af 91       	pop	r26
    2348:	9f 91       	pop	r25
    234a:	8f 91       	pop	r24
    234c:	2f 91       	pop	r18
    234e:	0f 90       	pop	r0
    2350:	0f be       	out	0x3f, r0	; 63
    2352:	0f 90       	pop	r0
    2354:	1f 90       	pop	r1
    2356:	18 95       	reti

00002358 <__vector_30>:
    2358:	1f 92       	push	r1
    235a:	0f 92       	push	r0
    235c:	0f b6       	in	r0, 0x3f	; 63
    235e:	0f 92       	push	r0
    2360:	11 24       	eor	r1, r1
    2362:	0f 90       	pop	r0
    2364:	0f be       	out	0x3f, r0	; 63
    2366:	0f 90       	pop	r0
    2368:	1f 90       	pop	r1
    236a:	18 95       	reti

0000236c <__vector_29>:
    236c:	1f 92       	push	r1
    236e:	0f 92       	push	r0
    2370:	0f b6       	in	r0, 0x3f	; 63
    2372:	0f 92       	push	r0
    2374:	11 24       	eor	r1, r1
    2376:	8f 93       	push	r24
    2378:	9f 93       	push	r25
    237a:	af 93       	push	r26
    237c:	bf 93       	push	r27
    237e:	ef 93       	push	r30
    2380:	ff 93       	push	r31
    2382:	90 91 3e 27 	lds	r25, 0x273E
    2386:	80 91 3f 27 	lds	r24, 0x273F
    238a:	98 13       	cpse	r25, r24
    238c:	06 c0       	rjmp	.+12     	; 0x239a <__vector_29+0x2e>
    238e:	e0 eb       	ldi	r30, 0xB0	; 176
    2390:	f8 e0       	ldi	r31, 0x08	; 8
    2392:	83 81       	ldd	r24, Z+3	; 0x03
    2394:	8c 7f       	andi	r24, 0xFC	; 252
    2396:	83 83       	std	Z+3, r24	; 0x03
    2398:	0e c0       	rjmp	.+28     	; 0x23b6 <__vector_29+0x4a>
    239a:	ef e3       	ldi	r30, 0x3F	; 63
    239c:	f7 e2       	ldi	r31, 0x27	; 39
    239e:	a0 81       	ld	r26, Z
    23a0:	b0 e0       	ldi	r27, 0x00	; 0
    23a2:	a4 55       	subi	r26, 0x54	; 84
    23a4:	b9 4d       	sbci	r27, 0xD9	; 217
    23a6:	50 96       	adiw	r26, 0x10	; 16
    23a8:	8c 91       	ld	r24, X
    23aa:	80 93 b0 08 	sts	0x08B0, r24
    23ae:	80 81       	ld	r24, Z
    23b0:	8f 5f       	subi	r24, 0xFF	; 255
    23b2:	8f 77       	andi	r24, 0x7F	; 127
    23b4:	80 83       	st	Z, r24
    23b6:	ff 91       	pop	r31
    23b8:	ef 91       	pop	r30
    23ba:	bf 91       	pop	r27
    23bc:	af 91       	pop	r26
    23be:	9f 91       	pop	r25
    23c0:	8f 91       	pop	r24
    23c2:	0f 90       	pop	r0
    23c4:	0f be       	out	0x3f, r0	; 63
    23c6:	0f 90       	pop	r0
    23c8:	1f 90       	pop	r1
    23ca:	18 95       	reti

000023cc <_uartc1_enable_interrupt>:
    23cc:	e0 eb       	ldi	r30, 0xB0	; 176
    23ce:	f8 e0       	ldi	r31, 0x08	; 8
    23d0:	93 81       	ldd	r25, Z+3	; 0x03
    23d2:	82 95       	swap	r24
    23d4:	80 7f       	andi	r24, 0xF0	; 240
    23d6:	9f 7c       	andi	r25, 0xCF	; 207
    23d8:	98 2b       	or	r25, r24
    23da:	93 83       	std	Z+3, r25	; 0x03
    23dc:	08 95       	ret

000023de <_uartc1_init>:
    23de:	cf 93       	push	r28
    23e0:	df 93       	push	r29
    23e2:	cd b7       	in	r28, 0x3d	; 61
    23e4:	de b7       	in	r29, 0x3e	; 62
    23e6:	29 97       	sbiw	r28, 0x09	; 9
    23e8:	cd bf       	out	0x3d, r28	; 61
    23ea:	de bf       	out	0x3e, r29	; 62
    23ec:	89 e0       	ldi	r24, 0x09	; 9
    23ee:	e0 e0       	ldi	r30, 0x00	; 0
    23f0:	f0 e2       	ldi	r31, 0x20	; 32
    23f2:	de 01       	movw	r26, r28
    23f4:	11 96       	adiw	r26, 0x01	; 1
    23f6:	01 90       	ld	r0, Z+
    23f8:	0d 92       	st	X+, r0
    23fa:	8a 95       	dec	r24
    23fc:	e1 f7       	brne	.-8      	; 0x23f6 <_uartc1_init+0x18>
    23fe:	10 92 3d 27 	sts	0x273D, r1
    2402:	10 92 3c 27 	sts	0x273C, r1
    2406:	10 92 3f 27 	sts	0x273F, r1
    240a:	10 92 3e 27 	sts	0x273E, r1
    240e:	be 01       	movw	r22, r28
    2410:	6f 5f       	subi	r22, 0xFF	; 255
    2412:	7f 4f       	sbci	r23, 0xFF	; 255
    2414:	80 eb       	ldi	r24, 0xB0	; 176
    2416:	98 e0       	ldi	r25, 0x08	; 8
    2418:	0e 94 af 1d 	call	0x3b5e	; 0x3b5e <usart_init_rs232>
    241c:	e0 eb       	ldi	r30, 0xB0	; 176
    241e:	f8 e0       	ldi	r31, 0x08	; 8
    2420:	83 81       	ldd	r24, Z+3	; 0x03
    2422:	8f 7c       	andi	r24, 0xCF	; 207
    2424:	83 83       	std	Z+3, r24	; 0x03
    2426:	83 81       	ldd	r24, Z+3	; 0x03
    2428:	83 7f       	andi	r24, 0xF3	; 243
    242a:	83 83       	std	Z+3, r24	; 0x03
    242c:	83 81       	ldd	r24, Z+3	; 0x03
    242e:	8c 7f       	andi	r24, 0xFC	; 252
    2430:	81 60       	ori	r24, 0x01	; 1
    2432:	83 83       	std	Z+3, r24	; 0x03
    2434:	29 96       	adiw	r28, 0x09	; 9
    2436:	cd bf       	out	0x3d, r28	; 61
    2438:	de bf       	out	0x3e, r29	; 62
    243a:	df 91       	pop	r29
    243c:	cf 91       	pop	r28
    243e:	08 95       	ret

00002440 <_uartc1_putc>:

void reset_avr(void);

void _uartc1_putc(char ch)
{
    2440:	ff 92       	push	r15
    2442:	0f 93       	push	r16
    2444:	1f 93       	push	r17
    2446:	cf 93       	push	r28
    2448:	df 93       	push	r29
    244a:	f8 2e       	mov	r15, r24
    timeout_start_singleshot(TIMEOUT_UART, TIMEOUT_TICK_HZ);
    244c:	68 e0       	ldi	r22, 0x08	; 8
    244e:	70 e0       	ldi	r23, 0x00	; 0
    2450:	81 e0       	ldi	r24, 0x01	; 1
    2452:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <timeout_start_singleshot>
}

static bool putb(uint8_t byte)
{
    uint8_t tx_back;
    tx_back = (buffer.tx_back + 1) & TX_BUFFER_MASK;
    2456:	0e e3       	ldi	r16, 0x3E	; 62
    2458:	17 e2       	ldi	r17, 0x27	; 39
    if (tx_back != buffer.tx_front) {
    245a:	cf e3       	ldi	r28, 0x3F	; 63
    245c:	d7 e2       	ldi	r29, 0x27	; 39
void reset_avr(void);

void _uartc1_putc(char ch)
{
    timeout_start_singleshot(TIMEOUT_UART, TIMEOUT_TICK_HZ);
    while (!putb(ch)) {
    245e:	02 c0       	rjmp	.+4      	; 0x2464 <_uartc1_putc+0x24>
        if (timeout_test_and_clear_expired(TIMEOUT_UART)) {
            reset_avr();
    2460:	0e 94 2c 2a 	call	0x5458	; 0x5458 <reset_avr>
}

static bool putb(uint8_t byte)
{
    uint8_t tx_back;
    tx_back = (buffer.tx_back + 1) & TX_BUFFER_MASK;
    2464:	f8 01       	movw	r30, r16
    2466:	90 81       	ld	r25, Z
    2468:	9f 5f       	subi	r25, 0xFF	; 255
    246a:	9f 77       	andi	r25, 0x7F	; 127
    if (tx_back != buffer.tx_front) {
    246c:	28 81       	ld	r18, Y
    246e:	92 17       	cp	r25, r18
    2470:	99 f0       	breq	.+38     	; 0x2498 <_uartc1_putc+0x58>
        buffer.TX[buffer.tx_back] = byte;
    2472:	ee e3       	ldi	r30, 0x3E	; 62
    2474:	f7 e2       	ldi	r31, 0x27	; 39
    2476:	a0 81       	ld	r26, Z
    2478:	b0 e0       	ldi	r27, 0x00	; 0
    247a:	a4 55       	subi	r26, 0x54	; 84
    247c:	b9 4d       	sbci	r27, 0xD9	; 217
    247e:	50 96       	adiw	r26, 0x10	; 16
    2480:	fc 92       	st	X, r15
        buffer.tx_back = tx_back;
    2482:	90 83       	st	Z, r25
 *              Use USART_DREINTLVL_t type.
 */
static inline void usart_set_dre_interrupt_level(USART_t *usart,
		enum usart_int_level_t level)
{
	(usart)->CTRLA = ((usart)->CTRLA & ~USART_DREINTLVL_gm) |
    2484:	e0 eb       	ldi	r30, 0xB0	; 176
    2486:	f8 e0       	ldi	r31, 0x08	; 8
    2488:	83 81       	ldd	r24, Z+3	; 0x03
    248a:	8c 7f       	andi	r24, 0xFC	; 252
    248c:	81 60       	ori	r24, 0x01	; 1
    248e:	83 83       	std	Z+3, r24	; 0x03
    while (!putb(ch)) {
        if (timeout_test_and_clear_expired(TIMEOUT_UART)) {
            reset_avr();
        }
    }
    timeout_stop(TIMEOUT_UART);
    2490:	81 e0       	ldi	r24, 0x01	; 1
    2492:	0e 94 9d 1f 	call	0x3f3a	; 0x3f3a <timeout_stop>
    2496:	06 c0       	rjmp	.+12     	; 0x24a4 <_uartc1_putc+0x64>

void _uartc1_putc(char ch)
{
    timeout_start_singleshot(TIMEOUT_UART, TIMEOUT_TICK_HZ);
    while (!putb(ch)) {
        if (timeout_test_and_clear_expired(TIMEOUT_UART)) {
    2498:	81 e0       	ldi	r24, 0x01	; 1
    249a:	0e 94 78 1f 	call	0x3ef0	; 0x3ef0 <timeout_test_and_clear_expired>
    249e:	88 23       	and	r24, r24
    24a0:	09 f3       	breq	.-62     	; 0x2464 <_uartc1_putc+0x24>
    24a2:	de cf       	rjmp	.-68     	; 0x2460 <_uartc1_putc+0x20>
            reset_avr();
        }
    }
    timeout_stop(TIMEOUT_UART);
}
    24a4:	df 91       	pop	r29
    24a6:	cf 91       	pop	r28
    24a8:	1f 91       	pop	r17
    24aa:	0f 91       	pop	r16
    24ac:	ff 90       	pop	r15
    24ae:	08 95       	ret

000024b0 <__vector_58>:
}

bool _uarte0_byte_available(void)
{
	return buffer.rx_front != buffer.rx_back;
}
    24b0:	1f 92       	push	r1
    24b2:	0f 92       	push	r0
    24b4:	0f b6       	in	r0, 0x3f	; 63
    24b6:	0f 92       	push	r0
    24b8:	11 24       	eor	r1, r1
    24ba:	2f 93       	push	r18
    24bc:	8f 93       	push	r24
    24be:	9f 93       	push	r25
    24c0:	af 93       	push	r26
    24c2:	bf 93       	push	r27
    24c4:	ef 93       	push	r30
    24c6:	ff 93       	push	r31
    24c8:	20 91 a0 0a 	lds	r18, 0x0AA0
    24cc:	80 91 40 28 	lds	r24, 0x2840
    24d0:	8f 5f       	subi	r24, 0xFF	; 255
    24d2:	8f 77       	andi	r24, 0x7F	; 127
    24d4:	90 91 41 28 	lds	r25, 0x2841
    24d8:	98 17       	cp	r25, r24
    24da:	41 f0       	breq	.+16     	; 0x24ec <__vector_58+0x3c>
    24dc:	e0 e4       	ldi	r30, 0x40	; 64
    24de:	f8 e2       	ldi	r31, 0x28	; 40
    24e0:	a0 81       	ld	r26, Z
    24e2:	b0 e0       	ldi	r27, 0x00	; 0
    24e4:	a0 5c       	subi	r26, 0xC0	; 192
    24e6:	b8 4d       	sbci	r27, 0xD8	; 216
    24e8:	2c 93       	st	X, r18
    24ea:	80 83       	st	Z, r24
    24ec:	ff 91       	pop	r31
    24ee:	ef 91       	pop	r30
    24f0:	bf 91       	pop	r27
    24f2:	af 91       	pop	r26
    24f4:	9f 91       	pop	r25
    24f6:	8f 91       	pop	r24
    24f8:	2f 91       	pop	r18
    24fa:	0f 90       	pop	r0
    24fc:	0f be       	out	0x3f, r0	; 63
    24fe:	0f 90       	pop	r0
    2500:	1f 90       	pop	r1
    2502:	18 95       	reti

00002504 <__vector_60>:
    2504:	1f 92       	push	r1
    2506:	0f 92       	push	r0
    2508:	0f b6       	in	r0, 0x3f	; 63
    250a:	0f 92       	push	r0
    250c:	11 24       	eor	r1, r1
    250e:	0f 90       	pop	r0
    2510:	0f be       	out	0x3f, r0	; 63
    2512:	0f 90       	pop	r0
    2514:	1f 90       	pop	r1
    2516:	18 95       	reti

00002518 <__vector_59>:
    2518:	1f 92       	push	r1
    251a:	0f 92       	push	r0
    251c:	0f b6       	in	r0, 0x3f	; 63
    251e:	0f 92       	push	r0
    2520:	11 24       	eor	r1, r1
    2522:	8f 93       	push	r24
    2524:	9f 93       	push	r25
    2526:	af 93       	push	r26
    2528:	bf 93       	push	r27
    252a:	ef 93       	push	r30
    252c:	ff 93       	push	r31
    252e:	90 91 42 28 	lds	r25, 0x2842
    2532:	80 91 43 28 	lds	r24, 0x2843
    2536:	98 13       	cpse	r25, r24
    2538:	06 c0       	rjmp	.+12     	; 0x2546 <__vector_59+0x2e>
    253a:	e0 ea       	ldi	r30, 0xA0	; 160
    253c:	fa e0       	ldi	r31, 0x0A	; 10
    253e:	83 81       	ldd	r24, Z+3	; 0x03
    2540:	8c 7f       	andi	r24, 0xFC	; 252
    2542:	83 83       	std	Z+3, r24	; 0x03
    2544:	0d c0       	rjmp	.+26     	; 0x2560 <__vector_59+0x48>
    2546:	e3 e4       	ldi	r30, 0x43	; 67
    2548:	f8 e2       	ldi	r31, 0x28	; 40
    254a:	a0 81       	ld	r26, Z
    254c:	b0 e0       	ldi	r27, 0x00	; 0
    254e:	a0 54       	subi	r26, 0x40	; 64
    2550:	b8 4d       	sbci	r27, 0xD8	; 216
    2552:	8c 91       	ld	r24, X
    2554:	80 93 a0 0a 	sts	0x0AA0, r24
    2558:	80 81       	ld	r24, Z
    255a:	8f 5f       	subi	r24, 0xFF	; 255
    255c:	8f 77       	andi	r24, 0x7F	; 127
    255e:	80 83       	st	Z, r24
    2560:	ff 91       	pop	r31
    2562:	ef 91       	pop	r30
    2564:	bf 91       	pop	r27
    2566:	af 91       	pop	r26
    2568:	9f 91       	pop	r25
    256a:	8f 91       	pop	r24
    256c:	0f 90       	pop	r0
    256e:	0f be       	out	0x3f, r0	; 63
    2570:	0f 90       	pop	r0
    2572:	1f 90       	pop	r1
    2574:	18 95       	reti

00002576 <_uarte0_enable_interrupt>:
    2576:	e0 ea       	ldi	r30, 0xA0	; 160
    2578:	fa e0       	ldi	r31, 0x0A	; 10
    257a:	93 81       	ldd	r25, Z+3	; 0x03
    257c:	82 95       	swap	r24
    257e:	80 7f       	andi	r24, 0xF0	; 240
    2580:	9f 7c       	andi	r25, 0xCF	; 207
    2582:	98 2b       	or	r25, r24
    2584:	93 83       	std	Z+3, r25	; 0x03
    2586:	08 95       	ret

00002588 <_uarte0_init>:
    2588:	cf 93       	push	r28
    258a:	df 93       	push	r29
    258c:	cd b7       	in	r28, 0x3d	; 61
    258e:	de b7       	in	r29, 0x3e	; 62
    2590:	29 97       	sbiw	r28, 0x09	; 9
    2592:	cd bf       	out	0x3d, r28	; 61
    2594:	de bf       	out	0x3e, r29	; 62
    2596:	89 e0       	ldi	r24, 0x09	; 9
    2598:	e9 e0       	ldi	r30, 0x09	; 9
    259a:	f0 e2       	ldi	r31, 0x20	; 32
    259c:	de 01       	movw	r26, r28
    259e:	11 96       	adiw	r26, 0x01	; 1
    25a0:	01 90       	ld	r0, Z+
    25a2:	0d 92       	st	X+, r0
    25a4:	8a 95       	dec	r24
    25a6:	e1 f7       	brne	.-8      	; 0x25a0 <_uarte0_init+0x18>
    25a8:	10 92 41 28 	sts	0x2841, r1
    25ac:	10 92 40 28 	sts	0x2840, r1
    25b0:	10 92 43 28 	sts	0x2843, r1
    25b4:	10 92 42 28 	sts	0x2842, r1
    25b8:	be 01       	movw	r22, r28
    25ba:	6f 5f       	subi	r22, 0xFF	; 255
    25bc:	7f 4f       	sbci	r23, 0xFF	; 255
    25be:	80 ea       	ldi	r24, 0xA0	; 160
    25c0:	9a e0       	ldi	r25, 0x0A	; 10
    25c2:	0e 94 af 1d 	call	0x3b5e	; 0x3b5e <usart_init_rs232>
    25c6:	e0 ea       	ldi	r30, 0xA0	; 160
    25c8:	fa e0       	ldi	r31, 0x0A	; 10
    25ca:	83 81       	ldd	r24, Z+3	; 0x03
    25cc:	8f 7c       	andi	r24, 0xCF	; 207
    25ce:	83 83       	std	Z+3, r24	; 0x03
    25d0:	83 81       	ldd	r24, Z+3	; 0x03
    25d2:	83 7f       	andi	r24, 0xF3	; 243
    25d4:	83 83       	std	Z+3, r24	; 0x03
    25d6:	83 81       	ldd	r24, Z+3	; 0x03
    25d8:	8c 7f       	andi	r24, 0xFC	; 252
    25da:	81 60       	ori	r24, 0x01	; 1
    25dc:	83 83       	std	Z+3, r24	; 0x03
    25de:	29 96       	adiw	r28, 0x09	; 9
    25e0:	cd bf       	out	0x3d, r28	; 61
    25e2:	de bf       	out	0x3e, r29	; 62
    25e4:	df 91       	pop	r29
    25e6:	cf 91       	pop	r28
    25e8:	08 95       	ret

000025ea <_uarte0_getc>:
    25ea:	90 91 41 28 	lds	r25, 0x2841
    25ee:	80 91 40 28 	lds	r24, 0x2840
    25f2:	98 17       	cp	r25, r24
    25f4:	69 f0       	breq	.+26     	; 0x2610 <_uarte0_getc+0x26>
    25f6:	e1 e4       	ldi	r30, 0x41	; 65
    25f8:	f8 e2       	ldi	r31, 0x28	; 40
    25fa:	a0 81       	ld	r26, Z
    25fc:	b0 e0       	ldi	r27, 0x00	; 0
    25fe:	a0 5c       	subi	r26, 0xC0	; 192
    2600:	b8 4d       	sbci	r27, 0xD8	; 216
    2602:	2c 91       	ld	r18, X
    2604:	80 81       	ld	r24, Z
    2606:	8f 5f       	subi	r24, 0xFF	; 255
    2608:	8f 77       	andi	r24, 0x7F	; 127
    260a:	80 83       	st	Z, r24
    260c:	30 e0       	ldi	r19, 0x00	; 0
    260e:	02 c0       	rjmp	.+4      	; 0x2614 <_uarte0_getc+0x2a>
    2610:	2f ef       	ldi	r18, 0xFF	; 255
    2612:	3f ef       	ldi	r19, 0xFF	; 255
    2614:	82 2f       	mov	r24, r18
    2616:	93 2f       	mov	r25, r19
    2618:	08 95       	ret

0000261a <_uarte0_putc>:

void reset_avr(void);

void _uarte0_putc(char ch)
{
    261a:	ff 92       	push	r15
    261c:	0f 93       	push	r16
    261e:	1f 93       	push	r17
    2620:	cf 93       	push	r28
    2622:	df 93       	push	r29
    2624:	f8 2e       	mov	r15, r24
    timeout_start_singleshot(TIMEOUT_UART, TIMEOUT_TICK_HZ);
    2626:	68 e0       	ldi	r22, 0x08	; 8
    2628:	70 e0       	ldi	r23, 0x00	; 0
    262a:	81 e0       	ldi	r24, 0x01	; 1
    262c:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <timeout_start_singleshot>
}

static bool putb(uint8_t byte)
{
    uint8_t tx_back;
    tx_back = (buffer.tx_back + 1) & TX_BUFFER_MASK;
    2630:	02 e4       	ldi	r16, 0x42	; 66
    2632:	18 e2       	ldi	r17, 0x28	; 40
    if (tx_back != buffer.tx_front) {
    2634:	c3 e4       	ldi	r28, 0x43	; 67
    2636:	d8 e2       	ldi	r29, 0x28	; 40
void reset_avr(void);

void _uarte0_putc(char ch)
{
    timeout_start_singleshot(TIMEOUT_UART, TIMEOUT_TICK_HZ);
    while (!putb(ch)) {
    2638:	02 c0       	rjmp	.+4      	; 0x263e <_uarte0_putc+0x24>
        if (timeout_test_and_clear_expired(TIMEOUT_UART)) {
            reset_avr();
    263a:	0e 94 2c 2a 	call	0x5458	; 0x5458 <reset_avr>
}

static bool putb(uint8_t byte)
{
    uint8_t tx_back;
    tx_back = (buffer.tx_back + 1) & TX_BUFFER_MASK;
    263e:	f8 01       	movw	r30, r16
    2640:	90 81       	ld	r25, Z
    2642:	9f 5f       	subi	r25, 0xFF	; 255
    2644:	9f 77       	andi	r25, 0x7F	; 127
    if (tx_back != buffer.tx_front) {
    2646:	28 81       	ld	r18, Y
    2648:	92 17       	cp	r25, r18
    264a:	91 f0       	breq	.+36     	; 0x2670 <_uarte0_putc+0x56>
        buffer.TX[buffer.tx_back] = byte;
    264c:	e2 e4       	ldi	r30, 0x42	; 66
    264e:	f8 e2       	ldi	r31, 0x28	; 40
    2650:	a0 81       	ld	r26, Z
    2652:	b0 e0       	ldi	r27, 0x00	; 0
    2654:	a0 54       	subi	r26, 0x40	; 64
    2656:	b8 4d       	sbci	r27, 0xD8	; 216
    2658:	fc 92       	st	X, r15
        buffer.tx_back = tx_back;
    265a:	90 83       	st	Z, r25
    265c:	e0 ea       	ldi	r30, 0xA0	; 160
    265e:	fa e0       	ldi	r31, 0x0A	; 10
    2660:	83 81       	ldd	r24, Z+3	; 0x03
    2662:	8c 7f       	andi	r24, 0xFC	; 252
    2664:	81 60       	ori	r24, 0x01	; 1
    2666:	83 83       	std	Z+3, r24	; 0x03
    while (!putb(ch)) {
        if (timeout_test_and_clear_expired(TIMEOUT_UART)) {
            reset_avr();
        }
    }
    timeout_stop(TIMEOUT_UART);
    2668:	81 e0       	ldi	r24, 0x01	; 1
    266a:	0e 94 9d 1f 	call	0x3f3a	; 0x3f3a <timeout_stop>
    266e:	06 c0       	rjmp	.+12     	; 0x267c <_uarte0_putc+0x62>

void _uarte0_putc(char ch)
{
    timeout_start_singleshot(TIMEOUT_UART, TIMEOUT_TICK_HZ);
    while (!putb(ch)) {
        if (timeout_test_and_clear_expired(TIMEOUT_UART)) {
    2670:	81 e0       	ldi	r24, 0x01	; 1
    2672:	0e 94 78 1f 	call	0x3ef0	; 0x3ef0 <timeout_test_and_clear_expired>
    2676:	88 23       	and	r24, r24
    2678:	11 f3       	breq	.-60     	; 0x263e <_uarte0_putc+0x24>
    267a:	df cf       	rjmp	.-66     	; 0x263a <_uarte0_putc+0x20>
            reset_avr();
        }
    }
    timeout_stop(TIMEOUT_UART);
}
    267c:	df 91       	pop	r29
    267e:	cf 91       	pop	r28
    2680:	1f 91       	pop	r17
    2682:	0f 91       	pop	r16
    2684:	ff 90       	pop	r15
    2686:	08 95       	ret

00002688 <DEBUG_puts>:
#if (DEBUG_UART != UART_NONE)
	static const char hex[] = "0123456789ABCDEF";
#endif
	_DEBUG_putc(hex[b >> 4]);
	_DEBUG_putc(hex[b & 0x0F]);
}
    2688:	cf 93       	push	r28
    268a:	df 93       	push	r29
    268c:	ec 01       	movw	r28, r24
    268e:	88 81       	ld	r24, Y
    2690:	88 23       	and	r24, r24
    2692:	29 f0       	breq	.+10     	; 0x269e <DEBUG_puts+0x16>
    2694:	21 96       	adiw	r28, 0x01	; 1
    2696:	d4 de       	rcall	.-600    	; 0x2440 <_uartc1_putc>
    2698:	89 91       	ld	r24, Y+
    269a:	81 11       	cpse	r24, r1
    269c:	fc cf       	rjmp	.-8      	; 0x2696 <DEBUG_puts+0xe>
    269e:	df 91       	pop	r29
    26a0:	cf 91       	pop	r28
    26a2:	08 95       	ret

000026a4 <DEBUG_putcrlf>:
    26a4:	00 97       	sbiw	r24, 0x00	; 0
    26a6:	09 f0       	breq	.+2      	; 0x26aa <DEBUG_putcrlf+0x6>
    26a8:	ef df       	rcall	.-34     	; 0x2688 <DEBUG_puts>
    26aa:	8e ee       	ldi	r24, 0xEE	; 238
    26ac:	91 e2       	ldi	r25, 0x21	; 33
    26ae:	ec cf       	rjmp	.-40     	; 0x2688 <DEBUG_puts>

000026b0 <DEBUG_putu>:

void DEBUG_putu(uint32_t v)
{
    26b0:	cf 92       	push	r12
    26b2:	df 92       	push	r13
    26b4:	ef 92       	push	r14
    26b6:	ff 92       	push	r15
    26b8:	6b 01       	movw	r12, r22
    26ba:	7c 01       	movw	r14, r24
	if (v > 9) {
    26bc:	8a e0       	ldi	r24, 0x0A	; 10
    26be:	c8 16       	cp	r12, r24
    26c0:	d1 04       	cpc	r13, r1
    26c2:	e1 04       	cpc	r14, r1
    26c4:	f1 04       	cpc	r15, r1
    26c6:	58 f0       	brcs	.+22     	; 0x26de <DEBUG_putu+0x2e>
		DEBUG_putu(v / 10);
    26c8:	c7 01       	movw	r24, r14
    26ca:	b6 01       	movw	r22, r12
    26cc:	2a e0       	ldi	r18, 0x0A	; 10
    26ce:	30 e0       	ldi	r19, 0x00	; 0
    26d0:	40 e0       	ldi	r20, 0x00	; 0
    26d2:	50 e0       	ldi	r21, 0x00	; 0
    26d4:	0e 94 5e 35 	call	0x6abc	; 0x6abc <__udivmodsi4>
    26d8:	ca 01       	movw	r24, r20
    26da:	b9 01       	movw	r22, r18
    26dc:	e9 df       	rcall	.-46     	; 0x26b0 <DEBUG_putu>
	}
	_DEBUG_putc('0' + v % 10);
    26de:	c7 01       	movw	r24, r14
    26e0:	b6 01       	movw	r22, r12
    26e2:	2a e0       	ldi	r18, 0x0A	; 10
    26e4:	30 e0       	ldi	r19, 0x00	; 0
    26e6:	40 e0       	ldi	r20, 0x00	; 0
    26e8:	50 e0       	ldi	r21, 0x00	; 0
    26ea:	0e 94 5e 35 	call	0x6abc	; 0x6abc <__udivmodsi4>
    26ee:	86 2f       	mov	r24, r22
    26f0:	80 5d       	subi	r24, 0xD0	; 208
    26f2:	a6 de       	rcall	.-692    	; 0x2440 <_uartc1_putc>
}
    26f4:	ff 90       	pop	r15
    26f6:	ef 90       	pop	r14
    26f8:	df 90       	pop	r13
    26fa:	cf 90       	pop	r12
    26fc:	08 95       	ret

000026fe <MODEM_get_byte>:
#include "uart.h"
#include "crc.h"

int16_t MODEM_get_byte(void)
{
    26fe:	cf 93       	push	r28
    2700:	df 93       	push	r29
	int16_t ans;
	ans = _MODEM_getc();
    2702:	73 df       	rcall	.-282    	; 0x25ea <_uarte0_getc>
    2704:	ec 01       	movw	r28, r24
	if (ans < 0) {
    2706:	99 23       	and	r25, r25
    2708:	0c f0       	brlt	.+2      	; 0x270c <MODEM_get_byte+0xe>
		return ans;
	}
	_DEBUG_putc(ans);
    270a:	9a de       	rcall	.-716    	; 0x2440 <_uartc1_putc>
	return ans;
}
    270c:	8c 2f       	mov	r24, r28
    270e:	9d 2f       	mov	r25, r29
    2710:	df 91       	pop	r29
    2712:	cf 91       	pop	r28
    2714:	08 95       	ret

00002716 <MODEM_raw_putb>:

void MODEM_raw_putb(uint8_t byte)
{
    2716:	cf 93       	push	r28
    2718:	c8 2f       	mov	r28, r24
    _MODEM_putc(byte);
    271a:	7f df       	rcall	.-258    	; 0x261a <_uarte0_putc>
    _DEBUG_putc(byte);
    271c:	8c 2f       	mov	r24, r28
    271e:	90 de       	rcall	.-736    	; 0x2440 <_uartc1_putc>
}
    2720:	cf 91       	pop	r28
    2722:	08 95       	ret

00002724 <MODEM_raw_puts>:

void MODEM_raw_puts(const char* data)
{
    2724:	cf 93       	push	r28
    2726:	df 93       	push	r29
    2728:	ec 01       	movw	r28, r24
    while (*data != '\x00') {
    272a:	88 81       	ld	r24, Y
    272c:	88 23       	and	r24, r24
    272e:	29 f0       	breq	.+10     	; 0x273a <MODEM_raw_puts+0x16>
{
    _MODEM_putc(byte);
    _DEBUG_putc(byte);
}

void MODEM_raw_puts(const char* data)
    2730:	21 96       	adiw	r28, 0x01	; 1
{
    while (*data != '\x00') {
        MODEM_raw_putb(*data);
    2732:	f1 df       	rcall	.-30     	; 0x2716 <MODEM_raw_putb>
    _DEBUG_putc(byte);
}

void MODEM_raw_puts(const char* data)
{
    while (*data != '\x00') {
    2734:	89 91       	ld	r24, Y+
    2736:	81 11       	cpse	r24, r1
    2738:	fc cf       	rjmp	.-8      	; 0x2732 <MODEM_raw_puts+0xe>
        MODEM_raw_putb(*data);
        data++;
    }
}
    273a:	df 91       	pop	r29
    273c:	cf 91       	pop	r28
    273e:	08 95       	ret

00002740 <MODEM_crc_putb>:

uint8_t MODEM_crc_putb(uint8_t crc, uint8_t byte)
{
    2740:	cf 93       	push	r28
    2742:	df 93       	push	r29
    2744:	c6 2f       	mov	r28, r22
	crc = crc8_update(crc, byte);
    2746:	12 d9       	rcall	.-3548   	; 0x196c <crc8_update>
    2748:	d8 2f       	mov	r29, r24
	MODEM_raw_putb(byte);
    274a:	8c 2f       	mov	r24, r28
    274c:	e4 df       	rcall	.-56     	; 0x2716 <MODEM_raw_putb>
	return crc;
}
    274e:	8d 2f       	mov	r24, r29
    2750:	df 91       	pop	r29
    2752:	cf 91       	pop	r28
    2754:	08 95       	ret

00002756 <MODEM_crc_puts>:

uint8_t MODEM_crc_puts(uint8_t crc, const char* data)
{
    2756:	cf 93       	push	r28
    2758:	df 93       	push	r29
    275a:	eb 01       	movw	r28, r22
	while (*data != '\x00') {
    275c:	68 81       	ld	r22, Y
    275e:	66 23       	and	r22, r22
    2760:	29 f0       	breq	.+10     	; 0x276c <MODEM_crc_puts+0x16>
	crc = crc8_update(crc, byte);
	MODEM_raw_putb(byte);
	return crc;
}

uint8_t MODEM_crc_puts(uint8_t crc, const char* data)
    2762:	21 96       	adiw	r28, 0x01	; 1
{
	while (*data != '\x00') {
		crc = MODEM_crc_putb(crc, *data);
    2764:	ed df       	rcall	.-38     	; 0x2740 <MODEM_crc_putb>
	return crc;
}

uint8_t MODEM_crc_puts(uint8_t crc, const char* data)
{
	while (*data != '\x00') {
    2766:	69 91       	ld	r22, Y+
    2768:	61 11       	cpse	r22, r1
    276a:	fc cf       	rjmp	.-8      	; 0x2764 <MODEM_crc_puts+0xe>
		crc = MODEM_crc_putb(crc, *data);
		data++;
	}
	return crc;
}
    276c:	df 91       	pop	r29
    276e:	cf 91       	pop	r28
    2770:	08 95       	ret

00002772 <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    2772:	43 e0       	ldi	r20, 0x03	; 3
    2774:	50 e0       	ldi	r21, 0x00	; 0
    2776:	68 e0       	ldi	r22, 0x08	; 8
    2778:	80 e2       	ldi	r24, 0x20	; 32
    277a:	96 e0       	ldi	r25, 0x06	; 6
    277c:	bd d0       	rcall	.+378    	; 0x28f8 <ioport_configure_port_pin>
    277e:	43 e0       	ldi	r20, 0x03	; 3
    2780:	50 e0       	ldi	r21, 0x00	; 0
    2782:	60 e2       	ldi	r22, 0x20	; 32
    2784:	80 e0       	ldi	r24, 0x00	; 0
    2786:	96 e0       	ldi	r25, 0x06	; 6
    2788:	b7 d0       	rcall	.+366    	; 0x28f8 <ioport_configure_port_pin>
    278a:	43 e0       	ldi	r20, 0x03	; 3
    278c:	50 e0       	ldi	r21, 0x00	; 0
    278e:	68 e0       	ldi	r22, 0x08	; 8
    2790:	80 e8       	ldi	r24, 0x80	; 128
    2792:	96 e0       	ldi	r25, 0x06	; 6
    2794:	b1 d0       	rcall	.+354    	; 0x28f8 <ioport_configure_port_pin>
    2796:	40 e0       	ldi	r20, 0x00	; 0
    2798:	50 e0       	ldi	r21, 0x00	; 0
    279a:	64 e0       	ldi	r22, 0x04	; 4
    279c:	80 e8       	ldi	r24, 0x80	; 128
    279e:	96 e0       	ldi	r25, 0x06	; 6
    27a0:	ab d0       	rcall	.+342    	; 0x28f8 <ioport_configure_port_pin>
    27a2:	43 e0       	ldi	r20, 0x03	; 3
    27a4:	50 e0       	ldi	r21, 0x00	; 0
    27a6:	68 e0       	ldi	r22, 0x08	; 8
    27a8:	80 e8       	ldi	r24, 0x80	; 128
    27aa:	96 e0       	ldi	r25, 0x06	; 6
    27ac:	a5 d0       	rcall	.+330    	; 0x28f8 <ioport_configure_port_pin>
    27ae:	40 e0       	ldi	r20, 0x00	; 0
    27b0:	50 e0       	ldi	r21, 0x00	; 0
    27b2:	64 e0       	ldi	r22, 0x04	; 4
    27b4:	80 e8       	ldi	r24, 0x80	; 128
    27b6:	96 e0       	ldi	r25, 0x06	; 6
    27b8:	9f d0       	rcall	.+318    	; 0x28f8 <ioport_configure_port_pin>
    27ba:	43 e0       	ldi	r20, 0x03	; 3
    27bc:	50 e0       	ldi	r21, 0x00	; 0
    27be:	60 e8       	ldi	r22, 0x80	; 128
    27c0:	80 e4       	ldi	r24, 0x40	; 64
    27c2:	96 e0       	ldi	r25, 0x06	; 6
    27c4:	99 d0       	rcall	.+306    	; 0x28f8 <ioport_configure_port_pin>
    27c6:	40 e0       	ldi	r20, 0x00	; 0
    27c8:	50 e0       	ldi	r21, 0x00	; 0
    27ca:	60 e4       	ldi	r22, 0x40	; 64
    27cc:	80 e4       	ldi	r24, 0x40	; 64
    27ce:	96 e0       	ldi	r25, 0x06	; 6
    27d0:	93 d0       	rcall	.+294    	; 0x28f8 <ioport_configure_port_pin>
    27d2:	43 e0       	ldi	r20, 0x03	; 3
    27d4:	50 e0       	ldi	r21, 0x00	; 0
    27d6:	62 e0       	ldi	r22, 0x02	; 2
    27d8:	80 e2       	ldi	r24, 0x20	; 32
    27da:	96 e0       	ldi	r25, 0x06	; 6
    27dc:	8d d0       	rcall	.+282    	; 0x28f8 <ioport_configure_port_pin>
    27de:	43 e0       	ldi	r20, 0x03	; 3
    27e0:	50 e0       	ldi	r21, 0x00	; 0
    27e2:	60 e4       	ldi	r22, 0x40	; 64
    27e4:	80 e0       	ldi	r24, 0x00	; 0
    27e6:	96 e0       	ldi	r25, 0x06	; 6
    27e8:	87 d0       	rcall	.+270    	; 0x28f8 <ioport_configure_port_pin>
    27ea:	41 e0       	ldi	r20, 0x01	; 1
    27ec:	50 e0       	ldi	r21, 0x00	; 0
    27ee:	61 e0       	ldi	r22, 0x01	; 1
    27f0:	80 e6       	ldi	r24, 0x60	; 96
    27f2:	96 e0       	ldi	r25, 0x06	; 6
    27f4:	81 d0       	rcall	.+258    	; 0x28f8 <ioport_configure_port_pin>
    27f6:	41 e0       	ldi	r20, 0x01	; 1
    27f8:	50 e0       	ldi	r21, 0x00	; 0
    27fa:	62 e0       	ldi	r22, 0x02	; 2
    27fc:	80 e6       	ldi	r24, 0x60	; 96
    27fe:	96 e0       	ldi	r25, 0x06	; 6
    2800:	7b d0       	rcall	.+246    	; 0x28f8 <ioport_configure_port_pin>
    2802:	43 e0       	ldi	r20, 0x03	; 3
    2804:	50 e0       	ldi	r21, 0x00	; 0
    2806:	68 e0       	ldi	r22, 0x08	; 8
    2808:	80 e6       	ldi	r24, 0x60	; 96
    280a:	96 e0       	ldi	r25, 0x06	; 6
    280c:	75 d0       	rcall	.+234    	; 0x28f8 <ioport_configure_port_pin>
    280e:	40 e0       	ldi	r20, 0x00	; 0
    2810:	50 e0       	ldi	r21, 0x00	; 0
    2812:	64 e0       	ldi	r22, 0x04	; 4
    2814:	80 e4       	ldi	r24, 0x40	; 64
    2816:	96 e0       	ldi	r25, 0x06	; 6
    2818:	6f d0       	rcall	.+222    	; 0x28f8 <ioport_configure_port_pin>
    281a:	40 e0       	ldi	r20, 0x00	; 0
    281c:	50 e0       	ldi	r21, 0x00	; 0
    281e:	64 e0       	ldi	r22, 0x04	; 4
    2820:	80 e6       	ldi	r24, 0x60	; 96
    2822:	96 e0       	ldi	r25, 0x06	; 6
    2824:	69 d0       	rcall	.+210    	; 0x28f8 <ioport_configure_port_pin>
    2826:	40 e0       	ldi	r20, 0x00	; 0
    2828:	50 e0       	ldi	r21, 0x00	; 0
    282a:	64 e0       	ldi	r22, 0x04	; 4
    282c:	80 e2       	ldi	r24, 0x20	; 32
    282e:	96 e0       	ldi	r25, 0x06	; 6
    2830:	63 d0       	rcall	.+198    	; 0x28f8 <ioport_configure_port_pin>
    2832:	40 e0       	ldi	r20, 0x00	; 0
    2834:	50 e0       	ldi	r21, 0x00	; 0
    2836:	64 e0       	ldi	r22, 0x04	; 4
    2838:	80 e0       	ldi	r24, 0x00	; 0
    283a:	96 e0       	ldi	r25, 0x06	; 6
    283c:	5d c0       	rjmp	.+186    	; 0x28f8 <ioport_configure_port_pin>

0000283e <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
    283e:	cf 93       	push	r28
    2840:	df 93       	push	r29
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    2842:	8f ef       	ldi	r24, 0xFF	; 255
    2844:	80 93 70 00 	sts	0x0070, r24
    2848:	80 93 71 00 	sts	0x0071, r24
    284c:	80 93 72 00 	sts	0x0072, r24
    2850:	80 93 73 00 	sts	0x0073, r24
    2854:	80 93 74 00 	sts	0x0074, r24
    2858:	80 93 75 00 	sts	0x0075, r24
    285c:	80 93 76 00 	sts	0x0076, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2860:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    2862:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    2864:	e0 e5       	ldi	r30, 0x50	; 80
    2866:	f0 e0       	ldi	r31, 0x00	; 0
    2868:	90 81       	ld	r25, Z
    286a:	92 60       	ori	r25, 0x02	; 2
    286c:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    286e:	8f bf       	out	0x3f, r24	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    2870:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    2872:	81 ff       	sbrs	r24, 1
    2874:	fd cf       	rjmp	.-6      	; 0x2870 <sysclk_init+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2876:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    2878:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    287a:	e0 e5       	ldi	r30, 0x50	; 80
    287c:	f0 e0       	ldi	r31, 0x00	; 0
    287e:	90 81       	ld	r25, Z
    2880:	94 60       	ori	r25, 0x04	; 4
    2882:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2884:	8f bf       	out	0x3f, r24	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    2886:	81 81       	ldd	r24, Z+1	; 0x01
    2888:	82 ff       	sbrs	r24, 2
    288a:	fd cf       	rjmp	.-6      	; 0x2886 <sysclk_init+0x48>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    288c:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    288e:	f8 94       	cli
#if XMEGA_AU || XMEGA_B || XMEGA_C || XMEGA_E
		Assert((ref_id == OSC_ID_RC32KHZ)
				|| (ref_id == OSC_ID_XOSC)
				|| (ref_id == OSC_ID_USBSOF));

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    2890:	c0 e5       	ldi	r28, 0x50	; 80
    2892:	d0 e0       	ldi	r29, 0x00	; 0
    2894:	9e 81       	ldd	r25, Y+6	; 0x06
    2896:	99 7f       	andi	r25, 0xF9	; 249
    2898:	9e 83       	std	Y+6, r25	; 0x06
		if (ref_id == OSC_ID_XOSC) {
			osc_enable(OSC_ID_RC32KHZ);
			OSC.DFLLCTRL |= OSC_RC32MCREF_XOSC32K_gc;
		}
		else if (ref_id == OSC_ID_RC32KHZ) {
			OSC.DFLLCTRL |= OSC_RC32MCREF_RC32K_gc;
    289a:	9e 81       	ldd	r25, Y+6	; 0x06
    289c:	9e 83       	std	Y+6, r25	; 0x06
		}
		else if (ref_id == OSC_ID_RC32KHZ) {
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
		}
#endif
		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    289e:	e0 e6       	ldi	r30, 0x60	; 96
    28a0:	f0 e0       	ldi	r31, 0x00	; 0
    28a2:	90 81       	ld	r25, Z
    28a4:	91 60       	ori	r25, 0x01	; 1
    28a6:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    28a8:	8f bf       	out	0x3f, r24	; 63
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    28aa:	61 e0       	ldi	r22, 0x01	; 1
    28ac:	80 e4       	ldi	r24, 0x40	; 64
    28ae:	90 e0       	ldi	r25, 0x00	; 0
    28b0:	4b d0       	rcall	.+150    	; 0x2948 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    28b2:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    28b4:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
    28b6:	98 81       	ld	r25, Y
    28b8:	9e 7f       	andi	r25, 0xFE	; 254
    28ba:	98 83       	st	Y, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    28bc:	8f bf       	out	0x3f, r24	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    28be:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    28c0:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    28c2:	98 81       	ld	r25, Y
    28c4:	94 60       	ori	r25, 0x04	; 4
    28c6:	98 83       	st	Y, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    28c8:	8f bf       	out	0x3f, r24	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    28ca:	e0 e5       	ldi	r30, 0x50	; 80
    28cc:	f0 e0       	ldi	r31, 0x00	; 0
    28ce:	81 81       	ldd	r24, Z+1	; 0x01
    28d0:	82 ff       	sbrs	r24, 2
    28d2:	fd cf       	rjmp	.-6      	; 0x28ce <sysclk_init+0x90>
		osc_enable(OSC_ID_XOSC);
		osc_wait_ready(OSC_ID_XOSC);
		break;
	}

	CLK.RTCCTRL = id | CLK_RTCEN_bm;
    28d4:	85 e0       	ldi	r24, 0x05	; 5
    28d6:	e0 e4       	ldi	r30, 0x40	; 64
    28d8:	f0 e0       	ldi	r31, 0x00	; 0
    28da:	83 83       	std	Z+3, r24	; 0x03
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
    28dc:	df 91       	pop	r29
    28de:	cf 91       	pop	r28
    28e0:	08 95       	ret

000028e2 <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    28e2:	2f b7       	in	r18, 0x3f	; 63
	cpu_irq_disable();
    28e4:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    28e6:	fc 01       	movw	r30, r24
    28e8:	e0 59       	subi	r30, 0x90	; 144
    28ea:	ff 4f       	sbci	r31, 0xFF	; 255
    28ec:	60 95       	com	r22
    28ee:	80 81       	ld	r24, Z
    28f0:	68 23       	and	r22, r24
    28f2:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    28f4:	2f bf       	out	0x3f, r18	; 63
    28f6:	08 95       	ret

000028f8 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    28f8:	cf 93       	push	r28
    28fa:	df 93       	push	r29
 *
 */
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
    28fc:	fc 01       	movw	r30, r24
    28fe:	70 96       	adiw	r30, 0x10	; 16
    2900:	20 e0       	ldi	r18, 0x00	; 0
    2902:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
    2904:	c6 2f       	mov	r28, r22
    2906:	d0 e0       	ldi	r29, 0x00	; 0
    2908:	de 01       	movw	r26, r28
    290a:	02 2e       	mov	r0, r18
    290c:	02 c0       	rjmp	.+4      	; 0x2912 <ioport_configure_port_pin+0x1a>
    290e:	b5 95       	asr	r27
    2910:	a7 95       	ror	r26
    2912:	0a 94       	dec	r0
    2914:	e2 f7       	brpl	.-8      	; 0x290e <ioport_configure_port_pin+0x16>
    2916:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    2918:	50 83       	st	Z, r21
    291a:	2f 5f       	subi	r18, 0xFF	; 255
    291c:	3f 4f       	sbci	r19, 0xFF	; 255
    291e:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    2920:	28 30       	cpi	r18, 0x08	; 8
    2922:	31 05       	cpc	r19, r1
    2924:	89 f7       	brne	.-30     	; 0x2908 <ioport_configure_port_pin+0x10>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    2926:	40 ff       	sbrs	r20, 0
    2928:	0a c0       	rjmp	.+20     	; 0x293e <ioport_configure_port_pin+0x46>
		if (flags & IOPORT_INIT_HIGH) {
    292a:	41 ff       	sbrs	r20, 1
    292c:	03 c0       	rjmp	.+6      	; 0x2934 <ioport_configure_port_pin+0x3c>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    292e:	fc 01       	movw	r30, r24
    2930:	65 83       	std	Z+5, r22	; 0x05
    2932:	02 c0       	rjmp	.+4      	; 0x2938 <ioport_configure_port_pin+0x40>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    2934:	fc 01       	movw	r30, r24
    2936:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    2938:	fc 01       	movw	r30, r24
    293a:	61 83       	std	Z+1, r22	; 0x01
    293c:	02 c0       	rjmp	.+4      	; 0x2942 <ioport_configure_port_pin+0x4a>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    293e:	fc 01       	movw	r30, r24
    2940:	62 83       	std	Z+2, r22	; 0x02
	}
}
    2942:	df 91       	pop	r29
    2944:	cf 91       	pop	r28
    2946:	08 95       	ret

00002948 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    2948:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    294a:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    294c:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    294e:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    2950:	60 83       	st	Z, r22
	ret                             // Return to caller
    2952:	08 95       	ret

00002954 <nvm_eeprom_read_buffer>:
{
	// Mark all addresses to be deleted
	nvm_eeprom_fill_buffer_with_value(0xff);
	// Erase bytes
	nvm_eeprom_erase_bytes_in_page(page_addr);
}
    2954:	cf 93       	push	r28
    2956:	df 93       	push	r29
    2958:	9c 01       	movw	r18, r24
    295a:	86 2f       	mov	r24, r22
    295c:	97 2f       	mov	r25, r23
    295e:	e0 ec       	ldi	r30, 0xC0	; 192
    2960:	f1 e0       	ldi	r31, 0x01	; 1
    2962:	a7 85       	ldd	r26, Z+15	; 0x0f
    2964:	aa 23       	and	r26, r26
    2966:	ec f3       	brlt	.-6      	; 0x2962 <nvm_eeprom_read_buffer+0xe>
    2968:	cc ec       	ldi	r28, 0xCC	; 204
    296a:	d1 e0       	ldi	r29, 0x01	; 1
    296c:	68 81       	ld	r22, Y
    296e:	68 60       	ori	r22, 0x08	; 8
    2970:	68 83       	st	Y, r22
    2972:	30 5f       	subi	r19, 0xF0	; 240
    2974:	62 2f       	mov	r22, r18
    2976:	73 2f       	mov	r23, r19
    2978:	0e 94 b6 36 	call	0x6d6c	; 0x6d6c <memcpy>
    297c:	88 81       	ld	r24, Y
    297e:	87 7f       	andi	r24, 0xF7	; 247
    2980:	88 83       	st	Y, r24
    2982:	df 91       	pop	r29
    2984:	cf 91       	pop	r28
    2986:	08 95       	ret

00002988 <nvm_eeprom_flush_buffer>:
    2988:	e0 ec       	ldi	r30, 0xC0	; 192
    298a:	f1 e0       	ldi	r31, 0x01	; 1
    298c:	87 85       	ldd	r24, Z+15	; 0x0f
    298e:	88 23       	and	r24, r24
    2990:	ec f3       	brlt	.-6      	; 0x298c <nvm_eeprom_flush_buffer+0x4>
    2992:	e0 ec       	ldi	r30, 0xC0	; 192
    2994:	f1 e0       	ldi	r31, 0x01	; 1
    2996:	87 85       	ldd	r24, Z+15	; 0x0f
    2998:	81 ff       	sbrs	r24, 1
    299a:	06 c0       	rjmp	.+12     	; 0x29a8 <nvm_eeprom_flush_buffer+0x20>
    299c:	86 e3       	ldi	r24, 0x36	; 54
    299e:	82 87       	std	Z+10, r24	; 0x0a
    29a0:	61 e0       	ldi	r22, 0x01	; 1
    29a2:	8b ec       	ldi	r24, 0xCB	; 203
    29a4:	91 e0       	ldi	r25, 0x01	; 1
    29a6:	d0 cf       	rjmp	.-96     	; 0x2948 <ccp_write_io>
    29a8:	08 95       	ret

000029aa <nvm_eeprom_load_byte_to_buffer>:
    29aa:	e0 ec       	ldi	r30, 0xC0	; 192
    29ac:	f1 e0       	ldi	r31, 0x01	; 1
    29ae:	97 85       	ldd	r25, Z+15	; 0x0f
    29b0:	99 23       	and	r25, r25
    29b2:	ec f3       	brlt	.-6      	; 0x29ae <nvm_eeprom_load_byte_to_buffer+0x4>
    29b4:	ec ec       	ldi	r30, 0xCC	; 204
    29b6:	f1 e0       	ldi	r31, 0x01	; 1
    29b8:	90 81       	ld	r25, Z
    29ba:	98 60       	ori	r25, 0x08	; 8
    29bc:	90 83       	st	Z, r25
    29be:	a8 2f       	mov	r26, r24
    29c0:	b0 e0       	ldi	r27, 0x00	; 0
    29c2:	b0 5f       	subi	r27, 0xF0	; 240
    29c4:	6c 93       	st	X, r22
    29c6:	80 81       	ld	r24, Z
    29c8:	87 7f       	andi	r24, 0xF7	; 247
    29ca:	80 83       	st	Z, r24
    29cc:	08 95       	ret

000029ce <nvm_eeprom_write_byte>:
    29ce:	ff 92       	push	r15
    29d0:	0f 93       	push	r16
    29d2:	1f 93       	push	r17
    29d4:	cf 93       	push	r28
    29d6:	df 93       	push	r29
    29d8:	18 2f       	mov	r17, r24
    29da:	f9 2e       	mov	r15, r25
    29dc:	c6 2f       	mov	r28, r22
    29de:	e0 ec       	ldi	r30, 0xC0	; 192
    29e0:	f1 e0       	ldi	r31, 0x01	; 1
    29e2:	02 85       	ldd	r16, Z+10	; 0x0a
    29e4:	d1 df       	rcall	.-94     	; 0x2988 <nvm_eeprom_flush_buffer>
    29e6:	e0 ec       	ldi	r30, 0xC0	; 192
    29e8:	f1 e0       	ldi	r31, 0x01	; 1
    29ea:	27 85       	ldd	r18, Z+15	; 0x0f
    29ec:	22 23       	and	r18, r18
    29ee:	ec f3       	brlt	.-6      	; 0x29ea <nvm_eeprom_write_byte+0x1c>
    29f0:	6c 2f       	mov	r22, r28
    29f2:	81 2f       	mov	r24, r17
    29f4:	da df       	rcall	.-76     	; 0x29aa <nvm_eeprom_load_byte_to_buffer>
    29f6:	c0 ec       	ldi	r28, 0xC0	; 192
    29f8:	d1 e0       	ldi	r29, 0x01	; 1
    29fa:	1a 82       	std	Y+2, r1	; 0x02
    29fc:	f9 82       	std	Y+1, r15	; 0x01
    29fe:	18 83       	st	Y, r17
    2a00:	85 e3       	ldi	r24, 0x35	; 53
    2a02:	8a 87       	std	Y+10, r24	; 0x0a
    2a04:	61 e0       	ldi	r22, 0x01	; 1
    2a06:	8b ec       	ldi	r24, 0xCB	; 203
    2a08:	91 e0       	ldi	r25, 0x01	; 1
    2a0a:	9e df       	rcall	.-196    	; 0x2948 <ccp_write_io>
    2a0c:	0a 87       	std	Y+10, r16	; 0x0a
    2a0e:	df 91       	pop	r29
    2a10:	cf 91       	pop	r28
    2a12:	1f 91       	pop	r17
    2a14:	0f 91       	pop	r16
    2a16:	ff 90       	pop	r15
    2a18:	08 95       	ret

00002a1a <nvm_eeprom_load_page_to_buffer>:
    2a1a:	ef 92       	push	r14
    2a1c:	ff 92       	push	r15
    2a1e:	0f 93       	push	r16
    2a20:	1f 93       	push	r17
    2a22:	cf 93       	push	r28
    2a24:	df 93       	push	r29
    2a26:	8c 01       	movw	r16, r24
    2a28:	e0 ec       	ldi	r30, 0xC0	; 192
    2a2a:	f1 e0       	ldi	r31, 0x01	; 1
    2a2c:	87 85       	ldd	r24, Z+15	; 0x0f
    2a2e:	88 23       	and	r24, r24
    2a30:	ec f3       	brlt	.-6      	; 0x2a2c <nvm_eeprom_load_page_to_buffer+0x12>
    2a32:	78 01       	movw	r14, r16
    2a34:	80 e2       	ldi	r24, 0x20	; 32
    2a36:	e8 0e       	add	r14, r24
    2a38:	f1 1c       	adc	r15, r1
    2a3a:	e8 01       	movw	r28, r16
    2a3c:	8c 2f       	mov	r24, r28
    2a3e:	80 1b       	sub	r24, r16
    2a40:	69 91       	ld	r22, Y+
    2a42:	b3 df       	rcall	.-154    	; 0x29aa <nvm_eeprom_load_byte_to_buffer>
    2a44:	ce 15       	cp	r28, r14
    2a46:	df 05       	cpc	r29, r15
    2a48:	c9 f7       	brne	.-14     	; 0x2a3c <nvm_eeprom_load_page_to_buffer+0x22>
    2a4a:	df 91       	pop	r29
    2a4c:	cf 91       	pop	r28
    2a4e:	1f 91       	pop	r17
    2a50:	0f 91       	pop	r16
    2a52:	ff 90       	pop	r15
    2a54:	ef 90       	pop	r14
    2a56:	08 95       	ret

00002a58 <nvm_eeprom_atomic_write_page>:
    2a58:	1f 93       	push	r17
    2a5a:	cf 93       	push	r28
    2a5c:	df 93       	push	r29
    2a5e:	e0 ec       	ldi	r30, 0xC0	; 192
    2a60:	f1 e0       	ldi	r31, 0x01	; 1
    2a62:	97 85       	ldd	r25, Z+15	; 0x0f
    2a64:	99 23       	and	r25, r25
    2a66:	ec f3       	brlt	.-6      	; 0x2a62 <nvm_eeprom_atomic_write_page+0xa>
    2a68:	20 e2       	ldi	r18, 0x20	; 32
    2a6a:	82 9f       	mul	r24, r18
    2a6c:	c0 01       	movw	r24, r0
    2a6e:	11 24       	eor	r1, r1
    2a70:	c0 ec       	ldi	r28, 0xC0	; 192
    2a72:	d1 e0       	ldi	r29, 0x01	; 1
    2a74:	1a 82       	std	Y+2, r1	; 0x02
    2a76:	99 83       	std	Y+1, r25	; 0x01
    2a78:	88 83       	st	Y, r24
    2a7a:	1a 85       	ldd	r17, Y+10	; 0x0a
    2a7c:	85 e3       	ldi	r24, 0x35	; 53
    2a7e:	8a 87       	std	Y+10, r24	; 0x0a
    2a80:	61 e0       	ldi	r22, 0x01	; 1
    2a82:	8b ec       	ldi	r24, 0xCB	; 203
    2a84:	91 e0       	ldi	r25, 0x01	; 1
    2a86:	60 df       	rcall	.-320    	; 0x2948 <ccp_write_io>
    2a88:	1a 87       	std	Y+10, r17	; 0x0a
    2a8a:	df 91       	pop	r29
    2a8c:	cf 91       	pop	r28
    2a8e:	1f 91       	pop	r17
    2a90:	08 95       	ret

00002a92 <nvm_eeprom_erase_and_write_buffer>:
    2a92:	cf 92       	push	r12
    2a94:	df 92       	push	r13
    2a96:	ef 92       	push	r14
    2a98:	ff 92       	push	r15
    2a9a:	0f 93       	push	r16
    2a9c:	1f 93       	push	r17
    2a9e:	cf 93       	push	r28
    2aa0:	df 93       	push	r29
    2aa2:	ec 01       	movw	r28, r24
    2aa4:	7b 01       	movw	r14, r22
    2aa6:	8a 01       	movw	r16, r20
    2aa8:	41 15       	cp	r20, r1
    2aaa:	51 05       	cpc	r21, r1
    2aac:	51 f1       	breq	.+84     	; 0x2b02 <nvm_eeprom_erase_and_write_buffer+0x70>
    2aae:	ce 01       	movw	r24, r28
    2ab0:	8f 71       	andi	r24, 0x1F	; 31
    2ab2:	99 27       	eor	r25, r25
    2ab4:	89 2b       	or	r24, r25
    2ab6:	b1 f4       	brne	.+44     	; 0x2ae4 <nvm_eeprom_erase_and_write_buffer+0x52>
    2ab8:	00 32       	cpi	r16, 0x20	; 32
    2aba:	11 05       	cpc	r17, r1
    2abc:	98 f0       	brcs	.+38     	; 0x2ae4 <nvm_eeprom_erase_and_write_buffer+0x52>
    2abe:	c7 01       	movw	r24, r14
    2ac0:	ac df       	rcall	.-168    	; 0x2a1a <nvm_eeprom_load_page_to_buffer>
    2ac2:	ce 01       	movw	r24, r28
    2ac4:	96 95       	lsr	r25
    2ac6:	87 95       	ror	r24
    2ac8:	92 95       	swap	r25
    2aca:	82 95       	swap	r24
    2acc:	8f 70       	andi	r24, 0x0F	; 15
    2ace:	89 27       	eor	r24, r25
    2ad0:	9f 70       	andi	r25, 0x0F	; 15
    2ad2:	89 27       	eor	r24, r25
    2ad4:	c1 df       	rcall	.-126    	; 0x2a58 <nvm_eeprom_atomic_write_page>
    2ad6:	a0 96       	adiw	r28, 0x20	; 32
    2ad8:	80 e2       	ldi	r24, 0x20	; 32
    2ada:	e8 0e       	add	r14, r24
    2adc:	f1 1c       	adc	r15, r1
    2ade:	00 52       	subi	r16, 0x20	; 32
    2ae0:	11 09       	sbc	r17, r1
    2ae2:	0c c0       	rjmp	.+24     	; 0x2afc <nvm_eeprom_erase_and_write_buffer+0x6a>
    2ae4:	6e 01       	movw	r12, r28
    2ae6:	ef ef       	ldi	r30, 0xFF	; 255
    2ae8:	ce 1a       	sub	r12, r30
    2aea:	de 0a       	sbc	r13, r30
    2aec:	f7 01       	movw	r30, r14
    2aee:	61 91       	ld	r22, Z+
    2af0:	7f 01       	movw	r14, r30
    2af2:	ce 01       	movw	r24, r28
    2af4:	6c df       	rcall	.-296    	; 0x29ce <nvm_eeprom_write_byte>
    2af6:	01 50       	subi	r16, 0x01	; 1
    2af8:	11 09       	sbc	r17, r1
    2afa:	e6 01       	movw	r28, r12
    2afc:	01 15       	cp	r16, r1
    2afe:	11 05       	cpc	r17, r1
    2b00:	b1 f6       	brne	.-84     	; 0x2aae <nvm_eeprom_erase_and_write_buffer+0x1c>
    2b02:	df 91       	pop	r29
    2b04:	cf 91       	pop	r28
    2b06:	1f 91       	pop	r17
    2b08:	0f 91       	pop	r16
    2b0a:	ff 90       	pop	r15
    2b0c:	ef 90       	pop	r14
    2b0e:	df 90       	pop	r13
    2b10:	cf 90       	pop	r12
    2b12:	08 95       	ret

00002b14 <nvm_eeprom_fill_buffer_with_value>:
    2b14:	cf 93       	push	r28
    2b16:	df 93       	push	r29
    2b18:	d8 2f       	mov	r29, r24
    2b1a:	36 df       	rcall	.-404    	; 0x2988 <nvm_eeprom_flush_buffer>
    2b1c:	e0 ec       	ldi	r30, 0xC0	; 192
    2b1e:	f1 e0       	ldi	r31, 0x01	; 1
    2b20:	87 85       	ldd	r24, Z+15	; 0x0f
    2b22:	88 23       	and	r24, r24
    2b24:	ec f3       	brlt	.-6      	; 0x2b20 <nvm_eeprom_fill_buffer_with_value+0xc>
    2b26:	c0 e0       	ldi	r28, 0x00	; 0
    2b28:	6d 2f       	mov	r22, r29
    2b2a:	8c 2f       	mov	r24, r28
    2b2c:	3e df       	rcall	.-388    	; 0x29aa <nvm_eeprom_load_byte_to_buffer>
    2b2e:	cf 5f       	subi	r28, 0xFF	; 255
    2b30:	c0 32       	cpi	r28, 0x20	; 32
    2b32:	d1 f7       	brne	.-12     	; 0x2b28 <nvm_eeprom_fill_buffer_with_value+0x14>
    2b34:	df 91       	pop	r29
    2b36:	cf 91       	pop	r28
    2b38:	08 95       	ret

00002b3a <nvm_eeprom_erase_bytes_in_all_pages>:
 *
 * This function erases bytes from all EEPROM pages, so that every location
 * written to in the page buffer reads 0xFF.
 */
void nvm_eeprom_erase_bytes_in_all_pages(void)
{
    2b3a:	1f 93       	push	r17
    2b3c:	cf 93       	push	r28
    2b3e:	df 93       	push	r29
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    2b40:	e0 ec       	ldi	r30, 0xC0	; 192
    2b42:	f1 e0       	ldi	r31, 0x01	; 1
    2b44:	87 85       	ldd	r24, Z+15	; 0x0f
    2b46:	88 23       	and	r24, r24
    2b48:	ec f3       	brlt	.-6      	; 0x2b44 <nvm_eeprom_erase_bytes_in_all_pages+0xa>
 */
static inline void nvm_issue_command(NVM_CMD_t nvm_command)
{
	uint8_t old_cmd;

	old_cmd = NVM.CMD;
    2b4a:	c0 ec       	ldi	r28, 0xC0	; 192
    2b4c:	d1 e0       	ldi	r29, 0x01	; 1
    2b4e:	1a 85       	ldd	r17, Y+10	; 0x0a
	NVM.CMD = nvm_command;
    2b50:	80 e3       	ldi	r24, 0x30	; 48
    2b52:	8a 87       	std	Y+10, r24	; 0x0a
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
    2b54:	61 e0       	ldi	r22, 0x01	; 1
    2b56:	8b ec       	ldi	r24, 0xCB	; 203
    2b58:	91 e0       	ldi	r25, 0x01	; 1
    2b5a:	f6 de       	rcall	.-532    	; 0x2948 <ccp_write_io>
	NVM.CMD = old_cmd;
    2b5c:	1a 87       	std	Y+10, r17	; 0x0a
	// Wait until NVM is ready
	nvm_wait_until_ready();

	// Issue EEPROM Erase All command
	nvm_issue_command(NVM_CMD_ERASE_EEPROM_gc);
}
    2b5e:	df 91       	pop	r29
    2b60:	cf 91       	pop	r28
    2b62:	1f 91       	pop	r17
    2b64:	08 95       	ret

00002b66 <nvm_eeprom_erase_all>:
 * This function erases the entire EEPROM memory block to 0xFF.
 */
void nvm_eeprom_erase_all(void)
{
	// Mark all addresses to be deleted
	nvm_eeprom_fill_buffer_with_value(0xff);
    2b66:	8f ef       	ldi	r24, 0xFF	; 255
    2b68:	d5 df       	rcall	.-86     	; 0x2b14 <nvm_eeprom_fill_buffer_with_value>
	// Erase all pages
	nvm_eeprom_erase_bytes_in_all_pages();
    2b6a:	e7 cf       	rjmp	.-50     	; 0x2b3a <nvm_eeprom_erase_bytes_in_all_pages>

00002b6c <rtc_set_time>:
	if ((count_low == 0) && (RTC.INTFLAGS & RTC_OVFIF_bm))
		count_high++;
	cpu_irq_restore(flags);

	return ((uint32_t)count_high << 16) | count_low;
}
    2b6c:	10 92 00 04 	sts	0x0400, r1
    2b70:	e0 e0       	ldi	r30, 0x00	; 0
    2b72:	f4 e0       	ldi	r31, 0x04	; 4
    2b74:	21 81       	ldd	r18, Z+1	; 0x01
    2b76:	20 fd       	sbrc	r18, 0
    2b78:	fd cf       	rjmp	.-6      	; 0x2b74 <rtc_set_time+0x8>
    2b7a:	e0 e0       	ldi	r30, 0x00	; 0
    2b7c:	f4 e0       	ldi	r31, 0x04	; 4
    2b7e:	60 87       	std	Z+8, r22	; 0x08
    2b80:	71 87       	std	Z+9, r23	; 0x09
    2b82:	80 93 8b 2d 	sts	0x2D8B, r24
    2b86:	90 93 8c 2d 	sts	0x2D8C, r25
    2b8a:	81 e0       	ldi	r24, 0x01	; 1
    2b8c:	80 83       	st	Z, r24
    2b8e:	08 95       	ret

00002b90 <rtc_set_alarm>:
 * \param time Absolute time value. See also \ref rtc_min_alarm_time
 * \pre Needs interrupts disabled if used from several contexts
 */
void rtc_set_alarm(uint32_t time)
{
	RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
    2b90:	e0 e0       	ldi	r30, 0x00	; 0
    2b92:	f4 e0       	ldi	r31, 0x04	; 4
    2b94:	21 e0       	ldi	r18, 0x01	; 1
    2b96:	22 83       	std	Z+2, r18	; 0x02
	RTC.COMP = time;
    2b98:	64 87       	std	Z+12, r22	; 0x0c
    2b9a:	75 87       	std	Z+13, r23	; 0x0d
	rtc_data.alarm_low = time;
    2b9c:	60 93 8f 2d 	sts	0x2D8F, r22
    2ba0:	70 93 90 2d 	sts	0x2D90, r23
	rtc_data.alarm_high = time >> 16;
    2ba4:	80 93 8d 2d 	sts	0x2D8D, r24
    2ba8:	90 93 8e 2d 	sts	0x2D8E, r25
 * \brief Check if RTC is busy synchronizing
 */
__always_inline bool rtc_is_busy(void);
__always_inline bool rtc_is_busy(void)
{
	return RTC.STATUS & RTC_SYNCBUSY_bm;
    2bac:	81 81       	ldd	r24, Z+1	; 0x01
	RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
	RTC.COMP = time;
	rtc_data.alarm_low = time;
	rtc_data.alarm_high = time >> 16;

	while (rtc_is_busy());
    2bae:	80 fd       	sbrc	r24, 0
    2bb0:	fd cf       	rjmp	.-6      	; 0x2bac <rtc_set_alarm+0x1c>

	RTC.INTFLAGS = RTC_COMPIF_bm;
    2bb2:	e0 e0       	ldi	r30, 0x00	; 0
    2bb4:	f4 e0       	ldi	r31, 0x04	; 4
    2bb6:	82 e0       	ldi	r24, 0x02	; 2
    2bb8:	83 83       	std	Z+3, r24	; 0x03
	RTC.INTCTRL = (uint8_t)RTC_COMPARE_INT_LEVEL
    2bba:	85 e0       	ldi	r24, 0x05	; 5
    2bbc:	82 83       	std	Z+2, r24	; 0x02
    2bbe:	08 95       	ret

00002bc0 <rtc_set_callback>:
 *
 * \param callback Callback function pointer
 */
void rtc_set_callback(rtc_callback_t callback)
{
	rtc_data.callback = callback;
    2bc0:	80 93 91 2d 	sts	0x2D91, r24
    2bc4:	90 93 92 2d 	sts	0x2D92, r25
    2bc8:	08 95       	ret

00002bca <rtc_init>:
 * \note The RTC clock source used by the RTC module should be set up before
 *       calling this function. 
 */
void rtc_init(void)
{
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    2bca:	64 e0       	ldi	r22, 0x04	; 4
    2bcc:	80 e0       	ldi	r24, 0x00	; 0
    2bce:	90 e0       	ldi	r25, 0x00	; 0
    2bd0:	88 de       	rcall	.-752    	; 0x28e2 <sysclk_enable_module>
	RTC.PER = 0xffff;
    2bd2:	e0 e0       	ldi	r30, 0x00	; 0
    2bd4:	f4 e0       	ldi	r31, 0x04	; 4
    2bd6:	8f ef       	ldi	r24, 0xFF	; 255
    2bd8:	9f ef       	ldi	r25, 0xFF	; 255
    2bda:	82 87       	std	Z+10, r24	; 0x0a
    2bdc:	93 87       	std	Z+11, r25	; 0x0b
	RTC.CNT = 0;
    2bde:	10 86       	std	Z+8, r1	; 0x08
    2be0:	11 86       	std	Z+9, r1	; 0x09

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2be2:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    2be4:	f8 94       	cli
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    2be6:	a8 e8       	ldi	r26, 0x88	; 136
    2be8:	bd e2       	ldi	r27, 0x2D	; 45
    2bea:	9c 91       	ld	r25, X
    2bec:	9f 5f       	subi	r25, 0xFF	; 255
    2bee:	9c 93       	st	X, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2bf0:	8f bf       	out	0x3f, r24	; 63
	/* Since overflow interrupt is needed all the time we limit sleep to
	 * power-save.
	 */
	sleepmgr_lock_mode(SLEEPMGR_PSAVE);
	RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
    2bf2:	81 e0       	ldi	r24, 0x01	; 1
    2bf4:	82 83       	std	Z+2, r24	; 0x02
	RTC.CTRL = CONFIG_RTC_PRESCALER;
    2bf6:	80 83       	st	Z, r24
    2bf8:	08 95       	ret

00002bfa <__vector_10>:
/**
 * \internal
 * \brief Overflow interrupt handling high counter
 */
ISR(RTC_OVF_vect)
{
    2bfa:	1f 92       	push	r1
    2bfc:	0f 92       	push	r0
    2bfe:	0f b6       	in	r0, 0x3f	; 63
    2c00:	0f 92       	push	r0
    2c02:	11 24       	eor	r1, r1
    2c04:	8f 93       	push	r24
    2c06:	9f 93       	push	r25
    2c08:	ef 93       	push	r30
    2c0a:	ff 93       	push	r31
	rtc_data.counter_high++;
    2c0c:	eb e8       	ldi	r30, 0x8B	; 139
    2c0e:	fd e2       	ldi	r31, 0x2D	; 45
    2c10:	80 81       	ld	r24, Z
    2c12:	91 81       	ldd	r25, Z+1	; 0x01
    2c14:	01 96       	adiw	r24, 0x01	; 1
    2c16:	80 83       	st	Z, r24
    2c18:	91 83       	std	Z+1, r25	; 0x01
}
    2c1a:	ff 91       	pop	r31
    2c1c:	ef 91       	pop	r30
    2c1e:	9f 91       	pop	r25
    2c20:	8f 91       	pop	r24
    2c22:	0f 90       	pop	r0
    2c24:	0f be       	out	0x3f, r0	; 63
    2c26:	0f 90       	pop	r0
    2c28:	1f 90       	pop	r1
    2c2a:	18 95       	reti

00002c2c <__vector_11>:
/**
 * \internal
 * \brief Compare interrupt used for alarm
 */
ISR(RTC_COMP_vect)
{
    2c2c:	1f 92       	push	r1
    2c2e:	0f 92       	push	r0
    2c30:	0f b6       	in	r0, 0x3f	; 63
    2c32:	0f 92       	push	r0
    2c34:	11 24       	eor	r1, r1
    2c36:	cf 92       	push	r12
    2c38:	df 92       	push	r13
    2c3a:	ef 92       	push	r14
    2c3c:	ff 92       	push	r15
    2c3e:	0f 93       	push	r16
    2c40:	1f 93       	push	r17
    2c42:	2f 93       	push	r18
    2c44:	3f 93       	push	r19
    2c46:	4f 93       	push	r20
    2c48:	5f 93       	push	r21
    2c4a:	6f 93       	push	r22
    2c4c:	7f 93       	push	r23
    2c4e:	8f 93       	push	r24
    2c50:	9f 93       	push	r25
    2c52:	af 93       	push	r26
    2c54:	bf 93       	push	r27
    2c56:	ef 93       	push	r30
    2c58:	ff 93       	push	r31
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
    2c5a:	40 91 8b 2d 	lds	r20, 0x2D8B
    2c5e:	50 91 8c 2d 	lds	r21, 0x2D8C
    2c62:	80 91 8d 2d 	lds	r24, 0x2D8D
    2c66:	90 91 8e 2d 	lds	r25, 0x2D8E
    2c6a:	48 17       	cp	r20, r24
    2c6c:	59 07       	cpc	r21, r25
    2c6e:	f0 f1       	brcs	.+124    	; 0x2cec <__vector_11+0xc0>
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
    2c70:	81 e0       	ldi	r24, 0x01	; 1
    2c72:	e0 e0       	ldi	r30, 0x00	; 0
    2c74:	f4 e0       	ldi	r31, 0x04	; 4
    2c76:	82 83       	std	Z+2, r24	; 0x02
		if (rtc_data.callback) {
    2c78:	e0 91 91 2d 	lds	r30, 0x2D91
    2c7c:	f0 91 92 2d 	lds	r31, 0x2D92
    2c80:	30 97       	sbiw	r30, 0x00	; 0
    2c82:	a1 f1       	breq	.+104    	; 0x2cec <__vector_11+0xc0>
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
					| RTC.CNT;
    2c84:	a0 e0       	ldi	r26, 0x00	; 0
    2c86:	b4 e0       	ldi	r27, 0x04	; 4
    2c88:	18 96       	adiw	r26, 0x08	; 8
    2c8a:	8d 91       	ld	r24, X+
    2c8c:	9c 91       	ld	r25, X
    2c8e:	19 97       	sbiw	r26, 0x09	; 9
ISR(RTC_COMP_vect)
{
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
    2c90:	60 e0       	ldi	r22, 0x00	; 0
    2c92:	70 e0       	ldi	r23, 0x00	; 0
    2c94:	ba 01       	movw	r22, r20
    2c96:	55 27       	eor	r21, r21
    2c98:	44 27       	eor	r20, r20
					| RTC.CNT;
    2c9a:	a0 e0       	ldi	r26, 0x00	; 0
    2c9c:	b0 e0       	ldi	r27, 0x00	; 0
ISR(RTC_COMP_vect)
{
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
    2c9e:	8a 01       	movw	r16, r20
    2ca0:	9b 01       	movw	r18, r22
    2ca2:	08 2b       	or	r16, r24
    2ca4:	19 2b       	or	r17, r25
    2ca6:	2a 2b       	or	r18, r26
    2ca8:	3b 2b       	or	r19, r27
    2caa:	c9 01       	movw	r24, r18
    2cac:	b8 01       	movw	r22, r16
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
    2cae:	00 91 8d 2d 	lds	r16, 0x2D8D
    2cb2:	10 91 8e 2d 	lds	r17, 0x2D8E
    2cb6:	20 e0       	ldi	r18, 0x00	; 0
    2cb8:	30 e0       	ldi	r19, 0x00	; 0
    2cba:	98 01       	movw	r18, r16
    2cbc:	11 27       	eor	r17, r17
    2cbe:	00 27       	eor	r16, r16
					| rtc_data.alarm_low;
    2cc0:	c0 90 8f 2d 	lds	r12, 0x2D8F
    2cc4:	d0 90 90 2d 	lds	r13, 0x2D90
    2cc8:	e1 2c       	mov	r14, r1
    2cca:	f1 2c       	mov	r15, r1
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
    2ccc:	0c 29       	or	r16, r12
    2cce:	1d 29       	or	r17, r13
    2cd0:	2e 29       	or	r18, r14
    2cd2:	3f 29       	or	r19, r15
					| rtc_data.alarm_low;
			/* Workaround for errata. Count might not be updated
			 * when waking up from sleep, so in this case use alarm
			 * time plus one.
			 */
			if (alarm >= count)
    2cd4:	06 17       	cp	r16, r22
    2cd6:	17 07       	cpc	r17, r23
    2cd8:	28 07       	cpc	r18, r24
    2cda:	39 07       	cpc	r19, r25
    2cdc:	30 f0       	brcs	.+12     	; 0x2cea <__vector_11+0xbe>
				count = alarm + 1;
    2cde:	c9 01       	movw	r24, r18
    2ce0:	b8 01       	movw	r22, r16
    2ce2:	6f 5f       	subi	r22, 0xFF	; 255
    2ce4:	7f 4f       	sbci	r23, 0xFF	; 255
    2ce6:	8f 4f       	sbci	r24, 0xFF	; 255
    2ce8:	9f 4f       	sbci	r25, 0xFF	; 255
			rtc_data.callback(count);
    2cea:	09 95       	icall
		}
	}
}
    2cec:	ff 91       	pop	r31
    2cee:	ef 91       	pop	r30
    2cf0:	bf 91       	pop	r27
    2cf2:	af 91       	pop	r26
    2cf4:	9f 91       	pop	r25
    2cf6:	8f 91       	pop	r24
    2cf8:	7f 91       	pop	r23
    2cfa:	6f 91       	pop	r22
    2cfc:	5f 91       	pop	r21
    2cfe:	4f 91       	pop	r20
    2d00:	3f 91       	pop	r19
    2d02:	2f 91       	pop	r18
    2d04:	1f 91       	pop	r17
    2d06:	0f 91       	pop	r16
    2d08:	ff 90       	pop	r15
    2d0a:	ef 90       	pop	r14
    2d0c:	df 90       	pop	r13
    2d0e:	cf 90       	pop	r12
    2d10:	0f 90       	pop	r0
    2d12:	0f be       	out	0x3f, r0	; 63
    2d14:	0f 90       	pop	r0
    2d16:	1f 90       	pop	r1
    2d18:	18 95       	reti

00002d1a <__vector_14>:
	{
		cpu_irq_restore(iflags);
		return;
	}
	cpu_irq_restore(iflags);
}
    2d1a:	1f 92       	push	r1
    2d1c:	0f 92       	push	r0
    2d1e:	0f b6       	in	r0, 0x3f	; 63
    2d20:	0f 92       	push	r0
    2d22:	11 24       	eor	r1, r1
    2d24:	2f 93       	push	r18
    2d26:	3f 93       	push	r19
    2d28:	4f 93       	push	r20
    2d2a:	5f 93       	push	r21
    2d2c:	6f 93       	push	r22
    2d2e:	7f 93       	push	r23
    2d30:	8f 93       	push	r24
    2d32:	9f 93       	push	r25
    2d34:	af 93       	push	r26
    2d36:	bf 93       	push	r27
    2d38:	ef 93       	push	r30
    2d3a:	ff 93       	push	r31
    2d3c:	e0 91 44 28 	lds	r30, 0x2844
    2d40:	f0 91 45 28 	lds	r31, 0x2845
    2d44:	30 97       	sbiw	r30, 0x00	; 0
    2d46:	09 f0       	breq	.+2      	; 0x2d4a <__vector_14+0x30>
    2d48:	09 95       	icall
    2d4a:	ff 91       	pop	r31
    2d4c:	ef 91       	pop	r30
    2d4e:	bf 91       	pop	r27
    2d50:	af 91       	pop	r26
    2d52:	9f 91       	pop	r25
    2d54:	8f 91       	pop	r24
    2d56:	7f 91       	pop	r23
    2d58:	6f 91       	pop	r22
    2d5a:	5f 91       	pop	r21
    2d5c:	4f 91       	pop	r20
    2d5e:	3f 91       	pop	r19
    2d60:	2f 91       	pop	r18
    2d62:	0f 90       	pop	r0
    2d64:	0f be       	out	0x3f, r0	; 63
    2d66:	0f 90       	pop	r0
    2d68:	1f 90       	pop	r1
    2d6a:	18 95       	reti

00002d6c <__vector_15>:
    2d6c:	1f 92       	push	r1
    2d6e:	0f 92       	push	r0
    2d70:	0f b6       	in	r0, 0x3f	; 63
    2d72:	0f 92       	push	r0
    2d74:	11 24       	eor	r1, r1
    2d76:	2f 93       	push	r18
    2d78:	3f 93       	push	r19
    2d7a:	4f 93       	push	r20
    2d7c:	5f 93       	push	r21
    2d7e:	6f 93       	push	r22
    2d80:	7f 93       	push	r23
    2d82:	8f 93       	push	r24
    2d84:	9f 93       	push	r25
    2d86:	af 93       	push	r26
    2d88:	bf 93       	push	r27
    2d8a:	ef 93       	push	r30
    2d8c:	ff 93       	push	r31
    2d8e:	e0 91 46 28 	lds	r30, 0x2846
    2d92:	f0 91 47 28 	lds	r31, 0x2847
    2d96:	30 97       	sbiw	r30, 0x00	; 0
    2d98:	09 f0       	breq	.+2      	; 0x2d9c <__vector_15+0x30>
    2d9a:	09 95       	icall
    2d9c:	ff 91       	pop	r31
    2d9e:	ef 91       	pop	r30
    2da0:	bf 91       	pop	r27
    2da2:	af 91       	pop	r26
    2da4:	9f 91       	pop	r25
    2da6:	8f 91       	pop	r24
    2da8:	7f 91       	pop	r23
    2daa:	6f 91       	pop	r22
    2dac:	5f 91       	pop	r21
    2dae:	4f 91       	pop	r20
    2db0:	3f 91       	pop	r19
    2db2:	2f 91       	pop	r18
    2db4:	0f 90       	pop	r0
    2db6:	0f be       	out	0x3f, r0	; 63
    2db8:	0f 90       	pop	r0
    2dba:	1f 90       	pop	r1
    2dbc:	18 95       	reti

00002dbe <__vector_16>:
    2dbe:	1f 92       	push	r1
    2dc0:	0f 92       	push	r0
    2dc2:	0f b6       	in	r0, 0x3f	; 63
    2dc4:	0f 92       	push	r0
    2dc6:	11 24       	eor	r1, r1
    2dc8:	2f 93       	push	r18
    2dca:	3f 93       	push	r19
    2dcc:	4f 93       	push	r20
    2dce:	5f 93       	push	r21
    2dd0:	6f 93       	push	r22
    2dd2:	7f 93       	push	r23
    2dd4:	8f 93       	push	r24
    2dd6:	9f 93       	push	r25
    2dd8:	af 93       	push	r26
    2dda:	bf 93       	push	r27
    2ddc:	ef 93       	push	r30
    2dde:	ff 93       	push	r31
    2de0:	e0 91 48 28 	lds	r30, 0x2848
    2de4:	f0 91 49 28 	lds	r31, 0x2849
    2de8:	30 97       	sbiw	r30, 0x00	; 0
    2dea:	09 f0       	breq	.+2      	; 0x2dee <__vector_16+0x30>
    2dec:	09 95       	icall
    2dee:	ff 91       	pop	r31
    2df0:	ef 91       	pop	r30
    2df2:	bf 91       	pop	r27
    2df4:	af 91       	pop	r26
    2df6:	9f 91       	pop	r25
    2df8:	8f 91       	pop	r24
    2dfa:	7f 91       	pop	r23
    2dfc:	6f 91       	pop	r22
    2dfe:	5f 91       	pop	r21
    2e00:	4f 91       	pop	r20
    2e02:	3f 91       	pop	r19
    2e04:	2f 91       	pop	r18
    2e06:	0f 90       	pop	r0
    2e08:	0f be       	out	0x3f, r0	; 63
    2e0a:	0f 90       	pop	r0
    2e0c:	1f 90       	pop	r1
    2e0e:	18 95       	reti

00002e10 <__vector_17>:
    2e10:	1f 92       	push	r1
    2e12:	0f 92       	push	r0
    2e14:	0f b6       	in	r0, 0x3f	; 63
    2e16:	0f 92       	push	r0
    2e18:	11 24       	eor	r1, r1
    2e1a:	2f 93       	push	r18
    2e1c:	3f 93       	push	r19
    2e1e:	4f 93       	push	r20
    2e20:	5f 93       	push	r21
    2e22:	6f 93       	push	r22
    2e24:	7f 93       	push	r23
    2e26:	8f 93       	push	r24
    2e28:	9f 93       	push	r25
    2e2a:	af 93       	push	r26
    2e2c:	bf 93       	push	r27
    2e2e:	ef 93       	push	r30
    2e30:	ff 93       	push	r31
    2e32:	e0 91 4a 28 	lds	r30, 0x284A
    2e36:	f0 91 4b 28 	lds	r31, 0x284B
    2e3a:	30 97       	sbiw	r30, 0x00	; 0
    2e3c:	09 f0       	breq	.+2      	; 0x2e40 <__vector_17+0x30>
    2e3e:	09 95       	icall
    2e40:	ff 91       	pop	r31
    2e42:	ef 91       	pop	r30
    2e44:	bf 91       	pop	r27
    2e46:	af 91       	pop	r26
    2e48:	9f 91       	pop	r25
    2e4a:	8f 91       	pop	r24
    2e4c:	7f 91       	pop	r23
    2e4e:	6f 91       	pop	r22
    2e50:	5f 91       	pop	r21
    2e52:	4f 91       	pop	r20
    2e54:	3f 91       	pop	r19
    2e56:	2f 91       	pop	r18
    2e58:	0f 90       	pop	r0
    2e5a:	0f be       	out	0x3f, r0	; 63
    2e5c:	0f 90       	pop	r0
    2e5e:	1f 90       	pop	r1
    2e60:	18 95       	reti

00002e62 <__vector_18>:
    2e62:	1f 92       	push	r1
    2e64:	0f 92       	push	r0
    2e66:	0f b6       	in	r0, 0x3f	; 63
    2e68:	0f 92       	push	r0
    2e6a:	11 24       	eor	r1, r1
    2e6c:	2f 93       	push	r18
    2e6e:	3f 93       	push	r19
    2e70:	4f 93       	push	r20
    2e72:	5f 93       	push	r21
    2e74:	6f 93       	push	r22
    2e76:	7f 93       	push	r23
    2e78:	8f 93       	push	r24
    2e7a:	9f 93       	push	r25
    2e7c:	af 93       	push	r26
    2e7e:	bf 93       	push	r27
    2e80:	ef 93       	push	r30
    2e82:	ff 93       	push	r31
    2e84:	e0 91 4c 28 	lds	r30, 0x284C
    2e88:	f0 91 4d 28 	lds	r31, 0x284D
    2e8c:	30 97       	sbiw	r30, 0x00	; 0
    2e8e:	09 f0       	breq	.+2      	; 0x2e92 <__vector_18+0x30>
    2e90:	09 95       	icall
    2e92:	ff 91       	pop	r31
    2e94:	ef 91       	pop	r30
    2e96:	bf 91       	pop	r27
    2e98:	af 91       	pop	r26
    2e9a:	9f 91       	pop	r25
    2e9c:	8f 91       	pop	r24
    2e9e:	7f 91       	pop	r23
    2ea0:	6f 91       	pop	r22
    2ea2:	5f 91       	pop	r21
    2ea4:	4f 91       	pop	r20
    2ea6:	3f 91       	pop	r19
    2ea8:	2f 91       	pop	r18
    2eaa:	0f 90       	pop	r0
    2eac:	0f be       	out	0x3f, r0	; 63
    2eae:	0f 90       	pop	r0
    2eb0:	1f 90       	pop	r1
    2eb2:	18 95       	reti

00002eb4 <__vector_19>:
    2eb4:	1f 92       	push	r1
    2eb6:	0f 92       	push	r0
    2eb8:	0f b6       	in	r0, 0x3f	; 63
    2eba:	0f 92       	push	r0
    2ebc:	11 24       	eor	r1, r1
    2ebe:	2f 93       	push	r18
    2ec0:	3f 93       	push	r19
    2ec2:	4f 93       	push	r20
    2ec4:	5f 93       	push	r21
    2ec6:	6f 93       	push	r22
    2ec8:	7f 93       	push	r23
    2eca:	8f 93       	push	r24
    2ecc:	9f 93       	push	r25
    2ece:	af 93       	push	r26
    2ed0:	bf 93       	push	r27
    2ed2:	ef 93       	push	r30
    2ed4:	ff 93       	push	r31
    2ed6:	e0 91 4e 28 	lds	r30, 0x284E
    2eda:	f0 91 4f 28 	lds	r31, 0x284F
    2ede:	30 97       	sbiw	r30, 0x00	; 0
    2ee0:	09 f0       	breq	.+2      	; 0x2ee4 <__vector_19+0x30>
    2ee2:	09 95       	icall
    2ee4:	ff 91       	pop	r31
    2ee6:	ef 91       	pop	r30
    2ee8:	bf 91       	pop	r27
    2eea:	af 91       	pop	r26
    2eec:	9f 91       	pop	r25
    2eee:	8f 91       	pop	r24
    2ef0:	7f 91       	pop	r23
    2ef2:	6f 91       	pop	r22
    2ef4:	5f 91       	pop	r21
    2ef6:	4f 91       	pop	r20
    2ef8:	3f 91       	pop	r19
    2efa:	2f 91       	pop	r18
    2efc:	0f 90       	pop	r0
    2efe:	0f be       	out	0x3f, r0	; 63
    2f00:	0f 90       	pop	r0
    2f02:	1f 90       	pop	r1
    2f04:	18 95       	reti

00002f06 <__vector_20>:
    2f06:	1f 92       	push	r1
    2f08:	0f 92       	push	r0
    2f0a:	0f b6       	in	r0, 0x3f	; 63
    2f0c:	0f 92       	push	r0
    2f0e:	11 24       	eor	r1, r1
    2f10:	2f 93       	push	r18
    2f12:	3f 93       	push	r19
    2f14:	4f 93       	push	r20
    2f16:	5f 93       	push	r21
    2f18:	6f 93       	push	r22
    2f1a:	7f 93       	push	r23
    2f1c:	8f 93       	push	r24
    2f1e:	9f 93       	push	r25
    2f20:	af 93       	push	r26
    2f22:	bf 93       	push	r27
    2f24:	ef 93       	push	r30
    2f26:	ff 93       	push	r31
    2f28:	e0 91 50 28 	lds	r30, 0x2850
    2f2c:	f0 91 51 28 	lds	r31, 0x2851
    2f30:	30 97       	sbiw	r30, 0x00	; 0
    2f32:	09 f0       	breq	.+2      	; 0x2f36 <__vector_20+0x30>
    2f34:	09 95       	icall
    2f36:	ff 91       	pop	r31
    2f38:	ef 91       	pop	r30
    2f3a:	bf 91       	pop	r27
    2f3c:	af 91       	pop	r26
    2f3e:	9f 91       	pop	r25
    2f40:	8f 91       	pop	r24
    2f42:	7f 91       	pop	r23
    2f44:	6f 91       	pop	r22
    2f46:	5f 91       	pop	r21
    2f48:	4f 91       	pop	r20
    2f4a:	3f 91       	pop	r19
    2f4c:	2f 91       	pop	r18
    2f4e:	0f 90       	pop	r0
    2f50:	0f be       	out	0x3f, r0	; 63
    2f52:	0f 90       	pop	r0
    2f54:	1f 90       	pop	r1
    2f56:	18 95       	reti

00002f58 <__vector_21>:
    2f58:	1f 92       	push	r1
    2f5a:	0f 92       	push	r0
    2f5c:	0f b6       	in	r0, 0x3f	; 63
    2f5e:	0f 92       	push	r0
    2f60:	11 24       	eor	r1, r1
    2f62:	2f 93       	push	r18
    2f64:	3f 93       	push	r19
    2f66:	4f 93       	push	r20
    2f68:	5f 93       	push	r21
    2f6a:	6f 93       	push	r22
    2f6c:	7f 93       	push	r23
    2f6e:	8f 93       	push	r24
    2f70:	9f 93       	push	r25
    2f72:	af 93       	push	r26
    2f74:	bf 93       	push	r27
    2f76:	ef 93       	push	r30
    2f78:	ff 93       	push	r31
    2f7a:	e0 91 52 28 	lds	r30, 0x2852
    2f7e:	f0 91 53 28 	lds	r31, 0x2853
    2f82:	30 97       	sbiw	r30, 0x00	; 0
    2f84:	09 f0       	breq	.+2      	; 0x2f88 <__vector_21+0x30>
    2f86:	09 95       	icall
    2f88:	ff 91       	pop	r31
    2f8a:	ef 91       	pop	r30
    2f8c:	bf 91       	pop	r27
    2f8e:	af 91       	pop	r26
    2f90:	9f 91       	pop	r25
    2f92:	8f 91       	pop	r24
    2f94:	7f 91       	pop	r23
    2f96:	6f 91       	pop	r22
    2f98:	5f 91       	pop	r21
    2f9a:	4f 91       	pop	r20
    2f9c:	3f 91       	pop	r19
    2f9e:	2f 91       	pop	r18
    2fa0:	0f 90       	pop	r0
    2fa2:	0f be       	out	0x3f, r0	; 63
    2fa4:	0f 90       	pop	r0
    2fa6:	1f 90       	pop	r1
    2fa8:	18 95       	reti

00002faa <__vector_22>:
    2faa:	1f 92       	push	r1
    2fac:	0f 92       	push	r0
    2fae:	0f b6       	in	r0, 0x3f	; 63
    2fb0:	0f 92       	push	r0
    2fb2:	11 24       	eor	r1, r1
    2fb4:	2f 93       	push	r18
    2fb6:	3f 93       	push	r19
    2fb8:	4f 93       	push	r20
    2fba:	5f 93       	push	r21
    2fbc:	6f 93       	push	r22
    2fbe:	7f 93       	push	r23
    2fc0:	8f 93       	push	r24
    2fc2:	9f 93       	push	r25
    2fc4:	af 93       	push	r26
    2fc6:	bf 93       	push	r27
    2fc8:	ef 93       	push	r30
    2fca:	ff 93       	push	r31
    2fcc:	e0 91 54 28 	lds	r30, 0x2854
    2fd0:	f0 91 55 28 	lds	r31, 0x2855
    2fd4:	30 97       	sbiw	r30, 0x00	; 0
    2fd6:	09 f0       	breq	.+2      	; 0x2fda <__vector_22+0x30>
    2fd8:	09 95       	icall
    2fda:	ff 91       	pop	r31
    2fdc:	ef 91       	pop	r30
    2fde:	bf 91       	pop	r27
    2fe0:	af 91       	pop	r26
    2fe2:	9f 91       	pop	r25
    2fe4:	8f 91       	pop	r24
    2fe6:	7f 91       	pop	r23
    2fe8:	6f 91       	pop	r22
    2fea:	5f 91       	pop	r21
    2fec:	4f 91       	pop	r20
    2fee:	3f 91       	pop	r19
    2ff0:	2f 91       	pop	r18
    2ff2:	0f 90       	pop	r0
    2ff4:	0f be       	out	0x3f, r0	; 63
    2ff6:	0f 90       	pop	r0
    2ff8:	1f 90       	pop	r1
    2ffa:	18 95       	reti

00002ffc <__vector_23>:
    2ffc:	1f 92       	push	r1
    2ffe:	0f 92       	push	r0
    3000:	0f b6       	in	r0, 0x3f	; 63
    3002:	0f 92       	push	r0
    3004:	11 24       	eor	r1, r1
    3006:	2f 93       	push	r18
    3008:	3f 93       	push	r19
    300a:	4f 93       	push	r20
    300c:	5f 93       	push	r21
    300e:	6f 93       	push	r22
    3010:	7f 93       	push	r23
    3012:	8f 93       	push	r24
    3014:	9f 93       	push	r25
    3016:	af 93       	push	r26
    3018:	bf 93       	push	r27
    301a:	ef 93       	push	r30
    301c:	ff 93       	push	r31
    301e:	e0 91 56 28 	lds	r30, 0x2856
    3022:	f0 91 57 28 	lds	r31, 0x2857
    3026:	30 97       	sbiw	r30, 0x00	; 0
    3028:	09 f0       	breq	.+2      	; 0x302c <__stack+0x2d>
    302a:	09 95       	icall
    302c:	ff 91       	pop	r31
    302e:	ef 91       	pop	r30
    3030:	bf 91       	pop	r27
    3032:	af 91       	pop	r26
    3034:	9f 91       	pop	r25
    3036:	8f 91       	pop	r24
    3038:	7f 91       	pop	r23
    303a:	6f 91       	pop	r22
    303c:	5f 91       	pop	r21
    303e:	4f 91       	pop	r20
    3040:	3f 91       	pop	r19
    3042:	2f 91       	pop	r18
    3044:	0f 90       	pop	r0
    3046:	0f be       	out	0x3f, r0	; 63
    3048:	0f 90       	pop	r0
    304a:	1f 90       	pop	r1
    304c:	18 95       	reti

0000304e <__vector_77>:
    304e:	1f 92       	push	r1
    3050:	0f 92       	push	r0
    3052:	0f b6       	in	r0, 0x3f	; 63
    3054:	0f 92       	push	r0
    3056:	11 24       	eor	r1, r1
    3058:	2f 93       	push	r18
    305a:	3f 93       	push	r19
    305c:	4f 93       	push	r20
    305e:	5f 93       	push	r21
    3060:	6f 93       	push	r22
    3062:	7f 93       	push	r23
    3064:	8f 93       	push	r24
    3066:	9f 93       	push	r25
    3068:	af 93       	push	r26
    306a:	bf 93       	push	r27
    306c:	ef 93       	push	r30
    306e:	ff 93       	push	r31
    3070:	e0 91 58 28 	lds	r30, 0x2858
    3074:	f0 91 59 28 	lds	r31, 0x2859
    3078:	30 97       	sbiw	r30, 0x00	; 0
    307a:	09 f0       	breq	.+2      	; 0x307e <__vector_77+0x30>
    307c:	09 95       	icall
    307e:	ff 91       	pop	r31
    3080:	ef 91       	pop	r30
    3082:	bf 91       	pop	r27
    3084:	af 91       	pop	r26
    3086:	9f 91       	pop	r25
    3088:	8f 91       	pop	r24
    308a:	7f 91       	pop	r23
    308c:	6f 91       	pop	r22
    308e:	5f 91       	pop	r21
    3090:	4f 91       	pop	r20
    3092:	3f 91       	pop	r19
    3094:	2f 91       	pop	r18
    3096:	0f 90       	pop	r0
    3098:	0f be       	out	0x3f, r0	; 63
    309a:	0f 90       	pop	r0
    309c:	1f 90       	pop	r1
    309e:	18 95       	reti

000030a0 <__vector_78>:
    30a0:	1f 92       	push	r1
    30a2:	0f 92       	push	r0
    30a4:	0f b6       	in	r0, 0x3f	; 63
    30a6:	0f 92       	push	r0
    30a8:	11 24       	eor	r1, r1
    30aa:	2f 93       	push	r18
    30ac:	3f 93       	push	r19
    30ae:	4f 93       	push	r20
    30b0:	5f 93       	push	r21
    30b2:	6f 93       	push	r22
    30b4:	7f 93       	push	r23
    30b6:	8f 93       	push	r24
    30b8:	9f 93       	push	r25
    30ba:	af 93       	push	r26
    30bc:	bf 93       	push	r27
    30be:	ef 93       	push	r30
    30c0:	ff 93       	push	r31
    30c2:	e0 91 5a 28 	lds	r30, 0x285A
    30c6:	f0 91 5b 28 	lds	r31, 0x285B
    30ca:	30 97       	sbiw	r30, 0x00	; 0
    30cc:	09 f0       	breq	.+2      	; 0x30d0 <__vector_78+0x30>
    30ce:	09 95       	icall
    30d0:	ff 91       	pop	r31
    30d2:	ef 91       	pop	r30
    30d4:	bf 91       	pop	r27
    30d6:	af 91       	pop	r26
    30d8:	9f 91       	pop	r25
    30da:	8f 91       	pop	r24
    30dc:	7f 91       	pop	r23
    30de:	6f 91       	pop	r22
    30e0:	5f 91       	pop	r21
    30e2:	4f 91       	pop	r20
    30e4:	3f 91       	pop	r19
    30e6:	2f 91       	pop	r18
    30e8:	0f 90       	pop	r0
    30ea:	0f be       	out	0x3f, r0	; 63
    30ec:	0f 90       	pop	r0
    30ee:	1f 90       	pop	r1
    30f0:	18 95       	reti

000030f2 <__vector_79>:
    30f2:	1f 92       	push	r1
    30f4:	0f 92       	push	r0
    30f6:	0f b6       	in	r0, 0x3f	; 63
    30f8:	0f 92       	push	r0
    30fa:	11 24       	eor	r1, r1
    30fc:	2f 93       	push	r18
    30fe:	3f 93       	push	r19
    3100:	4f 93       	push	r20
    3102:	5f 93       	push	r21
    3104:	6f 93       	push	r22
    3106:	7f 93       	push	r23
    3108:	8f 93       	push	r24
    310a:	9f 93       	push	r25
    310c:	af 93       	push	r26
    310e:	bf 93       	push	r27
    3110:	ef 93       	push	r30
    3112:	ff 93       	push	r31
    3114:	e0 91 5c 28 	lds	r30, 0x285C
    3118:	f0 91 5d 28 	lds	r31, 0x285D
    311c:	30 97       	sbiw	r30, 0x00	; 0
    311e:	09 f0       	breq	.+2      	; 0x3122 <__vector_79+0x30>
    3120:	09 95       	icall
    3122:	ff 91       	pop	r31
    3124:	ef 91       	pop	r30
    3126:	bf 91       	pop	r27
    3128:	af 91       	pop	r26
    312a:	9f 91       	pop	r25
    312c:	8f 91       	pop	r24
    312e:	7f 91       	pop	r23
    3130:	6f 91       	pop	r22
    3132:	5f 91       	pop	r21
    3134:	4f 91       	pop	r20
    3136:	3f 91       	pop	r19
    3138:	2f 91       	pop	r18
    313a:	0f 90       	pop	r0
    313c:	0f be       	out	0x3f, r0	; 63
    313e:	0f 90       	pop	r0
    3140:	1f 90       	pop	r1
    3142:	18 95       	reti

00003144 <__vector_80>:
    3144:	1f 92       	push	r1
    3146:	0f 92       	push	r0
    3148:	0f b6       	in	r0, 0x3f	; 63
    314a:	0f 92       	push	r0
    314c:	11 24       	eor	r1, r1
    314e:	2f 93       	push	r18
    3150:	3f 93       	push	r19
    3152:	4f 93       	push	r20
    3154:	5f 93       	push	r21
    3156:	6f 93       	push	r22
    3158:	7f 93       	push	r23
    315a:	8f 93       	push	r24
    315c:	9f 93       	push	r25
    315e:	af 93       	push	r26
    3160:	bf 93       	push	r27
    3162:	ef 93       	push	r30
    3164:	ff 93       	push	r31
    3166:	e0 91 5e 28 	lds	r30, 0x285E
    316a:	f0 91 5f 28 	lds	r31, 0x285F
    316e:	30 97       	sbiw	r30, 0x00	; 0
    3170:	09 f0       	breq	.+2      	; 0x3174 <__vector_80+0x30>
    3172:	09 95       	icall
    3174:	ff 91       	pop	r31
    3176:	ef 91       	pop	r30
    3178:	bf 91       	pop	r27
    317a:	af 91       	pop	r26
    317c:	9f 91       	pop	r25
    317e:	8f 91       	pop	r24
    3180:	7f 91       	pop	r23
    3182:	6f 91       	pop	r22
    3184:	5f 91       	pop	r21
    3186:	4f 91       	pop	r20
    3188:	3f 91       	pop	r19
    318a:	2f 91       	pop	r18
    318c:	0f 90       	pop	r0
    318e:	0f be       	out	0x3f, r0	; 63
    3190:	0f 90       	pop	r0
    3192:	1f 90       	pop	r1
    3194:	18 95       	reti

00003196 <__vector_81>:
    3196:	1f 92       	push	r1
    3198:	0f 92       	push	r0
    319a:	0f b6       	in	r0, 0x3f	; 63
    319c:	0f 92       	push	r0
    319e:	11 24       	eor	r1, r1
    31a0:	2f 93       	push	r18
    31a2:	3f 93       	push	r19
    31a4:	4f 93       	push	r20
    31a6:	5f 93       	push	r21
    31a8:	6f 93       	push	r22
    31aa:	7f 93       	push	r23
    31ac:	8f 93       	push	r24
    31ae:	9f 93       	push	r25
    31b0:	af 93       	push	r26
    31b2:	bf 93       	push	r27
    31b4:	ef 93       	push	r30
    31b6:	ff 93       	push	r31
    31b8:	e0 91 60 28 	lds	r30, 0x2860
    31bc:	f0 91 61 28 	lds	r31, 0x2861
    31c0:	30 97       	sbiw	r30, 0x00	; 0
    31c2:	09 f0       	breq	.+2      	; 0x31c6 <__vector_81+0x30>
    31c4:	09 95       	icall
    31c6:	ff 91       	pop	r31
    31c8:	ef 91       	pop	r30
    31ca:	bf 91       	pop	r27
    31cc:	af 91       	pop	r26
    31ce:	9f 91       	pop	r25
    31d0:	8f 91       	pop	r24
    31d2:	7f 91       	pop	r23
    31d4:	6f 91       	pop	r22
    31d6:	5f 91       	pop	r21
    31d8:	4f 91       	pop	r20
    31da:	3f 91       	pop	r19
    31dc:	2f 91       	pop	r18
    31de:	0f 90       	pop	r0
    31e0:	0f be       	out	0x3f, r0	; 63
    31e2:	0f 90       	pop	r0
    31e4:	1f 90       	pop	r1
    31e6:	18 95       	reti

000031e8 <__vector_82>:
    31e8:	1f 92       	push	r1
    31ea:	0f 92       	push	r0
    31ec:	0f b6       	in	r0, 0x3f	; 63
    31ee:	0f 92       	push	r0
    31f0:	11 24       	eor	r1, r1
    31f2:	2f 93       	push	r18
    31f4:	3f 93       	push	r19
    31f6:	4f 93       	push	r20
    31f8:	5f 93       	push	r21
    31fa:	6f 93       	push	r22
    31fc:	7f 93       	push	r23
    31fe:	8f 93       	push	r24
    3200:	9f 93       	push	r25
    3202:	af 93       	push	r26
    3204:	bf 93       	push	r27
    3206:	ef 93       	push	r30
    3208:	ff 93       	push	r31
    320a:	e0 91 62 28 	lds	r30, 0x2862
    320e:	f0 91 63 28 	lds	r31, 0x2863
    3212:	30 97       	sbiw	r30, 0x00	; 0
    3214:	09 f0       	breq	.+2      	; 0x3218 <__vector_82+0x30>
    3216:	09 95       	icall
    3218:	ff 91       	pop	r31
    321a:	ef 91       	pop	r30
    321c:	bf 91       	pop	r27
    321e:	af 91       	pop	r26
    3220:	9f 91       	pop	r25
    3222:	8f 91       	pop	r24
    3224:	7f 91       	pop	r23
    3226:	6f 91       	pop	r22
    3228:	5f 91       	pop	r21
    322a:	4f 91       	pop	r20
    322c:	3f 91       	pop	r19
    322e:	2f 91       	pop	r18
    3230:	0f 90       	pop	r0
    3232:	0f be       	out	0x3f, r0	; 63
    3234:	0f 90       	pop	r0
    3236:	1f 90       	pop	r1
    3238:	18 95       	reti

0000323a <__vector_83>:
    323a:	1f 92       	push	r1
    323c:	0f 92       	push	r0
    323e:	0f b6       	in	r0, 0x3f	; 63
    3240:	0f 92       	push	r0
    3242:	11 24       	eor	r1, r1
    3244:	2f 93       	push	r18
    3246:	3f 93       	push	r19
    3248:	4f 93       	push	r20
    324a:	5f 93       	push	r21
    324c:	6f 93       	push	r22
    324e:	7f 93       	push	r23
    3250:	8f 93       	push	r24
    3252:	9f 93       	push	r25
    3254:	af 93       	push	r26
    3256:	bf 93       	push	r27
    3258:	ef 93       	push	r30
    325a:	ff 93       	push	r31
    325c:	e0 91 64 28 	lds	r30, 0x2864
    3260:	f0 91 65 28 	lds	r31, 0x2865
    3264:	30 97       	sbiw	r30, 0x00	; 0
    3266:	09 f0       	breq	.+2      	; 0x326a <__vector_83+0x30>
    3268:	09 95       	icall
    326a:	ff 91       	pop	r31
    326c:	ef 91       	pop	r30
    326e:	bf 91       	pop	r27
    3270:	af 91       	pop	r26
    3272:	9f 91       	pop	r25
    3274:	8f 91       	pop	r24
    3276:	7f 91       	pop	r23
    3278:	6f 91       	pop	r22
    327a:	5f 91       	pop	r21
    327c:	4f 91       	pop	r20
    327e:	3f 91       	pop	r19
    3280:	2f 91       	pop	r18
    3282:	0f 90       	pop	r0
    3284:	0f be       	out	0x3f, r0	; 63
    3286:	0f 90       	pop	r0
    3288:	1f 90       	pop	r1
    328a:	18 95       	reti

0000328c <__vector_84>:
    328c:	1f 92       	push	r1
    328e:	0f 92       	push	r0
    3290:	0f b6       	in	r0, 0x3f	; 63
    3292:	0f 92       	push	r0
    3294:	11 24       	eor	r1, r1
    3296:	2f 93       	push	r18
    3298:	3f 93       	push	r19
    329a:	4f 93       	push	r20
    329c:	5f 93       	push	r21
    329e:	6f 93       	push	r22
    32a0:	7f 93       	push	r23
    32a2:	8f 93       	push	r24
    32a4:	9f 93       	push	r25
    32a6:	af 93       	push	r26
    32a8:	bf 93       	push	r27
    32aa:	ef 93       	push	r30
    32ac:	ff 93       	push	r31
    32ae:	e0 91 66 28 	lds	r30, 0x2866
    32b2:	f0 91 67 28 	lds	r31, 0x2867
    32b6:	30 97       	sbiw	r30, 0x00	; 0
    32b8:	09 f0       	breq	.+2      	; 0x32bc <__vector_84+0x30>
    32ba:	09 95       	icall
    32bc:	ff 91       	pop	r31
    32be:	ef 91       	pop	r30
    32c0:	bf 91       	pop	r27
    32c2:	af 91       	pop	r26
    32c4:	9f 91       	pop	r25
    32c6:	8f 91       	pop	r24
    32c8:	7f 91       	pop	r23
    32ca:	6f 91       	pop	r22
    32cc:	5f 91       	pop	r21
    32ce:	4f 91       	pop	r20
    32d0:	3f 91       	pop	r19
    32d2:	2f 91       	pop	r18
    32d4:	0f 90       	pop	r0
    32d6:	0f be       	out	0x3f, r0	; 63
    32d8:	0f 90       	pop	r0
    32da:	1f 90       	pop	r1
    32dc:	18 95       	reti

000032de <__vector_85>:
    32de:	1f 92       	push	r1
    32e0:	0f 92       	push	r0
    32e2:	0f b6       	in	r0, 0x3f	; 63
    32e4:	0f 92       	push	r0
    32e6:	11 24       	eor	r1, r1
    32e8:	2f 93       	push	r18
    32ea:	3f 93       	push	r19
    32ec:	4f 93       	push	r20
    32ee:	5f 93       	push	r21
    32f0:	6f 93       	push	r22
    32f2:	7f 93       	push	r23
    32f4:	8f 93       	push	r24
    32f6:	9f 93       	push	r25
    32f8:	af 93       	push	r26
    32fa:	bf 93       	push	r27
    32fc:	ef 93       	push	r30
    32fe:	ff 93       	push	r31
    3300:	e0 91 68 28 	lds	r30, 0x2868
    3304:	f0 91 69 28 	lds	r31, 0x2869
    3308:	30 97       	sbiw	r30, 0x00	; 0
    330a:	09 f0       	breq	.+2      	; 0x330e <__vector_85+0x30>
    330c:	09 95       	icall
    330e:	ff 91       	pop	r31
    3310:	ef 91       	pop	r30
    3312:	bf 91       	pop	r27
    3314:	af 91       	pop	r26
    3316:	9f 91       	pop	r25
    3318:	8f 91       	pop	r24
    331a:	7f 91       	pop	r23
    331c:	6f 91       	pop	r22
    331e:	5f 91       	pop	r21
    3320:	4f 91       	pop	r20
    3322:	3f 91       	pop	r19
    3324:	2f 91       	pop	r18
    3326:	0f 90       	pop	r0
    3328:	0f be       	out	0x3f, r0	; 63
    332a:	0f 90       	pop	r0
    332c:	1f 90       	pop	r1
    332e:	18 95       	reti

00003330 <__vector_86>:
    3330:	1f 92       	push	r1
    3332:	0f 92       	push	r0
    3334:	0f b6       	in	r0, 0x3f	; 63
    3336:	0f 92       	push	r0
    3338:	11 24       	eor	r1, r1
    333a:	2f 93       	push	r18
    333c:	3f 93       	push	r19
    333e:	4f 93       	push	r20
    3340:	5f 93       	push	r21
    3342:	6f 93       	push	r22
    3344:	7f 93       	push	r23
    3346:	8f 93       	push	r24
    3348:	9f 93       	push	r25
    334a:	af 93       	push	r26
    334c:	bf 93       	push	r27
    334e:	ef 93       	push	r30
    3350:	ff 93       	push	r31
    3352:	e0 91 6a 28 	lds	r30, 0x286A
    3356:	f0 91 6b 28 	lds	r31, 0x286B
    335a:	30 97       	sbiw	r30, 0x00	; 0
    335c:	09 f0       	breq	.+2      	; 0x3360 <__vector_86+0x30>
    335e:	09 95       	icall
    3360:	ff 91       	pop	r31
    3362:	ef 91       	pop	r30
    3364:	bf 91       	pop	r27
    3366:	af 91       	pop	r26
    3368:	9f 91       	pop	r25
    336a:	8f 91       	pop	r24
    336c:	7f 91       	pop	r23
    336e:	6f 91       	pop	r22
    3370:	5f 91       	pop	r21
    3372:	4f 91       	pop	r20
    3374:	3f 91       	pop	r19
    3376:	2f 91       	pop	r18
    3378:	0f 90       	pop	r0
    337a:	0f be       	out	0x3f, r0	; 63
    337c:	0f 90       	pop	r0
    337e:	1f 90       	pop	r1
    3380:	18 95       	reti

00003382 <__vector_47>:
    3382:	1f 92       	push	r1
    3384:	0f 92       	push	r0
    3386:	0f b6       	in	r0, 0x3f	; 63
    3388:	0f 92       	push	r0
    338a:	11 24       	eor	r1, r1
    338c:	2f 93       	push	r18
    338e:	3f 93       	push	r19
    3390:	4f 93       	push	r20
    3392:	5f 93       	push	r21
    3394:	6f 93       	push	r22
    3396:	7f 93       	push	r23
    3398:	8f 93       	push	r24
    339a:	9f 93       	push	r25
    339c:	af 93       	push	r26
    339e:	bf 93       	push	r27
    33a0:	ef 93       	push	r30
    33a2:	ff 93       	push	r31
    33a4:	e0 91 6c 28 	lds	r30, 0x286C
    33a8:	f0 91 6d 28 	lds	r31, 0x286D
    33ac:	30 97       	sbiw	r30, 0x00	; 0
    33ae:	09 f0       	breq	.+2      	; 0x33b2 <__vector_47+0x30>
    33b0:	09 95       	icall
    33b2:	ff 91       	pop	r31
    33b4:	ef 91       	pop	r30
    33b6:	bf 91       	pop	r27
    33b8:	af 91       	pop	r26
    33ba:	9f 91       	pop	r25
    33bc:	8f 91       	pop	r24
    33be:	7f 91       	pop	r23
    33c0:	6f 91       	pop	r22
    33c2:	5f 91       	pop	r21
    33c4:	4f 91       	pop	r20
    33c6:	3f 91       	pop	r19
    33c8:	2f 91       	pop	r18
    33ca:	0f 90       	pop	r0
    33cc:	0f be       	out	0x3f, r0	; 63
    33ce:	0f 90       	pop	r0
    33d0:	1f 90       	pop	r1
    33d2:	18 95       	reti

000033d4 <__vector_48>:
    33d4:	1f 92       	push	r1
    33d6:	0f 92       	push	r0
    33d8:	0f b6       	in	r0, 0x3f	; 63
    33da:	0f 92       	push	r0
    33dc:	11 24       	eor	r1, r1
    33de:	2f 93       	push	r18
    33e0:	3f 93       	push	r19
    33e2:	4f 93       	push	r20
    33e4:	5f 93       	push	r21
    33e6:	6f 93       	push	r22
    33e8:	7f 93       	push	r23
    33ea:	8f 93       	push	r24
    33ec:	9f 93       	push	r25
    33ee:	af 93       	push	r26
    33f0:	bf 93       	push	r27
    33f2:	ef 93       	push	r30
    33f4:	ff 93       	push	r31
    33f6:	e0 91 6e 28 	lds	r30, 0x286E
    33fa:	f0 91 6f 28 	lds	r31, 0x286F
    33fe:	30 97       	sbiw	r30, 0x00	; 0
    3400:	09 f0       	breq	.+2      	; 0x3404 <__vector_48+0x30>
    3402:	09 95       	icall
    3404:	ff 91       	pop	r31
    3406:	ef 91       	pop	r30
    3408:	bf 91       	pop	r27
    340a:	af 91       	pop	r26
    340c:	9f 91       	pop	r25
    340e:	8f 91       	pop	r24
    3410:	7f 91       	pop	r23
    3412:	6f 91       	pop	r22
    3414:	5f 91       	pop	r21
    3416:	4f 91       	pop	r20
    3418:	3f 91       	pop	r19
    341a:	2f 91       	pop	r18
    341c:	0f 90       	pop	r0
    341e:	0f be       	out	0x3f, r0	; 63
    3420:	0f 90       	pop	r0
    3422:	1f 90       	pop	r1
    3424:	18 95       	reti

00003426 <__vector_49>:
    3426:	1f 92       	push	r1
    3428:	0f 92       	push	r0
    342a:	0f b6       	in	r0, 0x3f	; 63
    342c:	0f 92       	push	r0
    342e:	11 24       	eor	r1, r1
    3430:	2f 93       	push	r18
    3432:	3f 93       	push	r19
    3434:	4f 93       	push	r20
    3436:	5f 93       	push	r21
    3438:	6f 93       	push	r22
    343a:	7f 93       	push	r23
    343c:	8f 93       	push	r24
    343e:	9f 93       	push	r25
    3440:	af 93       	push	r26
    3442:	bf 93       	push	r27
    3444:	ef 93       	push	r30
    3446:	ff 93       	push	r31
    3448:	e0 91 70 28 	lds	r30, 0x2870
    344c:	f0 91 71 28 	lds	r31, 0x2871
    3450:	30 97       	sbiw	r30, 0x00	; 0
    3452:	09 f0       	breq	.+2      	; 0x3456 <__vector_49+0x30>
    3454:	09 95       	icall
    3456:	ff 91       	pop	r31
    3458:	ef 91       	pop	r30
    345a:	bf 91       	pop	r27
    345c:	af 91       	pop	r26
    345e:	9f 91       	pop	r25
    3460:	8f 91       	pop	r24
    3462:	7f 91       	pop	r23
    3464:	6f 91       	pop	r22
    3466:	5f 91       	pop	r21
    3468:	4f 91       	pop	r20
    346a:	3f 91       	pop	r19
    346c:	2f 91       	pop	r18
    346e:	0f 90       	pop	r0
    3470:	0f be       	out	0x3f, r0	; 63
    3472:	0f 90       	pop	r0
    3474:	1f 90       	pop	r1
    3476:	18 95       	reti

00003478 <__vector_50>:
    3478:	1f 92       	push	r1
    347a:	0f 92       	push	r0
    347c:	0f b6       	in	r0, 0x3f	; 63
    347e:	0f 92       	push	r0
    3480:	11 24       	eor	r1, r1
    3482:	2f 93       	push	r18
    3484:	3f 93       	push	r19
    3486:	4f 93       	push	r20
    3488:	5f 93       	push	r21
    348a:	6f 93       	push	r22
    348c:	7f 93       	push	r23
    348e:	8f 93       	push	r24
    3490:	9f 93       	push	r25
    3492:	af 93       	push	r26
    3494:	bf 93       	push	r27
    3496:	ef 93       	push	r30
    3498:	ff 93       	push	r31
    349a:	e0 91 72 28 	lds	r30, 0x2872
    349e:	f0 91 73 28 	lds	r31, 0x2873
    34a2:	30 97       	sbiw	r30, 0x00	; 0
    34a4:	09 f0       	breq	.+2      	; 0x34a8 <__vector_50+0x30>
    34a6:	09 95       	icall
    34a8:	ff 91       	pop	r31
    34aa:	ef 91       	pop	r30
    34ac:	bf 91       	pop	r27
    34ae:	af 91       	pop	r26
    34b0:	9f 91       	pop	r25
    34b2:	8f 91       	pop	r24
    34b4:	7f 91       	pop	r23
    34b6:	6f 91       	pop	r22
    34b8:	5f 91       	pop	r21
    34ba:	4f 91       	pop	r20
    34bc:	3f 91       	pop	r19
    34be:	2f 91       	pop	r18
    34c0:	0f 90       	pop	r0
    34c2:	0f be       	out	0x3f, r0	; 63
    34c4:	0f 90       	pop	r0
    34c6:	1f 90       	pop	r1
    34c8:	18 95       	reti

000034ca <__vector_51>:
    34ca:	1f 92       	push	r1
    34cc:	0f 92       	push	r0
    34ce:	0f b6       	in	r0, 0x3f	; 63
    34d0:	0f 92       	push	r0
    34d2:	11 24       	eor	r1, r1
    34d4:	2f 93       	push	r18
    34d6:	3f 93       	push	r19
    34d8:	4f 93       	push	r20
    34da:	5f 93       	push	r21
    34dc:	6f 93       	push	r22
    34de:	7f 93       	push	r23
    34e0:	8f 93       	push	r24
    34e2:	9f 93       	push	r25
    34e4:	af 93       	push	r26
    34e6:	bf 93       	push	r27
    34e8:	ef 93       	push	r30
    34ea:	ff 93       	push	r31
    34ec:	e0 91 74 28 	lds	r30, 0x2874
    34f0:	f0 91 75 28 	lds	r31, 0x2875
    34f4:	30 97       	sbiw	r30, 0x00	; 0
    34f6:	09 f0       	breq	.+2      	; 0x34fa <__vector_51+0x30>
    34f8:	09 95       	icall
    34fa:	ff 91       	pop	r31
    34fc:	ef 91       	pop	r30
    34fe:	bf 91       	pop	r27
    3500:	af 91       	pop	r26
    3502:	9f 91       	pop	r25
    3504:	8f 91       	pop	r24
    3506:	7f 91       	pop	r23
    3508:	6f 91       	pop	r22
    350a:	5f 91       	pop	r21
    350c:	4f 91       	pop	r20
    350e:	3f 91       	pop	r19
    3510:	2f 91       	pop	r18
    3512:	0f 90       	pop	r0
    3514:	0f be       	out	0x3f, r0	; 63
    3516:	0f 90       	pop	r0
    3518:	1f 90       	pop	r1
    351a:	18 95       	reti

0000351c <__vector_52>:
    351c:	1f 92       	push	r1
    351e:	0f 92       	push	r0
    3520:	0f b6       	in	r0, 0x3f	; 63
    3522:	0f 92       	push	r0
    3524:	11 24       	eor	r1, r1
    3526:	2f 93       	push	r18
    3528:	3f 93       	push	r19
    352a:	4f 93       	push	r20
    352c:	5f 93       	push	r21
    352e:	6f 93       	push	r22
    3530:	7f 93       	push	r23
    3532:	8f 93       	push	r24
    3534:	9f 93       	push	r25
    3536:	af 93       	push	r26
    3538:	bf 93       	push	r27
    353a:	ef 93       	push	r30
    353c:	ff 93       	push	r31
    353e:	e0 91 76 28 	lds	r30, 0x2876
    3542:	f0 91 77 28 	lds	r31, 0x2877
    3546:	30 97       	sbiw	r30, 0x00	; 0
    3548:	09 f0       	breq	.+2      	; 0x354c <__vector_52+0x30>
    354a:	09 95       	icall
    354c:	ff 91       	pop	r31
    354e:	ef 91       	pop	r30
    3550:	bf 91       	pop	r27
    3552:	af 91       	pop	r26
    3554:	9f 91       	pop	r25
    3556:	8f 91       	pop	r24
    3558:	7f 91       	pop	r23
    355a:	6f 91       	pop	r22
    355c:	5f 91       	pop	r21
    355e:	4f 91       	pop	r20
    3560:	3f 91       	pop	r19
    3562:	2f 91       	pop	r18
    3564:	0f 90       	pop	r0
    3566:	0f be       	out	0x3f, r0	; 63
    3568:	0f 90       	pop	r0
    356a:	1f 90       	pop	r1
    356c:	18 95       	reti

0000356e <tc_enable>:
    356e:	cf 93       	push	r28
    3570:	cf b7       	in	r28, 0x3f	; 63
    3572:	f8 94       	cli
    3574:	81 15       	cp	r24, r1
    3576:	28 e0       	ldi	r18, 0x08	; 8
    3578:	92 07       	cpc	r25, r18
    357a:	49 f4       	brne	.+18     	; 0x358e <tc_enable+0x20>
    357c:	61 e0       	ldi	r22, 0x01	; 1
    357e:	83 e0       	ldi	r24, 0x03	; 3
    3580:	90 e0       	ldi	r25, 0x00	; 0
    3582:	af d9       	rcall	.-3234   	; 0x28e2 <sysclk_enable_module>
    3584:	64 e0       	ldi	r22, 0x04	; 4
    3586:	83 e0       	ldi	r24, 0x03	; 3
    3588:	90 e0       	ldi	r25, 0x00	; 0
    358a:	ab d9       	rcall	.-3242   	; 0x28e2 <sysclk_enable_module>
    358c:	35 c0       	rjmp	.+106    	; 0x35f8 <tc_enable+0x8a>
    358e:	80 34       	cpi	r24, 0x40	; 64
    3590:	28 e0       	ldi	r18, 0x08	; 8
    3592:	92 07       	cpc	r25, r18
    3594:	49 f4       	brne	.+18     	; 0x35a8 <tc_enable+0x3a>
    3596:	62 e0       	ldi	r22, 0x02	; 2
    3598:	83 e0       	ldi	r24, 0x03	; 3
    359a:	90 e0       	ldi	r25, 0x00	; 0
    359c:	a2 d9       	rcall	.-3260   	; 0x28e2 <sysclk_enable_module>
    359e:	64 e0       	ldi	r22, 0x04	; 4
    35a0:	83 e0       	ldi	r24, 0x03	; 3
    35a2:	90 e0       	ldi	r25, 0x00	; 0
    35a4:	9e d9       	rcall	.-3268   	; 0x28e2 <sysclk_enable_module>
    35a6:	28 c0       	rjmp	.+80     	; 0x35f8 <tc_enable+0x8a>
    35a8:	81 15       	cp	r24, r1
    35aa:	29 e0       	ldi	r18, 0x09	; 9
    35ac:	92 07       	cpc	r25, r18
    35ae:	49 f4       	brne	.+18     	; 0x35c2 <tc_enable+0x54>
    35b0:	61 e0       	ldi	r22, 0x01	; 1
    35b2:	84 e0       	ldi	r24, 0x04	; 4
    35b4:	90 e0       	ldi	r25, 0x00	; 0
    35b6:	95 d9       	rcall	.-3286   	; 0x28e2 <sysclk_enable_module>
    35b8:	64 e0       	ldi	r22, 0x04	; 4
    35ba:	84 e0       	ldi	r24, 0x04	; 4
    35bc:	90 e0       	ldi	r25, 0x00	; 0
    35be:	91 d9       	rcall	.-3294   	; 0x28e2 <sysclk_enable_module>
    35c0:	1b c0       	rjmp	.+54     	; 0x35f8 <tc_enable+0x8a>
    35c2:	80 34       	cpi	r24, 0x40	; 64
    35c4:	29 e0       	ldi	r18, 0x09	; 9
    35c6:	92 07       	cpc	r25, r18
    35c8:	49 f4       	brne	.+18     	; 0x35dc <tc_enable+0x6e>
    35ca:	62 e0       	ldi	r22, 0x02	; 2
    35cc:	84 e0       	ldi	r24, 0x04	; 4
    35ce:	90 e0       	ldi	r25, 0x00	; 0
    35d0:	88 d9       	rcall	.-3312   	; 0x28e2 <sysclk_enable_module>
    35d2:	64 e0       	ldi	r22, 0x04	; 4
    35d4:	84 e0       	ldi	r24, 0x04	; 4
    35d6:	90 e0       	ldi	r25, 0x00	; 0
    35d8:	84 d9       	rcall	.-3320   	; 0x28e2 <sysclk_enable_module>
    35da:	0e c0       	rjmp	.+28     	; 0x35f8 <tc_enable+0x8a>
    35dc:	81 15       	cp	r24, r1
    35de:	9a 40       	sbci	r25, 0x0A	; 10
    35e0:	49 f4       	brne	.+18     	; 0x35f4 <tc_enable+0x86>
    35e2:	61 e0       	ldi	r22, 0x01	; 1
    35e4:	85 e0       	ldi	r24, 0x05	; 5
    35e6:	90 e0       	ldi	r25, 0x00	; 0
    35e8:	7c d9       	rcall	.-3336   	; 0x28e2 <sysclk_enable_module>
    35ea:	64 e0       	ldi	r22, 0x04	; 4
    35ec:	85 e0       	ldi	r24, 0x05	; 5
    35ee:	90 e0       	ldi	r25, 0x00	; 0
    35f0:	78 d9       	rcall	.-3344   	; 0x28e2 <sysclk_enable_module>
    35f2:	02 c0       	rjmp	.+4      	; 0x35f8 <tc_enable+0x8a>
    35f4:	cf bf       	out	0x3f, r28	; 63
    35f6:	09 c0       	rjmp	.+18     	; 0x360a <tc_enable+0x9c>
    35f8:	8f b7       	in	r24, 0x3f	; 63
    35fa:	f8 94       	cli
    35fc:	e6 e8       	ldi	r30, 0x86	; 134
    35fe:	fd e2       	ldi	r31, 0x2D	; 45
    3600:	90 81       	ld	r25, Z
    3602:	9f 5f       	subi	r25, 0xFF	; 255
    3604:	90 83       	st	Z, r25
    3606:	8f bf       	out	0x3f, r24	; 63
    3608:	cf bf       	out	0x3f, r28	; 63
    360a:	cf 91       	pop	r28
    360c:	08 95       	ret

0000360e <tc_set_overflow_interrupt_callback>:

void tc_set_overflow_interrupt_callback(volatile void *tc,
		tc_callback_t callback)
{
#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    360e:	81 15       	cp	r24, r1
    3610:	28 e0       	ldi	r18, 0x08	; 8
    3612:	92 07       	cpc	r25, r18
    3614:	29 f4       	brne	.+10     	; 0x3620 <tc_set_overflow_interrupt_callback+0x12>
		tc_tcc0_ovf_callback = callback;
    3616:	60 93 44 28 	sts	0x2844, r22
    361a:	70 93 45 28 	sts	0x2845, r23
    361e:	08 95       	ret
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    3620:	80 34       	cpi	r24, 0x40	; 64
    3622:	28 e0       	ldi	r18, 0x08	; 8
    3624:	92 07       	cpc	r25, r18
    3626:	29 f4       	brne	.+10     	; 0x3632 <tc_set_overflow_interrupt_callback+0x24>
		tc_tcc1_ovf_callback = callback;
    3628:	60 93 50 28 	sts	0x2850, r22
    362c:	70 93 51 28 	sts	0x2851, r23
    3630:	08 95       	ret
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    3632:	81 15       	cp	r24, r1
    3634:	29 e0       	ldi	r18, 0x09	; 9
    3636:	92 07       	cpc	r25, r18
    3638:	29 f4       	brne	.+10     	; 0x3644 <tc_set_overflow_interrupt_callback+0x36>
		tc_tcd0_ovf_callback = callback;
    363a:	60 93 58 28 	sts	0x2858, r22
    363e:	70 93 59 28 	sts	0x2859, r23
    3642:	08 95       	ret
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
    3644:	80 34       	cpi	r24, 0x40	; 64
    3646:	29 e0       	ldi	r18, 0x09	; 9
    3648:	92 07       	cpc	r25, r18
    364a:	29 f4       	brne	.+10     	; 0x3656 <tc_set_overflow_interrupt_callback+0x48>
		tc_tcd1_ovf_callback = callback;
    364c:	60 93 64 28 	sts	0x2864, r22
    3650:	70 93 65 28 	sts	0x2865, r23
    3654:	08 95       	ret
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    3656:	81 15       	cp	r24, r1
    3658:	9a 40       	sbci	r25, 0x0A	; 10
    365a:	21 f4       	brne	.+8      	; 0x3664 <tc_set_overflow_interrupt_callback+0x56>
		tc_tce0_ovf_callback = callback;
    365c:	60 93 6c 28 	sts	0x286C, r22
    3660:	70 93 6d 28 	sts	0x286D, r23
    3664:	08 95       	ret

00003666 <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
    3666:	cf 93       	push	r28
    3668:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
    366a:	e0 91 78 28 	lds	r30, 0x2878
    366e:	f0 91 79 28 	lds	r31, 0x2879
    3672:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
    3674:	83 ff       	sbrs	r24, 3
    3676:	0b c0       	rjmp	.+22     	; 0x368e <twim_interrupt_handler+0x28>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
    3678:	88 60       	ori	r24, 0x08	; 8
    367a:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
    367c:	83 e0       	ldi	r24, 0x03	; 3
    367e:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
    3680:	86 ef       	ldi	r24, 0xF6	; 246
    3682:	9f ef       	ldi	r25, 0xFF	; 255
    3684:	80 93 82 28 	sts	0x2882, r24
    3688:	90 93 83 28 	sts	0x2883, r25
    368c:	8e c0       	rjmp	.+284    	; 0x37aa <twim_interrupt_handler+0x144>
 *
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
    368e:	98 2f       	mov	r25, r24
    3690:	94 71       	andi	r25, 0x14	; 20

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
		transfer.status = ERR_BUSY;

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    3692:	49 f0       	breq	.+18     	; 0x36a6 <twim_interrupt_handler+0x40>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    3694:	83 e0       	ldi	r24, 0x03	; 3
    3696:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
    3698:	8f ef       	ldi	r24, 0xFF	; 255
    369a:	9f ef       	ldi	r25, 0xFF	; 255
    369c:	80 93 82 28 	sts	0x2882, r24
    36a0:	90 93 83 28 	sts	0x2883, r25
    36a4:	82 c0       	rjmp	.+260    	; 0x37aa <twim_interrupt_handler+0x144>

	} else if (master_status & TWI_MASTER_WIF_bm) {
    36a6:	86 ff       	sbrs	r24, 6
    36a8:	42 c0       	rjmp	.+132    	; 0x372e <twim_interrupt_handler+0xc8>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    36aa:	a0 91 7a 28 	lds	r26, 0x287A
    36ae:	b0 91 7b 28 	lds	r27, 0x287B

	if (transfer.addr_count < pkg->addr_length) {
    36b2:	80 91 7c 28 	lds	r24, 0x287C
    36b6:	90 91 7d 28 	lds	r25, 0x287D
    36ba:	14 96       	adiw	r26, 0x04	; 4
    36bc:	2d 91       	ld	r18, X+
    36be:	3c 91       	ld	r19, X
    36c0:	15 97       	sbiw	r26, 0x05	; 5
    36c2:	82 17       	cp	r24, r18
    36c4:	93 07       	cpc	r25, r19
    36c6:	5c f4       	brge	.+22     	; 0x36de <twim_interrupt_handler+0x78>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
    36c8:	a8 0f       	add	r26, r24
    36ca:	b9 1f       	adc	r27, r25
    36cc:	11 96       	adiw	r26, 0x01	; 1
    36ce:	2c 91       	ld	r18, X
    36d0:	27 83       	std	Z+7, r18	; 0x07
    36d2:	01 96       	adiw	r24, 0x01	; 1
    36d4:	80 93 7c 28 	sts	0x287C, r24
    36d8:	90 93 7d 28 	sts	0x287D, r25
    36dc:	66 c0       	rjmp	.+204    	; 0x37aa <twim_interrupt_handler+0x144>

	} else if (transfer.data_count < pkg->length) {
    36de:	80 91 7e 28 	lds	r24, 0x287E
    36e2:	90 91 7f 28 	lds	r25, 0x287F
    36e6:	18 96       	adiw	r26, 0x08	; 8
    36e8:	2d 91       	ld	r18, X+
    36ea:	3c 91       	ld	r19, X
    36ec:	19 97       	sbiw	r26, 0x09	; 9
    36ee:	82 17       	cp	r24, r18
    36f0:	93 07       	cpc	r25, r19
    36f2:	b0 f4       	brcc	.+44     	; 0x3720 <twim_interrupt_handler+0xba>

		if (transfer.read) {
    36f4:	20 91 80 28 	lds	r18, 0x2880
    36f8:	22 23       	and	r18, r18
    36fa:	21 f0       	breq	.+8      	; 0x3704 <twim_interrupt_handler+0x9e>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
    36fc:	86 81       	ldd	r24, Z+6	; 0x06
    36fe:	81 60       	ori	r24, 0x01	; 1
    3700:	86 83       	std	Z+6, r24	; 0x06
    3702:	53 c0       	rjmp	.+166    	; 0x37aa <twim_interrupt_handler+0x144>

		} else {
			const uint8_t * const data = pkg->buffer;
			bus->MASTER.DATA = data[transfer.data_count++];
    3704:	16 96       	adiw	r26, 0x06	; 6
    3706:	0d 90       	ld	r0, X+
    3708:	bc 91       	ld	r27, X
    370a:	a0 2d       	mov	r26, r0
    370c:	a8 0f       	add	r26, r24
    370e:	b9 1f       	adc	r27, r25
    3710:	2c 91       	ld	r18, X
    3712:	27 83       	std	Z+7, r18	; 0x07
    3714:	01 96       	adiw	r24, 0x01	; 1
    3716:	80 93 7e 28 	sts	0x287E, r24
    371a:	90 93 7f 28 	sts	0x287F, r25
    371e:	45 c0       	rjmp	.+138    	; 0x37aa <twim_interrupt_handler+0x144>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    3720:	83 e0       	ldi	r24, 0x03	; 3
    3722:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
    3724:	10 92 82 28 	sts	0x2882, r1
    3728:	10 92 83 28 	sts	0x2883, r1
    372c:	3e c0       	rjmp	.+124    	; 0x37aa <twim_interrupt_handler+0x144>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
    372e:	88 23       	and	r24, r24
    3730:	b4 f5       	brge	.+108    	; 0x379e <twim_interrupt_handler+0x138>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    3732:	a0 91 7a 28 	lds	r26, 0x287A
    3736:	b0 91 7b 28 	lds	r27, 0x287B

	if (transfer.data_count < pkg->length) {
    373a:	80 91 7e 28 	lds	r24, 0x287E
    373e:	90 91 7f 28 	lds	r25, 0x287F
    3742:	18 96       	adiw	r26, 0x08	; 8
    3744:	2d 91       	ld	r18, X+
    3746:	3c 91       	ld	r19, X
    3748:	19 97       	sbiw	r26, 0x09	; 9
    374a:	82 17       	cp	r24, r18
    374c:	93 07       	cpc	r25, r19
    374e:	f0 f4       	brcc	.+60     	; 0x378c <twim_interrupt_handler+0x126>

		uint8_t * const data = pkg->buffer;
		data[transfer.data_count++] = bus->MASTER.DATA;
    3750:	27 81       	ldd	r18, Z+7	; 0x07
    3752:	16 96       	adiw	r26, 0x06	; 6
    3754:	cd 91       	ld	r28, X+
    3756:	dc 91       	ld	r29, X
    3758:	17 97       	sbiw	r26, 0x07	; 7
    375a:	c8 0f       	add	r28, r24
    375c:	d9 1f       	adc	r29, r25
    375e:	28 83       	st	Y, r18
    3760:	01 96       	adiw	r24, 0x01	; 1
    3762:	80 93 7e 28 	sts	0x287E, r24
    3766:	90 93 7f 28 	sts	0x287F, r25

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
    376a:	18 96       	adiw	r26, 0x08	; 8
    376c:	2d 91       	ld	r18, X+
    376e:	3c 91       	ld	r19, X
    3770:	19 97       	sbiw	r26, 0x09	; 9
    3772:	82 17       	cp	r24, r18
    3774:	93 07       	cpc	r25, r19
    3776:	18 f4       	brcc	.+6      	; 0x377e <twim_interrupt_handler+0x118>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    3778:	82 e0       	ldi	r24, 0x02	; 2
    377a:	83 83       	std	Z+3, r24	; 0x03
    377c:	16 c0       	rjmp	.+44     	; 0x37aa <twim_interrupt_handler+0x144>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    377e:	87 e0       	ldi	r24, 0x07	; 7
    3780:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
    3782:	10 92 82 28 	sts	0x2882, r1
    3786:	10 92 83 28 	sts	0x2883, r1
    378a:	0f c0       	rjmp	.+30     	; 0x37aa <twim_interrupt_handler+0x144>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    378c:	83 e0       	ldi	r24, 0x03	; 3
    378e:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
    3790:	89 ef       	ldi	r24, 0xF9	; 249
    3792:	9f ef       	ldi	r25, 0xFF	; 255
    3794:	80 93 82 28 	sts	0x2882, r24
    3798:	90 93 83 28 	sts	0x2883, r25
    379c:	06 c0       	rjmp	.+12     	; 0x37aa <twim_interrupt_handler+0x144>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
    379e:	8b ef       	ldi	r24, 0xFB	; 251
    37a0:	9f ef       	ldi	r25, 0xFF	; 255
    37a2:	80 93 82 28 	sts	0x2882, r24
    37a6:	90 93 83 28 	sts	0x2883, r25
	}
}
    37aa:	df 91       	pop	r29
    37ac:	cf 91       	pop	r28
    37ae:	08 95       	ret

000037b0 <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
    37b0:	1f 92       	push	r1
    37b2:	0f 92       	push	r0
    37b4:	0f b6       	in	r0, 0x3f	; 63
    37b6:	0f 92       	push	r0
    37b8:	11 24       	eor	r1, r1
    37ba:	2f 93       	push	r18
    37bc:	3f 93       	push	r19
    37be:	4f 93       	push	r20
    37c0:	5f 93       	push	r21
    37c2:	6f 93       	push	r22
    37c4:	7f 93       	push	r23
    37c6:	8f 93       	push	r24
    37c8:	9f 93       	push	r25
    37ca:	af 93       	push	r26
    37cc:	bf 93       	push	r27
    37ce:	ef 93       	push	r30
    37d0:	ff 93       	push	r31
    37d2:	49 df       	rcall	.-366    	; 0x3666 <twim_interrupt_handler>
    37d4:	ff 91       	pop	r31
    37d6:	ef 91       	pop	r30
    37d8:	bf 91       	pop	r27
    37da:	af 91       	pop	r26
    37dc:	9f 91       	pop	r25
    37de:	8f 91       	pop	r24
    37e0:	7f 91       	pop	r23
    37e2:	6f 91       	pop	r22
    37e4:	5f 91       	pop	r21
    37e6:	4f 91       	pop	r20
    37e8:	3f 91       	pop	r19
    37ea:	2f 91       	pop	r18
    37ec:	0f 90       	pop	r0
    37ee:	0f be       	out	0x3f, r0	; 63
    37f0:	0f 90       	pop	r0
    37f2:	1f 90       	pop	r1
    37f4:	18 95       	reti

000037f6 <__vector_46>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
    37f6:	1f 92       	push	r1
    37f8:	0f 92       	push	r0
    37fa:	0f b6       	in	r0, 0x3f	; 63
    37fc:	0f 92       	push	r0
    37fe:	11 24       	eor	r1, r1
    3800:	2f 93       	push	r18
    3802:	3f 93       	push	r19
    3804:	4f 93       	push	r20
    3806:	5f 93       	push	r21
    3808:	6f 93       	push	r22
    380a:	7f 93       	push	r23
    380c:	8f 93       	push	r24
    380e:	9f 93       	push	r25
    3810:	af 93       	push	r26
    3812:	bf 93       	push	r27
    3814:	ef 93       	push	r30
    3816:	ff 93       	push	r31
    3818:	26 df       	rcall	.-436    	; 0x3666 <twim_interrupt_handler>
    381a:	ff 91       	pop	r31
    381c:	ef 91       	pop	r30
    381e:	bf 91       	pop	r27
    3820:	af 91       	pop	r26
    3822:	9f 91       	pop	r25
    3824:	8f 91       	pop	r24
    3826:	7f 91       	pop	r23
    3828:	6f 91       	pop	r22
    382a:	5f 91       	pop	r21
    382c:	4f 91       	pop	r20
    382e:	3f 91       	pop	r19
    3830:	2f 91       	pop	r18
    3832:	0f 90       	pop	r0
    3834:	0f be       	out	0x3f, r0	; 63
    3836:	0f 90       	pop	r0
    3838:	1f 90       	pop	r1
    383a:	18 95       	reti

0000383c <twi_master_init>:
 *                  (see \ref twi_options_t)
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arguments in \c opt.
 */
status_code_t twi_master_init(TWI_t *twi, const twi_options_t *opt)
{
    383c:	fc 01       	movw	r30, r24
	uint8_t const ctrla = CONF_TWIM_INTLVL | TWI_MASTER_RIEN_bm |
		TWI_MASTER_WIEN_bm | TWI_MASTER_ENABLE_bm;

	twi->MASTER.BAUD   = opt->speed_reg;
    383e:	db 01       	movw	r26, r22
    3840:	14 96       	adiw	r26, 0x04	; 4
    3842:	8c 91       	ld	r24, X
    3844:	85 83       	std	Z+5, r24	; 0x05
	twi->MASTER.CTRLA  = ctrla;
    3846:	88 eb       	ldi	r24, 0xB8	; 184
    3848:	81 83       	std	Z+1, r24	; 0x01
	twi->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
    384a:	81 e0       	ldi	r24, 0x01	; 1
    384c:	84 83       	std	Z+4, r24	; 0x04

	transfer.locked    = false;
    384e:	10 92 81 28 	sts	0x2881, r1
	transfer.status    = STATUS_OK;
    3852:	10 92 82 28 	sts	0x2882, r1
    3856:	10 92 83 28 	sts	0x2883, r1

	/* Enable configured PMIC interrupt level. */

	PMIC.CTRL |= CONF_PMIC_INTLVL;
    385a:	e0 ea       	ldi	r30, 0xA0	; 160
    385c:	f0 e0       	ldi	r31, 0x00	; 0
    385e:	82 81       	ldd	r24, Z+2	; 0x02
    3860:	82 60       	ori	r24, 0x02	; 2
    3862:	82 83       	std	Z+2, r24	; 0x02

	cpu_irq_enable();
    3864:	78 94       	sei

	return STATUS_OK;
}
    3866:	80 e0       	ldi	r24, 0x00	; 0
    3868:	90 e0       	ldi	r25, 0x00	; 0
    386a:	08 95       	ret

0000386c <twi_master_transfer>:
status_code_t twi_master_transfer(TWI_t *twi,
		const twi_package_t *package, bool read)
{
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
    386c:	00 97       	sbiw	r24, 0x00	; 0
    386e:	09 f4       	brne	.+2      	; 0x3872 <twi_master_transfer+0x6>
    3870:	59 c0       	rjmp	.+178    	; 0x3924 <twi_master_transfer+0xb8>
    3872:	61 15       	cp	r22, r1
    3874:	71 05       	cpc	r23, r1
    3876:	09 f4       	brne	.+2      	; 0x387a <twi_master_transfer+0xe>
    3878:	58 c0       	rjmp	.+176    	; 0x392a <twi_master_transfer+0xbe>
		return ERR_INVALID_ARG;
	}

	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);
    387a:	fb 01       	movw	r30, r22
    387c:	32 85       	ldd	r19, Z+10	; 0x0a
 *
 * \return STATUS_OK if the bus is acquired, else ERR_BUSY.
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {
    387e:	20 91 81 28 	lds	r18, 0x2881
    3882:	02 c0       	rjmp	.+4      	; 0x3888 <twi_master_transfer+0x1c>

		if (no_wait) { return ERR_BUSY; }
    3884:	31 11       	cpse	r19, r1
    3886:	54 c0       	rjmp	.+168    	; 0x3930 <twi_master_transfer+0xc4>
 *
 * \return STATUS_OK if the bus is acquired, else ERR_BUSY.
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {
    3888:	21 11       	cpse	r18, r1
    388a:	fc cf       	rjmp	.-8      	; 0x3884 <twi_master_transfer+0x18>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    388c:	5f b7       	in	r21, 0x3f	; 63
	cpu_irq_disable();
    388e:	f8 94       	cli
		if (no_wait) { return ERR_BUSY; }
	}

	irqflags_t const flags = cpu_irq_save ();

	transfer.locked = true;
    3890:	21 e0       	ldi	r18, 0x01	; 1
    3892:	20 93 81 28 	sts	0x2881, r18
	transfer.status = OPERATION_IN_PROGRESS;
    3896:	20 e8       	ldi	r18, 0x80	; 128
    3898:	3f ef       	ldi	r19, 0xFF	; 255
    389a:	20 93 82 28 	sts	0x2882, r18
    389e:	30 93 83 28 	sts	0x2883, r19
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    38a2:	5f bf       	out	0x3f, r21	; 63
	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);

	if (STATUS_OK == status) {
		transfer.bus         = (TWI_t *) twi;
    38a4:	80 93 78 28 	sts	0x2878, r24
    38a8:	90 93 79 28 	sts	0x2879, r25
		transfer.pkg         = (twi_package_t *) package;
    38ac:	60 93 7a 28 	sts	0x287A, r22
    38b0:	70 93 7b 28 	sts	0x287B, r23
		transfer.addr_count  = 0;
    38b4:	10 92 7c 28 	sts	0x287C, r1
    38b8:	10 92 7d 28 	sts	0x287D, r1
		transfer.data_count  = 0;
    38bc:	10 92 7e 28 	sts	0x287E, r1
    38c0:	10 92 7f 28 	sts	0x287F, r1
		transfer.read        = read;
    38c4:	40 93 80 28 	sts	0x2880, r20

		uint8_t const chip = (package->chip) << 1;
    38c8:	fb 01       	movw	r30, r22
    38ca:	50 81       	ld	r21, Z
    38cc:	55 0f       	add	r21, r21

		if (package->addr_length || (false == read)) {
    38ce:	24 81       	ldd	r18, Z+4	; 0x04
    38d0:	35 81       	ldd	r19, Z+5	; 0x05
    38d2:	23 2b       	or	r18, r19
    38d4:	11 f4       	brne	.+4      	; 0x38da <twi_master_transfer+0x6e>
    38d6:	41 11       	cpse	r20, r1
    38d8:	03 c0       	rjmp	.+6      	; 0x38e0 <twi_master_transfer+0x74>
			transfer.bus->MASTER.ADDR = chip;
    38da:	fc 01       	movw	r30, r24
    38dc:	56 83       	std	Z+6, r21	; 0x06
    38de:	03 c0       	rjmp	.+6      	; 0x38e6 <twi_master_transfer+0x7a>
		} else if (read) {
			transfer.bus->MASTER.ADDR = chip | 0x01;
    38e0:	51 60       	ori	r21, 0x01	; 1
    38e2:	fc 01       	movw	r30, r24
    38e4:	56 83       	std	Z+6, r21	; 0x06
{
	/* First wait for the driver event handler to indicate something
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);
    38e6:	e2 e8       	ldi	r30, 0x82	; 130
    38e8:	f8 e2       	ldi	r31, 0x28	; 40
    38ea:	80 81       	ld	r24, Z
    38ec:	91 81       	ldd	r25, Z+1	; 0x01
    38ee:	80 38       	cpi	r24, 0x80	; 128
    38f0:	9f 4f       	sbci	r25, 0xFF	; 255
    38f2:	d9 f3       	breq	.-10     	; 0x38ea <twi_master_transfer+0x7e>

	while (! twim_idle(transfer.bus)) { barrier(); }
    38f4:	e0 91 78 28 	lds	r30, 0x2878
    38f8:	f0 91 79 28 	lds	r31, 0x2879
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    38fc:	84 81       	ldd	r24, Z+4	; 0x04
    38fe:	83 70       	andi	r24, 0x03	; 3
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
    3900:	81 30       	cpi	r24, 0x01	; 1
    3902:	49 f0       	breq	.+18     	; 0x3916 <twi_master_transfer+0xaa>
    3904:	a8 e7       	ldi	r26, 0x78	; 120
    3906:	b8 e2       	ldi	r27, 0x28	; 40
    3908:	ed 91       	ld	r30, X+
    390a:	fc 91       	ld	r31, X
    390c:	11 97       	sbiw	r26, 0x01	; 1
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    390e:	84 81       	ldd	r24, Z+4	; 0x04
    3910:	83 70       	andi	r24, 0x03	; 3
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
    3912:	81 30       	cpi	r24, 0x01	; 1
    3914:	c9 f7       	brne	.-14     	; 0x3908 <twi_master_transfer+0x9c>

	status_code_t const status = transfer.status;
    3916:	20 91 82 28 	lds	r18, 0x2882
    391a:	30 91 83 28 	lds	r19, 0x2883

	transfer.locked = false;
    391e:	10 92 81 28 	sts	0x2881, r1
    3922:	08 c0       	rjmp	.+16     	; 0x3934 <twi_master_transfer+0xc8>
		const twi_package_t *package, bool read)
{
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
		return ERR_INVALID_ARG;
    3924:	28 ef       	ldi	r18, 0xF8	; 248
    3926:	3f ef       	ldi	r19, 0xFF	; 255
    3928:	05 c0       	rjmp	.+10     	; 0x3934 <twi_master_transfer+0xc8>
    392a:	28 ef       	ldi	r18, 0xF8	; 248
    392c:	3f ef       	ldi	r19, 0xFF	; 255
    392e:	02 c0       	rjmp	.+4      	; 0x3934 <twi_master_transfer+0xc8>
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {

		if (no_wait) { return ERR_BUSY; }
    3930:	26 ef       	ldi	r18, 0xF6	; 246
    3932:	3f ef       	ldi	r19, 0xFF	; 255

		status = twim_release();
	}

	return status;
}
    3934:	82 2f       	mov	r24, r18
    3936:	93 2f       	mov	r25, r19
    3938:	08 95       	ret

0000393a <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    393a:	4f 92       	push	r4
    393c:	5f 92       	push	r5
    393e:	6f 92       	push	r6
    3940:	7f 92       	push	r7
    3942:	8f 92       	push	r8
    3944:	9f 92       	push	r9
    3946:	af 92       	push	r10
    3948:	bf 92       	push	r11
    394a:	cf 92       	push	r12
    394c:	df 92       	push	r13
    394e:	ef 92       	push	r14
    3950:	ff 92       	push	r15
    3952:	0f 93       	push	r16
    3954:	1f 93       	push	r17
    3956:	cf 93       	push	r28
    3958:	df 93       	push	r29
    395a:	ec 01       	movw	r28, r24
    395c:	4a 01       	movw	r8, r20
    395e:	5b 01       	movw	r10, r22
    3960:	28 01       	movw	r4, r16
    3962:	39 01       	movw	r6, r18

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    3964:	d9 01       	movw	r26, r18
    3966:	c8 01       	movw	r24, r16
    3968:	68 94       	set
    396a:	12 f8       	bld	r1, 2
    396c:	b6 95       	lsr	r27
    396e:	a7 95       	ror	r26
    3970:	97 95       	ror	r25
    3972:	87 95       	ror	r24
    3974:	16 94       	lsr	r1
    3976:	d1 f7       	brne	.-12     	; 0x396c <usart_set_baudrate+0x32>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    3978:	b9 01       	movw	r22, r18
    397a:	a8 01       	movw	r20, r16
    397c:	03 2e       	mov	r0, r19
    397e:	36 e1       	ldi	r19, 0x16	; 22
    3980:	76 95       	lsr	r23
    3982:	67 95       	ror	r22
    3984:	57 95       	ror	r21
    3986:	47 95       	ror	r20
    3988:	3a 95       	dec	r19
    398a:	d1 f7       	brne	.-12     	; 0x3980 <usart_set_baudrate+0x46>
    398c:	30 2d       	mov	r19, r0

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    398e:	2c 81       	ldd	r18, Y+4	; 0x04
    3990:	22 fd       	sbrc	r18, 2
    3992:	08 c0       	rjmp	.+16     	; 0x39a4 <usart_set_baudrate+0x6a>
		max_rate /= 2;
    3994:	b6 95       	lsr	r27
    3996:	a7 95       	ror	r26
    3998:	97 95       	ror	r25
    399a:	87 95       	ror	r24
		min_rate /= 2;
    399c:	76 95       	lsr	r23
    399e:	67 95       	ror	r22
    39a0:	57 95       	ror	r21
    39a2:	47 95       	ror	r20
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    39a4:	88 15       	cp	r24, r8
    39a6:	99 05       	cpc	r25, r9
    39a8:	aa 05       	cpc	r26, r10
    39aa:	bb 05       	cpc	r27, r11
    39ac:	08 f4       	brcc	.+2      	; 0x39b0 <usart_set_baudrate+0x76>
    39ae:	ae c0       	rjmp	.+348    	; 0x3b0c <usart_set_baudrate+0x1d2>
    39b0:	84 16       	cp	r8, r20
    39b2:	95 06       	cpc	r9, r21
    39b4:	a6 06       	cpc	r10, r22
    39b6:	b7 06       	cpc	r11, r23
    39b8:	08 f4       	brcc	.+2      	; 0x39bc <usart_set_baudrate+0x82>
    39ba:	aa c0       	rjmp	.+340    	; 0x3b10 <usart_set_baudrate+0x1d6>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    39bc:	8c 81       	ldd	r24, Y+4	; 0x04
    39be:	82 fd       	sbrc	r24, 2
    39c0:	04 c0       	rjmp	.+8      	; 0x39ca <usart_set_baudrate+0x90>
		baud *= 2;
    39c2:	88 0c       	add	r8, r8
    39c4:	99 1c       	adc	r9, r9
    39c6:	aa 1c       	adc	r10, r10
    39c8:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
    39ca:	c3 01       	movw	r24, r6
    39cc:	b2 01       	movw	r22, r4
    39ce:	a5 01       	movw	r20, r10
    39d0:	94 01       	movw	r18, r8
    39d2:	0e 94 5e 35 	call	0x6abc	; 0x6abc <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
    39d6:	2f 3f       	cpi	r18, 0xFF	; 255
    39d8:	31 05       	cpc	r19, r1
    39da:	41 05       	cpc	r20, r1
    39dc:	51 05       	cpc	r21, r1
    39de:	08 f4       	brcc	.+2      	; 0x39e2 <usart_set_baudrate+0xa8>
    39e0:	99 c0       	rjmp	.+306    	; 0x3b14 <usart_set_baudrate+0x1da>
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		baud *= 2;
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
    39e2:	c1 2c       	mov	r12, r1
    39e4:	d1 2c       	mov	r13, r1
    39e6:	76 01       	movw	r14, r12
    39e8:	ca 94       	dec	r12
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    39ea:	19 ef       	ldi	r17, 0xF9	; 249
    39ec:	05 c0       	rjmp	.+10     	; 0x39f8 <usart_set_baudrate+0xbe>
		if (ratio < limit) {
    39ee:	2c 15       	cp	r18, r12
    39f0:	3d 05       	cpc	r19, r13
    39f2:	4e 05       	cpc	r20, r14
    39f4:	5f 05       	cpc	r21, r15
    39f6:	68 f0       	brcs	.+26     	; 0x3a12 <usart_set_baudrate+0xd8>
			break;
		}

		limit <<= 1;
    39f8:	cc 0c       	add	r12, r12
    39fa:	dd 1c       	adc	r13, r13
    39fc:	ee 1c       	adc	r14, r14
    39fe:	ff 1c       	adc	r15, r15

		if (exp < -3) {
    3a00:	1d 3f       	cpi	r17, 0xFD	; 253
    3a02:	14 f4       	brge	.+4      	; 0x3a08 <usart_set_baudrate+0xce>
			limit |= 1;
    3a04:	68 94       	set
    3a06:	c0 f8       	bld	r12, 0

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    3a08:	1f 5f       	subi	r17, 0xFF	; 255
    3a0a:	17 30       	cpi	r17, 0x07	; 7
    3a0c:	81 f7       	brne	.-32     	; 0x39ee <usart_set_baudrate+0xb4>
    3a0e:	21 2f       	mov	r18, r17
    3a10:	54 c0       	rjmp	.+168    	; 0x3aba <usart_set_baudrate+0x180>
    3a12:	21 2f       	mov	r18, r17
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    3a14:	11 23       	and	r17, r17
    3a16:	0c f0       	brlt	.+2      	; 0x3a1a <usart_set_baudrate+0xe0>
    3a18:	50 c0       	rjmp	.+160    	; 0x3aba <usart_set_baudrate+0x180>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    3a1a:	d5 01       	movw	r26, r10
    3a1c:	c4 01       	movw	r24, r8
    3a1e:	88 0f       	add	r24, r24
    3a20:	99 1f       	adc	r25, r25
    3a22:	aa 1f       	adc	r26, r26
    3a24:	bb 1f       	adc	r27, r27
    3a26:	88 0f       	add	r24, r24
    3a28:	99 1f       	adc	r25, r25
    3a2a:	aa 1f       	adc	r26, r26
    3a2c:	bb 1f       	adc	r27, r27
    3a2e:	88 0f       	add	r24, r24
    3a30:	99 1f       	adc	r25, r25
    3a32:	aa 1f       	adc	r26, r26
    3a34:	bb 1f       	adc	r27, r27
    3a36:	48 1a       	sub	r4, r24
    3a38:	59 0a       	sbc	r5, r25
    3a3a:	6a 0a       	sbc	r6, r26
    3a3c:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    3a3e:	1e 3f       	cpi	r17, 0xFE	; 254
    3a40:	f4 f4       	brge	.+60     	; 0x3a7e <usart_set_baudrate+0x144>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    3a42:	6d ef       	ldi	r22, 0xFD	; 253
    3a44:	7f ef       	ldi	r23, 0xFF	; 255
    3a46:	61 1b       	sub	r22, r17
    3a48:	71 09       	sbc	r23, r1
    3a4a:	17 fd       	sbrc	r17, 7
    3a4c:	73 95       	inc	r23
    3a4e:	04 c0       	rjmp	.+8      	; 0x3a58 <usart_set_baudrate+0x11e>
    3a50:	44 0c       	add	r4, r4
    3a52:	55 1c       	adc	r5, r5
    3a54:	66 1c       	adc	r6, r6
    3a56:	77 1c       	adc	r7, r7
    3a58:	6a 95       	dec	r22
    3a5a:	d2 f7       	brpl	.-12     	; 0x3a50 <usart_set_baudrate+0x116>
    3a5c:	d5 01       	movw	r26, r10
    3a5e:	c4 01       	movw	r24, r8
    3a60:	b6 95       	lsr	r27
    3a62:	a7 95       	ror	r26
    3a64:	97 95       	ror	r25
    3a66:	87 95       	ror	r24
    3a68:	bc 01       	movw	r22, r24
    3a6a:	cd 01       	movw	r24, r26
    3a6c:	64 0d       	add	r22, r4
    3a6e:	75 1d       	adc	r23, r5
    3a70:	86 1d       	adc	r24, r6
    3a72:	97 1d       	adc	r25, r7
    3a74:	a5 01       	movw	r20, r10
    3a76:	94 01       	movw	r18, r8
    3a78:	0e 94 5e 35 	call	0x6abc	; 0x6abc <__udivmodsi4>
    3a7c:	3e c0       	rjmp	.+124    	; 0x3afa <usart_set_baudrate+0x1c0>
		} else {
			baud <<= exp + 3;
    3a7e:	21 2f       	mov	r18, r17
    3a80:	33 27       	eor	r19, r19
    3a82:	27 fd       	sbrc	r18, 7
    3a84:	30 95       	com	r19
    3a86:	2d 5f       	subi	r18, 0xFD	; 253
    3a88:	3f 4f       	sbci	r19, 0xFF	; 255
    3a8a:	d5 01       	movw	r26, r10
    3a8c:	c4 01       	movw	r24, r8
    3a8e:	04 c0       	rjmp	.+8      	; 0x3a98 <usart_set_baudrate+0x15e>
    3a90:	88 0f       	add	r24, r24
    3a92:	99 1f       	adc	r25, r25
    3a94:	aa 1f       	adc	r26, r26
    3a96:	bb 1f       	adc	r27, r27
    3a98:	2a 95       	dec	r18
    3a9a:	d2 f7       	brpl	.-12     	; 0x3a90 <usart_set_baudrate+0x156>
    3a9c:	9c 01       	movw	r18, r24
    3a9e:	ad 01       	movw	r20, r26
			div = (cpu_hz + baud / 2) / baud;
    3aa0:	b6 95       	lsr	r27
    3aa2:	a7 95       	ror	r26
    3aa4:	97 95       	ror	r25
    3aa6:	87 95       	ror	r24
    3aa8:	bc 01       	movw	r22, r24
    3aaa:	cd 01       	movw	r24, r26
    3aac:	64 0d       	add	r22, r4
    3aae:	75 1d       	adc	r23, r5
    3ab0:	86 1d       	adc	r24, r6
    3ab2:	97 1d       	adc	r25, r7
    3ab4:	0e 94 5e 35 	call	0x6abc	; 0x6abc <__udivmodsi4>
    3ab8:	20 c0       	rjmp	.+64     	; 0x3afa <usart_set_baudrate+0x1c0>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    3aba:	33 27       	eor	r19, r19
    3abc:	27 fd       	sbrc	r18, 7
    3abe:	30 95       	com	r19
    3ac0:	2d 5f       	subi	r18, 0xFD	; 253
    3ac2:	3f 4f       	sbci	r19, 0xFF	; 255
    3ac4:	d5 01       	movw	r26, r10
    3ac6:	c4 01       	movw	r24, r8
    3ac8:	04 c0       	rjmp	.+8      	; 0x3ad2 <usart_set_baudrate+0x198>
    3aca:	88 0f       	add	r24, r24
    3acc:	99 1f       	adc	r25, r25
    3ace:	aa 1f       	adc	r26, r26
    3ad0:	bb 1f       	adc	r27, r27
    3ad2:	2a 95       	dec	r18
    3ad4:	d2 f7       	brpl	.-12     	; 0x3aca <usart_set_baudrate+0x190>
    3ad6:	9c 01       	movw	r18, r24
    3ad8:	ad 01       	movw	r20, r26
		div = (cpu_hz + baud / 2) / baud - 1;
    3ada:	b6 95       	lsr	r27
    3adc:	a7 95       	ror	r26
    3ade:	97 95       	ror	r25
    3ae0:	87 95       	ror	r24
    3ae2:	bc 01       	movw	r22, r24
    3ae4:	cd 01       	movw	r24, r26
    3ae6:	64 0d       	add	r22, r4
    3ae8:	75 1d       	adc	r23, r5
    3aea:	86 1d       	adc	r24, r6
    3aec:	97 1d       	adc	r25, r7
    3aee:	0e 94 5e 35 	call	0x6abc	; 0x6abc <__udivmodsi4>
    3af2:	21 50       	subi	r18, 0x01	; 1
    3af4:	31 09       	sbc	r19, r1
    3af6:	41 09       	sbc	r20, r1
    3af8:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    3afa:	83 2f       	mov	r24, r19
    3afc:	8f 70       	andi	r24, 0x0F	; 15
    3afe:	12 95       	swap	r17
    3b00:	10 7f       	andi	r17, 0xF0	; 240
    3b02:	18 2b       	or	r17, r24
    3b04:	1f 83       	std	Y+7, r17	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    3b06:	2e 83       	std	Y+6, r18	; 0x06

	return true;
    3b08:	81 e0       	ldi	r24, 0x01	; 1
    3b0a:	18 c0       	rjmp	.+48     	; 0x3b3c <usart_set_baudrate+0x202>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    3b0c:	80 e0       	ldi	r24, 0x00	; 0
    3b0e:	16 c0       	rjmp	.+44     	; 0x3b3c <usart_set_baudrate+0x202>
    3b10:	80 e0       	ldi	r24, 0x00	; 0
    3b12:	14 c0       	rjmp	.+40     	; 0x3b3c <usart_set_baudrate+0x202>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    3b14:	d5 01       	movw	r26, r10
    3b16:	c4 01       	movw	r24, r8
    3b18:	88 0f       	add	r24, r24
    3b1a:	99 1f       	adc	r25, r25
    3b1c:	aa 1f       	adc	r26, r26
    3b1e:	bb 1f       	adc	r27, r27
    3b20:	88 0f       	add	r24, r24
    3b22:	99 1f       	adc	r25, r25
    3b24:	aa 1f       	adc	r26, r26
    3b26:	bb 1f       	adc	r27, r27
    3b28:	88 0f       	add	r24, r24
    3b2a:	99 1f       	adc	r25, r25
    3b2c:	aa 1f       	adc	r26, r26
    3b2e:	bb 1f       	adc	r27, r27
    3b30:	48 1a       	sub	r4, r24
    3b32:	59 0a       	sbc	r5, r25
    3b34:	6a 0a       	sbc	r6, r26
    3b36:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    3b38:	19 ef       	ldi	r17, 0xF9	; 249
    3b3a:	83 cf       	rjmp	.-250    	; 0x3a42 <usart_set_baudrate+0x108>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
    3b3c:	df 91       	pop	r29
    3b3e:	cf 91       	pop	r28
    3b40:	1f 91       	pop	r17
    3b42:	0f 91       	pop	r16
    3b44:	ff 90       	pop	r15
    3b46:	ef 90       	pop	r14
    3b48:	df 90       	pop	r13
    3b4a:	cf 90       	pop	r12
    3b4c:	bf 90       	pop	r11
    3b4e:	af 90       	pop	r10
    3b50:	9f 90       	pop	r9
    3b52:	8f 90       	pop	r8
    3b54:	7f 90       	pop	r7
    3b56:	6f 90       	pop	r6
    3b58:	5f 90       	pop	r5
    3b5a:	4f 90       	pop	r4
    3b5c:	08 95       	ret

00003b5e <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
    3b5e:	0f 93       	push	r16
    3b60:	1f 93       	push	r17
    3b62:	cf 93       	push	r28
    3b64:	df 93       	push	r29
    3b66:	ec 01       	movw	r28, r24
    3b68:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    3b6a:	00 97       	sbiw	r24, 0x00	; 0
    3b6c:	09 f4       	brne	.+2      	; 0x3b70 <usart_init_rs232+0x12>
    3b6e:	ee c0       	rjmp	.+476    	; 0x3d4c <usart_init_rs232+0x1ee>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    3b70:	80 3c       	cpi	r24, 0xC0	; 192
    3b72:	91 05       	cpc	r25, r1
    3b74:	31 f4       	brne	.+12     	; 0x3b82 <usart_init_rs232+0x24>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    3b76:	60 e1       	ldi	r22, 0x10	; 16
    3b78:	80 e0       	ldi	r24, 0x00	; 0
    3b7a:	90 e0       	ldi	r25, 0x00	; 0
    3b7c:	0e 94 71 14 	call	0x28e2	; 0x28e2 <sysclk_enable_module>
    3b80:	e5 c0       	rjmp	.+458    	; 0x3d4c <usart_init_rs232+0x1ee>
	else if (module == &EBI) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    3b82:	c1 15       	cp	r28, r1
    3b84:	84 e0       	ldi	r24, 0x04	; 4
    3b86:	d8 07       	cpc	r29, r24
    3b88:	31 f4       	brne	.+12     	; 0x3b96 <usart_init_rs232+0x38>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    3b8a:	64 e0       	ldi	r22, 0x04	; 4
    3b8c:	80 e0       	ldi	r24, 0x00	; 0
    3b8e:	90 e0       	ldi	r25, 0x00	; 0
    3b90:	0e 94 71 14 	call	0x28e2	; 0x28e2 <sysclk_enable_module>
    3b94:	db c0       	rjmp	.+438    	; 0x3d4c <usart_init_rs232+0x1ee>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    3b96:	c0 38       	cpi	r28, 0x80	; 128
    3b98:	e1 e0       	ldi	r30, 0x01	; 1
    3b9a:	de 07       	cpc	r29, r30
    3b9c:	31 f4       	brne	.+12     	; 0x3baa <usart_init_rs232+0x4c>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    3b9e:	62 e0       	ldi	r22, 0x02	; 2
    3ba0:	80 e0       	ldi	r24, 0x00	; 0
    3ba2:	90 e0       	ldi	r25, 0x00	; 0
    3ba4:	0e 94 71 14 	call	0x28e2	; 0x28e2 <sysclk_enable_module>
    3ba8:	d1 c0       	rjmp	.+418    	; 0x3d4c <usart_init_rs232+0x1ee>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    3baa:	c1 15       	cp	r28, r1
    3bac:	f1 e0       	ldi	r31, 0x01	; 1
    3bae:	df 07       	cpc	r29, r31
    3bb0:	31 f4       	brne	.+12     	; 0x3bbe <usart_init_rs232+0x60>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    3bb2:	61 e0       	ldi	r22, 0x01	; 1
    3bb4:	80 e0       	ldi	r24, 0x00	; 0
    3bb6:	90 e0       	ldi	r25, 0x00	; 0
    3bb8:	0e 94 71 14 	call	0x28e2	; 0x28e2 <sysclk_enable_module>
    3bbc:	c7 c0       	rjmp	.+398    	; 0x3d4c <usart_init_rs232+0x1ee>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    3bbe:	c0 38       	cpi	r28, 0x80	; 128
    3bc0:	83 e0       	ldi	r24, 0x03	; 3
    3bc2:	d8 07       	cpc	r29, r24
    3bc4:	31 f4       	brne	.+12     	; 0x3bd2 <usart_init_rs232+0x74>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    3bc6:	61 e0       	ldi	r22, 0x01	; 1
    3bc8:	81 e0       	ldi	r24, 0x01	; 1
    3bca:	90 e0       	ldi	r25, 0x00	; 0
    3bcc:	0e 94 71 14 	call	0x28e2	; 0x28e2 <sysclk_enable_module>
    3bd0:	bd c0       	rjmp	.+378    	; 0x3d4c <usart_init_rs232+0x1ee>
	else if (module == &ACB) {
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    3bd2:	c1 15       	cp	r28, r1
    3bd4:	e2 e0       	ldi	r30, 0x02	; 2
    3bd6:	de 07       	cpc	r29, r30
    3bd8:	31 f4       	brne	.+12     	; 0x3be6 <usart_init_rs232+0x88>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    3bda:	62 e0       	ldi	r22, 0x02	; 2
    3bdc:	81 e0       	ldi	r24, 0x01	; 1
    3bde:	90 e0       	ldi	r25, 0x00	; 0
    3be0:	0e 94 71 14 	call	0x28e2	; 0x28e2 <sysclk_enable_module>
    3be4:	b3 c0       	rjmp	.+358    	; 0x3d4c <usart_init_rs232+0x1ee>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    3be6:	c0 32       	cpi	r28, 0x20	; 32
    3be8:	f3 e0       	ldi	r31, 0x03	; 3
    3bea:	df 07       	cpc	r29, r31
    3bec:	31 f4       	brne	.+12     	; 0x3bfa <usart_init_rs232+0x9c>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    3bee:	64 e0       	ldi	r22, 0x04	; 4
    3bf0:	82 e0       	ldi	r24, 0x02	; 2
    3bf2:	90 e0       	ldi	r25, 0x00	; 0
    3bf4:	0e 94 71 14 	call	0x28e2	; 0x28e2 <sysclk_enable_module>
    3bf8:	a9 c0       	rjmp	.+338    	; 0x3d4c <usart_init_rs232+0x1ee>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    3bfa:	c1 15       	cp	r28, r1
    3bfc:	88 e0       	ldi	r24, 0x08	; 8
    3bfe:	d8 07       	cpc	r29, r24
    3c00:	31 f4       	brne	.+12     	; 0x3c0e <usart_init_rs232+0xb0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    3c02:	61 e0       	ldi	r22, 0x01	; 1
    3c04:	83 e0       	ldi	r24, 0x03	; 3
    3c06:	90 e0       	ldi	r25, 0x00	; 0
    3c08:	0e 94 71 14 	call	0x28e2	; 0x28e2 <sysclk_enable_module>
    3c0c:	9f c0       	rjmp	.+318    	; 0x3d4c <usart_init_rs232+0x1ee>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    3c0e:	c1 15       	cp	r28, r1
    3c10:	e9 e0       	ldi	r30, 0x09	; 9
    3c12:	de 07       	cpc	r29, r30
    3c14:	31 f4       	brne	.+12     	; 0x3c22 <usart_init_rs232+0xc4>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    3c16:	61 e0       	ldi	r22, 0x01	; 1
    3c18:	84 e0       	ldi	r24, 0x04	; 4
    3c1a:	90 e0       	ldi	r25, 0x00	; 0
    3c1c:	0e 94 71 14 	call	0x28e2	; 0x28e2 <sysclk_enable_module>
    3c20:	95 c0       	rjmp	.+298    	; 0x3d4c <usart_init_rs232+0x1ee>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    3c22:	c1 15       	cp	r28, r1
    3c24:	fa e0       	ldi	r31, 0x0A	; 10
    3c26:	df 07       	cpc	r29, r31
    3c28:	31 f4       	brne	.+12     	; 0x3c36 <usart_init_rs232+0xd8>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    3c2a:	61 e0       	ldi	r22, 0x01	; 1
    3c2c:	85 e0       	ldi	r24, 0x05	; 5
    3c2e:	90 e0       	ldi	r25, 0x00	; 0
    3c30:	0e 94 71 14 	call	0x28e2	; 0x28e2 <sysclk_enable_module>
    3c34:	8b c0       	rjmp	.+278    	; 0x3d4c <usart_init_rs232+0x1ee>
	else if (module == &TCF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    3c36:	c0 34       	cpi	r28, 0x40	; 64
    3c38:	88 e0       	ldi	r24, 0x08	; 8
    3c3a:	d8 07       	cpc	r29, r24
    3c3c:	31 f4       	brne	.+12     	; 0x3c4a <usart_init_rs232+0xec>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    3c3e:	62 e0       	ldi	r22, 0x02	; 2
    3c40:	83 e0       	ldi	r24, 0x03	; 3
    3c42:	90 e0       	ldi	r25, 0x00	; 0
    3c44:	0e 94 71 14 	call	0x28e2	; 0x28e2 <sysclk_enable_module>
    3c48:	81 c0       	rjmp	.+258    	; 0x3d4c <usart_init_rs232+0x1ee>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    3c4a:	c0 34       	cpi	r28, 0x40	; 64
    3c4c:	e9 e0       	ldi	r30, 0x09	; 9
    3c4e:	de 07       	cpc	r29, r30
    3c50:	31 f4       	brne	.+12     	; 0x3c5e <usart_init_rs232+0x100>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    3c52:	62 e0       	ldi	r22, 0x02	; 2
    3c54:	84 e0       	ldi	r24, 0x04	; 4
    3c56:	90 e0       	ldi	r25, 0x00	; 0
    3c58:	0e 94 71 14 	call	0x28e2	; 0x28e2 <sysclk_enable_module>
    3c5c:	77 c0       	rjmp	.+238    	; 0x3d4c <usart_init_rs232+0x1ee>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    3c5e:	c0 39       	cpi	r28, 0x90	; 144
    3c60:	f8 e0       	ldi	r31, 0x08	; 8
    3c62:	df 07       	cpc	r29, r31
    3c64:	31 f4       	brne	.+12     	; 0x3c72 <usart_init_rs232+0x114>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    3c66:	64 e0       	ldi	r22, 0x04	; 4
    3c68:	83 e0       	ldi	r24, 0x03	; 3
    3c6a:	90 e0       	ldi	r25, 0x00	; 0
    3c6c:	0e 94 71 14 	call	0x28e2	; 0x28e2 <sysclk_enable_module>
    3c70:	6d c0       	rjmp	.+218    	; 0x3d4c <usart_init_rs232+0x1ee>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    3c72:	c0 39       	cpi	r28, 0x90	; 144
    3c74:	89 e0       	ldi	r24, 0x09	; 9
    3c76:	d8 07       	cpc	r29, r24
    3c78:	31 f4       	brne	.+12     	; 0x3c86 <usart_init_rs232+0x128>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    3c7a:	64 e0       	ldi	r22, 0x04	; 4
    3c7c:	84 e0       	ldi	r24, 0x04	; 4
    3c7e:	90 e0       	ldi	r25, 0x00	; 0
    3c80:	0e 94 71 14 	call	0x28e2	; 0x28e2 <sysclk_enable_module>
    3c84:	63 c0       	rjmp	.+198    	; 0x3d4c <usart_init_rs232+0x1ee>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    3c86:	c0 39       	cpi	r28, 0x90	; 144
    3c88:	ea e0       	ldi	r30, 0x0A	; 10
    3c8a:	de 07       	cpc	r29, r30
    3c8c:	31 f4       	brne	.+12     	; 0x3c9a <usart_init_rs232+0x13c>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    3c8e:	64 e0       	ldi	r22, 0x04	; 4
    3c90:	85 e0       	ldi	r24, 0x05	; 5
    3c92:	90 e0       	ldi	r25, 0x00	; 0
    3c94:	0e 94 71 14 	call	0x28e2	; 0x28e2 <sysclk_enable_module>
    3c98:	59 c0       	rjmp	.+178    	; 0x3d4c <usart_init_rs232+0x1ee>
	else if (module == &HIRESF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    3c9a:	c0 3c       	cpi	r28, 0xC0	; 192
    3c9c:	f8 e0       	ldi	r31, 0x08	; 8
    3c9e:	df 07       	cpc	r29, r31
    3ca0:	31 f4       	brne	.+12     	; 0x3cae <usart_init_rs232+0x150>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    3ca2:	68 e0       	ldi	r22, 0x08	; 8
    3ca4:	83 e0       	ldi	r24, 0x03	; 3
    3ca6:	90 e0       	ldi	r25, 0x00	; 0
    3ca8:	0e 94 71 14 	call	0x28e2	; 0x28e2 <sysclk_enable_module>
    3cac:	4f c0       	rjmp	.+158    	; 0x3d4c <usart_init_rs232+0x1ee>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    3cae:	c0 3c       	cpi	r28, 0xC0	; 192
    3cb0:	89 e0       	ldi	r24, 0x09	; 9
    3cb2:	d8 07       	cpc	r29, r24
    3cb4:	31 f4       	brne	.+12     	; 0x3cc2 <usart_init_rs232+0x164>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    3cb6:	68 e0       	ldi	r22, 0x08	; 8
    3cb8:	84 e0       	ldi	r24, 0x04	; 4
    3cba:	90 e0       	ldi	r25, 0x00	; 0
    3cbc:	0e 94 71 14 	call	0x28e2	; 0x28e2 <sysclk_enable_module>
    3cc0:	45 c0       	rjmp	.+138    	; 0x3d4c <usart_init_rs232+0x1ee>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    3cc2:	c0 3a       	cpi	r28, 0xA0	; 160
    3cc4:	e8 e0       	ldi	r30, 0x08	; 8
    3cc6:	de 07       	cpc	r29, r30
    3cc8:	31 f4       	brne	.+12     	; 0x3cd6 <usart_init_rs232+0x178>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    3cca:	60 e1       	ldi	r22, 0x10	; 16
    3ccc:	83 e0       	ldi	r24, 0x03	; 3
    3cce:	90 e0       	ldi	r25, 0x00	; 0
    3cd0:	0e 94 71 14 	call	0x28e2	; 0x28e2 <sysclk_enable_module>
    3cd4:	3b c0       	rjmp	.+118    	; 0x3d4c <usart_init_rs232+0x1ee>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    3cd6:	c0 3a       	cpi	r28, 0xA0	; 160
    3cd8:	f9 e0       	ldi	r31, 0x09	; 9
    3cda:	df 07       	cpc	r29, r31
    3cdc:	31 f4       	brne	.+12     	; 0x3cea <usart_init_rs232+0x18c>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    3cde:	60 e1       	ldi	r22, 0x10	; 16
    3ce0:	84 e0       	ldi	r24, 0x04	; 4
    3ce2:	90 e0       	ldi	r25, 0x00	; 0
    3ce4:	0e 94 71 14 	call	0x28e2	; 0x28e2 <sysclk_enable_module>
    3ce8:	31 c0       	rjmp	.+98     	; 0x3d4c <usart_init_rs232+0x1ee>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    3cea:	c0 3a       	cpi	r28, 0xA0	; 160
    3cec:	8a e0       	ldi	r24, 0x0A	; 10
    3cee:	d8 07       	cpc	r29, r24
    3cf0:	31 f4       	brne	.+12     	; 0x3cfe <usart_init_rs232+0x1a0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    3cf2:	60 e1       	ldi	r22, 0x10	; 16
    3cf4:	85 e0       	ldi	r24, 0x05	; 5
    3cf6:	90 e0       	ldi	r25, 0x00	; 0
    3cf8:	0e 94 71 14 	call	0x28e2	; 0x28e2 <sysclk_enable_module>
    3cfc:	27 c0       	rjmp	.+78     	; 0x3d4c <usart_init_rs232+0x1ee>
	else if (module == &USARTF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    3cfe:	c0 3b       	cpi	r28, 0xB0	; 176
    3d00:	e8 e0       	ldi	r30, 0x08	; 8
    3d02:	de 07       	cpc	r29, r30
    3d04:	31 f4       	brne	.+12     	; 0x3d12 <usart_init_rs232+0x1b4>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    3d06:	60 e2       	ldi	r22, 0x20	; 32
    3d08:	83 e0       	ldi	r24, 0x03	; 3
    3d0a:	90 e0       	ldi	r25, 0x00	; 0
    3d0c:	0e 94 71 14 	call	0x28e2	; 0x28e2 <sysclk_enable_module>
    3d10:	1d c0       	rjmp	.+58     	; 0x3d4c <usart_init_rs232+0x1ee>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    3d12:	c0 3b       	cpi	r28, 0xB0	; 176
    3d14:	f9 e0       	ldi	r31, 0x09	; 9
    3d16:	df 07       	cpc	r29, r31
    3d18:	31 f4       	brne	.+12     	; 0x3d26 <usart_init_rs232+0x1c8>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    3d1a:	60 e2       	ldi	r22, 0x20	; 32
    3d1c:	84 e0       	ldi	r24, 0x04	; 4
    3d1e:	90 e0       	ldi	r25, 0x00	; 0
    3d20:	0e 94 71 14 	call	0x28e2	; 0x28e2 <sysclk_enable_module>
    3d24:	13 c0       	rjmp	.+38     	; 0x3d4c <usart_init_rs232+0x1ee>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    3d26:	c0 38       	cpi	r28, 0x80	; 128
    3d28:	84 e0       	ldi	r24, 0x04	; 4
    3d2a:	d8 07       	cpc	r29, r24
    3d2c:	31 f4       	brne	.+12     	; 0x3d3a <usart_init_rs232+0x1dc>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    3d2e:	60 e4       	ldi	r22, 0x40	; 64
    3d30:	83 e0       	ldi	r24, 0x03	; 3
    3d32:	90 e0       	ldi	r25, 0x00	; 0
    3d34:	0e 94 71 14 	call	0x28e2	; 0x28e2 <sysclk_enable_module>
    3d38:	09 c0       	rjmp	.+18     	; 0x3d4c <usart_init_rs232+0x1ee>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    3d3a:	c0 3a       	cpi	r28, 0xA0	; 160
    3d3c:	e4 e0       	ldi	r30, 0x04	; 4
    3d3e:	de 07       	cpc	r29, r30
    3d40:	29 f4       	brne	.+10     	; 0x3d4c <usart_init_rs232+0x1ee>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    3d42:	60 e4       	ldi	r22, 0x40	; 64
    3d44:	85 e0       	ldi	r24, 0x05	; 5
    3d46:	90 e0       	ldi	r25, 0x00	; 0
    3d48:	0e 94 71 14 	call	0x28e2	; 0x28e2 <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    3d4c:	8d 81       	ldd	r24, Y+5	; 0x05
    3d4e:	8f 73       	andi	r24, 0x3F	; 63
    3d50:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    3d52:	f8 01       	movw	r30, r16
    3d54:	96 81       	ldd	r25, Z+6	; 0x06
    3d56:	84 81       	ldd	r24, Z+4	; 0x04
    3d58:	89 2b       	or	r24, r25
    3d5a:	90 85       	ldd	r25, Z+8	; 0x08
    3d5c:	99 23       	and	r25, r25
    3d5e:	11 f0       	breq	.+4      	; 0x3d64 <usart_init_rs232+0x206>
    3d60:	98 e0       	ldi	r25, 0x08	; 8
    3d62:	01 c0       	rjmp	.+2      	; 0x3d66 <usart_init_rs232+0x208>
    3d64:	90 e0       	ldi	r25, 0x00	; 0
    3d66:	89 2b       	or	r24, r25
    3d68:	8d 83       	std	Y+5, r24	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    3d6a:	f8 01       	movw	r30, r16
    3d6c:	40 81       	ld	r20, Z
    3d6e:	51 81       	ldd	r21, Z+1	; 0x01
    3d70:	62 81       	ldd	r22, Z+2	; 0x02
    3d72:	73 81       	ldd	r23, Z+3	; 0x03
    3d74:	00 e0       	ldi	r16, 0x00	; 0
    3d76:	18 e4       	ldi	r17, 0x48	; 72
    3d78:	28 ee       	ldi	r18, 0xE8	; 232
    3d7a:	31 e0       	ldi	r19, 0x01	; 1
    3d7c:	ce 01       	movw	r24, r28
    3d7e:	dd dd       	rcall	.-1094   	; 0x393a <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    3d80:	9c 81       	ldd	r25, Y+4	; 0x04
    3d82:	98 60       	ori	r25, 0x08	; 8
    3d84:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    3d86:	9c 81       	ldd	r25, Y+4	; 0x04
    3d88:	90 61       	ori	r25, 0x10	; 16
    3d8a:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
    3d8c:	df 91       	pop	r29
    3d8e:	cf 91       	pop	r28
    3d90:	1f 91       	pop	r17
    3d92:	0f 91       	pop	r16
    3d94:	08 95       	ret

00003d96 <wdt_set_timeout_period>:
	uint8_t temp = (WDT_WPER_gm & (win_period << WDT_WPER_gp)) |
			(WDT.WINCTRL & WDT_WEN_bm) | (1 << WDT_WCEN_bp);
	ccp_write_io((void *)&WDT.WINCTRL, temp);
	wdt_wait_while_busy();
	return true;
}
    3d96:	90 91 80 00 	lds	r25, 0x0080
    3d9a:	92 70       	andi	r25, 0x02	; 2
    3d9c:	91 60       	ori	r25, 0x01	; 1
    3d9e:	88 0f       	add	r24, r24
    3da0:	88 0f       	add	r24, r24
    3da2:	68 2f       	mov	r22, r24
    3da4:	6c 73       	andi	r22, 0x3C	; 60
    3da6:	69 2b       	or	r22, r25
    3da8:	80 e8       	ldi	r24, 0x80	; 128
    3daa:	90 e0       	ldi	r25, 0x00	; 0
    3dac:	0e 94 a4 14 	call	0x2948	; 0x2948 <ccp_write_io>
    3db0:	e0 e8       	ldi	r30, 0x80	; 128
    3db2:	f0 e0       	ldi	r31, 0x00	; 0
    3db4:	82 81       	ldd	r24, Z+2	; 0x02
    3db6:	80 fd       	sbrc	r24, 0
    3db8:	fd cf       	rjmp	.-6      	; 0x3db4 <wdt_set_timeout_period+0x1e>
    3dba:	08 95       	ret

00003dbc <wdt_disable>:
 *  automatically ignored during the change enable period. Disable functions
 *  operate asynchronously with immediate effect.
 */
void wdt_disable(void)
{
	uint8_t temp = (WDT.CTRL & ~WDT_ENABLE_bm) | (1 << WDT_CEN_bp);
    3dbc:	60 91 80 00 	lds	r22, 0x0080
    3dc0:	6c 7f       	andi	r22, 0xFC	; 252
    3dc2:	61 60       	ori	r22, 0x01	; 1
	ccp_write_io((void *)&WDT.CTRL, temp);
    3dc4:	80 e8       	ldi	r24, 0x80	; 128
    3dc6:	90 e0       	ldi	r25, 0x00	; 0
    3dc8:	0c 94 a4 14 	jmp	0x2948	; 0x2948 <ccp_write_io>

00003dcc <wdt_enable>:
 *  wait for the WDT to be synchronized to the WDT clock domain before
 *  proceeding
 */
void wdt_enable(void)
{
	uint8_t temp = (WDT.CTRL & WDT_PER_gm) |
    3dcc:	60 91 80 00 	lds	r22, 0x0080
    3dd0:	6c 73       	andi	r22, 0x3C	; 60
    3dd2:	63 60       	ori	r22, 0x03	; 3
			(1 << WDT_ENABLE_bp) | (1 << WDT_CEN_bp);
	ccp_write_io((void *)&WDT.CTRL, temp);
    3dd4:	80 e8       	ldi	r24, 0x80	; 128
    3dd6:	90 e0       	ldi	r25, 0x00	; 0
    3dd8:	0e 94 a4 14 	call	0x2948	; 0x2948 <ccp_write_io>
/*! \brief Wait until WD settings are synchronized to the WD clock domain.
 *
 */
static inline void wdt_wait_while_busy(void)
{
	while ((WDT.STATUS & WDT_SYNCBUSY_bm) == WDT_SYNCBUSY_bm) {
    3ddc:	e0 e8       	ldi	r30, 0x80	; 128
    3dde:	f0 e0       	ldi	r31, 0x00	; 0
    3de0:	82 81       	ldd	r24, Z+2	; 0x02
    3de2:	80 fd       	sbrc	r24, 0
    3de4:	fd cf       	rjmp	.-6      	; 0x3de0 <wdt_enable+0x14>
	wdt_wait_while_busy();
}
    3de6:	08 95       	ret

00003de8 <tick_handler>:
 * through all timeout channels. The timeout_array[channel_index] which
 * contains the remaining ticks before timeout is decremented and the timeout
 * active/expired masks are updated.
 */
static void tick_handler(uint32_t time)
{
    3de8:	cf 93       	push	r28
    3dea:	df 93       	push	r29
    3dec:	c0 91 84 28 	lds	r28, 0x2884
    3df0:	d0 91 a5 28 	lds	r29, 0x28A5
    3df4:	e5 e8       	ldi	r30, 0x85	; 133
    3df6:	f8 e2       	ldi	r31, 0x28	; 40
    3df8:	80 e0       	ldi	r24, 0x00	; 0
    3dfa:	90 e0       	ldi	r25, 0x00	; 0
		/* Skip further processing on current channel if not expired */
		if (timeout_array[i].count) {
			continue;
		} else {
			/* Update expired bit mask with current channel */
			timeout_expired |= 1 << i;
    3dfc:	61 e0       	ldi	r22, 0x01	; 1
    3dfe:	70 e0       	ldi	r23, 0x00	; 0
	uint8_t i;

	/* Loop through all timeout channels */
	for (i = 0; i < TIMEOUT_COUNT; i++) {
		/* Skip processing on current channel if not active */
		if (!(timeout_active & (1 << i))) {
    3e00:	2c 2f       	mov	r18, r28
    3e02:	30 e0       	ldi	r19, 0x00	; 0
    3e04:	08 2e       	mov	r0, r24
    3e06:	02 c0       	rjmp	.+4      	; 0x3e0c <tick_handler+0x24>
    3e08:	35 95       	asr	r19
    3e0a:	27 95       	ror	r18
    3e0c:	0a 94       	dec	r0
    3e0e:	e2 f7       	brpl	.-8      	; 0x3e08 <tick_handler+0x20>
    3e10:	20 ff       	sbrs	r18, 0
    3e12:	1a c0       	rjmp	.+52     	; 0x3e48 <tick_handler+0x60>
			continue;
		}

		/* Decrement current channel with one tick */
		timeout_array[i].count--;
    3e14:	20 81       	ld	r18, Z
    3e16:	31 81       	ldd	r19, Z+1	; 0x01
    3e18:	21 50       	subi	r18, 0x01	; 1
    3e1a:	31 09       	sbc	r19, r1
    3e1c:	20 83       	st	Z, r18
    3e1e:	31 83       	std	Z+1, r19	; 0x01

		/* Skip further processing on current channel if not expired */
		if (timeout_array[i].count) {
    3e20:	23 2b       	or	r18, r19
    3e22:	91 f4       	brne	.+36     	; 0x3e48 <tick_handler+0x60>
			continue;
		} else {
			/* Update expired bit mask with current channel */
			timeout_expired |= 1 << i;
    3e24:	9b 01       	movw	r18, r22
    3e26:	08 2e       	mov	r0, r24
    3e28:	02 c0       	rjmp	.+4      	; 0x3e2e <tick_handler+0x46>
    3e2a:	22 0f       	add	r18, r18
    3e2c:	33 1f       	adc	r19, r19
    3e2e:	0a 94       	dec	r0
    3e30:	e2 f7       	brpl	.-8      	; 0x3e2a <tick_handler+0x42>
    3e32:	d2 2b       	or	r29, r18

			/* If Periodic timer, reset timeout counter to period
			 * time */
			if (timeout_array[i].period) {
    3e34:	42 81       	ldd	r20, Z+2	; 0x02
    3e36:	53 81       	ldd	r21, Z+3	; 0x03
    3e38:	41 15       	cp	r20, r1
    3e3a:	51 05       	cpc	r21, r1
    3e3c:	19 f0       	breq	.+6      	; 0x3e44 <tick_handler+0x5c>
				timeout_array[i].count
					= timeout_array[i].period;
    3e3e:	40 83       	st	Z, r20
    3e40:	51 83       	std	Z+1, r21	; 0x01
    3e42:	02 c0       	rjmp	.+4      	; 0x3e48 <tick_handler+0x60>
			}
			/* If not periodic timeout, set current channel to
			 * in-active */
			else {
				timeout_active &= ~(1 << i);
    3e44:	20 95       	com	r18
    3e46:	c2 23       	and	r28, r18
    3e48:	01 96       	adiw	r24, 0x01	; 1
    3e4a:	34 96       	adiw	r30, 0x04	; 4
static void tick_handler(uint32_t time)
{
	uint8_t i;

	/* Loop through all timeout channels */
	for (i = 0; i < TIMEOUT_COUNT; i++) {
    3e4c:	88 30       	cpi	r24, 0x08	; 8
    3e4e:	91 05       	cpc	r25, r1
    3e50:	b9 f6       	brne	.-82     	; 0x3e00 <tick_handler+0x18>
    3e52:	c0 93 84 28 	sts	0x2884, r28
    3e56:	d0 93 a5 28 	sts	0x28A5, r29
				timeout_active &= ~(1 << i);
			}
		}
	}
	/* Reset RTC before next tick */
	rtc_set_time(0);
    3e5a:	60 e0       	ldi	r22, 0x00	; 0
    3e5c:	70 e0       	ldi	r23, 0x00	; 0
    3e5e:	cb 01       	movw	r24, r22
    3e60:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <rtc_set_time>
	rtc_set_alarm(TIMEOUT_COMP);
    3e64:	60 e8       	ldi	r22, 0x80	; 128
    3e66:	70 e0       	ldi	r23, 0x00	; 0
    3e68:	80 e0       	ldi	r24, 0x00	; 0
    3e6a:	90 e0       	ldi	r25, 0x00	; 0
    3e6c:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <rtc_set_alarm>
}
    3e70:	df 91       	pop	r29
    3e72:	cf 91       	pop	r28
    3e74:	08 95       	ret

00003e76 <timeout_init>:
 *       there are restrictions on the timeout period that can be used - see
 *       to \ref rtc32_min_alarm_time for details.
 */
void timeout_init(void)
{
	rtc_init();
    3e76:	0e 94 e5 15 	call	0x2bca	; 0x2bca <rtc_init>
	rtc_set_callback(tick_handler);
    3e7a:	84 ef       	ldi	r24, 0xF4	; 244
    3e7c:	9e e1       	ldi	r25, 0x1E	; 30
    3e7e:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <rtc_set_callback>
	rtc_set_time(0);
    3e82:	60 e0       	ldi	r22, 0x00	; 0
    3e84:	70 e0       	ldi	r23, 0x00	; 0
    3e86:	cb 01       	movw	r24, r22
    3e88:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <rtc_set_time>
	rtc_set_alarm(TIMEOUT_COMP);
    3e8c:	60 e8       	ldi	r22, 0x80	; 128
    3e8e:	70 e0       	ldi	r23, 0x00	; 0
    3e90:	80 e0       	ldi	r24, 0x00	; 0
    3e92:	90 e0       	ldi	r25, 0x00	; 0
    3e94:	0c 94 c8 15 	jmp	0x2b90	; 0x2b90 <rtc_set_alarm>

00003e98 <timeout_start_offset>:
 * \param offset        Time to first timeout in number of ticks
 */
void timeout_start_offset(timeout_id_t id, uint16_t period, uint16_t offset)
{
	/* Check that ID within the TIMEOUT_COUNT range */
	if (id < TIMEOUT_COUNT) {
    3e98:	88 30       	cpi	r24, 0x08	; 8
    3e9a:	18 f5       	brcc	.+70     	; 0x3ee2 <timeout_start_offset+0x4a>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    3e9c:	af b7       	in	r26, 0x3f	; 63
	cpu_irq_disable();
    3e9e:	f8 94       	cli
		/* Disable interrupts before tweaking the bitmasks */
		irqflags_t flags;
		flags = cpu_irq_save();

		/* Update timeout struct with offset and period */
		timeout_array[id].count = offset;
    3ea0:	e8 2f       	mov	r30, r24
    3ea2:	f0 e0       	ldi	r31, 0x00	; 0
    3ea4:	ee 0f       	add	r30, r30
    3ea6:	ff 1f       	adc	r31, r31
    3ea8:	ee 0f       	add	r30, r30
    3eaa:	ff 1f       	adc	r31, r31
    3eac:	eb 57       	subi	r30, 0x7B	; 123
    3eae:	f7 4d       	sbci	r31, 0xD7	; 215
    3eb0:	40 83       	st	Z, r20
    3eb2:	51 83       	std	Z+1, r21	; 0x01
		timeout_array[id].period = period;
    3eb4:	62 83       	std	Z+2, r22	; 0x02
    3eb6:	73 83       	std	Z+3, r23	; 0x03

		/* Set current timeout channel bitmasks to active and not
		 * expired */
		timeout_active |= 1 << id;
    3eb8:	21 e0       	ldi	r18, 0x01	; 1
    3eba:	30 e0       	ldi	r19, 0x00	; 0
    3ebc:	a9 01       	movw	r20, r18
    3ebe:	02 c0       	rjmp	.+4      	; 0x3ec4 <timeout_start_offset+0x2c>
    3ec0:	44 0f       	add	r20, r20
    3ec2:	55 1f       	adc	r21, r21
    3ec4:	8a 95       	dec	r24
    3ec6:	e2 f7       	brpl	.-8      	; 0x3ec0 <timeout_start_offset+0x28>
    3ec8:	ca 01       	movw	r24, r20
    3eca:	90 91 84 28 	lds	r25, 0x2884
    3ece:	98 2b       	or	r25, r24
    3ed0:	90 93 84 28 	sts	0x2884, r25
		timeout_expired &= ~(1 << id);
    3ed4:	80 95       	com	r24
    3ed6:	90 91 a5 28 	lds	r25, 0x28A5
    3eda:	89 23       	and	r24, r25
    3edc:	80 93 a5 28 	sts	0x28A5, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3ee0:	af bf       	out	0x3f, r26	; 63
    3ee2:	08 95       	ret

00003ee4 <timeout_start_singleshot>:
 *
 * \param id       \ref timeout_id_t
 * \param timeout  Timeout in number of ticks
 */
void timeout_start_singleshot(timeout_id_t id, uint16_t timeout)
{
    3ee4:	ab 01       	movw	r20, r22
	timeout_start_offset(id, 0, timeout);
    3ee6:	60 e0       	ldi	r22, 0x00	; 0
    3ee8:	70 e0       	ldi	r23, 0x00	; 0
    3eea:	d6 cf       	rjmp	.-84     	; 0x3e98 <timeout_start_offset>

00003eec <timeout_start_periodic>:
 * \param id      \ref timeout_id_t
 * \param period  Time period in number of ticks
 */
void timeout_start_periodic(timeout_id_t id, uint16_t period)
{
	timeout_start_offset(id, period, period);
    3eec:	ab 01       	movw	r20, r22
    3eee:	d4 cf       	rjmp	.-88     	; 0x3e98 <timeout_start_offset>

00003ef0 <timeout_test_and_clear_expired>:
 * \retval false  Timer still running
 */
bool timeout_test_and_clear_expired(timeout_id_t id)
{
	/* Check that ID within the TIMEOUT_COUNT range */
	if (id < TIMEOUT_COUNT) {
    3ef0:	88 30       	cpi	r24, 0x08	; 8
    3ef2:	f8 f4       	brcc	.+62     	; 0x3f32 <timeout_test_and_clear_expired+0x42>
		irqflags_t flags;

		/* Check if timeout has expired */
		if (timeout_expired & (1 << id)) {
    3ef4:	20 91 a5 28 	lds	r18, 0x28A5
    3ef8:	30 e0       	ldi	r19, 0x00	; 0
    3efa:	08 2e       	mov	r0, r24
    3efc:	02 c0       	rjmp	.+4      	; 0x3f02 <timeout_test_and_clear_expired+0x12>
    3efe:	35 95       	asr	r19
    3f00:	27 95       	ror	r18
    3f02:	0a 94       	dec	r0
    3f04:	e2 f7       	brpl	.-8      	; 0x3efe <timeout_test_and_clear_expired+0xe>
    3f06:	20 ff       	sbrs	r18, 0
    3f08:	16 c0       	rjmp	.+44     	; 0x3f36 <timeout_test_and_clear_expired+0x46>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    3f0a:	4f b7       	in	r20, 0x3f	; 63
	cpu_irq_disable();
    3f0c:	f8 94       	cli
			flags = cpu_irq_save();
			timeout_expired &= ~(1 << id);
    3f0e:	21 e0       	ldi	r18, 0x01	; 1
    3f10:	30 e0       	ldi	r19, 0x00	; 0
    3f12:	b9 01       	movw	r22, r18
    3f14:	02 c0       	rjmp	.+4      	; 0x3f1a <timeout_test_and_clear_expired+0x2a>
    3f16:	66 0f       	add	r22, r22
    3f18:	77 1f       	adc	r23, r23
    3f1a:	8a 95       	dec	r24
    3f1c:	e2 f7       	brpl	.-8      	; 0x3f16 <timeout_test_and_clear_expired+0x26>
    3f1e:	cb 01       	movw	r24, r22
    3f20:	80 95       	com	r24
    3f22:	90 91 a5 28 	lds	r25, 0x28A5
    3f26:	89 23       	and	r24, r25
    3f28:	80 93 a5 28 	sts	0x28A5, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3f2c:	4f bf       	out	0x3f, r20	; 63
			cpu_irq_restore(flags);
			return true;
    3f2e:	81 e0       	ldi	r24, 0x01	; 1
    3f30:	08 95       	ret
		}
	}

	return false;
    3f32:	80 e0       	ldi	r24, 0x00	; 0
    3f34:	08 95       	ret
    3f36:	80 e0       	ldi	r24, 0x00	; 0
}
    3f38:	08 95       	ret

00003f3a <timeout_stop>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    3f3a:	4f b7       	in	r20, 0x3f	; 63
	cpu_irq_disable();
    3f3c:	f8 94       	cli
 */
void timeout_stop(timeout_id_t id)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	timeout_active &= ~(1 << id);
    3f3e:	21 e0       	ldi	r18, 0x01	; 1
    3f40:	30 e0       	ldi	r19, 0x00	; 0
    3f42:	b9 01       	movw	r22, r18
    3f44:	02 c0       	rjmp	.+4      	; 0x3f4a <timeout_stop+0x10>
    3f46:	66 0f       	add	r22, r22
    3f48:	77 1f       	adc	r23, r23
    3f4a:	8a 95       	dec	r24
    3f4c:	e2 f7       	brpl	.-8      	; 0x3f46 <timeout_stop+0xc>
    3f4e:	cb 01       	movw	r24, r22
    3f50:	80 95       	com	r24
    3f52:	90 91 84 28 	lds	r25, 0x2884
    3f56:	89 23       	and	r24, r25
    3f58:	80 93 84 28 	sts	0x2884, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3f5c:	4f bf       	out	0x3f, r20	; 63
    3f5e:	08 95       	ret

00003f60 <get_current_pulse_counter>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    3f60:	2f b7       	in	r18, 0x3f	; 63
	cpu_irq_disable();
    3f62:	f8 94       	cli

static uint32_t get_current_pulse_counter (uint8_t i)
{
    uint32_t v;
    irqflags_t f = cpu_irq_save ();
    v = state.current.pulse_counter[i];
    3f64:	e8 2f       	mov	r30, r24
    3f66:	f0 e0       	ldi	r31, 0x00	; 0
    3f68:	ee 0f       	add	r30, r30
    3f6a:	ff 1f       	adc	r31, r31
    3f6c:	ee 0f       	add	r30, r30
    3f6e:	ff 1f       	adc	r31, r31
    3f70:	ee 5d       	subi	r30, 0xDE	; 222
    3f72:	f4 4d       	sbci	r31, 0xD4	; 212
    3f74:	60 81       	ld	r22, Z
    3f76:	71 81       	ldd	r23, Z+1	; 0x01
    3f78:	82 81       	ldd	r24, Z+2	; 0x02
    3f7a:	93 81       	ldd	r25, Z+3	; 0x03
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3f7c:	2f bf       	out	0x3f, r18	; 63
    cpu_irq_restore (f);
    return v;
}
    3f7e:	08 95       	ret

00003f80 <get_midnight_pulse_counter>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    3f80:	2f b7       	in	r18, 0x3f	; 63
	cpu_irq_disable();
    3f82:	f8 94       	cli

static uint32_t get_midnight_pulse_counter (uint8_t i)
{
    uint32_t v;
    irqflags_t f = cpu_irq_save ();
    v = state.midnight_pulse_counter[i];
    3f84:	e8 2f       	mov	r30, r24
    3f86:	f0 e0       	ldi	r31, 0x00	; 0
    3f88:	ee 0f       	add	r30, r30
    3f8a:	ff 1f       	adc	r31, r31
    3f8c:	ee 0f       	add	r30, r30
    3f8e:	ff 1f       	adc	r31, r31
    3f90:	ef 5a       	subi	r30, 0xAF	; 175
    3f92:	f4 4d       	sbci	r31, 0xD4	; 212
    3f94:	60 81       	ld	r22, Z
    3f96:	71 81       	ldd	r23, Z+1	; 0x01
    3f98:	82 81       	ldd	r24, Z+2	; 0x02
    3f9a:	93 81       	ldd	r25, Z+3	; 0x03
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3f9c:	2f bf       	out	0x3f, r18	; 63
    cpu_irq_restore (f);
    return v;
}
    3f9e:	08 95       	ret

00003fa0 <set_current_pulse_counter>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    3fa0:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    3fa2:	f8 94       	cli

static void set_current_pulse_counter (uint8_t i, uint32_t v)
{
    irqflags_t f = cpu_irq_save ();
    state.current.pulse_counter[i] = v;
    3fa4:	e8 2f       	mov	r30, r24
    3fa6:	f0 e0       	ldi	r31, 0x00	; 0
    3fa8:	ee 0f       	add	r30, r30
    3faa:	ff 1f       	adc	r31, r31
    3fac:	ee 0f       	add	r30, r30
    3fae:	ff 1f       	adc	r31, r31
    3fb0:	ee 5d       	subi	r30, 0xDE	; 222
    3fb2:	f4 4d       	sbci	r31, 0xD4	; 212
    3fb4:	40 83       	st	Z, r20
    3fb6:	51 83       	std	Z+1, r21	; 0x01
    3fb8:	62 83       	std	Z+2, r22	; 0x02
    3fba:	73 83       	std	Z+3, r23	; 0x03
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3fbc:	9f bf       	out	0x3f, r25	; 63
    3fbe:	08 95       	ret

00003fc0 <set_midnight_pulse_counter>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    3fc0:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    3fc2:	f8 94       	cli
}

static void set_midnight_pulse_counter (uint8_t i, uint32_t v)
{
    irqflags_t f = cpu_irq_save ();
    state.midnight_pulse_counter[i] = v;
    3fc4:	e8 2f       	mov	r30, r24
    3fc6:	f0 e0       	ldi	r31, 0x00	; 0
    3fc8:	ee 0f       	add	r30, r30
    3fca:	ff 1f       	adc	r31, r31
    3fcc:	ee 0f       	add	r30, r30
    3fce:	ff 1f       	adc	r31, r31
    3fd0:	ef 5a       	subi	r30, 0xAF	; 175
    3fd2:	f4 4d       	sbci	r31, 0xD4	; 212
    3fd4:	40 83       	st	Z, r20
    3fd6:	51 83       	std	Z+1, r21	; 0x01
    3fd8:	62 83       	std	Z+2, r22	; 0x02
    3fda:	73 83       	std	Z+3, r23	; 0x03
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3fdc:	9f bf       	out	0x3f, r25	; 63
    3fde:	08 95       	ret

00003fe0 <geyser_set_power_on>:
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    3fe0:	88 e0       	ldi	r24, 0x08	; 8
    3fe2:	e0 e6       	ldi	r30, 0x60	; 96
    3fe4:	f6 e0       	ldi	r31, 0x06	; 6
    3fe6:	85 83       	std	Z+5, r24	; 0x05
    3fe8:	08 95       	ret

00003fea <geyser_set_power_off>:

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
    3fea:	e0 e6       	ldi	r30, 0x60	; 96
    3fec:	f6 e0       	ldi	r31, 0x06	; 6
    3fee:	80 85       	ldd	r24, Z+8	; 0x08
    ioport_set_pin_high (GPIO_POWER);
}

static void geyser_set_power_off (void)
{
    if (ioport_get_value (GPIO_POWER)) {
    3ff0:	83 ff       	sbrs	r24, 3
    3ff2:	10 c0       	rjmp	.+32     	; 0x4014 <geyser_set_power_off+0x2a>
        state.current.pulse_counter_power_off = state.current.pulse_counter[ELEC_PULSE_COUNTER];
    3ff4:	80 91 22 2b 	lds	r24, 0x2B22
    3ff8:	90 91 23 2b 	lds	r25, 0x2B23
    3ffc:	a0 91 24 2b 	lds	r26, 0x2B24
    4000:	b0 91 25 2b 	lds	r27, 0x2B25
    4004:	80 93 2f 2b 	sts	0x2B2F, r24
    4008:	90 93 30 2b 	sts	0x2B30, r25
    400c:	a0 93 31 2b 	sts	0x2B31, r26
    4010:	b0 93 32 2b 	sts	0x2B32, r27
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    4014:	88 e0       	ldi	r24, 0x08	; 8
    4016:	e0 e6       	ldi	r30, 0x60	; 96
    4018:	f6 e0       	ldi	r31, 0x06	; 6
    401a:	86 83       	std	Z+6, r24	; 0x06
    401c:	08 95       	ret

0000401e <is_weekday>:
    return state.geyser.water_running.detected;
}

static bool is_weekday (uint32_t epoch)
{
    uint32_t day = (((epoch + EPOCH_LOCAL_OFFSET) / (24UL * 60 * 60)) + 3) % 7;
    401e:	60 5e       	subi	r22, 0xE0	; 224
    4020:	73 4e       	sbci	r23, 0xE3	; 227
    4022:	8f 4f       	sbci	r24, 0xFF	; 255
    4024:	9f 4f       	sbci	r25, 0xFF	; 255
    4026:	20 e8       	ldi	r18, 0x80	; 128
    4028:	31 e5       	ldi	r19, 0x51	; 81
    402a:	41 e0       	ldi	r20, 0x01	; 1
    402c:	50 e0       	ldi	r21, 0x00	; 0
    402e:	0e 94 5e 35 	call	0x6abc	; 0x6abc <__udivmodsi4>
    4032:	ca 01       	movw	r24, r20
    4034:	b9 01       	movw	r22, r18
    4036:	6d 5f       	subi	r22, 0xFD	; 253
    4038:	7f 4f       	sbci	r23, 0xFF	; 255
    403a:	8f 4f       	sbci	r24, 0xFF	; 255
    403c:	9f 4f       	sbci	r25, 0xFF	; 255
    403e:	27 e0       	ldi	r18, 0x07	; 7
    4040:	30 e0       	ldi	r19, 0x00	; 0
    4042:	40 e0       	ldi	r20, 0x00	; 0
    4044:	50 e0       	ldi	r21, 0x00	; 0
    4046:	0e 94 5e 35 	call	0x6abc	; 0x6abc <__udivmodsi4>
    return day < 5;
    404a:	21 e0       	ldi	r18, 0x01	; 1
    404c:	65 30       	cpi	r22, 0x05	; 5
    404e:	71 05       	cpc	r23, r1
    4050:	81 05       	cpc	r24, r1
    4052:	91 05       	cpc	r25, r1
    4054:	08 f0       	brcs	.+2      	; 0x4058 <is_weekday+0x3a>
    4056:	20 e0       	ldi	r18, 0x00	; 0
}
    4058:	82 2f       	mov	r24, r18
    405a:	08 95       	ret

0000405c <modem_up_handler>:
* ****************************************************************************
*/

static void modem_up_handler (bool up)
{
    state.modem.up = up;
    405c:	80 93 a7 28 	sts	0x28A7, r24
    4060:	08 95       	ret

00004062 <modem_reset_handler>:
}

static void modem_reset_handler (awt_reset_state_t reset_state)
{
    switch (reset_state) {
    4062:	01 97       	sbiw	r24, 0x01	; 1
    4064:	b9 f4       	brne	.+46     	; 0x4094 <modem_reset_handler+0x32>
    case AWT_RESET_BUSY:
        break;
    case AWT_RESET_DONE:
        state.modem.secs_network_inactive = SECS_NETWORK_INACTIVE_TRIGGER / 2;  // see loop in main()
    4066:	80 91 71 2b 	lds	r24, 0x2B71
    406a:	90 91 72 2b 	lds	r25, 0x2B72
    406e:	9c 01       	movw	r18, r24
    4070:	22 0f       	add	r18, r18
    4072:	33 1f       	adc	r19, r19
    4074:	28 0f       	add	r18, r24
    4076:	39 1f       	adc	r19, r25
    4078:	36 95       	lsr	r19
    407a:	27 95       	ror	r18
    407c:	20 93 ad 28 	sts	0x28AD, r18
    4080:	30 93 ae 28 	sts	0x28AE, r19
        state.modem.secs_since_last_report_home = config.report_home_period_secs;
    4084:	80 93 af 28 	sts	0x28AF, r24
    4088:	90 93 b0 28 	sts	0x28B0, r25
        state.modem.up = false;
    408c:	10 92 a7 28 	sts	0x28A7, r1
        state.modem.busy = false;
    4090:	10 92 a8 28 	sts	0x28A8, r1
    4094:	08 95       	ret

00004096 <event_message_rsp>:
    }
}

static void event_message_rsp (bool res)
{
    state.modem.busy = false;
    4096:	10 92 a8 28 	sts	0x28A8, r1
    if (res) {
    409a:	88 23       	and	r24, r24
    409c:	61 f0       	breq	.+24     	; 0x40b6 <event_message_rsp+0x20>
        state.modem.secs_network_inactive = 0;
    409e:	10 92 ad 28 	sts	0x28AD, r1
    40a2:	10 92 ae 28 	sts	0x28AE, r1
        state.event_buffer.front = (state.event_buffer.front + 1) % EVENT_BUFFER_SIZE;
    40a6:	e1 e3       	ldi	r30, 0x31	; 49
    40a8:	f9 e2       	ldi	r31, 0x29	; 41
    40aa:	80 81       	ld	r24, Z
    40ac:	90 e0       	ldi	r25, 0x00	; 0
    40ae:	01 96       	adiw	r24, 0x01	; 1
    40b0:	8f 70       	andi	r24, 0x0F	; 15
    40b2:	90 78       	andi	r25, 0x80	; 128
    40b4:	80 83       	st	Z, r24
    40b6:	08 95       	ret

000040b8 <status_message_rsp>:
    state.status_buffer.back = b;
}

static void status_message_rsp (bool res)
{
    state.modem.busy = false;
    40b8:	10 92 a8 28 	sts	0x28A8, r1
    if (res) {
    40bc:	88 23       	and	r24, r24
    40be:	c1 f0       	breq	.+48     	; 0x40f0 <status_message_rsp+0x38>
        state.modem.secs_network_inactive = 0;
    40c0:	10 92 ad 28 	sts	0x28AD, r1
    40c4:	10 92 ae 28 	sts	0x28AE, r1
        state.modem.secs_since_last_report_home %= config.report_home_period_secs;
    40c8:	ef ea       	ldi	r30, 0xAF	; 175
    40ca:	f8 e2       	ldi	r31, 0x28	; 40
    40cc:	80 81       	ld	r24, Z
    40ce:	91 81       	ldd	r25, Z+1	; 0x01
    40d0:	60 91 71 2b 	lds	r22, 0x2B71
    40d4:	70 91 72 2b 	lds	r23, 0x2B72
    40d8:	0e 94 37 35 	call	0x6a6e	; 0x6a6e <__udivmodhi4>
    40dc:	80 83       	st	Z, r24
    40de:	91 83       	std	Z+1, r25	; 0x01
        state.status_buffer.front = (state.status_buffer.front + 1) %
    40e0:	e3 e1       	ldi	r30, 0x13	; 19
    40e2:	fb e2       	ldi	r31, 0x2B	; 43
    40e4:	80 81       	ld	r24, Z
    40e6:	90 e0       	ldi	r25, 0x00	; 0
    40e8:	01 96       	adiw	r24, 0x01	; 1
    40ea:	8f 70       	andi	r24, 0x0F	; 15
    40ec:	90 78       	andi	r25, 0x80	; 128
    40ee:	80 83       	st	Z, r24
    40f0:	08 95       	ret

000040f2 <config1_message_rsp>:
    return -1;
}

static void config1_message_rsp (bool res)
{
    state.modem.busy = false;
    40f2:	10 92 a8 28 	sts	0x28A8, r1
    if (res) {
    40f6:	88 23       	and	r24, r24
    40f8:	39 f0       	breq	.+14     	; 0x4108 <config1_message_rsp+0x16>
        state.modem.secs_network_inactive = 0;
    40fa:	10 92 ad 28 	sts	0x28AD, r1
    40fe:	10 92 ae 28 	sts	0x28AE, r1
        state.modem.send_config1 = false;
    4102:	10 92 aa 28 	sts	0x28AA, r1
    4106:	08 95       	ret
    } else {
        state.modem.send_config1 = true;
    4108:	81 e0       	ldi	r24, 0x01	; 1
    410a:	80 93 aa 28 	sts	0x28AA, r24
    410e:	08 95       	ret

00004110 <config2_message_rsp>:
    }
}

static void config2_message_rsp (bool res)
{
    state.modem.busy = false;
    4110:	10 92 a8 28 	sts	0x28A8, r1
    if (res) {
    4114:	88 23       	and	r24, r24
    4116:	39 f0       	breq	.+14     	; 0x4126 <config2_message_rsp+0x16>
        state.modem.secs_network_inactive = 0;
    4118:	10 92 ad 28 	sts	0x28AD, r1
    411c:	10 92 ae 28 	sts	0x28AE, r1
        state.modem.send_config2 = false;
    4120:	10 92 ab 28 	sts	0x28AB, r1
    4124:	08 95       	ret
    } else {
        state.modem.send_config2 = true;
    4126:	81 e0       	ldi	r24, 0x01	; 1
    4128:	80 93 ab 28 	sts	0x28AB, r24
    412c:	08 95       	ret

0000412e <rom_config_message_rsp>:
    }
}

static void rom_config_message_rsp (bool res)
{
    state.modem.busy = false;
    412e:	10 92 a8 28 	sts	0x28A8, r1
    if (res) {
    4132:	88 23       	and	r24, r24
    4134:	39 f0       	breq	.+14     	; 0x4144 <rom_config_message_rsp+0x16>
        state.modem.secs_network_inactive = 0;
    4136:	10 92 ad 28 	sts	0x28AD, r1
    413a:	10 92 ae 28 	sts	0x28AE, r1
        state.modem.send_rom_config = false;
    413e:	10 92 ac 28 	sts	0x28AC, r1
    4142:	08 95       	ret
    } else {
        state.modem.send_rom_config = true;
    4144:	81 e0       	ldi	r24, 0x01	; 1
    4146:	80 93 ac 28 	sts	0x28AC, r24
    414a:	08 95       	ret

0000414c <id_message_rsp>:
* ****************************************************************************
*/

static void id_message_rsp (bool res)
{
    state.modem.busy = false;
    414c:	10 92 a8 28 	sts	0x28A8, r1
    if (res) {
    4150:	88 23       	and	r24, r24
    4152:	39 f0       	breq	.+14     	; 0x4162 <id_message_rsp+0x16>
        state.modem.secs_network_inactive = 0;
    4154:	10 92 ad 28 	sts	0x28AD, r1
    4158:	10 92 ae 28 	sts	0x28AE, r1
        state.modem.send_id = false;
    415c:	10 92 a9 28 	sts	0x28A9, r1
    4160:	08 95       	ret
    } else {
        state.modem.send_id = true;
    4162:	81 e0       	ldi	r24, 0x01	; 1
    4164:	80 93 a9 28 	sts	0x28A9, r24
    4168:	08 95       	ret

0000416a <hex_nibble>:
    }
}

static uint8_t hex_nibble (int8_t nibble)
{
    nibble += 0x40;                             // add, al, 40H
    416a:	80 5c       	subi	r24, 0xC0	; 192
    nibble += ((int16_t) nibble >> 8) & 0x09;   // cbw, and ah, 09H, add al, ah
    416c:	28 2f       	mov	r18, r24
    416e:	33 27       	eor	r19, r19
    4170:	27 fd       	sbrc	r18, 7
    4172:	30 95       	com	r19
    4174:	93 2f       	mov	r25, r19
    4176:	99 70       	andi	r25, 0x09	; 9
    4178:	89 0f       	add	r24, r25
    nibble &= 0x0f;                             // and al, 0FH
    return nibble;
}
    417a:	8f 70       	andi	r24, 0x0F	; 15
    417c:	08 95       	ret

0000417e <hex_byte>:

static uint8_t hex_byte (const char* s)
{
    417e:	1f 93       	push	r17
    4180:	cf 93       	push	r28
    4182:	df 93       	push	r29
    4184:	ec 01       	movw	r28, r24
    return (hex_nibble (*s) << 4) | hex_nibble (* (s + 1));
    4186:	88 81       	ld	r24, Y
    4188:	f0 df       	rcall	.-32     	; 0x416a <hex_nibble>
    418a:	18 2f       	mov	r17, r24
    418c:	89 81       	ldd	r24, Y+1	; 0x01
    418e:	ed df       	rcall	.-38     	; 0x416a <hex_nibble>
    4190:	90 e1       	ldi	r25, 0x10	; 16
    4192:	19 9f       	mul	r17, r25
    4194:	90 01       	movw	r18, r0
    4196:	11 24       	eor	r1, r1
}
    4198:	82 2b       	or	r24, r18
    419a:	df 91       	pop	r29
    419c:	cf 91       	pop	r28
    419e:	1f 91       	pop	r17
    41a0:	08 95       	ret

000041a2 <valid_hex_char>:

static bool valid_hex_char (uint8_t ch)
{
    return (ch >= '0' && ch <= '9') || (ch >= 'A' && ch <= 'F');
    41a2:	98 2f       	mov	r25, r24
    41a4:	90 53       	subi	r25, 0x30	; 48
    41a6:	9a 30       	cpi	r25, 0x0A	; 10
    41a8:	48 f0       	brcs	.+18     	; 0x41bc <valid_hex_char+0x1a>
    41aa:	28 2f       	mov	r18, r24
    41ac:	21 54       	subi	r18, 0x41	; 65
    41ae:	81 e0       	ldi	r24, 0x01	; 1
    41b0:	90 e0       	ldi	r25, 0x00	; 0
    41b2:	26 30       	cpi	r18, 0x06	; 6
    41b4:	28 f0       	brcs	.+10     	; 0x41c0 <valid_hex_char+0x1e>
    41b6:	80 e0       	ldi	r24, 0x00	; 0
    41b8:	90 e0       	ldi	r25, 0x00	; 0
    41ba:	02 c0       	rjmp	.+4      	; 0x41c0 <valid_hex_char+0x1e>
    41bc:	81 e0       	ldi	r24, 0x01	; 1
    41be:	90 e0       	ldi	r25, 0x00	; 0
}
    41c0:	81 70       	andi	r24, 0x01	; 1
    41c2:	08 95       	ret

000041c4 <eeprom_read_pulse_counters>:
    set_midnight_pulse_counter (0, tmp.midnight_counter[0]);
    set_midnight_pulse_counter (1, tmp.midnight_counter[1]);
}

static void eeprom_read_pulse_counters (void)
{
    41c4:	cf 93       	push	r28
    41c6:	df 93       	push	r29
    41c8:	cd b7       	in	r28, 0x3d	; 61
    41ca:	de b7       	in	r29, 0x3e	; 62
    41cc:	61 97       	sbiw	r28, 0x11	; 17
    41ce:	cd bf       	out	0x3d, r28	; 61
    41d0:	de bf       	out	0x3e, r29	; 62
    uint8_t i;
    eeprom_pulse_counters_0x03_t tmp;
    DEBUG_putcrlf (__FUNCTION__);
    41d2:	89 e8       	ldi	r24, 0x89	; 137
    41d4:	93 e2       	ldi	r25, 0x23	; 35
    41d6:	0e 94 52 13 	call	0x26a4	; 0x26a4 <DEBUG_putcrlf>
    nvm_eeprom_read_buffer (offsetof (struct _eeprom_0x03_t, pulse_counters), &tmp, sizeof tmp);
    41da:	41 e1       	ldi	r20, 0x11	; 17
    41dc:	50 e0       	ldi	r21, 0x00	; 0
    41de:	be 01       	movw	r22, r28
    41e0:	6f 5f       	subi	r22, 0xFF	; 255
    41e2:	7f 4f       	sbci	r23, 0xFF	; 255
    41e4:	83 ec       	ldi	r24, 0xC3	; 195
    41e6:	90 e0       	ldi	r25, 0x00	; 0
    41e8:	0e 94 aa 14 	call	0x2954	; 0x2954 <nvm_eeprom_read_buffer>
    if (crc8_compute ((void*) &tmp, sizeof tmp) == 0) {
    41ec:	61 e1       	ldi	r22, 0x11	; 17
    41ee:	ce 01       	movw	r24, r28
    41f0:	01 96       	adiw	r24, 0x01	; 1
    41f2:	0e 94 c2 0c 	call	0x1984	; 0x1984 <crc8_compute>
    41f6:	81 11       	cpse	r24, r1
    41f8:	35 c0       	rjmp	.+106    	; 0x4264 <eeprom_read_pulse_counters+0xa0>
        for (i = 0; i < N_PULSE_COUNTERS; i++) {
            if (tmp.counter[i] == 0xFFFFFFFF) {
    41fa:	89 81       	ldd	r24, Y+1	; 0x01
    41fc:	9a 81       	ldd	r25, Y+2	; 0x02
    41fe:	ab 81       	ldd	r26, Y+3	; 0x03
    4200:	bc 81       	ldd	r27, Y+4	; 0x04
    4202:	8f 3f       	cpi	r24, 0xFF	; 255
    4204:	9f 4f       	sbci	r25, 0xFF	; 255
    4206:	af 4f       	sbci	r26, 0xFF	; 255
    4208:	bf 4f       	sbci	r27, 0xFF	; 255
    420a:	21 f4       	brne	.+8      	; 0x4214 <eeprom_read_pulse_counters+0x50>
                tmp.counter[i] = 0;
    420c:	19 82       	std	Y+1, r1	; 0x01
    420e:	1a 82       	std	Y+2, r1	; 0x02
    4210:	1b 82       	std	Y+3, r1	; 0x03
    4212:	1c 82       	std	Y+4, r1	; 0x04
            }
            if (tmp.midnight_counter[i] == 0xFFFFFFFF) {
    4214:	89 85       	ldd	r24, Y+9	; 0x09
    4216:	9a 85       	ldd	r25, Y+10	; 0x0a
    4218:	ab 85       	ldd	r26, Y+11	; 0x0b
    421a:	bc 85       	ldd	r27, Y+12	; 0x0c
    421c:	8f 3f       	cpi	r24, 0xFF	; 255
    421e:	9f 4f       	sbci	r25, 0xFF	; 255
    4220:	af 4f       	sbci	r26, 0xFF	; 255
    4222:	bf 4f       	sbci	r27, 0xFF	; 255
    4224:	21 f4       	brne	.+8      	; 0x422e <eeprom_read_pulse_counters+0x6a>
                tmp.midnight_counter[i] = 0;
    4226:	19 86       	std	Y+9, r1	; 0x09
    4228:	1a 86       	std	Y+10, r1	; 0x0a
    422a:	1b 86       	std	Y+11, r1	; 0x0b
    422c:	1c 86       	std	Y+12, r1	; 0x0c
    eeprom_pulse_counters_0x03_t tmp;
    DEBUG_putcrlf (__FUNCTION__);
    nvm_eeprom_read_buffer (offsetof (struct _eeprom_0x03_t, pulse_counters), &tmp, sizeof tmp);
    if (crc8_compute ((void*) &tmp, sizeof tmp) == 0) {
        for (i = 0; i < N_PULSE_COUNTERS; i++) {
            if (tmp.counter[i] == 0xFFFFFFFF) {
    422e:	8d 81       	ldd	r24, Y+5	; 0x05
    4230:	9e 81       	ldd	r25, Y+6	; 0x06
    4232:	af 81       	ldd	r26, Y+7	; 0x07
    4234:	b8 85       	ldd	r27, Y+8	; 0x08
    4236:	8f 3f       	cpi	r24, 0xFF	; 255
    4238:	9f 4f       	sbci	r25, 0xFF	; 255
    423a:	af 4f       	sbci	r26, 0xFF	; 255
    423c:	bf 4f       	sbci	r27, 0xFF	; 255
    423e:	21 f4       	brne	.+8      	; 0x4248 <eeprom_read_pulse_counters+0x84>
                tmp.counter[i] = 0;
    4240:	1d 82       	std	Y+5, r1	; 0x05
    4242:	1e 82       	std	Y+6, r1	; 0x06
    4244:	1f 82       	std	Y+7, r1	; 0x07
    4246:	18 86       	std	Y+8, r1	; 0x08
            }
            if (tmp.midnight_counter[i] == 0xFFFFFFFF) {
    4248:	8d 85       	ldd	r24, Y+13	; 0x0d
    424a:	9e 85       	ldd	r25, Y+14	; 0x0e
    424c:	af 85       	ldd	r26, Y+15	; 0x0f
    424e:	b8 89       	ldd	r27, Y+16	; 0x10
    4250:	8f 3f       	cpi	r24, 0xFF	; 255
    4252:	9f 4f       	sbci	r25, 0xFF	; 255
    4254:	af 4f       	sbci	r26, 0xFF	; 255
    4256:	bf 4f       	sbci	r27, 0xFF	; 255
    4258:	61 f4       	brne	.+24     	; 0x4272 <eeprom_read_pulse_counters+0xae>
                tmp.midnight_counter[i] = 0;
    425a:	1d 86       	std	Y+13, r1	; 0x0d
    425c:	1e 86       	std	Y+14, r1	; 0x0e
    425e:	1f 86       	std	Y+15, r1	; 0x0f
    4260:	18 8a       	std	Y+16, r1	; 0x10
    4262:	07 c0       	rjmp	.+14     	; 0x4272 <eeprom_read_pulse_counters+0xae>
            }
        }
    } else {
        memset (&tmp, 0, sizeof tmp);
    4264:	fe 01       	movw	r30, r28
    4266:	31 96       	adiw	r30, 0x01	; 1
    4268:	81 e1       	ldi	r24, 0x11	; 17
    426a:	df 01       	movw	r26, r30
    426c:	1d 92       	st	X+, r1
    426e:	8a 95       	dec	r24
    4270:	e9 f7       	brne	.-6      	; 0x426c <eeprom_read_pulse_counters+0xa8>
    }
    set_current_pulse_counter (0, tmp.counter[0]);
    4272:	49 81       	ldd	r20, Y+1	; 0x01
    4274:	5a 81       	ldd	r21, Y+2	; 0x02
    4276:	6b 81       	ldd	r22, Y+3	; 0x03
    4278:	7c 81       	ldd	r23, Y+4	; 0x04
    427a:	80 e0       	ldi	r24, 0x00	; 0
    427c:	91 de       	rcall	.-734    	; 0x3fa0 <set_current_pulse_counter>
    set_current_pulse_counter (1, tmp.counter[1]);
    427e:	4d 81       	ldd	r20, Y+5	; 0x05
    4280:	5e 81       	ldd	r21, Y+6	; 0x06
    4282:	6f 81       	ldd	r22, Y+7	; 0x07
    4284:	78 85       	ldd	r23, Y+8	; 0x08
    4286:	81 e0       	ldi	r24, 0x01	; 1
    4288:	8b de       	rcall	.-746    	; 0x3fa0 <set_current_pulse_counter>
    set_midnight_pulse_counter (0, tmp.midnight_counter[0]);
    428a:	49 85       	ldd	r20, Y+9	; 0x09
    428c:	5a 85       	ldd	r21, Y+10	; 0x0a
    428e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4290:	7c 85       	ldd	r23, Y+12	; 0x0c
    4292:	80 e0       	ldi	r24, 0x00	; 0
    4294:	95 de       	rcall	.-726    	; 0x3fc0 <set_midnight_pulse_counter>
    set_midnight_pulse_counter (1, tmp.midnight_counter[1]);
    4296:	4d 85       	ldd	r20, Y+13	; 0x0d
    4298:	5e 85       	ldd	r21, Y+14	; 0x0e
    429a:	6f 85       	ldd	r22, Y+15	; 0x0f
    429c:	78 89       	ldd	r23, Y+16	; 0x10
    429e:	81 e0       	ldi	r24, 0x01	; 1
    42a0:	8f de       	rcall	.-738    	; 0x3fc0 <set_midnight_pulse_counter>
}
    42a2:	61 96       	adiw	r28, 0x11	; 17
    42a4:	cd bf       	out	0x3d, r28	; 61
    42a6:	de bf       	out	0x3e, r29	; 62
    42a8:	df 91       	pop	r29
    42aa:	cf 91       	pop	r28
    42ac:	08 95       	ret

000042ae <eeprom_write_config>:

static void eeprom_write_config (void)
{
    DEBUG_putcrlf (__FUNCTION__);
    42ae:	85 e7       	ldi	r24, 0x75	; 117
    42b0:	93 e2       	ldi	r25, 0x23	; 35
    42b2:	0e 94 52 13 	call	0x26a4	; 0x26a4 <DEBUG_putcrlf>
    config.eeprom_version = CONFIG_EEPROM_VERSION;
    42b6:	83 e0       	ldi	r24, 0x03	; 3
    42b8:	80 93 70 2b 	sts	0x2B70, r24
    config.crc8 = crc8_compute ((void*) &config, sizeof config - 1);
    42bc:	62 e6       	ldi	r22, 0x62	; 98
    42be:	80 e7       	ldi	r24, 0x70	; 112
    42c0:	9b e2       	ldi	r25, 0x2B	; 43
    42c2:	0e 94 c2 0c 	call	0x1984	; 0x1984 <crc8_compute>
    42c6:	80 93 d2 2b 	sts	0x2BD2, r24
    cpu_irq_disable ();
    42ca:	f8 94       	cli
    nvm_eeprom_erase_and_write_buffer (offsetof (struct _eeprom_0x03_t, config), &config,
    42cc:	43 e6       	ldi	r20, 0x63	; 99
    42ce:	50 e0       	ldi	r21, 0x00	; 0
    42d0:	60 e7       	ldi	r22, 0x70	; 112
    42d2:	7b e2       	ldi	r23, 0x2B	; 43
    42d4:	80 e6       	ldi	r24, 0x60	; 96
    42d6:	90 e0       	ldi	r25, 0x00	; 0
    42d8:	0e 94 49 15 	call	0x2a92	; 0x2a92 <nvm_eeprom_erase_and_write_buffer>
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    42dc:	e0 ec       	ldi	r30, 0xC0	; 192
    42de:	f1 e0       	ldi	r31, 0x01	; 1
    42e0:	87 85       	ldd	r24, Z+15	; 0x0f
    42e2:	88 23       	and	r24, r24
    42e4:	ec f3       	brlt	.-6      	; 0x42e0 <eeprom_write_config+0x32>
                                       sizeof config);
    nvm_wait_until_ready ();
    cpu_irq_enable ();
    42e6:	78 94       	sei
    42e8:	08 95       	ret

000042ea <eeprom_write_pulse_counters>:
*                              EEPROM LOG
* ****************************************************************************
*/

static void eeprom_write_pulse_counters (void)
{
    42ea:	cf 93       	push	r28
    42ec:	df 93       	push	r29
    42ee:	cd b7       	in	r28, 0x3d	; 61
    42f0:	de b7       	in	r29, 0x3e	; 62
    42f2:	61 97       	sbiw	r28, 0x11	; 17
    42f4:	cd bf       	out	0x3d, r28	; 61
    42f6:	de bf       	out	0x3e, r29	; 62
    eeprom_pulse_counters_0x03_t tmp;
    tmp.counter[0] = get_current_pulse_counter (0);
    42f8:	80 e0       	ldi	r24, 0x00	; 0
    42fa:	32 de       	rcall	.-924    	; 0x3f60 <get_current_pulse_counter>
    42fc:	69 83       	std	Y+1, r22	; 0x01
    42fe:	7a 83       	std	Y+2, r23	; 0x02
    4300:	8b 83       	std	Y+3, r24	; 0x03
    4302:	9c 83       	std	Y+4, r25	; 0x04
    tmp.counter[1] = get_current_pulse_counter (1);
    4304:	81 e0       	ldi	r24, 0x01	; 1
    4306:	2c de       	rcall	.-936    	; 0x3f60 <get_current_pulse_counter>
    4308:	6d 83       	std	Y+5, r22	; 0x05
    430a:	7e 83       	std	Y+6, r23	; 0x06
    430c:	8f 83       	std	Y+7, r24	; 0x07
    430e:	98 87       	std	Y+8, r25	; 0x08
    tmp.midnight_counter[0] = get_midnight_pulse_counter (0);
    4310:	80 e0       	ldi	r24, 0x00	; 0
    4312:	36 de       	rcall	.-916    	; 0x3f80 <get_midnight_pulse_counter>
    4314:	69 87       	std	Y+9, r22	; 0x09
    4316:	7a 87       	std	Y+10, r23	; 0x0a
    4318:	8b 87       	std	Y+11, r24	; 0x0b
    431a:	9c 87       	std	Y+12, r25	; 0x0c
    tmp.midnight_counter[1] = get_midnight_pulse_counter (1);
    431c:	81 e0       	ldi	r24, 0x01	; 1
    431e:	30 de       	rcall	.-928    	; 0x3f80 <get_midnight_pulse_counter>
    4320:	6d 87       	std	Y+13, r22	; 0x0d
    4322:	7e 87       	std	Y+14, r23	; 0x0e
    4324:	8f 87       	std	Y+15, r24	; 0x0f
    4326:	98 8b       	std	Y+16, r25	; 0x10
    tmp.crc = crc8_compute ((void*) &tmp, sizeof tmp - 1);
    4328:	60 e1       	ldi	r22, 0x10	; 16
    432a:	ce 01       	movw	r24, r28
    432c:	01 96       	adiw	r24, 0x01	; 1
    432e:	0e 94 c2 0c 	call	0x1984	; 0x1984 <crc8_compute>
    4332:	89 8b       	std	Y+17, r24	; 0x11
    nvm_eeprom_erase_and_write_buffer (offsetof (struct _eeprom_0x03_t, pulse_counters), &tmp, sizeof (tmp));
    4334:	41 e1       	ldi	r20, 0x11	; 17
    4336:	50 e0       	ldi	r21, 0x00	; 0
    4338:	be 01       	movw	r22, r28
    433a:	6f 5f       	subi	r22, 0xFF	; 255
    433c:	7f 4f       	sbci	r23, 0xFF	; 255
    433e:	83 ec       	ldi	r24, 0xC3	; 195
    4340:	90 e0       	ldi	r25, 0x00	; 0
    4342:	0e 94 49 15 	call	0x2a92	; 0x2a92 <nvm_eeprom_erase_and_write_buffer>
    4346:	e0 ec       	ldi	r30, 0xC0	; 192
    4348:	f1 e0       	ldi	r31, 0x01	; 1
    434a:	87 85       	ldd	r24, Z+15	; 0x0f
    434c:	88 23       	and	r24, r24
    434e:	ec f3       	brlt	.-6      	; 0x434a <eeprom_write_pulse_counters+0x60>
    nvm_wait_until_ready ();
    DEBUG_putcrlf (__FUNCTION__);
    4350:	89 e5       	ldi	r24, 0x59	; 89
    4352:	93 e2       	ldi	r25, 0x23	; 35
    4354:	0e 94 52 13 	call	0x26a4	; 0x26a4 <DEBUG_putcrlf>
}
    4358:	61 96       	adiw	r28, 0x11	; 17
    435a:	cd bf       	out	0x3d, r28	; 61
    435c:	de bf       	out	0x3e, r29	; 62
    435e:	df 91       	pop	r29
    4360:	cf 91       	pop	r28
    4362:	08 95       	ret

00004364 <config_find_ow_rom_code>:
        }
    }
}

static int8_t config_find_ow_rom_code (uint8_t cfg_idx)
{
    4364:	ef 92       	push	r14
    4366:	ff 92       	push	r15
    4368:	0f 93       	push	r16
    436a:	1f 93       	push	r17
    436c:	cf 93       	push	r28
    436e:	df 93       	push	r29
    uint8_t i;
    if (config.rom[cfg_idx].valid) {
    4370:	90 e0       	ldi	r25, 0x00	; 0
    4372:	fc 01       	movw	r30, r24
    4374:	ee 0f       	add	r30, r30
    4376:	ff 1f       	adc	r31, r31
    4378:	ee 0f       	add	r30, r30
    437a:	ff 1f       	adc	r31, r31
    437c:	ee 0f       	add	r30, r30
    437e:	ff 1f       	adc	r31, r31
    4380:	e8 0f       	add	r30, r24
    4382:	f9 1f       	adc	r31, r25
    4384:	e0 59       	subi	r30, 0x90	; 144
    4386:	f4 4d       	sbci	r31, 0xD4	; 212
    4388:	23 81       	ldd	r18, Z+3	; 0x03
    438a:	22 23       	and	r18, r18
    438c:	51 f1       	breq	.+84     	; 0x43e2 <config_find_ow_rom_code+0x7e>
        for (i = 0; i < ow_count; i++) {
    438e:	f0 90 84 2d 	lds	r15, 0x2D84
    4392:	ff 20       	and	r15, r15
    4394:	41 f1       	breq	.+80     	; 0x43e6 <config_find_ow_rom_code+0x82>
    4396:	c0 e0       	ldi	r28, 0x00	; 0
    4398:	d0 e0       	ldi	r29, 0x00	; 0
            if (memcmp (config.rom[cfg_idx].code, ow_rom_codes[i], 8) == 0) {
    439a:	8c 01       	movw	r16, r24
    439c:	00 0f       	add	r16, r16
    439e:	11 1f       	adc	r17, r17
    43a0:	00 0f       	add	r16, r16
    43a2:	11 1f       	adc	r17, r17
    43a4:	00 0f       	add	r16, r16
    43a6:	11 1f       	adc	r17, r17
    43a8:	08 0f       	add	r16, r24
    43aa:	19 1f       	adc	r17, r25
    43ac:	0c 58       	subi	r16, 0x8C	; 140
    43ae:	14 4d       	sbci	r17, 0xD4	; 212
    43b0:	be 01       	movw	r22, r28
    43b2:	66 0f       	add	r22, r22
    43b4:	77 1f       	adc	r23, r23
    43b6:	66 0f       	add	r22, r22
    43b8:	77 1f       	adc	r23, r23
    43ba:	66 0f       	add	r22, r22
    43bc:	77 1f       	adc	r23, r23
    43be:	6c 5f       	subi	r22, 0xFC	; 252
    43c0:	72 4d       	sbci	r23, 0xD2	; 210
    43c2:	48 e0       	ldi	r20, 0x08	; 8
    43c4:	50 e0       	ldi	r21, 0x00	; 0
    43c6:	c8 01       	movw	r24, r16
    43c8:	0e 94 a9 36 	call	0x6d52	; 0x6d52 <memcmp>
    43cc:	28 2f       	mov	r18, r24
    43ce:	39 2f       	mov	r19, r25
    43d0:	23 2b       	or	r18, r19
    43d2:	11 f4       	brne	.+4      	; 0x43d8 <config_find_ow_rom_code+0x74>
                return i;
    43d4:	8c 2f       	mov	r24, r28
    43d6:	08 c0       	rjmp	.+16     	; 0x43e8 <config_find_ow_rom_code+0x84>
    43d8:	21 96       	adiw	r28, 0x01	; 1

static int8_t config_find_ow_rom_code (uint8_t cfg_idx)
{
    uint8_t i;
    if (config.rom[cfg_idx].valid) {
        for (i = 0; i < ow_count; i++) {
    43da:	cf 15       	cp	r28, r15
    43dc:	48 f3       	brcs	.-46     	; 0x43b0 <config_find_ow_rom_code+0x4c>
            if (memcmp (config.rom[cfg_idx].code, ow_rom_codes[i], 8) == 0) {
                return i;
            }
        }
    }
    return -1;
    43de:	8f ef       	ldi	r24, 0xFF	; 255
    43e0:	03 c0       	rjmp	.+6      	; 0x43e8 <config_find_ow_rom_code+0x84>
    43e2:	8f ef       	ldi	r24, 0xFF	; 255
    43e4:	01 c0       	rjmp	.+2      	; 0x43e8 <config_find_ow_rom_code+0x84>
    43e6:	8f ef       	ldi	r24, 0xFF	; 255
}
    43e8:	df 91       	pop	r29
    43ea:	cf 91       	pop	r28
    43ec:	1f 91       	pop	r17
    43ee:	0f 91       	pop	r16
    43f0:	ff 90       	pop	r15
    43f2:	ef 90       	pop	r14
    43f4:	08 95       	ret

000043f6 <buffer_str_event>:
        state.event_buffer.back = b;
    }
}

static void buffer_str_event (uint8_t event, const char* data)
{
    43f6:	ef 92       	push	r14
    43f8:	ff 92       	push	r15
    43fa:	0f 93       	push	r16
    43fc:	1f 93       	push	r17
    43fe:	cf 93       	push	r28
    4400:	df 93       	push	r29
    4402:	e8 2e       	mov	r14, r24
    4404:	8b 01       	movw	r16, r22
    uint8_t b = (state.event_buffer.back + 1) % EVENT_BUFFER_SIZE;
    4406:	c0 91 32 29 	lds	r28, 0x2932
    440a:	d0 e0       	ldi	r29, 0x00	; 0
    440c:	9e 01       	movw	r18, r28
    440e:	2f 5f       	subi	r18, 0xFF	; 255
    4410:	3f 4f       	sbci	r19, 0xFF	; 255
    4412:	2f 70       	andi	r18, 0x0F	; 15
    4414:	30 78       	andi	r19, 0x80	; 128
    4416:	f2 2e       	mov	r15, r18
    if (b != state.event_buffer.front) {
    4418:	80 91 31 29 	lds	r24, 0x2931
    441c:	82 17       	cp	r24, r18
    441e:	a1 f0       	breq	.+40     	; 0x4448 <buffer_str_event+0x52>
        event_t* pevent = & (state.event_buffer.buffer[state.event_buffer.back]);
    4420:	cc 0f       	add	r28, r28
    4422:	dd 1f       	adc	r29, r29
    4424:	cc 0f       	add	r28, r28
    4426:	dd 1f       	adc	r29, r29
    4428:	cc 0f       	add	r28, r28
    442a:	dd 1f       	adc	r29, r29
    442c:	cf 54       	subi	r28, 0x4F	; 79
    442e:	d7 4d       	sbci	r29, 0xD7	; 215
        pevent->timestamp = epoch_get ();
    4430:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <epoch_get>
    4434:	68 83       	st	Y, r22
    4436:	79 83       	std	Y+1, r23	; 0x01
    4438:	8a 83       	std	Y+2, r24	; 0x02
    443a:	9b 83       	std	Y+3, r25	; 0x03
        pevent->event = event;
    443c:	ec 82       	std	Y+4, r14	; 0x04
        pevent->is_int = false;
    443e:	1d 82       	std	Y+5, r1	; 0x05
        pevent->str_data = data;
    4440:	0e 83       	std	Y+6, r16	; 0x06
    4442:	1f 83       	std	Y+7, r17	; 0x07
        state.event_buffer.back = b;
    4444:	f0 92 32 29 	sts	0x2932, r15
    }
}
    4448:	df 91       	pop	r29
    444a:	cf 91       	pop	r28
    444c:	1f 91       	pop	r17
    444e:	0f 91       	pop	r16
    4450:	ff 90       	pop	r15
    4452:	ef 90       	pop	r14
    4454:	08 95       	ret

00004456 <buffer_event>:
*                               EVENT BUFFER HANDLERS
* ****************************************************************************
*/

static void buffer_event (uint8_t event, const int32_t data)
{
    4456:	cf 92       	push	r12
    4458:	df 92       	push	r13
    445a:	ef 92       	push	r14
    445c:	ff 92       	push	r15
    445e:	0f 93       	push	r16
    4460:	1f 93       	push	r17
    4462:	cf 93       	push	r28
    4464:	df 93       	push	r29
    4466:	18 2f       	mov	r17, r24
    4468:	6a 01       	movw	r12, r20
    446a:	7b 01       	movw	r14, r22
    uint8_t b = (state.event_buffer.back + 1) % EVENT_BUFFER_SIZE;
    446c:	c0 91 32 29 	lds	r28, 0x2932
    4470:	d0 e0       	ldi	r29, 0x00	; 0
    4472:	9e 01       	movw	r18, r28
    4474:	2f 5f       	subi	r18, 0xFF	; 255
    4476:	3f 4f       	sbci	r19, 0xFF	; 255
    4478:	2f 70       	andi	r18, 0x0F	; 15
    447a:	30 78       	andi	r19, 0x80	; 128
    447c:	02 2f       	mov	r16, r18
    if (b != state.event_buffer.front) {
    447e:	80 91 31 29 	lds	r24, 0x2931
    4482:	82 17       	cp	r24, r18
    4484:	a9 f0       	breq	.+42     	; 0x44b0 <buffer_event+0x5a>
        event_t* pevent = & (state.event_buffer.buffer[state.event_buffer.back]);
    4486:	cc 0f       	add	r28, r28
    4488:	dd 1f       	adc	r29, r29
    448a:	cc 0f       	add	r28, r28
    448c:	dd 1f       	adc	r29, r29
    448e:	cc 0f       	add	r28, r28
    4490:	dd 1f       	adc	r29, r29
    4492:	cf 54       	subi	r28, 0x4F	; 79
    4494:	d7 4d       	sbci	r29, 0xD7	; 215
        pevent->timestamp = epoch_get ();
    4496:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <epoch_get>
    449a:	68 83       	st	Y, r22
    449c:	79 83       	std	Y+1, r23	; 0x01
    449e:	8a 83       	std	Y+2, r24	; 0x02
    44a0:	9b 83       	std	Y+3, r25	; 0x03
        pevent->event = event;
    44a2:	1c 83       	std	Y+4, r17	; 0x04
        pevent->is_int = true;
    44a4:	81 e0       	ldi	r24, 0x01	; 1
    44a6:	8d 83       	std	Y+5, r24	; 0x05
        pevent->int_data = data;
    44a8:	ce 82       	std	Y+6, r12	; 0x06
    44aa:	df 82       	std	Y+7, r13	; 0x07
        state.event_buffer.back = b;
    44ac:	00 93 32 29 	sts	0x2932, r16
    }
}
    44b0:	df 91       	pop	r29
    44b2:	cf 91       	pop	r28
    44b4:	1f 91       	pop	r17
    44b6:	0f 91       	pop	r16
    44b8:	ff 90       	pop	r15
    44ba:	ef 90       	pop	r14
    44bc:	df 90       	pop	r13
    44be:	cf 90       	pop	r12
    44c0:	08 95       	ret

000044c2 <update_asset_state>:
        }
    }
}

static void update_asset_state (void)
{
    44c2:	8f 92       	push	r8
    44c4:	9f 92       	push	r9
    44c6:	af 92       	push	r10
    44c8:	bf 92       	push	r11
    44ca:	cf 92       	push	r12
    44cc:	df 92       	push	r13
    44ce:	ef 92       	push	r14
    44d0:	ff 92       	push	r15
    44d2:	1f 93       	push	r17
    44d4:	cf 93       	push	r28
    44d6:	df 93       	push	r29
}

static void update_current_status (void)
{
    int8_t index[3] = {
        config_find_ow_rom_code (0),
    44d8:	80 e0       	ldi	r24, 0x00	; 0
    44da:	44 df       	rcall	.-376    	; 0x4364 <config_find_ow_rom_code>
    44dc:	98 2e       	mov	r9, r24
        config_find_ow_rom_code (1),
    44de:	81 e0       	ldi	r24, 0x01	; 1
    44e0:	41 df       	rcall	.-382    	; 0x4364 <config_find_ow_rom_code>
    44e2:	a8 2e       	mov	r10, r24
        config_find_ow_rom_code (2)
    44e4:	82 e0       	ldi	r24, 0x02	; 2
    44e6:	3e df       	rcall	.-388    	; 0x4364 <config_find_ow_rom_code>
    44e8:	b8 2e       	mov	r11, r24
    };
    state.current.epoch = epoch_get ();
    44ea:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <epoch_get>
    44ee:	60 93 15 2b 	sts	0x2B15, r22
    44f2:	70 93 16 2b 	sts	0x2B16, r23
    44f6:	80 93 17 2b 	sts	0x2B17, r24
    44fa:	90 93 18 2b 	sts	0x2B18, r25

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
    44fe:	e0 e6       	ldi	r30, 0x60	; 96
    4500:	f6 e0       	ldi	r31, 0x06	; 6
    4502:	80 85       	ldd	r24, Z+8	; 0x08
    4504:	83 fb       	bst	r24, 3
    4506:	88 27       	eor	r24, r24
    4508:	80 f9       	bld	r24, 0
    state.current.power_on = geyser_is_power_on ();
    450a:	80 93 2a 2b 	sts	0x2B2A, r24
    return ioport_get_value (GPIO_POWER);
}

static bool geyser_is_element_on (void)
{
    if (state.geyser.elect.detected) {
    450e:	80 91 62 2b 	lds	r24, 0x2B62
    4512:	88 23       	and	r24, r24
    4514:	c9 f0       	breq	.+50     	; 0x4548 <update_asset_state+0x86>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    4516:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    4518:	f8 94       	cli
        uint32_t epoch;
        irqflags_t f = cpu_irq_save ();
        epoch = state.geyser.elect.detected_at_epoch;
    451a:	c0 90 5e 2b 	lds	r12, 0x2B5E
    451e:	d0 90 5f 2b 	lds	r13, 0x2B5F
    4522:	e0 90 60 2b 	lds	r14, 0x2B60
    4526:	f0 90 61 2b 	lds	r15, 0x2B61
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    452a:	8f bf       	out	0x3f, r24	; 63
        cpu_irq_restore (f);
        if (epoch_get () >= epoch + 10) {
    452c:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <epoch_get>
    4530:	2a e0       	ldi	r18, 0x0A	; 10
    4532:	c2 0e       	add	r12, r18
    4534:	d1 1c       	adc	r13, r1
    4536:	e1 1c       	adc	r14, r1
    4538:	f1 1c       	adc	r15, r1
    453a:	6c 15       	cp	r22, r12
    453c:	7d 05       	cpc	r23, r13
    453e:	8e 05       	cpc	r24, r14
    4540:	9f 05       	cpc	r25, r15
    4542:	10 f0       	brcs	.+4      	; 0x4548 <update_asset_state+0x86>
            state.geyser.elect.detected = false;
    4544:	10 92 62 2b 	sts	0x2B62, r1
        config_find_ow_rom_code (1),
        config_find_ow_rom_code (2)
    };
    state.current.epoch = epoch_get ();
    state.current.power_on = geyser_is_power_on ();
    state.current.element_on = geyser_is_element_on ();
    4548:	80 91 62 2b 	lds	r24, 0x2B62
    454c:	80 93 2b 2b 	sts	0x2B2B, r24
    return state.geyser.elect.detected;
}

static bool geyser_is_water_running (void)
{
    if (state.geyser.water_running.detected) {
    4550:	80 91 5d 2b 	lds	r24, 0x2B5D
    4554:	88 23       	and	r24, r24
    4556:	c9 f0       	breq	.+50     	; 0x458a <update_asset_state+0xc8>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    4558:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    455a:	f8 94       	cli
        uint32_t epoch;
        irqflags_t f = cpu_irq_save ();
        epoch = state.geyser.water_running.detected_at_epoch;
    455c:	c0 90 59 2b 	lds	r12, 0x2B59
    4560:	d0 90 5a 2b 	lds	r13, 0x2B5A
    4564:	e0 90 5b 2b 	lds	r14, 0x2B5B
    4568:	f0 90 5c 2b 	lds	r15, 0x2B5C
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    456c:	8f bf       	out	0x3f, r24	; 63
        cpu_irq_restore (f);
        if (epoch_get () >= epoch + 10) {
    456e:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <epoch_get>
    4572:	2a e0       	ldi	r18, 0x0A	; 10
    4574:	c2 0e       	add	r12, r18
    4576:	d1 1c       	adc	r13, r1
    4578:	e1 1c       	adc	r14, r1
    457a:	f1 1c       	adc	r15, r1
    457c:	6c 15       	cp	r22, r12
    457e:	7d 05       	cpc	r23, r13
    4580:	8e 05       	cpc	r24, r14
    4582:	9f 05       	cpc	r25, r15
    4584:	10 f0       	brcs	.+4      	; 0x458a <update_asset_state+0xc8>
            state.geyser.water_running.detected = false;
    4586:	10 92 5d 2b 	sts	0x2B5D, r1
        }
    }
    return state.geyser.water_running.detected;
    458a:	c0 91 5d 2b 	lds	r28, 0x2B5D
        config_find_ow_rom_code (2)
    };
    state.current.epoch = epoch_get ();
    state.current.power_on = geyser_is_power_on ();
    state.current.element_on = geyser_is_element_on ();
    state.current.water_event.running = geyser_is_water_running ();
    458e:	c0 93 2c 2b 	sts	0x2B2C, r28
    state.current.temp_x16[0] = index[0] >= 0
                                ? ds18b20_temperature[index[0]]
                                : INT16_MIN;
    4592:	99 20       	and	r9, r9
    4594:	44 f0       	brlt	.+16     	; 0x45a6 <update_asset_state+0xe4>
    4596:	e9 2d       	mov	r30, r9
    4598:	ee 0f       	add	r30, r30
    459a:	ff 0b       	sbc	r31, r31
    459c:	ec 52       	subi	r30, 0x2C	; 44
    459e:	f4 4d       	sbci	r31, 0xD4	; 212
    45a0:	40 81       	ld	r20, Z
    45a2:	51 81       	ldd	r21, Z+1	; 0x01
    45a4:	02 c0       	rjmp	.+4      	; 0x45aa <update_asset_state+0xe8>
    45a6:	40 e0       	ldi	r20, 0x00	; 0
    45a8:	50 e8       	ldi	r21, 0x80	; 128
    };
    state.current.epoch = epoch_get ();
    state.current.power_on = geyser_is_power_on ();
    state.current.element_on = geyser_is_element_on ();
    state.current.water_event.running = geyser_is_water_running ();
    state.current.temp_x16[0] = index[0] >= 0
    45aa:	40 93 1c 2b 	sts	0x2B1C, r20
    45ae:	50 93 1d 2b 	sts	0x2B1D, r21
                                ? ds18b20_temperature[index[0]]
                                : INT16_MIN;
    state.current.temp_x16[1] = index[1] >= 0
                                ? ds18b20_temperature[index[1]]
                                : INT16_MIN;
    45b2:	aa 20       	and	r10, r10
    45b4:	4c f0       	brlt	.+18     	; 0x45c8 <update_asset_state+0x106>
    45b6:	ea 2d       	mov	r30, r10
    45b8:	ee 0f       	add	r30, r30
    45ba:	ff 0b       	sbc	r31, r31
    45bc:	ec 52       	subi	r30, 0x2C	; 44
    45be:	f4 4d       	sbci	r31, 0xD4	; 212
    45c0:	01 90       	ld	r0, Z+
    45c2:	f0 81       	ld	r31, Z
    45c4:	e0 2d       	mov	r30, r0
    45c6:	02 c0       	rjmp	.+4      	; 0x45cc <update_asset_state+0x10a>
    45c8:	e0 e0       	ldi	r30, 0x00	; 0
    45ca:	f0 e8       	ldi	r31, 0x80	; 128
    state.current.element_on = geyser_is_element_on ();
    state.current.water_event.running = geyser_is_water_running ();
    state.current.temp_x16[0] = index[0] >= 0
                                ? ds18b20_temperature[index[0]]
                                : INT16_MIN;
    state.current.temp_x16[1] = index[1] >= 0
    45cc:	e0 93 1e 2b 	sts	0x2B1E, r30
    45d0:	f0 93 1f 2b 	sts	0x2B1F, r31
                                ? ds18b20_temperature[index[1]]
                                : INT16_MIN;
    state.current.temp_x16[2] = index[2] >= 0
                                ? ds18b20_temperature[index[2]]
                                : INT16_MIN;
    45d4:	bb 20       	and	r11, r11
    45d6:	44 f0       	brlt	.+16     	; 0x45e8 <update_asset_state+0x126>
    45d8:	ab 2d       	mov	r26, r11
    45da:	aa 0f       	add	r26, r26
    45dc:	bb 0b       	sbc	r27, r27
    45de:	ac 52       	subi	r26, 0x2C	; 44
    45e0:	b4 4d       	sbci	r27, 0xD4	; 212
    45e2:	2d 91       	ld	r18, X+
    45e4:	3c 91       	ld	r19, X
    45e6:	02 c0       	rjmp	.+4      	; 0x45ec <update_asset_state+0x12a>
    45e8:	20 e0       	ldi	r18, 0x00	; 0
    45ea:	30 e8       	ldi	r19, 0x80	; 128
                                ? ds18b20_temperature[index[0]]
                                : INT16_MIN;
    state.current.temp_x16[1] = index[1] >= 0
                                ? ds18b20_temperature[index[1]]
                                : INT16_MIN;
    state.current.temp_x16[2] = index[2] >= 0
    45ec:	20 93 20 2b 	sts	0x2B20, r18
    45f0:	30 93 21 2b 	sts	0x2B21, r19
                                ? ds18b20_temperature[index[2]]
                                : INT16_MIN;
    if (state.current.temp_x16[0] == INT16_MIN || state.current.temp_x16[1] == INT16_MIN
    45f4:	41 15       	cp	r20, r1
    45f6:	60 e8       	ldi	r22, 0x80	; 128
    45f8:	56 07       	cpc	r21, r22
    45fa:	41 f0       	breq	.+16     	; 0x460c <update_asset_state+0x14a>
    45fc:	e1 15       	cp	r30, r1
    45fe:	70 e8       	ldi	r23, 0x80	; 128
    4600:	f7 07       	cpc	r31, r23
    4602:	21 f0       	breq	.+8      	; 0x460c <update_asset_state+0x14a>
            || state.current.temp_x16[2] == INT16_MIN) {
    4604:	21 15       	cp	r18, r1
    4606:	80 e8       	ldi	r24, 0x80	; 128
    4608:	38 07       	cpc	r19, r24
    460a:	21 f4       	brne	.+8      	; 0x4614 <update_asset_state+0x152>
        state.current.state = STATUS_STATE_SENSOR_ERROR;
    460c:	82 e0       	ldi	r24, 0x02	; 2
    460e:	80 93 19 2b 	sts	0x2B19, r24
    4612:	03 c0       	rjmp	.+6      	; 0x461a <update_asset_state+0x158>
    } else {
        state.current.state = STATUS_STATE_OPERATIONAL;
    4614:	81 e0       	ldi	r24, 0x01	; 1
    4616:	80 93 19 2b 	sts	0x2B19, r24
                && labs (state.dispatched.temp_x16[2] - state.current.temp_x16[2]) >= config.temp_delta_trigger_x16)

            || ((get_current_pulse_counter (ELEC_PULSE_COUNTER) -
                 state.dispatched.pulse_counter[ELEC_PULSE_COUNTER]) >= config.elec_delta_trigger)

            || ((get_current_pulse_counter (FLOW_PULSE_COUNTER) -
    461a:	60 91 af 28 	lds	r22, 0x28AF
    461e:	70 91 b0 28 	lds	r23, 0x28B0
    4622:	80 91 71 2b 	lds	r24, 0x2B71
    4626:	90 91 72 2b 	lds	r25, 0x2B72
    462a:	68 17       	cp	r22, r24
    462c:	79 07       	cpc	r23, r25
    462e:	08 f0       	brcs	.+2      	; 0x4632 <update_asset_state+0x170>
    4630:	b9 c0       	rjmp	.+370    	; 0x47a4 <update_asset_state+0x2e2>
{
    return
        (
            (state.modem.secs_since_last_report_home >= config.report_home_period_secs)

            || (state.dispatched.power_on != state.current.power_on)
    4632:	90 91 48 2b 	lds	r25, 0x2B48
    4636:	80 91 2a 2b 	lds	r24, 0x2B2A
    463a:	98 13       	cpse	r25, r24
    463c:	b3 c0       	rjmp	.+358    	; 0x47a4 <update_asset_state+0x2e2>

            || (state.dispatched.element_on != state.current.element_on)
    463e:	90 91 49 2b 	lds	r25, 0x2B49
    4642:	80 91 2b 2b 	lds	r24, 0x2B2B
    4646:	98 13       	cpse	r25, r24
    4648:	ad c0       	rjmp	.+346    	; 0x47a4 <update_asset_state+0x2e2>

            || (state.dispatched.water_event.running != state.current.water_event.running)
    464a:	80 91 4a 2b 	lds	r24, 0x2B4A
    464e:	c8 13       	cpse	r28, r24
    4650:	a9 c0       	rjmp	.+338    	; 0x47a4 <update_asset_state+0x2e2>

            || (state.current.temp_x16[0] > INT16_MIN
    4652:	41 15       	cp	r20, r1
    4654:	60 e8       	ldi	r22, 0x80	; 128
    4656:	56 07       	cpc	r21, r22
    4658:	09 f1       	breq	.+66     	; 0x469c <update_asset_state+0x1da>
                && labs (state.dispatched.temp_x16[0] - state.current.temp_x16[0]) >= config.temp_delta_trigger_x16)
    465a:	80 91 3a 2b 	lds	r24, 0x2B3A
    465e:	90 91 3b 2b 	lds	r25, 0x2B3B
    4662:	84 1b       	sub	r24, r20
    4664:	95 0b       	sbc	r25, r21
    4666:	aa 27       	eor	r26, r26
    4668:	97 fd       	sbrc	r25, 7
    466a:	a0 95       	com	r26
    466c:	ba 2f       	mov	r27, r26
    466e:	bb 23       	and	r27, r27
    4670:	3c f4       	brge	.+14     	; 0x4680 <update_asset_state+0x1be>
    4672:	b0 95       	com	r27
    4674:	a0 95       	com	r26
    4676:	90 95       	com	r25
    4678:	81 95       	neg	r24
    467a:	9f 4f       	sbci	r25, 0xFF	; 255
    467c:	af 4f       	sbci	r26, 0xFF	; 255
    467e:	bf 4f       	sbci	r27, 0xFF	; 255
    4680:	40 91 8e 2b 	lds	r20, 0x2B8E
    4684:	50 91 8f 2b 	lds	r21, 0x2B8F
    4688:	66 27       	eor	r22, r22
    468a:	57 fd       	sbrc	r21, 7
    468c:	60 95       	com	r22
    468e:	76 2f       	mov	r23, r22
    4690:	84 17       	cp	r24, r20
    4692:	95 07       	cpc	r25, r21
    4694:	a6 07       	cpc	r26, r22
    4696:	b7 07       	cpc	r27, r23
    4698:	0c f0       	brlt	.+2      	; 0x469c <update_asset_state+0x1da>
    469a:	84 c0       	rjmp	.+264    	; 0x47a4 <update_asset_state+0x2e2>

            || (state.current.temp_x16[1] > INT16_MIN
    469c:	e1 15       	cp	r30, r1
    469e:	70 e8       	ldi	r23, 0x80	; 128
    46a0:	f7 07       	cpc	r31, r23
    46a2:	09 f1       	breq	.+66     	; 0x46e6 <update_asset_state+0x224>
                && labs (state.dispatched.temp_x16[1] - state.current.temp_x16[1]) >= config.temp_delta_trigger_x16)
    46a4:	80 91 3c 2b 	lds	r24, 0x2B3C
    46a8:	90 91 3d 2b 	lds	r25, 0x2B3D
    46ac:	8e 1b       	sub	r24, r30
    46ae:	9f 0b       	sbc	r25, r31
    46b0:	aa 27       	eor	r26, r26
    46b2:	97 fd       	sbrc	r25, 7
    46b4:	a0 95       	com	r26
    46b6:	ba 2f       	mov	r27, r26
    46b8:	bb 23       	and	r27, r27
    46ba:	3c f4       	brge	.+14     	; 0x46ca <update_asset_state+0x208>
    46bc:	b0 95       	com	r27
    46be:	a0 95       	com	r26
    46c0:	90 95       	com	r25
    46c2:	81 95       	neg	r24
    46c4:	9f 4f       	sbci	r25, 0xFF	; 255
    46c6:	af 4f       	sbci	r26, 0xFF	; 255
    46c8:	bf 4f       	sbci	r27, 0xFF	; 255
    46ca:	40 91 8e 2b 	lds	r20, 0x2B8E
    46ce:	50 91 8f 2b 	lds	r21, 0x2B8F
    46d2:	66 27       	eor	r22, r22
    46d4:	57 fd       	sbrc	r21, 7
    46d6:	60 95       	com	r22
    46d8:	76 2f       	mov	r23, r22
    46da:	84 17       	cp	r24, r20
    46dc:	95 07       	cpc	r25, r21
    46de:	a6 07       	cpc	r26, r22
    46e0:	b7 07       	cpc	r27, r23
    46e2:	0c f0       	brlt	.+2      	; 0x46e6 <update_asset_state+0x224>
    46e4:	5f c0       	rjmp	.+190    	; 0x47a4 <update_asset_state+0x2e2>

            || (state.current.temp_x16[2] > INT16_MIN
    46e6:	21 15       	cp	r18, r1
    46e8:	80 e8       	ldi	r24, 0x80	; 128
    46ea:	38 07       	cpc	r19, r24
    46ec:	01 f1       	breq	.+64     	; 0x472e <update_asset_state+0x26c>
                && labs (state.dispatched.temp_x16[2] - state.current.temp_x16[2]) >= config.temp_delta_trigger_x16)
    46ee:	80 91 3e 2b 	lds	r24, 0x2B3E
    46f2:	90 91 3f 2b 	lds	r25, 0x2B3F
    46f6:	82 1b       	sub	r24, r18
    46f8:	93 0b       	sbc	r25, r19
    46fa:	aa 27       	eor	r26, r26
    46fc:	97 fd       	sbrc	r25, 7
    46fe:	a0 95       	com	r26
    4700:	ba 2f       	mov	r27, r26
    4702:	bb 23       	and	r27, r27
    4704:	3c f4       	brge	.+14     	; 0x4714 <update_asset_state+0x252>
    4706:	b0 95       	com	r27
    4708:	a0 95       	com	r26
    470a:	90 95       	com	r25
    470c:	81 95       	neg	r24
    470e:	9f 4f       	sbci	r25, 0xFF	; 255
    4710:	af 4f       	sbci	r26, 0xFF	; 255
    4712:	bf 4f       	sbci	r27, 0xFF	; 255
    4714:	40 91 8e 2b 	lds	r20, 0x2B8E
    4718:	50 91 8f 2b 	lds	r21, 0x2B8F
    471c:	66 27       	eor	r22, r22
    471e:	57 fd       	sbrc	r21, 7
    4720:	60 95       	com	r22
    4722:	76 2f       	mov	r23, r22
    4724:	84 17       	cp	r24, r20
    4726:	95 07       	cpc	r25, r21
    4728:	a6 07       	cpc	r26, r22
    472a:	b7 07       	cpc	r27, r23
    472c:	dc f5       	brge	.+118    	; 0x47a4 <update_asset_state+0x2e2>

            || ((get_current_pulse_counter (ELEC_PULSE_COUNTER) -
    472e:	80 e0       	ldi	r24, 0x00	; 0
    4730:	17 dc       	rcall	.-2002   	; 0x3f60 <get_current_pulse_counter>
    4732:	c0 90 40 2b 	lds	r12, 0x2B40
    4736:	d0 90 41 2b 	lds	r13, 0x2B41
    473a:	e0 90 42 2b 	lds	r14, 0x2B42
    473e:	f0 90 43 2b 	lds	r15, 0x2B43
    4742:	ab 01       	movw	r20, r22
    4744:	bc 01       	movw	r22, r24
    4746:	4c 19       	sub	r20, r12
    4748:	5d 09       	sbc	r21, r13
    474a:	6e 09       	sbc	r22, r14
    474c:	7f 09       	sbc	r23, r15
    474e:	80 91 94 2b 	lds	r24, 0x2B94
    4752:	90 91 95 2b 	lds	r25, 0x2B95
    4756:	a0 91 96 2b 	lds	r26, 0x2B96
    475a:	b0 91 97 2b 	lds	r27, 0x2B97
    475e:	48 17       	cp	r20, r24
    4760:	59 07       	cpc	r21, r25
    4762:	6a 07       	cpc	r22, r26
    4764:	7b 07       	cpc	r23, r27
    4766:	f0 f4       	brcc	.+60     	; 0x47a4 <update_asset_state+0x2e2>
                 state.dispatched.pulse_counter[ELEC_PULSE_COUNTER]) >= config.elec_delta_trigger)

            || ((get_current_pulse_counter (FLOW_PULSE_COUNTER) -
    4768:	81 e0       	ldi	r24, 0x01	; 1
    476a:	fa db       	rcall	.-2060   	; 0x3f60 <get_current_pulse_counter>
    476c:	c0 90 44 2b 	lds	r12, 0x2B44
    4770:	d0 90 45 2b 	lds	r13, 0x2B45
    4774:	e0 90 46 2b 	lds	r14, 0x2B46
    4778:	f0 90 47 2b 	lds	r15, 0x2B47
    477c:	ab 01       	movw	r20, r22
    477e:	bc 01       	movw	r22, r24
    4780:	4c 19       	sub	r20, r12
    4782:	5d 09       	sbc	r21, r13
    4784:	6e 09       	sbc	r22, r14
    4786:	7f 09       	sbc	r23, r15
}

static void update_asset_state (void)
{
    update_current_status ();
    if (status_change_detected ()) {
    4788:	80 91 90 2b 	lds	r24, 0x2B90
    478c:	90 91 91 2b 	lds	r25, 0x2B91
    4790:	a0 91 92 2b 	lds	r26, 0x2B92
    4794:	b0 91 93 2b 	lds	r27, 0x2B93
    4798:	48 17       	cp	r20, r24
    479a:	59 07       	cpc	r21, r25
    479c:	6a 07       	cpc	r22, r26
    479e:	7b 07       	cpc	r23, r27
    47a0:	08 f4       	brcc	.+2      	; 0x47a4 <update_asset_state+0x2e2>
    47a2:	3f c0       	rjmp	.+126    	; 0x4822 <update_asset_state+0x360>
* ****************************************************************************
*/

static void buffer_current_status (void)
{
    uint8_t b = (state.status_buffer.back + 1) % STATUS_BUFFER_SIZE;
    47a4:	80 91 14 2b 	lds	r24, 0x2B14
    47a8:	90 e0       	ldi	r25, 0x00	; 0
    47aa:	9c 01       	movw	r18, r24
    47ac:	2f 5f       	subi	r18, 0xFF	; 255
    47ae:	3f 4f       	sbci	r19, 0xFF	; 255
    47b0:	2f 70       	andi	r18, 0x0F	; 15
    47b2:	30 78       	andi	r19, 0x80	; 128
    47b4:	f2 2e       	mov	r15, r18
    if (b == state.status_buffer.front) {
    47b6:	40 91 13 2b 	lds	r20, 0x2B13
    47ba:	24 13       	cpse	r18, r20
    47bc:	06 c0       	rjmp	.+12     	; 0x47ca <update_asset_state+0x308>
        state.status_buffer.front = (b + 1) % STATUS_BUFFER_SIZE;
    47be:	2f 5f       	subi	r18, 0xFF	; 255
    47c0:	3f 4f       	sbci	r19, 0xFF	; 255
    47c2:	2f 70       	andi	r18, 0x0F	; 15
    47c4:	33 27       	eor	r19, r19
    47c6:	20 93 13 2b 	sts	0x2B13, r18
    }
    state.modem.secs_since_last_report_home = 0;
    47ca:	10 92 af 28 	sts	0x28AF, r1
    47ce:	10 92 b0 28 	sts	0x28B0, r1
    state.status_buffer.buffer[state.status_buffer.back] = state.current;
    47d2:	1e e1       	ldi	r17, 0x1E	; 30
    47d4:	18 9f       	mul	r17, r24
    47d6:	e0 01       	movw	r28, r0
    47d8:	19 9f       	mul	r17, r25
    47da:	d0 0d       	add	r29, r0
    47dc:	11 24       	eor	r1, r1
    47de:	de 01       	movw	r26, r28
    47e0:	ad 5c       	subi	r26, 0xCD	; 205
    47e2:	b6 4d       	sbci	r27, 0xD6	; 214
    47e4:	8e e1       	ldi	r24, 0x1E	; 30
    47e6:	e5 e1       	ldi	r30, 0x15	; 21
    47e8:	fb e2       	ldi	r31, 0x2B	; 43
    47ea:	01 90       	ld	r0, Z+
    47ec:	0d 92       	st	X+, r0
    47ee:	8a 95       	dec	r24
    47f0:	e1 f7       	brne	.-8      	; 0x47ea <update_asset_state+0x328>
    state.status_buffer.buffer[state.status_buffer.back].epoch = epoch_get ();
    47f2:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <epoch_get>
    47f6:	cd 5c       	subi	r28, 0xCD	; 205
    47f8:	d6 4d       	sbci	r29, 0xD6	; 214
    47fa:	68 83       	st	Y, r22
    47fc:	79 83       	std	Y+1, r23	; 0x01
    47fe:	8a 83       	std	Y+2, r24	; 0x02
    4800:	9b 83       	std	Y+3, r25	; 0x03
    state.dispatched = state.status_buffer.buffer[state.status_buffer.back];
    4802:	c4 e1       	ldi	r28, 0x14	; 20
    4804:	db e2       	ldi	r29, 0x2B	; 43
    4806:	e8 81       	ld	r30, Y
    4808:	1e 9f       	mul	r17, r30
    480a:	f0 01       	movw	r30, r0
    480c:	11 24       	eor	r1, r1
    480e:	ed 5c       	subi	r30, 0xCD	; 205
    4810:	f6 4d       	sbci	r31, 0xD6	; 214
    4812:	8e e1       	ldi	r24, 0x1E	; 30
    4814:	a3 e3       	ldi	r26, 0x33	; 51
    4816:	bb e2       	ldi	r27, 0x2B	; 43
    4818:	01 90       	ld	r0, Z+
    481a:	0d 92       	st	X+, r0
    481c:	8a 95       	dec	r24
    481e:	e1 f7       	brne	.-8      	; 0x4818 <update_asset_state+0x356>
    state.status_buffer.back = b;
    4820:	f8 82       	st	Y, r15
        );
}

static void check_temp1_event (uint8_t event_hi, uint8_t event_lo)
{
    if (state.current.temp_x16[0] > INT16_MIN) {
    4822:	40 91 1c 2b 	lds	r20, 0x2B1C
    4826:	50 91 1d 2b 	lds	r21, 0x2B1D
    482a:	41 15       	cp	r20, r1
    482c:	20 e8       	ldi	r18, 0x80	; 128
    482e:	52 07       	cpc	r21, r18
    4830:	09 f4       	brne	.+2      	; 0x4834 <update_asset_state+0x372>
    4832:	54 c0       	rjmp	.+168    	; 0x48dc <update_asset_state+0x41a>
        if (state.current.temp_x16[0] >= config.temp1_hi_trigger_x16 && state.current.temp1_signalled != SIGNALLED_HI) {
    4834:	80 91 aa 2b 	lds	r24, 0x2BAA
    4838:	90 91 ab 2b 	lds	r25, 0x2BAB
    483c:	48 17       	cp	r20, r24
    483e:	59 07       	cpc	r21, r25
    4840:	c4 f0       	brlt	.+48     	; 0x4872 <update_asset_state+0x3b0>
    4842:	20 91 1a 2b 	lds	r18, 0x2B1A
    4846:	30 91 1b 2b 	lds	r19, 0x2B1B
    484a:	22 30       	cpi	r18, 0x02	; 2
    484c:	31 05       	cpc	r19, r1
    484e:	89 f0       	breq	.+34     	; 0x4872 <update_asset_state+0x3b0>
            if (config.enable_temp1_hi_event) {
    4850:	80 91 a8 2b 	lds	r24, 0x2BA8
    4854:	88 23       	and	r24, r24
    4856:	31 f0       	breq	.+12     	; 0x4864 <update_asset_state+0x3a2>
                buffer_event (event_hi, state.current.temp_x16[0]);
    4858:	66 27       	eor	r22, r22
    485a:	57 fd       	sbrc	r21, 7
    485c:	60 95       	com	r22
    485e:	76 2f       	mov	r23, r22
    4860:	84 e6       	ldi	r24, 0x64	; 100
    4862:	f9 dd       	rcall	.-1038   	; 0x4456 <buffer_event>
            }
            state.current.temp1_signalled = SIGNALLED_HI;
    4864:	82 e0       	ldi	r24, 0x02	; 2
    4866:	90 e0       	ldi	r25, 0x00	; 0
    4868:	80 93 1a 2b 	sts	0x2B1A, r24
    486c:	90 93 1b 2b 	sts	0x2B1B, r25
    4870:	35 c0       	rjmp	.+106    	; 0x48dc <update_asset_state+0x41a>
        } else if (state.current.temp_x16[0] <= config.temp1_lo_trigger_x16 && state.current.temp1_signalled != SIGNALLED_LO) {
    4872:	20 91 ac 2b 	lds	r18, 0x2BAC
    4876:	30 91 ad 2b 	lds	r19, 0x2BAD
    487a:	24 17       	cp	r18, r20
    487c:	35 07       	cpc	r19, r21
    487e:	c4 f0       	brlt	.+48     	; 0x48b0 <update_asset_state+0x3ee>
    4880:	60 91 1a 2b 	lds	r22, 0x2B1A
    4884:	70 91 1b 2b 	lds	r23, 0x2B1B
    4888:	63 30       	cpi	r22, 0x03	; 3
    488a:	71 05       	cpc	r23, r1
    488c:	c1 f0       	breq	.+48     	; 0x48be <update_asset_state+0x3fc>
            if (config.enable_temp1_lo_event) {
    488e:	80 91 a9 2b 	lds	r24, 0x2BA9
    4892:	88 23       	and	r24, r24
    4894:	31 f0       	breq	.+12     	; 0x48a2 <update_asset_state+0x3e0>
                buffer_event (event_lo, state.current.temp_x16[0]);
    4896:	66 27       	eor	r22, r22
    4898:	57 fd       	sbrc	r21, 7
    489a:	60 95       	com	r22
    489c:	76 2f       	mov	r23, r22
    489e:	85 e6       	ldi	r24, 0x65	; 101
    48a0:	da dd       	rcall	.-1100   	; 0x4456 <buffer_event>
            }
            state.current.temp1_signalled = SIGNALLED_LO;
    48a2:	83 e0       	ldi	r24, 0x03	; 3
    48a4:	90 e0       	ldi	r25, 0x00	; 0
    48a6:	80 93 1a 2b 	sts	0x2B1A, r24
    48aa:	90 93 1b 2b 	sts	0x2B1B, r25
    48ae:	16 c0       	rjmp	.+44     	; 0x48dc <update_asset_state+0x41a>
        } else {
            if (state.current.temp1_signalled != SIGNALLED_OK) {
    48b0:	60 91 1a 2b 	lds	r22, 0x2B1A
    48b4:	70 91 1b 2b 	lds	r23, 0x2B1B
    48b8:	61 30       	cpi	r22, 0x01	; 1
    48ba:	71 05       	cpc	r23, r1
    48bc:	79 f0       	breq	.+30     	; 0x48dc <update_asset_state+0x41a>
                if (state.current.temp_x16[0] > config.temp1_lo_trigger_x16 + TEMP_TRIGGER_RESET_X16 &&
    48be:	20 5f       	subi	r18, 0xF0	; 240
    48c0:	3f 4f       	sbci	r19, 0xFF	; 255
    48c2:	24 17       	cp	r18, r20
    48c4:	35 07       	cpc	r19, r21
    48c6:	54 f4       	brge	.+20     	; 0x48dc <update_asset_state+0x41a>
                        state.current.temp_x16[0] < config.temp1_hi_trigger_x16 - TEMP_TRIGGER_RESET_X16) {
    48c8:	40 97       	sbiw	r24, 0x10	; 16
                buffer_event (event_lo, state.current.temp_x16[0]);
            }
            state.current.temp1_signalled = SIGNALLED_LO;
        } else {
            if (state.current.temp1_signalled != SIGNALLED_OK) {
                if (state.current.temp_x16[0] > config.temp1_lo_trigger_x16 + TEMP_TRIGGER_RESET_X16 &&
    48ca:	48 17       	cp	r20, r24
    48cc:	59 07       	cpc	r21, r25
    48ce:	34 f4       	brge	.+12     	; 0x48dc <update_asset_state+0x41a>
                        state.current.temp_x16[0] < config.temp1_hi_trigger_x16 - TEMP_TRIGGER_RESET_X16) {
                    state.current.temp1_signalled = SIGNALLED_OK;
    48d0:	81 e0       	ldi	r24, 0x01	; 1
    48d2:	90 e0       	ldi	r25, 0x00	; 0
    48d4:	80 93 1a 2b 	sts	0x2B1A, r24
    48d8:	90 93 1b 2b 	sts	0x2B1B, r25
    return day < 5;
}

static bool water_running_pool_timer_on (void)
{
    uint32_t epoch = epoch_get ();
    48dc:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <epoch_get>
    48e0:	6b 01       	movw	r12, r22
    48e2:	7c 01       	movw	r14, r24
    uint32_t sec_of_day = (epoch + EPOCH_LOCAL_OFFSET) % (24UL * 60 * 60);
    48e4:	60 5e       	subi	r22, 0xE0	; 224
    48e6:	73 4e       	sbci	r23, 0xE3	; 227
    48e8:	8f 4f       	sbci	r24, 0xFF	; 255
    48ea:	9f 4f       	sbci	r25, 0xFF	; 255
    48ec:	20 e8       	ldi	r18, 0x80	; 128
    48ee:	31 e5       	ldi	r19, 0x51	; 81
    48f0:	41 e0       	ldi	r20, 0x01	; 1
    48f2:	50 e0       	ldi	r21, 0x00	; 0
    48f4:	0e 94 5e 35 	call	0x6abc	; 0x6abc <__udivmodsi4>
    uint8_t timeslot_15min = sec_of_day / (15 * 60);
    48f8:	24 e8       	ldi	r18, 0x84	; 132
    48fa:	33 e0       	ldi	r19, 0x03	; 3
    48fc:	40 e0       	ldi	r20, 0x00	; 0
    48fe:	50 e0       	ldi	r21, 0x00	; 0
    4900:	0e 94 5e 35 	call	0x6abc	; 0x6abc <__udivmodsi4>
    uint8_t timer = timeslot_15min / 32;
    4904:	c2 2f       	mov	r28, r18
    4906:	c2 95       	swap	r28
    4908:	c6 95       	lsr	r28
    490a:	c7 70       	andi	r28, 0x07	; 7
    uint8_t bit = timeslot_15min % 32;
    uint32_t mask = 1UL << bit;
    490c:	2f 71       	andi	r18, 0x1F	; 31
    490e:	81 2c       	mov	r8, r1
    4910:	91 2c       	mov	r9, r1
    4912:	54 01       	movw	r10, r8
    4914:	83 94       	inc	r8
    4916:	04 c0       	rjmp	.+8      	; 0x4920 <update_asset_state+0x45e>
    4918:	88 0c       	add	r8, r8
    491a:	99 1c       	adc	r9, r9
    491c:	aa 1c       	adc	r10, r10
    491e:	bb 1c       	adc	r11, r11
    4920:	2a 95       	dec	r18
    4922:	d2 f7       	brpl	.-12     	; 0x4918 <update_asset_state+0x456>
    uint32_t val = is_weekday (epoch) ? config.pTimerWeekDayWaterRunning[timer] : config.pTimerWeekEndWaterRunning[timer];
    4924:	c7 01       	movw	r24, r14
    4926:	b6 01       	movw	r22, r12
    4928:	7a db       	rcall	.-2316   	; 0x401e <is_weekday>
    492a:	88 23       	and	r24, r24
    492c:	69 f0       	breq	.+26     	; 0x4948 <update_asset_state+0x486>
    492e:	ec 2f       	mov	r30, r28
    4930:	f0 e0       	ldi	r31, 0x00	; 0
    4932:	ee 0f       	add	r30, r30
    4934:	ff 1f       	adc	r31, r31
    4936:	ee 0f       	add	r30, r30
    4938:	ff 1f       	adc	r31, r31
    493a:	e6 54       	subi	r30, 0x46	; 70
    493c:	f4 4d       	sbci	r31, 0xD4	; 212
    493e:	80 81       	ld	r24, Z
    4940:	91 81       	ldd	r25, Z+1	; 0x01
    4942:	a2 81       	ldd	r26, Z+2	; 0x02
    4944:	b3 81       	ldd	r27, Z+3	; 0x03
    4946:	0c c0       	rjmp	.+24     	; 0x4960 <update_asset_state+0x49e>
    4948:	ec 2f       	mov	r30, r28
    494a:	f0 e0       	ldi	r31, 0x00	; 0
    494c:	ee 0f       	add	r30, r30
    494e:	ff 1f       	adc	r31, r31
    4950:	ee 0f       	add	r30, r30
    4952:	ff 1f       	adc	r31, r31
    4954:	ea 53       	subi	r30, 0x3A	; 58
    4956:	f4 4d       	sbci	r31, 0xD4	; 212
    4958:	80 81       	ld	r24, Z
    495a:	91 81       	ldd	r25, Z+1	; 0x01
    495c:	a2 81       	ldd	r26, Z+2	; 0x02
    495e:	b3 81       	ldd	r27, Z+3	; 0x03
    return (val & mask) > 0;
    4960:	88 22       	and	r8, r24
    4962:	99 22       	and	r9, r25
    4964:	aa 22       	and	r10, r26
    4966:	bb 22       	and	r11, r27
    }
}

static void check_water_flow_event (void)
{
    if (water_running_pool_timer_on ()) {
    4968:	89 28       	or	r8, r9
    496a:	8a 28       	or	r8, r10
    496c:	8b 28       	or	r8, r11
    496e:	81 f0       	breq	.+32     	; 0x4990 <update_asset_state+0x4ce>
        if (state.current.water_event.running && !state.current.water_event.sent) {
    4970:	80 91 2c 2b 	lds	r24, 0x2B2C
    4974:	88 23       	and	r24, r24
    4976:	71 f0       	breq	.+28     	; 0x4994 <update_asset_state+0x4d2>
    4978:	80 91 2d 2b 	lds	r24, 0x2B2D
    497c:	81 11       	cpse	r24, r1
    497e:	0a c0       	rjmp	.+20     	; 0x4994 <update_asset_state+0x4d2>
            state.current.water_event.sent = true;
    4980:	81 e0       	ldi	r24, 0x01	; 1
    4982:	80 93 2d 2b 	sts	0x2B2D, r24
            buffer_str_event (EVENT_WATER_RUNNING, NULL);
    4986:	60 e0       	ldi	r22, 0x00	; 0
    4988:	70 e0       	ldi	r23, 0x00	; 0
    498a:	88 e7       	ldi	r24, 0x78	; 120
    498c:	34 dd       	rcall	.-1432   	; 0x43f6 <buffer_str_event>
    498e:	02 c0       	rjmp	.+4      	; 0x4994 <update_asset_state+0x4d2>
        }
    } else {
        state.current.water_event.sent = false;
    4990:	10 92 2d 2b 	sts	0x2B2D, r1
    4994:	e0 e6       	ldi	r30, 0x60	; 96
    4996:	f6 e0       	ldi	r31, 0x06	; 6
    4998:	80 85       	ldd	r24, Z+8	; 0x08
    }
}

static void check_electrical_short_event (void)
{
    if (ioport_get_value (GPIO_POWER)) {
    499a:	83 ff       	sbrs	r24, 3
    499c:	03 c0       	rjmp	.+6      	; 0x49a4 <update_asset_state+0x4e2>
        state.current.electrical_short_event_sent = false;
    499e:	10 92 2e 2b 	sts	0x2B2E, r1
    49a2:	20 c0       	rjmp	.+64     	; 0x49e4 <update_asset_state+0x522>
    } else {
        if ((state.current.pulse_counter_power_off != state.current.pulse_counter[ELEC_PULSE_COUNTER])
    49a4:	40 91 2f 2b 	lds	r20, 0x2B2F
    49a8:	50 91 30 2b 	lds	r21, 0x2B30
    49ac:	60 91 31 2b 	lds	r22, 0x2B31
    49b0:	70 91 32 2b 	lds	r23, 0x2B32
    49b4:	80 91 22 2b 	lds	r24, 0x2B22
    49b8:	90 91 23 2b 	lds	r25, 0x2B23
    49bc:	a0 91 24 2b 	lds	r26, 0x2B24
    49c0:	b0 91 25 2b 	lds	r27, 0x2B25
    49c4:	48 17       	cp	r20, r24
    49c6:	59 07       	cpc	r21, r25
    49c8:	6a 07       	cpc	r22, r26
    49ca:	7b 07       	cpc	r23, r27
    49cc:	59 f0       	breq	.+22     	; 0x49e4 <update_asset_state+0x522>
                && !state.current.electrical_short_event_sent) {
    49ce:	80 91 2e 2b 	lds	r24, 0x2B2E
    49d2:	81 11       	cpse	r24, r1
    49d4:	07 c0       	rjmp	.+14     	; 0x49e4 <update_asset_state+0x522>
            buffer_str_event (EVENT_ELECTRICAL_SHORT, NULL);
    49d6:	60 e0       	ldi	r22, 0x00	; 0
    49d8:	70 e0       	ldi	r23, 0x00	; 0
    49da:	82 e8       	ldi	r24, 0x82	; 130
    49dc:	0c dd       	rcall	.-1512   	; 0x43f6 <buffer_str_event>
            state.current.electrical_short_event_sent = true;
    49de:	81 e0       	ldi	r24, 0x01	; 1
    49e0:	80 93 2e 2b 	sts	0x2B2E, r24

    check_temp1_event (EVENT_TEMP1_HI, EVENT_TEMP1_LO);
    check_water_flow_event ();
    check_electrical_short_event ();

    switch (config.ctrl_select) {
    49e4:	80 91 a6 2b 	lds	r24, 0x2BA6
    49e8:	90 91 a7 2b 	lds	r25, 0x2BA7
    49ec:	81 30       	cpi	r24, 0x01	; 1
    49ee:	91 05       	cpc	r25, r1
    49f0:	39 f0       	breq	.+14     	; 0x4a00 <update_asset_state+0x53e>
    49f2:	20 f0       	brcs	.+8      	; 0x49fc <update_asset_state+0x53a>
    49f4:	02 97       	sbiw	r24, 0x02	; 2
    49f6:	09 f0       	breq	.+2      	; 0x49fa <update_asset_state+0x538>
    49f8:	7d c0       	rjmp	.+250    	; 0x4af4 <update_asset_state+0x632>
    49fa:	11 c0       	rjmp	.+34     	; 0x4a1e <update_asset_state+0x55c>
    case CONTROL_SELECT_OFF:
        geyser_set_power_off ();
    49fc:	f6 da       	rcall	.-2580   	; 0x3fea <geyser_set_power_off>
        break;
    49fe:	7a c0       	rjmp	.+244    	; 0x4af4 <update_asset_state+0x632>
    case CONTROL_SELECT_BYPASS:
        if (state.current.temp_x16[TEMP_SENSOR_TANK] < config.temp1_hi_trigger_x16) {
    4a00:	20 91 1c 2b 	lds	r18, 0x2B1C
    4a04:	30 91 1d 2b 	lds	r19, 0x2B1D
    4a08:	80 91 aa 2b 	lds	r24, 0x2BAA
    4a0c:	90 91 ab 2b 	lds	r25, 0x2BAB
    4a10:	28 17       	cp	r18, r24
    4a12:	39 07       	cpc	r19, r25
    4a14:	14 f4       	brge	.+4      	; 0x4a1a <update_asset_state+0x558>
            geyser_set_power_on ();
    4a16:	e4 da       	rcall	.-2616   	; 0x3fe0 <geyser_set_power_on>
    4a18:	6d c0       	rjmp	.+218    	; 0x4af4 <update_asset_state+0x632>
        } else {
            geyser_set_power_off ();
    4a1a:	e7 da       	rcall	.-2610   	; 0x3fea <geyser_set_power_off>
    4a1c:	6b c0       	rjmp	.+214    	; 0x4af4 <update_asset_state+0x632>
    return (val & mask) > 0;
}

static bool control_pool_timer_on (void)
{
    uint32_t epoch = epoch_get ();
    4a1e:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <epoch_get>
    4a22:	6b 01       	movw	r12, r22
    4a24:	7c 01       	movw	r14, r24
    uint32_t sec_of_day = (epoch + EPOCH_LOCAL_OFFSET) % (24UL * 60 * 60);
    4a26:	60 5e       	subi	r22, 0xE0	; 224
    4a28:	73 4e       	sbci	r23, 0xE3	; 227
    4a2a:	8f 4f       	sbci	r24, 0xFF	; 255
    4a2c:	9f 4f       	sbci	r25, 0xFF	; 255
    4a2e:	20 e8       	ldi	r18, 0x80	; 128
    4a30:	31 e5       	ldi	r19, 0x51	; 81
    4a32:	41 e0       	ldi	r20, 0x01	; 1
    4a34:	50 e0       	ldi	r21, 0x00	; 0
    4a36:	0e 94 5e 35 	call	0x6abc	; 0x6abc <__udivmodsi4>
    uint8_t timeslot_15min = sec_of_day / (15 * 60);
    4a3a:	24 e8       	ldi	r18, 0x84	; 132
    4a3c:	33 e0       	ldi	r19, 0x03	; 3
    4a3e:	40 e0       	ldi	r20, 0x00	; 0
    4a40:	50 e0       	ldi	r21, 0x00	; 0
    4a42:	0e 94 5e 35 	call	0x6abc	; 0x6abc <__udivmodsi4>
    uint8_t timer = timeslot_15min / 32;
    4a46:	c2 2f       	mov	r28, r18
    4a48:	c2 95       	swap	r28
    4a4a:	c6 95       	lsr	r28
    4a4c:	c7 70       	andi	r28, 0x07	; 7
    uint8_t bit = timeslot_15min % 32;
    uint32_t mask = 1UL << bit;
    4a4e:	2f 71       	andi	r18, 0x1F	; 31
    4a50:	81 e0       	ldi	r24, 0x01	; 1
    4a52:	90 e0       	ldi	r25, 0x00	; 0
    4a54:	a0 e0       	ldi	r26, 0x00	; 0
    4a56:	b0 e0       	ldi	r27, 0x00	; 0
    4a58:	4c 01       	movw	r8, r24
    4a5a:	5d 01       	movw	r10, r26
    4a5c:	04 c0       	rjmp	.+8      	; 0x4a66 <update_asset_state+0x5a4>
    4a5e:	88 0c       	add	r8, r8
    4a60:	99 1c       	adc	r9, r9
    4a62:	aa 1c       	adc	r10, r10
    4a64:	bb 1c       	adc	r11, r11
    4a66:	2a 95       	dec	r18
    4a68:	d2 f7       	brpl	.-12     	; 0x4a5e <update_asset_state+0x59c>
    uint32_t val = is_weekday (epoch) ? config.pTimerWeekDayControl[timer] : config.pTimerWeekEndControl[timer];
    4a6a:	c7 01       	movw	r24, r14
    4a6c:	b6 01       	movw	r22, r12
    4a6e:	d7 da       	rcall	.-2642   	; 0x401e <is_weekday>
    4a70:	88 23       	and	r24, r24
    4a72:	69 f0       	breq	.+26     	; 0x4a8e <update_asset_state+0x5cc>
    4a74:	ec 2f       	mov	r30, r28
    4a76:	f0 e0       	ldi	r31, 0x00	; 0
    4a78:	ee 0f       	add	r30, r30
    4a7a:	ff 1f       	adc	r31, r31
    4a7c:	ee 0f       	add	r30, r30
    4a7e:	ff 1f       	adc	r31, r31
    4a80:	e8 56       	subi	r30, 0x68	; 104
    4a82:	f4 4d       	sbci	r31, 0xD4	; 212
    4a84:	80 81       	ld	r24, Z
    4a86:	91 81       	ldd	r25, Z+1	; 0x01
    4a88:	a2 81       	ldd	r26, Z+2	; 0x02
    4a8a:	b3 81       	ldd	r27, Z+3	; 0x03
    4a8c:	0c c0       	rjmp	.+24     	; 0x4aa6 <update_asset_state+0x5e4>
    4a8e:	ec 2f       	mov	r30, r28
    4a90:	f0 e0       	ldi	r31, 0x00	; 0
    4a92:	ee 0f       	add	r30, r30
    4a94:	ff 1f       	adc	r31, r31
    4a96:	ee 0f       	add	r30, r30
    4a98:	ff 1f       	adc	r31, r31
    4a9a:	e2 55       	subi	r30, 0x52	; 82
    4a9c:	f4 4d       	sbci	r31, 0xD4	; 212
    4a9e:	80 81       	ld	r24, Z
    4aa0:	91 81       	ldd	r25, Z+1	; 0x01
    4aa2:	a2 81       	ldd	r26, Z+2	; 0x02
    4aa4:	b3 81       	ldd	r27, Z+3	; 0x03
    return (val & mask) > 0;
    4aa6:	88 22       	and	r8, r24
    4aa8:	99 22       	and	r9, r25
    4aaa:	aa 22       	and	r10, r26
    4aac:	bb 22       	and	r11, r27
        } else {
            geyser_set_power_off ();
        }
        break;
    case CONTROL_SELECT_POOL_TIMER:
        if (control_pool_timer_on ()) {
    4aae:	89 28       	or	r8, r9
    4ab0:	8a 28       	or	r8, r10
    4ab2:	8b 28       	or	r8, r11
    4ab4:	f1 f0       	breq	.+60     	; 0x4af2 <update_asset_state+0x630>
            if (state.current.temp_x16[TEMP_SENSOR_TANK] <= (config.temp_sp_x16 - config.temp_delta_trigger_x16)) {
    4ab6:	80 91 1c 2b 	lds	r24, 0x2B1C
    4aba:	90 91 1d 2b 	lds	r25, 0x2B1D
    4abe:	20 91 a4 2b 	lds	r18, 0x2BA4
    4ac2:	30 91 a5 2b 	lds	r19, 0x2BA5
    4ac6:	40 91 8e 2b 	lds	r20, 0x2B8E
    4aca:	50 91 8f 2b 	lds	r21, 0x2B8F
    4ace:	b9 01       	movw	r22, r18
    4ad0:	64 1b       	sub	r22, r20
    4ad2:	75 0b       	sbc	r23, r21
    4ad4:	68 17       	cp	r22, r24
    4ad6:	79 07       	cpc	r23, r25
    4ad8:	3c f0       	brlt	.+14     	; 0x4ae8 <update_asset_state+0x626>
                if (state.current.temp_x16[TEMP_SENSOR_TANK] > INT16_MIN) {
    4ada:	81 15       	cp	r24, r1
    4adc:	90 48       	sbci	r25, 0x80	; 128
    4ade:	11 f0       	breq	.+4      	; 0x4ae4 <update_asset_state+0x622>
                    geyser_set_power_on ();
    4ae0:	7f da       	rcall	.-2818   	; 0x3fe0 <geyser_set_power_on>
    4ae2:	08 c0       	rjmp	.+16     	; 0x4af4 <update_asset_state+0x632>
                } else {
                    geyser_set_power_off ();
    4ae4:	82 da       	rcall	.-2812   	; 0x3fea <geyser_set_power_off>
    4ae6:	06 c0       	rjmp	.+12     	; 0x4af4 <update_asset_state+0x632>
                }
            } else if (state.current.temp_x16[TEMP_SENSOR_TANK] >= config.temp_sp_x16) {
    4ae8:	82 17       	cp	r24, r18
    4aea:	93 07       	cpc	r25, r19
    4aec:	1c f0       	brlt	.+6      	; 0x4af4 <update_asset_state+0x632>
                geyser_set_power_off ();
    4aee:	7d da       	rcall	.-2822   	; 0x3fea <geyser_set_power_off>
    4af0:	01 c0       	rjmp	.+2      	; 0x4af4 <update_asset_state+0x632>
            }
        } else {
            geyser_set_power_off ();
    4af2:	7b da       	rcall	.-2826   	; 0x3fea <geyser_set_power_off>
        }
        break;
    }
}
    4af4:	df 91       	pop	r29
    4af6:	cf 91       	pop	r28
    4af8:	1f 91       	pop	r17
    4afa:	ff 90       	pop	r15
    4afc:	ef 90       	pop	r14
    4afe:	df 90       	pop	r13
    4b00:	cf 90       	pop	r12
    4b02:	bf 90       	pop	r11
    4b04:	af 90       	pop	r10
    4b06:	9f 90       	pop	r9
    4b08:	8f 90       	pop	r8
    4b0a:	08 95       	ret

00004b0c <check_pulse_counters>:
    4b0c:	e0 e4       	ldi	r30, 0x40	; 64
    4b0e:	f6 e0       	ldi	r31, 0x06	; 6
    4b10:	90 85       	ldd	r25, Z+8	; 0x08
    4b12:	92 fb       	bst	r25, 2
    4b14:	99 27       	eor	r25, r25
    4b16:	90 f9       	bld	r25, 0
*/


static void check_pulse_counters (void)
{
    state.count1.debounce = (state.count1.debounce << 1) | ioport_get_pin_level (GPIO_COUNT1);
    4b18:	e4 e6       	ldi	r30, 0x64	; 100
    4b1a:	fb e2       	ldi	r31, 0x2B	; 43
    4b1c:	80 81       	ld	r24, Z
    4b1e:	88 0f       	add	r24, r24
    4b20:	89 2b       	or	r24, r25
    state.count1.debounce &= 0x07;
    4b22:	87 70       	andi	r24, 0x07	; 7
    4b24:	80 83       	st	Z, r24
    if (state.count1.level == false)   {
    4b26:	90 91 63 2b 	lds	r25, 0x2B63
    4b2a:	91 11       	cpse	r25, r1
    4b2c:	23 c0       	rjmp	.+70     	; 0x4b74 <check_pulse_counters+0x68>
        if (state.count1.debounce == 0x07) {
    4b2e:	87 30       	cpi	r24, 0x07	; 7
    4b30:	29 f5       	brne	.+74     	; 0x4b7c <check_pulse_counters+0x70>
            state.count1.level = true;
    4b32:	21 e0       	ldi	r18, 0x01	; 1
    4b34:	20 93 63 2b 	sts	0x2B63, r18
            state.current.pulse_counter[ELEC_PULSE_COUNTER]++;
    4b38:	e2 e2       	ldi	r30, 0x22	; 34
    4b3a:	fb e2       	ldi	r31, 0x2B	; 43
    4b3c:	80 81       	ld	r24, Z
    4b3e:	91 81       	ldd	r25, Z+1	; 0x01
    4b40:	a2 81       	ldd	r26, Z+2	; 0x02
    4b42:	b3 81       	ldd	r27, Z+3	; 0x03
    4b44:	01 96       	adiw	r24, 0x01	; 1
    4b46:	a1 1d       	adc	r26, r1
    4b48:	b1 1d       	adc	r27, r1
    4b4a:	80 83       	st	Z, r24
    4b4c:	91 83       	std	Z+1, r25	; 0x01
    4b4e:	a2 83       	std	Z+2, r26	; 0x02
    4b50:	b3 83       	std	Z+3, r27	; 0x03
            state.geyser.elect.detected = true;
    4b52:	20 93 62 2b 	sts	0x2B62, r18
            state.geyser.elect.detected_at_epoch = epoch_get ();
    4b56:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <epoch_get>
    4b5a:	60 93 5e 2b 	sts	0x2B5E, r22
    4b5e:	70 93 5f 2b 	sts	0x2B5F, r23
    4b62:	80 93 60 2b 	sts	0x2B60, r24
    4b66:	90 93 61 2b 	sts	0x2B61, r25

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	base->OUTTGL = arch_ioport_pin_to_mask(pin);
    4b6a:	88 e0       	ldi	r24, 0x08	; 8
    4b6c:	e0 e2       	ldi	r30, 0x20	; 32
    4b6e:	f6 e0       	ldi	r31, 0x06	; 6
    4b70:	87 83       	std	Z+7, r24	; 0x07
    4b72:	04 c0       	rjmp	.+8      	; 0x4b7c <check_pulse_counters+0x70>
            ioport_toggle_pin (GPIO_LED1);
        }
    } else {
        if (state.count1.debounce == 0x00) {
    4b74:	81 11       	cpse	r24, r1
    4b76:	02 c0       	rjmp	.+4      	; 0x4b7c <check_pulse_counters+0x70>
            state.count1.level = false;
    4b78:	10 92 63 2b 	sts	0x2B63, r1

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
    4b7c:	e0 e6       	ldi	r30, 0x60	; 96
    4b7e:	f6 e0       	ldi	r31, 0x06	; 6
    4b80:	90 85       	ldd	r25, Z+8	; 0x08
    4b82:	92 fb       	bst	r25, 2
    4b84:	99 27       	eor	r25, r25
    4b86:	90 f9       	bld	r25, 0
        }
    }

    state.count2.debounce = (state.count2.debounce << 1) | ioport_get_pin_level (GPIO_COUNT2);
    4b88:	e6 e6       	ldi	r30, 0x66	; 102
    4b8a:	fb e2       	ldi	r31, 0x2B	; 43
    4b8c:	80 81       	ld	r24, Z
    4b8e:	88 0f       	add	r24, r24
    4b90:	89 2b       	or	r24, r25
    state.count2.debounce &= 0x07;
    4b92:	87 70       	andi	r24, 0x07	; 7
    4b94:	80 83       	st	Z, r24
    if (state.count2.level == false)   {
    4b96:	90 91 65 2b 	lds	r25, 0x2B65
    4b9a:	91 11       	cpse	r25, r1
    4b9c:	23 c0       	rjmp	.+70     	; 0x4be4 <check_pulse_counters+0xd8>
        if (state.count2.debounce == 0x07) {
    4b9e:	87 30       	cpi	r24, 0x07	; 7
    4ba0:	29 f5       	brne	.+74     	; 0x4bec <check_pulse_counters+0xe0>
            state.count2.level = true;
    4ba2:	21 e0       	ldi	r18, 0x01	; 1
    4ba4:	20 93 65 2b 	sts	0x2B65, r18
            state.current.pulse_counter[FLOW_PULSE_COUNTER]++;
    4ba8:	e6 e2       	ldi	r30, 0x26	; 38
    4baa:	fb e2       	ldi	r31, 0x2B	; 43
    4bac:	80 81       	ld	r24, Z
    4bae:	91 81       	ldd	r25, Z+1	; 0x01
    4bb0:	a2 81       	ldd	r26, Z+2	; 0x02
    4bb2:	b3 81       	ldd	r27, Z+3	; 0x03
    4bb4:	01 96       	adiw	r24, 0x01	; 1
    4bb6:	a1 1d       	adc	r26, r1
    4bb8:	b1 1d       	adc	r27, r1
    4bba:	80 83       	st	Z, r24
    4bbc:	91 83       	std	Z+1, r25	; 0x01
    4bbe:	a2 83       	std	Z+2, r26	; 0x02
    4bc0:	b3 83       	std	Z+3, r27	; 0x03
            state.geyser.water_running.detected = true;
    4bc2:	20 93 5d 2b 	sts	0x2B5D, r18
            state.geyser.water_running.detected_at_epoch = epoch_get ();
    4bc6:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <epoch_get>
    4bca:	60 93 59 2b 	sts	0x2B59, r22
    4bce:	70 93 5a 2b 	sts	0x2B5A, r23
    4bd2:	80 93 5b 2b 	sts	0x2B5B, r24
    4bd6:	90 93 5c 2b 	sts	0x2B5C, r25

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	base->OUTTGL = arch_ioport_pin_to_mask(pin);
    4bda:	80 e2       	ldi	r24, 0x20	; 32
    4bdc:	e0 e0       	ldi	r30, 0x00	; 0
    4bde:	f6 e0       	ldi	r31, 0x06	; 6
    4be0:	87 83       	std	Z+7, r24	; 0x07
    4be2:	08 95       	ret
            ioport_toggle_pin (GPIO_LED2);
        }
    } else {
        if (state.count2.debounce == 0x00) {
    4be4:	81 11       	cpse	r24, r1
    4be6:	02 c0       	rjmp	.+4      	; 0x4bec <check_pulse_counters+0xe0>
            state.count2.level = false;
    4be8:	10 92 65 2b 	sts	0x2B65, r1
    4bec:	08 95       	ret

00004bee <data_handler>:
* ****************************************************************************
*/

static void data_handler (uint32_t ticketid, const char* const path,
                          uint8_t vars, const awt_var_t* var)
{
    4bee:	2f 92       	push	r2
    4bf0:	3f 92       	push	r3
    4bf2:	4f 92       	push	r4
    4bf4:	5f 92       	push	r5
    4bf6:	6f 92       	push	r6
    4bf8:	7f 92       	push	r7
    4bfa:	8f 92       	push	r8
    4bfc:	9f 92       	push	r9
    4bfe:	af 92       	push	r10
    4c00:	bf 92       	push	r11
    4c02:	cf 92       	push	r12
    4c04:	df 92       	push	r13
    4c06:	ef 92       	push	r14
    4c08:	ff 92       	push	r15
    4c0a:	0f 93       	push	r16
    4c0c:	1f 93       	push	r17
    4c0e:	cf 93       	push	r28
    4c10:	df 93       	push	r29
    4c12:	00 d0       	rcall	.+0      	; 0x4c14 <data_handler+0x26>
    4c14:	1f 92       	push	r1
    4c16:	cd b7       	in	r28, 0x3d	; 61
    4c18:	de b7       	in	r29, 0x3e	; 62
    4c1a:	2b 01       	movw	r4, r22
    4c1c:	3c 01       	movw	r6, r24
    4c1e:	6a 01       	movw	r12, r20
    4c20:	82 2e       	mov	r8, r18
    if (strcmp (path, CONFIG_PATH) == 0) {
    4c22:	61 ef       	ldi	r22, 0xF1	; 241
    4c24:	71 e2       	ldi	r23, 0x21	; 33
    4c26:	ca 01       	movw	r24, r20
    4c28:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <strcmp>
    4c2c:	28 2f       	mov	r18, r24
    4c2e:	39 2f       	mov	r19, r25
    4c30:	23 2b       	or	r18, r19
    4c32:	09 f0       	breq	.+2      	; 0x4c36 <data_handler+0x48>
    4c34:	fb c3       	rjmp	.+2038   	; 0x542c <data_handler+0x83e>

static void config_data_handler (uint32_t ticketid, const char* const path, uint8_t vars, const awt_var_t* var)
{
    bool update_eeprom = false;
    bool ack = true;
    state.modem.send_config1 = true;
    4c36:	81 e0       	ldi	r24, 0x01	; 1
    4c38:	80 93 aa 28 	sts	0x28AA, r24
    state.modem.send_config2 = true;
    4c3c:	80 93 ab 28 	sts	0x28AB, r24
    for (uint8_t i = 0; ack && i < vars; i++, var++) {
    4c40:	88 20       	and	r8, r8
    4c42:	09 f4       	brne	.+2      	; 0x4c46 <data_handler+0x58>
    4c44:	dd c3       	rjmp	.+1978   	; 0x5400 <data_handler+0x812>
* ****************************************************************************
*
* ****************************************************************************
*/

static void data_handler (uint32_t ticketid, const char* const path,
    4c46:	78 01       	movw	r14, r16
    4c48:	84 e0       	ldi	r24, 0x04	; 4
    4c4a:	e8 0e       	add	r14, r24
    4c4c:	f1 1c       	adc	r15, r1
                           sizeof var / sizeof var[0], var);
}

static void config_data_handler (uint32_t ticketid, const char* const path, uint8_t vars, const awt_var_t* var)
{
    bool update_eeprom = false;
    4c4e:	19 82       	std	Y+1, r1	; 0x01
    bool ack = true;
    state.modem.send_config1 = true;
    state.modem.send_config2 = true;
    for (uint8_t i = 0; ack && i < vars; i++, var++) {
    4c50:	91 2c       	mov	r9, r1
            }
            //} else if (strcmp(var->name, CONFIG_TEMP1_CODE_TAG) == 0 && var->type == AWT_STR) {
            //} else if (strcmp(var->name, CONFIG_TEMP2_CODE_TAG) == 0 && var->type == AWT_STR) {    << READ ONLY
            //} else if (strcmp(var->name, CONFIG_TEMP3_CODE_TAG) == 0 && var->type == AWT_STR) {
        } else if (strcmp (var->name, CONFIG_TEMP_DELTA_TRIGGER_TAG) == 0 && var->type == AWT_INT32) {
            if (config.temp_delta_trigger_x16 != var->val.i * MODEL_TEMP_SCALE_FACTOR) {
    4c52:	0f 2e       	mov	r0, r31
    4c54:	fe e8       	ldi	r31, 0x8E	; 142
    4c56:	2f 2e       	mov	r2, r31
    4c58:	fb e2       	ldi	r31, 0x2B	; 43
    4c5a:	3f 2e       	mov	r3, r31
    4c5c:	f0 2d       	mov	r31, r0
    bool ack = true;
    state.modem.send_config1 = true;
    state.modem.send_config2 = true;
    for (uint8_t i = 0; ack && i < vars; i++, var++) {
        if (strcmp (var->name, CONFIG_REPORT_HOME_PERIOD_TAG) == 0 && var->type == AWT_INT32) {
            if (config.report_home_period_secs != var->val.i) {
    4c5e:	0f 2e       	mov	r0, r31
    4c60:	f1 e7       	ldi	r31, 0x71	; 113
    4c62:	af 2e       	mov	r10, r31
    4c64:	fb e2       	ldi	r31, 0x2B	; 43
    4c66:	bf 2e       	mov	r11, r31
    4c68:	f0 2d       	mov	r31, r0
                config.report_home_period_secs = var->val.i;
                if (config.report_home_period_secs < 60) {
                    config.report_home_period_secs = 60;
    4c6a:	0a 83       	std	Y+2, r16	; 0x02
    4c6c:	1b 83       	std	Y+3, r17	; 0x03
    bool update_eeprom = false;
    bool ack = true;
    state.modem.send_config1 = true;
    state.modem.send_config2 = true;
    for (uint8_t i = 0; ack && i < vars; i++, var++) {
        if (strcmp (var->name, CONFIG_REPORT_HOME_PERIOD_TAG) == 0 && var->type == AWT_INT32) {
    4c6e:	ea 81       	ldd	r30, Y+2	; 0x02
    4c70:	fb 81       	ldd	r31, Y+3	; 0x03
    4c72:	00 81       	ld	r16, Z
    4c74:	11 81       	ldd	r17, Z+1	; 0x01
    4c76:	60 e0       	ldi	r22, 0x00	; 0
    4c78:	72 e2       	ldi	r23, 0x22	; 34
    4c7a:	c8 01       	movw	r24, r16
    4c7c:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <strcmp>
    4c80:	28 2f       	mov	r18, r24
    4c82:	39 2f       	mov	r19, r25
    4c84:	23 2b       	or	r18, r19
    4c86:	91 f5       	brne	.+100    	; 0x4cec <data_handler+0xfe>
    4c88:	ea 81       	ldd	r30, Y+2	; 0x02
    4c8a:	fb 81       	ldd	r31, Y+3	; 0x03
    4c8c:	82 81       	ldd	r24, Z+2	; 0x02
    4c8e:	93 81       	ldd	r25, Z+3	; 0x03
    4c90:	89 2b       	or	r24, r25
    4c92:	61 f5       	brne	.+88     	; 0x4cec <data_handler+0xfe>
            if (config.report_home_period_secs != var->val.i) {
    4c94:	f7 01       	movw	r30, r14
    4c96:	40 81       	ld	r20, Z
    4c98:	51 81       	ldd	r21, Z+1	; 0x01
    4c9a:	62 81       	ldd	r22, Z+2	; 0x02
    4c9c:	73 81       	ldd	r23, Z+3	; 0x03
    4c9e:	f5 01       	movw	r30, r10
    4ca0:	80 81       	ld	r24, Z
    4ca2:	91 81       	ldd	r25, Z+1	; 0x01
    4ca4:	a0 e0       	ldi	r26, 0x00	; 0
    4ca6:	b0 e0       	ldi	r27, 0x00	; 0
    4ca8:	84 17       	cp	r24, r20
    4caa:	95 07       	cpc	r25, r21
    4cac:	a6 07       	cpc	r26, r22
    4cae:	b7 07       	cpc	r27, r23
    4cb0:	09 f4       	brne	.+2      	; 0x4cb4 <data_handler+0xc6>
    4cb2:	94 c3       	rjmp	.+1832   	; 0x53dc <data_handler+0x7ee>
                config.report_home_period_secs = var->val.i;
                if (config.report_home_period_secs < 60) {
    4cb4:	4c 33       	cpi	r20, 0x3C	; 60
    4cb6:	51 05       	cpc	r21, r1
    4cb8:	38 f4       	brcc	.+14     	; 0x4cc8 <data_handler+0xda>
                    config.report_home_period_secs = 60;
    4cba:	8c e3       	ldi	r24, 0x3C	; 60
    4cbc:	90 e0       	ldi	r25, 0x00	; 0
    4cbe:	80 83       	st	Z, r24
    4cc0:	91 83       	std	Z+1, r25	; 0x01
                } else if (config.report_home_period_secs >= 60 * 30) {
                    config.report_home_period_secs = 60 * 30;
                }
                update_eeprom = true;
    4cc2:	91 e0       	ldi	r25, 0x01	; 1
    4cc4:	99 83       	std	Y+1, r25	; 0x01
    4cc6:	8a c3       	rjmp	.+1812   	; 0x53dc <data_handler+0x7ee>
        if (strcmp (var->name, CONFIG_REPORT_HOME_PERIOD_TAG) == 0 && var->type == AWT_INT32) {
            if (config.report_home_period_secs != var->val.i) {
                config.report_home_period_secs = var->val.i;
                if (config.report_home_period_secs < 60) {
                    config.report_home_period_secs = 60;
                } else if (config.report_home_period_secs >= 60 * 30) {
    4cc8:	48 30       	cpi	r20, 0x08	; 8
    4cca:	e7 e0       	ldi	r30, 0x07	; 7
    4ccc:	5e 07       	cpc	r21, r30
    4cce:	30 f4       	brcc	.+12     	; 0x4cdc <data_handler+0xee>
    state.modem.send_config1 = true;
    state.modem.send_config2 = true;
    for (uint8_t i = 0; ack && i < vars; i++, var++) {
        if (strcmp (var->name, CONFIG_REPORT_HOME_PERIOD_TAG) == 0 && var->type == AWT_INT32) {
            if (config.report_home_period_secs != var->val.i) {
                config.report_home_period_secs = var->val.i;
    4cd0:	f5 01       	movw	r30, r10
    4cd2:	40 83       	st	Z, r20
    4cd4:	51 83       	std	Z+1, r21	; 0x01
                if (config.report_home_period_secs < 60) {
                    config.report_home_period_secs = 60;
                } else if (config.report_home_period_secs >= 60 * 30) {
                    config.report_home_period_secs = 60 * 30;
                }
                update_eeprom = true;
    4cd6:	f1 e0       	ldi	r31, 0x01	; 1
    4cd8:	f9 83       	std	Y+1, r31	; 0x01
    4cda:	80 c3       	rjmp	.+1792   	; 0x53dc <data_handler+0x7ee>
            if (config.report_home_period_secs != var->val.i) {
                config.report_home_period_secs = var->val.i;
                if (config.report_home_period_secs < 60) {
                    config.report_home_period_secs = 60;
                } else if (config.report_home_period_secs >= 60 * 30) {
                    config.report_home_period_secs = 60 * 30;
    4cdc:	88 e0       	ldi	r24, 0x08	; 8
    4cde:	97 e0       	ldi	r25, 0x07	; 7
    4ce0:	f5 01       	movw	r30, r10
    4ce2:	80 83       	st	Z, r24
    4ce4:	91 83       	std	Z+1, r25	; 0x01
                }
                update_eeprom = true;
    4ce6:	91 e0       	ldi	r25, 0x01	; 1
    4ce8:	99 83       	std	Y+1, r25	; 0x01
    4cea:	78 c3       	rjmp	.+1776   	; 0x53dc <data_handler+0x7ee>
            }
            //} else if (strcmp(var->name, CONFIG_TEMP1_CODE_TAG) == 0 && var->type == AWT_STR) {
            //} else if (strcmp(var->name, CONFIG_TEMP2_CODE_TAG) == 0 && var->type == AWT_STR) {    << READ ONLY
            //} else if (strcmp(var->name, CONFIG_TEMP3_CODE_TAG) == 0 && var->type == AWT_STR) {
        } else if (strcmp (var->name, CONFIG_TEMP_DELTA_TRIGGER_TAG) == 0 && var->type == AWT_INT32) {
    4cec:	64 e0       	ldi	r22, 0x04	; 4
    4cee:	72 e2       	ldi	r23, 0x22	; 34
    4cf0:	c8 01       	movw	r24, r16
    4cf2:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <strcmp>
    4cf6:	28 2f       	mov	r18, r24
    4cf8:	39 2f       	mov	r19, r25
    4cfa:	23 2b       	or	r18, r19
    4cfc:	a9 f5       	brne	.+106    	; 0x4d68 <data_handler+0x17a>
    4cfe:	ea 81       	ldd	r30, Y+2	; 0x02
    4d00:	fb 81       	ldd	r31, Y+3	; 0x03
    4d02:	82 81       	ldd	r24, Z+2	; 0x02
    4d04:	93 81       	ldd	r25, Z+3	; 0x03
    4d06:	89 2b       	or	r24, r25
    4d08:	79 f5       	brne	.+94     	; 0x4d68 <data_handler+0x17a>
            if (config.temp_delta_trigger_x16 != var->val.i * MODEL_TEMP_SCALE_FACTOR) {
    4d0a:	f7 01       	movw	r30, r14
    4d0c:	40 81       	ld	r20, Z
    4d0e:	51 81       	ldd	r21, Z+1	; 0x01
    4d10:	62 81       	ldd	r22, Z+2	; 0x02
    4d12:	73 81       	ldd	r23, Z+3	; 0x03
    4d14:	f1 01       	movw	r30, r2
    4d16:	80 81       	ld	r24, Z
    4d18:	91 81       	ldd	r25, Z+1	; 0x01
    4d1a:	aa 27       	eor	r26, r26
    4d1c:	97 fd       	sbrc	r25, 7
    4d1e:	a0 95       	com	r26
    4d20:	ba 2f       	mov	r27, r26
    4d22:	8a 01       	movw	r16, r20
    4d24:	9b 01       	movw	r18, r22
    4d26:	00 0f       	add	r16, r16
    4d28:	11 1f       	adc	r17, r17
    4d2a:	22 1f       	adc	r18, r18
    4d2c:	33 1f       	adc	r19, r19
    4d2e:	00 0f       	add	r16, r16
    4d30:	11 1f       	adc	r17, r17
    4d32:	22 1f       	adc	r18, r18
    4d34:	33 1f       	adc	r19, r19
    4d36:	00 0f       	add	r16, r16
    4d38:	11 1f       	adc	r17, r17
    4d3a:	22 1f       	adc	r18, r18
    4d3c:	33 1f       	adc	r19, r19
    4d3e:	00 0f       	add	r16, r16
    4d40:	11 1f       	adc	r17, r17
    4d42:	22 1f       	adc	r18, r18
    4d44:	33 1f       	adc	r19, r19
    4d46:	80 17       	cp	r24, r16
    4d48:	91 07       	cpc	r25, r17
    4d4a:	a2 07       	cpc	r26, r18
    4d4c:	b3 07       	cpc	r27, r19
    4d4e:	09 f4       	brne	.+2      	; 0x4d52 <data_handler+0x164>
    4d50:	45 c3       	rjmp	.+1674   	; 0x53dc <data_handler+0x7ee>
                config.temp_delta_trigger_x16 = var->val.i * MODEL_TEMP_SCALE_FACTOR;
    4d52:	42 95       	swap	r20
    4d54:	52 95       	swap	r21
    4d56:	50 7f       	andi	r21, 0xF0	; 240
    4d58:	54 27       	eor	r21, r20
    4d5a:	40 7f       	andi	r20, 0xF0	; 240
    4d5c:	54 27       	eor	r21, r20
    4d5e:	40 83       	st	Z, r20
    4d60:	51 83       	std	Z+1, r21	; 0x01
                update_eeprom = true;
    4d62:	f1 e0       	ldi	r31, 0x01	; 1
    4d64:	f9 83       	std	Y+1, r31	; 0x01
    4d66:	3a c3       	rjmp	.+1652   	; 0x53dc <data_handler+0x7ee>
            }
        } else if (strcmp (var->name, CONFIG_ELEC_COUNTER_DELTA_TRIGGER_TAG) == 0 && var->type == AWT_INT32) {
    4d68:	6c e0       	ldi	r22, 0x0C	; 12
    4d6a:	72 e2       	ldi	r23, 0x22	; 34
    4d6c:	c8 01       	movw	r24, r16
    4d6e:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <strcmp>
    4d72:	28 2f       	mov	r18, r24
    4d74:	39 2f       	mov	r19, r25
    4d76:	23 2b       	or	r18, r19
    4d78:	f1 f4       	brne	.+60     	; 0x4db6 <data_handler+0x1c8>
    4d7a:	ea 81       	ldd	r30, Y+2	; 0x02
    4d7c:	fb 81       	ldd	r31, Y+3	; 0x03
    4d7e:	82 81       	ldd	r24, Z+2	; 0x02
    4d80:	93 81       	ldd	r25, Z+3	; 0x03
    4d82:	89 2b       	or	r24, r25
    4d84:	c1 f4       	brne	.+48     	; 0x4db6 <data_handler+0x1c8>
            if (config.elec_delta_trigger != var->val.i) {
    4d86:	f7 01       	movw	r30, r14
    4d88:	80 81       	ld	r24, Z
    4d8a:	91 81       	ldd	r25, Z+1	; 0x01
    4d8c:	a2 81       	ldd	r26, Z+2	; 0x02
    4d8e:	b3 81       	ldd	r27, Z+3	; 0x03
    4d90:	e4 e9       	ldi	r30, 0x94	; 148
    4d92:	fb e2       	ldi	r31, 0x2B	; 43
    4d94:	40 81       	ld	r20, Z
    4d96:	51 81       	ldd	r21, Z+1	; 0x01
    4d98:	62 81       	ldd	r22, Z+2	; 0x02
    4d9a:	73 81       	ldd	r23, Z+3	; 0x03
    4d9c:	48 17       	cp	r20, r24
    4d9e:	59 07       	cpc	r21, r25
    4da0:	6a 07       	cpc	r22, r26
    4da2:	7b 07       	cpc	r23, r27
    4da4:	09 f4       	brne	.+2      	; 0x4da8 <data_handler+0x1ba>
    4da6:	1a c3       	rjmp	.+1588   	; 0x53dc <data_handler+0x7ee>
                config.elec_delta_trigger = var->val.i;
    4da8:	80 83       	st	Z, r24
    4daa:	91 83       	std	Z+1, r25	; 0x01
    4dac:	a2 83       	std	Z+2, r26	; 0x02
    4dae:	b3 83       	std	Z+3, r27	; 0x03
                update_eeprom = true;
    4db0:	f1 e0       	ldi	r31, 0x01	; 1
    4db2:	f9 83       	std	Y+1, r31	; 0x01
    4db4:	13 c3       	rjmp	.+1574   	; 0x53dc <data_handler+0x7ee>
            }
        } else if (strcmp (var->name, CONFIG_FLOW_COUNTER_DELTA_TRIGGER_TAG) == 0 && var->type == AWT_INT32) {
    4db6:	61 e1       	ldi	r22, 0x11	; 17
    4db8:	72 e2       	ldi	r23, 0x22	; 34
    4dba:	c8 01       	movw	r24, r16
    4dbc:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <strcmp>
    4dc0:	28 2f       	mov	r18, r24
    4dc2:	39 2f       	mov	r19, r25
    4dc4:	23 2b       	or	r18, r19
    4dc6:	f1 f4       	brne	.+60     	; 0x4e04 <data_handler+0x216>
    4dc8:	ea 81       	ldd	r30, Y+2	; 0x02
    4dca:	fb 81       	ldd	r31, Y+3	; 0x03
    4dcc:	82 81       	ldd	r24, Z+2	; 0x02
    4dce:	93 81       	ldd	r25, Z+3	; 0x03
    4dd0:	89 2b       	or	r24, r25
    4dd2:	c1 f4       	brne	.+48     	; 0x4e04 <data_handler+0x216>
            if (config.flow_delta_trigger != var->val.i) {
    4dd4:	f7 01       	movw	r30, r14
    4dd6:	80 81       	ld	r24, Z
    4dd8:	91 81       	ldd	r25, Z+1	; 0x01
    4dda:	a2 81       	ldd	r26, Z+2	; 0x02
    4ddc:	b3 81       	ldd	r27, Z+3	; 0x03
    4dde:	e0 e9       	ldi	r30, 0x90	; 144
    4de0:	fb e2       	ldi	r31, 0x2B	; 43
    4de2:	40 81       	ld	r20, Z
    4de4:	51 81       	ldd	r21, Z+1	; 0x01
    4de6:	62 81       	ldd	r22, Z+2	; 0x02
    4de8:	73 81       	ldd	r23, Z+3	; 0x03
    4dea:	48 17       	cp	r20, r24
    4dec:	59 07       	cpc	r21, r25
    4dee:	6a 07       	cpc	r22, r26
    4df0:	7b 07       	cpc	r23, r27
    4df2:	09 f4       	brne	.+2      	; 0x4df6 <data_handler+0x208>
    4df4:	f3 c2       	rjmp	.+1510   	; 0x53dc <data_handler+0x7ee>
                config.flow_delta_trigger = var->val.i;
    4df6:	80 83       	st	Z, r24
    4df8:	91 83       	std	Z+1, r25	; 0x01
    4dfa:	a2 83       	std	Z+2, r26	; 0x02
    4dfc:	b3 83       	std	Z+3, r27	; 0x03
                update_eeprom = true;
    4dfe:	f1 e0       	ldi	r31, 0x01	; 1
    4e00:	f9 83       	std	Y+1, r31	; 0x01
    4e02:	ec c2       	rjmp	.+1496   	; 0x53dc <data_handler+0x7ee>
            }
        } else if (strcmp (var->name, CONFIG_CONTROL_POOL_TIMER_1_WEEKDAY_TAG) == 0 && var->type == AWT_INT32) {
    4e04:	66 e1       	ldi	r22, 0x16	; 22
    4e06:	72 e2       	ldi	r23, 0x22	; 34
    4e08:	c8 01       	movw	r24, r16
    4e0a:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <strcmp>
    4e0e:	28 2f       	mov	r18, r24
    4e10:	39 2f       	mov	r19, r25
    4e12:	23 2b       	or	r18, r19
    4e14:	f1 f4       	brne	.+60     	; 0x4e52 <data_handler+0x264>
    4e16:	ea 81       	ldd	r30, Y+2	; 0x02
    4e18:	fb 81       	ldd	r31, Y+3	; 0x03
    4e1a:	82 81       	ldd	r24, Z+2	; 0x02
    4e1c:	93 81       	ldd	r25, Z+3	; 0x03
    4e1e:	89 2b       	or	r24, r25
    4e20:	c1 f4       	brne	.+48     	; 0x4e52 <data_handler+0x264>
            if (config.pTimerWeekDayControl[0] != (uint32_t) (var->val.i)) {
    4e22:	f7 01       	movw	r30, r14
    4e24:	80 81       	ld	r24, Z
    4e26:	91 81       	ldd	r25, Z+1	; 0x01
    4e28:	a2 81       	ldd	r26, Z+2	; 0x02
    4e2a:	b3 81       	ldd	r27, Z+3	; 0x03
    4e2c:	e8 e9       	ldi	r30, 0x98	; 152
    4e2e:	fb e2       	ldi	r31, 0x2B	; 43
    4e30:	40 81       	ld	r20, Z
    4e32:	51 81       	ldd	r21, Z+1	; 0x01
    4e34:	62 81       	ldd	r22, Z+2	; 0x02
    4e36:	73 81       	ldd	r23, Z+3	; 0x03
    4e38:	48 17       	cp	r20, r24
    4e3a:	59 07       	cpc	r21, r25
    4e3c:	6a 07       	cpc	r22, r26
    4e3e:	7b 07       	cpc	r23, r27
    4e40:	09 f4       	brne	.+2      	; 0x4e44 <data_handler+0x256>
    4e42:	cc c2       	rjmp	.+1432   	; 0x53dc <data_handler+0x7ee>
                config.pTimerWeekDayControl[0] = (uint32_t) var->val.i;
    4e44:	80 83       	st	Z, r24
    4e46:	91 83       	std	Z+1, r25	; 0x01
    4e48:	a2 83       	std	Z+2, r26	; 0x02
    4e4a:	b3 83       	std	Z+3, r27	; 0x03
                update_eeprom = true;
    4e4c:	f1 e0       	ldi	r31, 0x01	; 1
    4e4e:	f9 83       	std	Y+1, r31	; 0x01
    4e50:	c5 c2       	rjmp	.+1418   	; 0x53dc <data_handler+0x7ee>
            }
        } else if (strcmp (var->name, CONFIG_CONTROL_POOL_TIMER_2_WEEKDAY_TAG) == 0 && var->type == AWT_INT32) {
    4e52:	6a e1       	ldi	r22, 0x1A	; 26
    4e54:	72 e2       	ldi	r23, 0x22	; 34
    4e56:	c8 01       	movw	r24, r16
    4e58:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <strcmp>
    4e5c:	28 2f       	mov	r18, r24
    4e5e:	39 2f       	mov	r19, r25
    4e60:	23 2b       	or	r18, r19
    4e62:	f1 f4       	brne	.+60     	; 0x4ea0 <data_handler+0x2b2>
    4e64:	ea 81       	ldd	r30, Y+2	; 0x02
    4e66:	fb 81       	ldd	r31, Y+3	; 0x03
    4e68:	82 81       	ldd	r24, Z+2	; 0x02
    4e6a:	93 81       	ldd	r25, Z+3	; 0x03
    4e6c:	89 2b       	or	r24, r25
    4e6e:	c1 f4       	brne	.+48     	; 0x4ea0 <data_handler+0x2b2>
            if (config.pTimerWeekDayControl[1] != (uint32_t) (var->val.i)) {
    4e70:	f7 01       	movw	r30, r14
    4e72:	80 81       	ld	r24, Z
    4e74:	91 81       	ldd	r25, Z+1	; 0x01
    4e76:	a2 81       	ldd	r26, Z+2	; 0x02
    4e78:	b3 81       	ldd	r27, Z+3	; 0x03
    4e7a:	ec e9       	ldi	r30, 0x9C	; 156
    4e7c:	fb e2       	ldi	r31, 0x2B	; 43
    4e7e:	40 81       	ld	r20, Z
    4e80:	51 81       	ldd	r21, Z+1	; 0x01
    4e82:	62 81       	ldd	r22, Z+2	; 0x02
    4e84:	73 81       	ldd	r23, Z+3	; 0x03
    4e86:	48 17       	cp	r20, r24
    4e88:	59 07       	cpc	r21, r25
    4e8a:	6a 07       	cpc	r22, r26
    4e8c:	7b 07       	cpc	r23, r27
    4e8e:	09 f4       	brne	.+2      	; 0x4e92 <data_handler+0x2a4>
    4e90:	a5 c2       	rjmp	.+1354   	; 0x53dc <data_handler+0x7ee>
                config.pTimerWeekDayControl[1] = (uint32_t) var->val.i;
    4e92:	80 83       	st	Z, r24
    4e94:	91 83       	std	Z+1, r25	; 0x01
    4e96:	a2 83       	std	Z+2, r26	; 0x02
    4e98:	b3 83       	std	Z+3, r27	; 0x03
                update_eeprom = true;
    4e9a:	f1 e0       	ldi	r31, 0x01	; 1
    4e9c:	f9 83       	std	Y+1, r31	; 0x01
    4e9e:	9e c2       	rjmp	.+1340   	; 0x53dc <data_handler+0x7ee>
            }
        } else if (strcmp (var->name, CONFIG_CONTROL_POOL_TIMER_3_WEEKDAY_TAG) == 0 && var->type == AWT_INT32) {
    4ea0:	6e e1       	ldi	r22, 0x1E	; 30
    4ea2:	72 e2       	ldi	r23, 0x22	; 34
    4ea4:	c8 01       	movw	r24, r16
    4ea6:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <strcmp>
    4eaa:	28 2f       	mov	r18, r24
    4eac:	39 2f       	mov	r19, r25
    4eae:	23 2b       	or	r18, r19
    4eb0:	f1 f4       	brne	.+60     	; 0x4eee <data_handler+0x300>
    4eb2:	ea 81       	ldd	r30, Y+2	; 0x02
    4eb4:	fb 81       	ldd	r31, Y+3	; 0x03
    4eb6:	82 81       	ldd	r24, Z+2	; 0x02
    4eb8:	93 81       	ldd	r25, Z+3	; 0x03
    4eba:	89 2b       	or	r24, r25
    4ebc:	c1 f4       	brne	.+48     	; 0x4eee <data_handler+0x300>
            if (config.pTimerWeekDayControl[2] != (uint32_t) (var->val.i)) {
    4ebe:	f7 01       	movw	r30, r14
    4ec0:	80 81       	ld	r24, Z
    4ec2:	91 81       	ldd	r25, Z+1	; 0x01
    4ec4:	a2 81       	ldd	r26, Z+2	; 0x02
    4ec6:	b3 81       	ldd	r27, Z+3	; 0x03
    4ec8:	e0 ea       	ldi	r30, 0xA0	; 160
    4eca:	fb e2       	ldi	r31, 0x2B	; 43
    4ecc:	40 81       	ld	r20, Z
    4ece:	51 81       	ldd	r21, Z+1	; 0x01
    4ed0:	62 81       	ldd	r22, Z+2	; 0x02
    4ed2:	73 81       	ldd	r23, Z+3	; 0x03
    4ed4:	48 17       	cp	r20, r24
    4ed6:	59 07       	cpc	r21, r25
    4ed8:	6a 07       	cpc	r22, r26
    4eda:	7b 07       	cpc	r23, r27
    4edc:	09 f4       	brne	.+2      	; 0x4ee0 <data_handler+0x2f2>
    4ede:	7e c2       	rjmp	.+1276   	; 0x53dc <data_handler+0x7ee>
                config.pTimerWeekDayControl[2] = (uint32_t) var->val.i;
    4ee0:	80 83       	st	Z, r24
    4ee2:	91 83       	std	Z+1, r25	; 0x01
    4ee4:	a2 83       	std	Z+2, r26	; 0x02
    4ee6:	b3 83       	std	Z+3, r27	; 0x03
                update_eeprom = true;
    4ee8:	f1 e0       	ldi	r31, 0x01	; 1
    4eea:	f9 83       	std	Y+1, r31	; 0x01
    4eec:	77 c2       	rjmp	.+1262   	; 0x53dc <data_handler+0x7ee>
            }
        } else if (strcmp (var->name, CONFIG_CONTROL_POOL_TIMER_1_WEEKEND_TAG) == 0 && var->type == AWT_INT32) {
    4eee:	62 e2       	ldi	r22, 0x22	; 34
    4ef0:	72 e2       	ldi	r23, 0x22	; 34
    4ef2:	c8 01       	movw	r24, r16
    4ef4:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <strcmp>
    4ef8:	28 2f       	mov	r18, r24
    4efa:	39 2f       	mov	r19, r25
    4efc:	23 2b       	or	r18, r19
    4efe:	f1 f4       	brne	.+60     	; 0x4f3c <data_handler+0x34e>
    4f00:	ea 81       	ldd	r30, Y+2	; 0x02
    4f02:	fb 81       	ldd	r31, Y+3	; 0x03
    4f04:	82 81       	ldd	r24, Z+2	; 0x02
    4f06:	93 81       	ldd	r25, Z+3	; 0x03
    4f08:	89 2b       	or	r24, r25
    4f0a:	c1 f4       	brne	.+48     	; 0x4f3c <data_handler+0x34e>
            if (config.pTimerWeekEndControl[0] != (uint32_t) (var->val.i)) {
    4f0c:	f7 01       	movw	r30, r14
    4f0e:	80 81       	ld	r24, Z
    4f10:	91 81       	ldd	r25, Z+1	; 0x01
    4f12:	a2 81       	ldd	r26, Z+2	; 0x02
    4f14:	b3 81       	ldd	r27, Z+3	; 0x03
    4f16:	ee ea       	ldi	r30, 0xAE	; 174
    4f18:	fb e2       	ldi	r31, 0x2B	; 43
    4f1a:	40 81       	ld	r20, Z
    4f1c:	51 81       	ldd	r21, Z+1	; 0x01
    4f1e:	62 81       	ldd	r22, Z+2	; 0x02
    4f20:	73 81       	ldd	r23, Z+3	; 0x03
    4f22:	48 17       	cp	r20, r24
    4f24:	59 07       	cpc	r21, r25
    4f26:	6a 07       	cpc	r22, r26
    4f28:	7b 07       	cpc	r23, r27
    4f2a:	09 f4       	brne	.+2      	; 0x4f2e <data_handler+0x340>
    4f2c:	57 c2       	rjmp	.+1198   	; 0x53dc <data_handler+0x7ee>
                config.pTimerWeekEndControl[0] = (uint32_t) var->val.i;
    4f2e:	80 83       	st	Z, r24
    4f30:	91 83       	std	Z+1, r25	; 0x01
    4f32:	a2 83       	std	Z+2, r26	; 0x02
    4f34:	b3 83       	std	Z+3, r27	; 0x03
                update_eeprom = true;
    4f36:	f1 e0       	ldi	r31, 0x01	; 1
    4f38:	f9 83       	std	Y+1, r31	; 0x01
    4f3a:	50 c2       	rjmp	.+1184   	; 0x53dc <data_handler+0x7ee>
            }
        } else if (strcmp (var->name, CONFIG_CONTROL_POOL_TIMER_2_WEEKEND_TAG) == 0 && var->type == AWT_INT32) {
    4f3c:	68 e2       	ldi	r22, 0x28	; 40
    4f3e:	72 e2       	ldi	r23, 0x22	; 34
    4f40:	c8 01       	movw	r24, r16
    4f42:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <strcmp>
    4f46:	28 2f       	mov	r18, r24
    4f48:	39 2f       	mov	r19, r25
    4f4a:	23 2b       	or	r18, r19
    4f4c:	f1 f4       	brne	.+60     	; 0x4f8a <data_handler+0x39c>
    4f4e:	ea 81       	ldd	r30, Y+2	; 0x02
    4f50:	fb 81       	ldd	r31, Y+3	; 0x03
    4f52:	82 81       	ldd	r24, Z+2	; 0x02
    4f54:	93 81       	ldd	r25, Z+3	; 0x03
    4f56:	89 2b       	or	r24, r25
    4f58:	c1 f4       	brne	.+48     	; 0x4f8a <data_handler+0x39c>
            if (config.pTimerWeekEndControl[1] != (uint32_t) (var->val.i)) {
    4f5a:	f7 01       	movw	r30, r14
    4f5c:	80 81       	ld	r24, Z
    4f5e:	91 81       	ldd	r25, Z+1	; 0x01
    4f60:	a2 81       	ldd	r26, Z+2	; 0x02
    4f62:	b3 81       	ldd	r27, Z+3	; 0x03
    4f64:	e2 eb       	ldi	r30, 0xB2	; 178
    4f66:	fb e2       	ldi	r31, 0x2B	; 43
    4f68:	40 81       	ld	r20, Z
    4f6a:	51 81       	ldd	r21, Z+1	; 0x01
    4f6c:	62 81       	ldd	r22, Z+2	; 0x02
    4f6e:	73 81       	ldd	r23, Z+3	; 0x03
    4f70:	48 17       	cp	r20, r24
    4f72:	59 07       	cpc	r21, r25
    4f74:	6a 07       	cpc	r22, r26
    4f76:	7b 07       	cpc	r23, r27
    4f78:	09 f4       	brne	.+2      	; 0x4f7c <data_handler+0x38e>
    4f7a:	30 c2       	rjmp	.+1120   	; 0x53dc <data_handler+0x7ee>
                config.pTimerWeekEndControl[1] = (uint32_t) var->val.i;
    4f7c:	80 83       	st	Z, r24
    4f7e:	91 83       	std	Z+1, r25	; 0x01
    4f80:	a2 83       	std	Z+2, r26	; 0x02
    4f82:	b3 83       	std	Z+3, r27	; 0x03
                update_eeprom = true;
    4f84:	f1 e0       	ldi	r31, 0x01	; 1
    4f86:	f9 83       	std	Y+1, r31	; 0x01
    4f88:	29 c2       	rjmp	.+1106   	; 0x53dc <data_handler+0x7ee>
            }
        } else if (strcmp (var->name, CONFIG_CONTROL_POOL_TIMER_3_WEEKEND_TAG) == 0 && var->type == AWT_INT32) {
    4f8a:	6e e2       	ldi	r22, 0x2E	; 46
    4f8c:	72 e2       	ldi	r23, 0x22	; 34
    4f8e:	c8 01       	movw	r24, r16
    4f90:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <strcmp>
    4f94:	28 2f       	mov	r18, r24
    4f96:	39 2f       	mov	r19, r25
    4f98:	23 2b       	or	r18, r19
    4f9a:	f1 f4       	brne	.+60     	; 0x4fd8 <data_handler+0x3ea>
    4f9c:	ea 81       	ldd	r30, Y+2	; 0x02
    4f9e:	fb 81       	ldd	r31, Y+3	; 0x03
    4fa0:	82 81       	ldd	r24, Z+2	; 0x02
    4fa2:	93 81       	ldd	r25, Z+3	; 0x03
    4fa4:	89 2b       	or	r24, r25
    4fa6:	c1 f4       	brne	.+48     	; 0x4fd8 <data_handler+0x3ea>
            if (config.pTimerWeekEndControl[2] != (uint32_t) (var->val.i)) {
    4fa8:	f7 01       	movw	r30, r14
    4faa:	80 81       	ld	r24, Z
    4fac:	91 81       	ldd	r25, Z+1	; 0x01
    4fae:	a2 81       	ldd	r26, Z+2	; 0x02
    4fb0:	b3 81       	ldd	r27, Z+3	; 0x03
    4fb2:	e6 eb       	ldi	r30, 0xB6	; 182
    4fb4:	fb e2       	ldi	r31, 0x2B	; 43
    4fb6:	40 81       	ld	r20, Z
    4fb8:	51 81       	ldd	r21, Z+1	; 0x01
    4fba:	62 81       	ldd	r22, Z+2	; 0x02
    4fbc:	73 81       	ldd	r23, Z+3	; 0x03
    4fbe:	48 17       	cp	r20, r24
    4fc0:	59 07       	cpc	r21, r25
    4fc2:	6a 07       	cpc	r22, r26
    4fc4:	7b 07       	cpc	r23, r27
    4fc6:	09 f4       	brne	.+2      	; 0x4fca <data_handler+0x3dc>
    4fc8:	09 c2       	rjmp	.+1042   	; 0x53dc <data_handler+0x7ee>
                config.pTimerWeekEndControl[2] = (uint32_t) var->val.i;
    4fca:	80 83       	st	Z, r24
    4fcc:	91 83       	std	Z+1, r25	; 0x01
    4fce:	a2 83       	std	Z+2, r26	; 0x02
    4fd0:	b3 83       	std	Z+3, r27	; 0x03
                update_eeprom = true;
    4fd2:	f1 e0       	ldi	r31, 0x01	; 1
    4fd4:	f9 83       	std	Y+1, r31	; 0x01
    4fd6:	02 c2       	rjmp	.+1028   	; 0x53dc <data_handler+0x7ee>
            }
        } else if (strcmp (var->name, CONFIG_WATER_RUNNING_POOL_TIMER_1_WEEKDAY_TAG) == 0 && var->type == AWT_INT32) {
    4fd8:	64 e3       	ldi	r22, 0x34	; 52
    4fda:	72 e2       	ldi	r23, 0x22	; 34
    4fdc:	c8 01       	movw	r24, r16
    4fde:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <strcmp>
    4fe2:	28 2f       	mov	r18, r24
    4fe4:	39 2f       	mov	r19, r25
    4fe6:	23 2b       	or	r18, r19
    4fe8:	f1 f4       	brne	.+60     	; 0x5026 <data_handler+0x438>
    4fea:	ea 81       	ldd	r30, Y+2	; 0x02
    4fec:	fb 81       	ldd	r31, Y+3	; 0x03
    4fee:	82 81       	ldd	r24, Z+2	; 0x02
    4ff0:	93 81       	ldd	r25, Z+3	; 0x03
    4ff2:	89 2b       	or	r24, r25
    4ff4:	c1 f4       	brne	.+48     	; 0x5026 <data_handler+0x438>
            if (config.pTimerWeekDayWaterRunning[0] != (uint32_t) (var->val.i)) {
    4ff6:	f7 01       	movw	r30, r14
    4ff8:	80 81       	ld	r24, Z
    4ffa:	91 81       	ldd	r25, Z+1	; 0x01
    4ffc:	a2 81       	ldd	r26, Z+2	; 0x02
    4ffe:	b3 81       	ldd	r27, Z+3	; 0x03
    5000:	ea eb       	ldi	r30, 0xBA	; 186
    5002:	fb e2       	ldi	r31, 0x2B	; 43
    5004:	40 81       	ld	r20, Z
    5006:	51 81       	ldd	r21, Z+1	; 0x01
    5008:	62 81       	ldd	r22, Z+2	; 0x02
    500a:	73 81       	ldd	r23, Z+3	; 0x03
    500c:	48 17       	cp	r20, r24
    500e:	59 07       	cpc	r21, r25
    5010:	6a 07       	cpc	r22, r26
    5012:	7b 07       	cpc	r23, r27
    5014:	09 f4       	brne	.+2      	; 0x5018 <data_handler+0x42a>
    5016:	e2 c1       	rjmp	.+964    	; 0x53dc <data_handler+0x7ee>
                config.pTimerWeekDayWaterRunning[0] = (uint32_t) var->val.i;
    5018:	80 83       	st	Z, r24
    501a:	91 83       	std	Z+1, r25	; 0x01
    501c:	a2 83       	std	Z+2, r26	; 0x02
    501e:	b3 83       	std	Z+3, r27	; 0x03
                update_eeprom = true;
    5020:	f1 e0       	ldi	r31, 0x01	; 1
    5022:	f9 83       	std	Y+1, r31	; 0x01
    5024:	db c1       	rjmp	.+950    	; 0x53dc <data_handler+0x7ee>
            }
        } else if (strcmp (var->name, CONFIG_WATER_RUNNING_POOL_TIMER_2_WEEKDAY_TAG) == 0 && var->type == AWT_INT32) {
    5026:	6a e3       	ldi	r22, 0x3A	; 58
    5028:	72 e2       	ldi	r23, 0x22	; 34
    502a:	c8 01       	movw	r24, r16
    502c:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <strcmp>
    5030:	28 2f       	mov	r18, r24
    5032:	39 2f       	mov	r19, r25
    5034:	23 2b       	or	r18, r19
    5036:	f1 f4       	brne	.+60     	; 0x5074 <data_handler+0x486>
    5038:	ea 81       	ldd	r30, Y+2	; 0x02
    503a:	fb 81       	ldd	r31, Y+3	; 0x03
    503c:	82 81       	ldd	r24, Z+2	; 0x02
    503e:	93 81       	ldd	r25, Z+3	; 0x03
    5040:	89 2b       	or	r24, r25
    5042:	c1 f4       	brne	.+48     	; 0x5074 <data_handler+0x486>
            if (config.pTimerWeekDayWaterRunning[1] != (uint32_t) (var->val.i)) {
    5044:	f7 01       	movw	r30, r14
    5046:	80 81       	ld	r24, Z
    5048:	91 81       	ldd	r25, Z+1	; 0x01
    504a:	a2 81       	ldd	r26, Z+2	; 0x02
    504c:	b3 81       	ldd	r27, Z+3	; 0x03
    504e:	ee eb       	ldi	r30, 0xBE	; 190
    5050:	fb e2       	ldi	r31, 0x2B	; 43
    5052:	40 81       	ld	r20, Z
    5054:	51 81       	ldd	r21, Z+1	; 0x01
    5056:	62 81       	ldd	r22, Z+2	; 0x02
    5058:	73 81       	ldd	r23, Z+3	; 0x03
    505a:	48 17       	cp	r20, r24
    505c:	59 07       	cpc	r21, r25
    505e:	6a 07       	cpc	r22, r26
    5060:	7b 07       	cpc	r23, r27
    5062:	09 f4       	brne	.+2      	; 0x5066 <data_handler+0x478>
    5064:	bb c1       	rjmp	.+886    	; 0x53dc <data_handler+0x7ee>
                config.pTimerWeekDayWaterRunning[1] = (uint32_t) var->val.i;
    5066:	80 83       	st	Z, r24
    5068:	91 83       	std	Z+1, r25	; 0x01
    506a:	a2 83       	std	Z+2, r26	; 0x02
    506c:	b3 83       	std	Z+3, r27	; 0x03
                update_eeprom = true;
    506e:	f1 e0       	ldi	r31, 0x01	; 1
    5070:	f9 83       	std	Y+1, r31	; 0x01
    5072:	b4 c1       	rjmp	.+872    	; 0x53dc <data_handler+0x7ee>
            }
        } else if (strcmp (var->name, CONFIG_WATER_RUNNING_POOL_TIMER_3_WEEKDAY_TAG) == 0 && var->type == AWT_INT32) {
    5074:	60 e4       	ldi	r22, 0x40	; 64
    5076:	72 e2       	ldi	r23, 0x22	; 34
    5078:	c8 01       	movw	r24, r16
    507a:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <strcmp>
    507e:	28 2f       	mov	r18, r24
    5080:	39 2f       	mov	r19, r25
    5082:	23 2b       	or	r18, r19
    5084:	f1 f4       	brne	.+60     	; 0x50c2 <data_handler+0x4d4>
    5086:	ea 81       	ldd	r30, Y+2	; 0x02
    5088:	fb 81       	ldd	r31, Y+3	; 0x03
    508a:	82 81       	ldd	r24, Z+2	; 0x02
    508c:	93 81       	ldd	r25, Z+3	; 0x03
    508e:	89 2b       	or	r24, r25
    5090:	c1 f4       	brne	.+48     	; 0x50c2 <data_handler+0x4d4>
            if (config.pTimerWeekDayWaterRunning[2] != (uint32_t) (var->val.i)) {
    5092:	f7 01       	movw	r30, r14
    5094:	80 81       	ld	r24, Z
    5096:	91 81       	ldd	r25, Z+1	; 0x01
    5098:	a2 81       	ldd	r26, Z+2	; 0x02
    509a:	b3 81       	ldd	r27, Z+3	; 0x03
    509c:	e2 ec       	ldi	r30, 0xC2	; 194
    509e:	fb e2       	ldi	r31, 0x2B	; 43
    50a0:	40 81       	ld	r20, Z
    50a2:	51 81       	ldd	r21, Z+1	; 0x01
    50a4:	62 81       	ldd	r22, Z+2	; 0x02
    50a6:	73 81       	ldd	r23, Z+3	; 0x03
    50a8:	48 17       	cp	r20, r24
    50aa:	59 07       	cpc	r21, r25
    50ac:	6a 07       	cpc	r22, r26
    50ae:	7b 07       	cpc	r23, r27
    50b0:	09 f4       	brne	.+2      	; 0x50b4 <data_handler+0x4c6>
    50b2:	94 c1       	rjmp	.+808    	; 0x53dc <data_handler+0x7ee>
                config.pTimerWeekDayWaterRunning[2] = (uint32_t) var->val.i;
    50b4:	80 83       	st	Z, r24
    50b6:	91 83       	std	Z+1, r25	; 0x01
    50b8:	a2 83       	std	Z+2, r26	; 0x02
    50ba:	b3 83       	std	Z+3, r27	; 0x03
                update_eeprom = true;
    50bc:	f1 e0       	ldi	r31, 0x01	; 1
    50be:	f9 83       	std	Y+1, r31	; 0x01
    50c0:	8d c1       	rjmp	.+794    	; 0x53dc <data_handler+0x7ee>
            }
        } else if (strcmp (var->name, CONFIG_WATER_RUNNING_POOL_TIMER_1_WEEKEND_TAG) == 0 && var->type == AWT_INT32) {
    50c2:	66 e4       	ldi	r22, 0x46	; 70
    50c4:	72 e2       	ldi	r23, 0x22	; 34
    50c6:	c8 01       	movw	r24, r16
    50c8:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <strcmp>
    50cc:	28 2f       	mov	r18, r24
    50ce:	39 2f       	mov	r19, r25
    50d0:	23 2b       	or	r18, r19
    50d2:	f1 f4       	brne	.+60     	; 0x5110 <data_handler+0x522>
    50d4:	ea 81       	ldd	r30, Y+2	; 0x02
    50d6:	fb 81       	ldd	r31, Y+3	; 0x03
    50d8:	82 81       	ldd	r24, Z+2	; 0x02
    50da:	93 81       	ldd	r25, Z+3	; 0x03
    50dc:	89 2b       	or	r24, r25
    50de:	c1 f4       	brne	.+48     	; 0x5110 <data_handler+0x522>
            if (config.pTimerWeekEndWaterRunning[0] != (uint32_t) (var->val.i)) {
    50e0:	f7 01       	movw	r30, r14
    50e2:	80 81       	ld	r24, Z
    50e4:	91 81       	ldd	r25, Z+1	; 0x01
    50e6:	a2 81       	ldd	r26, Z+2	; 0x02
    50e8:	b3 81       	ldd	r27, Z+3	; 0x03
    50ea:	e6 ec       	ldi	r30, 0xC6	; 198
    50ec:	fb e2       	ldi	r31, 0x2B	; 43
    50ee:	40 81       	ld	r20, Z
    50f0:	51 81       	ldd	r21, Z+1	; 0x01
    50f2:	62 81       	ldd	r22, Z+2	; 0x02
    50f4:	73 81       	ldd	r23, Z+3	; 0x03
    50f6:	48 17       	cp	r20, r24
    50f8:	59 07       	cpc	r21, r25
    50fa:	6a 07       	cpc	r22, r26
    50fc:	7b 07       	cpc	r23, r27
    50fe:	09 f4       	brne	.+2      	; 0x5102 <data_handler+0x514>
    5100:	6d c1       	rjmp	.+730    	; 0x53dc <data_handler+0x7ee>
                config.pTimerWeekEndWaterRunning[0] = (uint32_t) var->val.i;
    5102:	80 83       	st	Z, r24
    5104:	91 83       	std	Z+1, r25	; 0x01
    5106:	a2 83       	std	Z+2, r26	; 0x02
    5108:	b3 83       	std	Z+3, r27	; 0x03
                update_eeprom = true;
    510a:	f1 e0       	ldi	r31, 0x01	; 1
    510c:	f9 83       	std	Y+1, r31	; 0x01
    510e:	66 c1       	rjmp	.+716    	; 0x53dc <data_handler+0x7ee>
            }
        } else if (strcmp (var->name, CONFIG_WATER_RUNNING_POOL_TIMER_2_WEEKEND_TAG) == 0 && var->type == AWT_INT32) {
    5110:	6c e4       	ldi	r22, 0x4C	; 76
    5112:	72 e2       	ldi	r23, 0x22	; 34
    5114:	c8 01       	movw	r24, r16
    5116:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <strcmp>
    511a:	28 2f       	mov	r18, r24
    511c:	39 2f       	mov	r19, r25
    511e:	23 2b       	or	r18, r19
    5120:	f1 f4       	brne	.+60     	; 0x515e <data_handler+0x570>
    5122:	ea 81       	ldd	r30, Y+2	; 0x02
    5124:	fb 81       	ldd	r31, Y+3	; 0x03
    5126:	82 81       	ldd	r24, Z+2	; 0x02
    5128:	93 81       	ldd	r25, Z+3	; 0x03
    512a:	89 2b       	or	r24, r25
    512c:	c1 f4       	brne	.+48     	; 0x515e <data_handler+0x570>
            if (config.pTimerWeekEndWaterRunning[1] != (uint32_t) (var->val.i)) {
    512e:	f7 01       	movw	r30, r14
    5130:	80 81       	ld	r24, Z
    5132:	91 81       	ldd	r25, Z+1	; 0x01
    5134:	a2 81       	ldd	r26, Z+2	; 0x02
    5136:	b3 81       	ldd	r27, Z+3	; 0x03
    5138:	ea ec       	ldi	r30, 0xCA	; 202
    513a:	fb e2       	ldi	r31, 0x2B	; 43
    513c:	40 81       	ld	r20, Z
    513e:	51 81       	ldd	r21, Z+1	; 0x01
    5140:	62 81       	ldd	r22, Z+2	; 0x02
    5142:	73 81       	ldd	r23, Z+3	; 0x03
    5144:	48 17       	cp	r20, r24
    5146:	59 07       	cpc	r21, r25
    5148:	6a 07       	cpc	r22, r26
    514a:	7b 07       	cpc	r23, r27
    514c:	09 f4       	brne	.+2      	; 0x5150 <data_handler+0x562>
    514e:	46 c1       	rjmp	.+652    	; 0x53dc <data_handler+0x7ee>
                config.pTimerWeekEndWaterRunning[1] = (uint32_t) var->val.i;
    5150:	80 83       	st	Z, r24
    5152:	91 83       	std	Z+1, r25	; 0x01
    5154:	a2 83       	std	Z+2, r26	; 0x02
    5156:	b3 83       	std	Z+3, r27	; 0x03
                update_eeprom = true;
    5158:	f1 e0       	ldi	r31, 0x01	; 1
    515a:	f9 83       	std	Y+1, r31	; 0x01
    515c:	3f c1       	rjmp	.+638    	; 0x53dc <data_handler+0x7ee>
            }
        } else if (strcmp (var->name, CONFIG_WATER_RUNNING_POOL_TIMER_3_WEEKEND_TAG) == 0 && var->type == AWT_INT32) {
    515e:	62 e5       	ldi	r22, 0x52	; 82
    5160:	72 e2       	ldi	r23, 0x22	; 34
    5162:	c8 01       	movw	r24, r16
    5164:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <strcmp>
    5168:	28 2f       	mov	r18, r24
    516a:	39 2f       	mov	r19, r25
    516c:	23 2b       	or	r18, r19
    516e:	f1 f4       	brne	.+60     	; 0x51ac <data_handler+0x5be>
    5170:	ea 81       	ldd	r30, Y+2	; 0x02
    5172:	fb 81       	ldd	r31, Y+3	; 0x03
    5174:	82 81       	ldd	r24, Z+2	; 0x02
    5176:	93 81       	ldd	r25, Z+3	; 0x03
    5178:	89 2b       	or	r24, r25
    517a:	c1 f4       	brne	.+48     	; 0x51ac <data_handler+0x5be>
            if (config.pTimerWeekEndWaterRunning[2] != (uint32_t) (var->val.i)) {
    517c:	f7 01       	movw	r30, r14
    517e:	80 81       	ld	r24, Z
    5180:	91 81       	ldd	r25, Z+1	; 0x01
    5182:	a2 81       	ldd	r26, Z+2	; 0x02
    5184:	b3 81       	ldd	r27, Z+3	; 0x03
    5186:	ee ec       	ldi	r30, 0xCE	; 206
    5188:	fb e2       	ldi	r31, 0x2B	; 43
    518a:	40 81       	ld	r20, Z
    518c:	51 81       	ldd	r21, Z+1	; 0x01
    518e:	62 81       	ldd	r22, Z+2	; 0x02
    5190:	73 81       	ldd	r23, Z+3	; 0x03
    5192:	48 17       	cp	r20, r24
    5194:	59 07       	cpc	r21, r25
    5196:	6a 07       	cpc	r22, r26
    5198:	7b 07       	cpc	r23, r27
    519a:	09 f4       	brne	.+2      	; 0x519e <data_handler+0x5b0>
    519c:	1f c1       	rjmp	.+574    	; 0x53dc <data_handler+0x7ee>
                config.pTimerWeekEndWaterRunning[2] = (uint32_t) var->val.i;
    519e:	80 83       	st	Z, r24
    51a0:	91 83       	std	Z+1, r25	; 0x01
    51a2:	a2 83       	std	Z+2, r26	; 0x02
    51a4:	b3 83       	std	Z+3, r27	; 0x03
                update_eeprom = true;
    51a6:	f1 e0       	ldi	r31, 0x01	; 1
    51a8:	f9 83       	std	Y+1, r31	; 0x01
    51aa:	18 c1       	rjmp	.+560    	; 0x53dc <data_handler+0x7ee>
            }
        } else if (strcmp (var->name, CONFIG_CONTROL_TEMP_SP_TAG) == 0 && var->type == AWT_INT32) {
    51ac:	68 e5       	ldi	r22, 0x58	; 88
    51ae:	72 e2       	ldi	r23, 0x22	; 34
    51b0:	c8 01       	movw	r24, r16
    51b2:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <strcmp>
    51b6:	28 2f       	mov	r18, r24
    51b8:	39 2f       	mov	r19, r25
    51ba:	23 2b       	or	r18, r19
    51bc:	b1 f5       	brne	.+108    	; 0x522a <data_handler+0x63c>
    51be:	ea 81       	ldd	r30, Y+2	; 0x02
    51c0:	fb 81       	ldd	r31, Y+3	; 0x03
    51c2:	82 81       	ldd	r24, Z+2	; 0x02
    51c4:	93 81       	ldd	r25, Z+3	; 0x03
    51c6:	89 2b       	or	r24, r25
    51c8:	81 f5       	brne	.+96     	; 0x522a <data_handler+0x63c>
            if (config.temp_sp_x16 != (var->val.i * MODEL_TEMP_SCALE_FACTOR)) {
    51ca:	f7 01       	movw	r30, r14
    51cc:	40 81       	ld	r20, Z
    51ce:	51 81       	ldd	r21, Z+1	; 0x01
    51d0:	62 81       	ldd	r22, Z+2	; 0x02
    51d2:	73 81       	ldd	r23, Z+3	; 0x03
    51d4:	e4 ea       	ldi	r30, 0xA4	; 164
    51d6:	fb e2       	ldi	r31, 0x2B	; 43
    51d8:	80 81       	ld	r24, Z
    51da:	91 81       	ldd	r25, Z+1	; 0x01
    51dc:	aa 27       	eor	r26, r26
    51de:	97 fd       	sbrc	r25, 7
    51e0:	a0 95       	com	r26
    51e2:	ba 2f       	mov	r27, r26
    51e4:	8a 01       	movw	r16, r20
    51e6:	9b 01       	movw	r18, r22
    51e8:	00 0f       	add	r16, r16
    51ea:	11 1f       	adc	r17, r17
    51ec:	22 1f       	adc	r18, r18
    51ee:	33 1f       	adc	r19, r19
    51f0:	00 0f       	add	r16, r16
    51f2:	11 1f       	adc	r17, r17
    51f4:	22 1f       	adc	r18, r18
    51f6:	33 1f       	adc	r19, r19
    51f8:	00 0f       	add	r16, r16
    51fa:	11 1f       	adc	r17, r17
    51fc:	22 1f       	adc	r18, r18
    51fe:	33 1f       	adc	r19, r19
    5200:	00 0f       	add	r16, r16
    5202:	11 1f       	adc	r17, r17
    5204:	22 1f       	adc	r18, r18
    5206:	33 1f       	adc	r19, r19
    5208:	80 17       	cp	r24, r16
    520a:	91 07       	cpc	r25, r17
    520c:	a2 07       	cpc	r26, r18
    520e:	b3 07       	cpc	r27, r19
    5210:	09 f4       	brne	.+2      	; 0x5214 <data_handler+0x626>
    5212:	e4 c0       	rjmp	.+456    	; 0x53dc <data_handler+0x7ee>
                config.temp_sp_x16 = var->val.i * MODEL_TEMP_SCALE_FACTOR;
    5214:	42 95       	swap	r20
    5216:	52 95       	swap	r21
    5218:	50 7f       	andi	r21, 0xF0	; 240
    521a:	54 27       	eor	r21, r20
    521c:	40 7f       	andi	r20, 0xF0	; 240
    521e:	54 27       	eor	r21, r20
    5220:	40 83       	st	Z, r20
    5222:	51 83       	std	Z+1, r21	; 0x01
                update_eeprom = true;
    5224:	f1 e0       	ldi	r31, 0x01	; 1
    5226:	f9 83       	std	Y+1, r31	; 0x01
    5228:	d9 c0       	rjmp	.+434    	; 0x53dc <data_handler+0x7ee>
            }
        } else if (strcmp (var->name, CONFIG_CONTROL_SELECT_TAG) == 0 && var->type == AWT_INT32) {
    522a:	60 e6       	ldi	r22, 0x60	; 96
    522c:	72 e2       	ldi	r23, 0x22	; 34
    522e:	c8 01       	movw	r24, r16
    5230:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <strcmp>
    5234:	28 2f       	mov	r18, r24
    5236:	39 2f       	mov	r19, r25
    5238:	23 2b       	or	r18, r19
    523a:	e1 f4       	brne	.+56     	; 0x5274 <data_handler+0x686>
    523c:	ea 81       	ldd	r30, Y+2	; 0x02
    523e:	fb 81       	ldd	r31, Y+3	; 0x03
    5240:	82 81       	ldd	r24, Z+2	; 0x02
    5242:	93 81       	ldd	r25, Z+3	; 0x03
    5244:	89 2b       	or	r24, r25
    5246:	b1 f4       	brne	.+44     	; 0x5274 <data_handler+0x686>
            if (config.ctrl_select != var->val.i) {
    5248:	f7 01       	movw	r30, r14
    524a:	40 81       	ld	r20, Z
    524c:	51 81       	ldd	r21, Z+1	; 0x01
    524e:	62 81       	ldd	r22, Z+2	; 0x02
    5250:	73 81       	ldd	r23, Z+3	; 0x03
    5252:	e6 ea       	ldi	r30, 0xA6	; 166
    5254:	fb e2       	ldi	r31, 0x2B	; 43
    5256:	80 81       	ld	r24, Z
    5258:	91 81       	ldd	r25, Z+1	; 0x01
    525a:	a0 e0       	ldi	r26, 0x00	; 0
    525c:	b0 e0       	ldi	r27, 0x00	; 0
    525e:	84 17       	cp	r24, r20
    5260:	95 07       	cpc	r25, r21
    5262:	a6 07       	cpc	r26, r22
    5264:	b7 07       	cpc	r27, r23
    5266:	09 f4       	brne	.+2      	; 0x526a <data_handler+0x67c>
    5268:	b9 c0       	rjmp	.+370    	; 0x53dc <data_handler+0x7ee>
                config.ctrl_select = var->val.i;
    526a:	40 83       	st	Z, r20
    526c:	51 83       	std	Z+1, r21	; 0x01
                update_eeprom = true;
    526e:	f1 e0       	ldi	r31, 0x01	; 1
    5270:	f9 83       	std	Y+1, r31	; 0x01
    5272:	b4 c0       	rjmp	.+360    	; 0x53dc <data_handler+0x7ee>
            }
        } else if (strcmp (var->name, CONFIG_ENABLE_EVENT_HI_TAG) == 0 && var->type == AWT_BOOL) {
    5274:	64 e6       	ldi	r22, 0x64	; 100
    5276:	72 e2       	ldi	r23, 0x22	; 34
    5278:	c8 01       	movw	r24, r16
    527a:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <strcmp>
    527e:	28 2f       	mov	r18, r24
    5280:	39 2f       	mov	r19, r25
    5282:	23 2b       	or	r18, r19
    5284:	91 f4       	brne	.+36     	; 0x52aa <data_handler+0x6bc>
    5286:	ea 81       	ldd	r30, Y+2	; 0x02
    5288:	fb 81       	ldd	r31, Y+3	; 0x03
    528a:	82 81       	ldd	r24, Z+2	; 0x02
    528c:	93 81       	ldd	r25, Z+3	; 0x03
    528e:	02 97       	sbiw	r24, 0x02	; 2
    5290:	61 f4       	brne	.+24     	; 0x52aa <data_handler+0x6bc>
            if (config.enable_temp1_hi_event != var->val.b) {
    5292:	f7 01       	movw	r30, r14
    5294:	80 81       	ld	r24, Z
    5296:	e8 ea       	ldi	r30, 0xA8	; 168
    5298:	fb e2       	ldi	r31, 0x2B	; 43
    529a:	90 81       	ld	r25, Z
    529c:	98 17       	cp	r25, r24
    529e:	09 f4       	brne	.+2      	; 0x52a2 <data_handler+0x6b4>
    52a0:	9d c0       	rjmp	.+314    	; 0x53dc <data_handler+0x7ee>
                config.enable_temp1_hi_event = var->val.b;
    52a2:	80 83       	st	Z, r24
                update_eeprom = true;
    52a4:	f1 e0       	ldi	r31, 0x01	; 1
    52a6:	f9 83       	std	Y+1, r31	; 0x01
    52a8:	99 c0       	rjmp	.+306    	; 0x53dc <data_handler+0x7ee>
            }
        } else if (strcmp (var->name, CONFIG_ENABLE_EVENT_LO_TAG) == 0 && var->type == AWT_BOOL) {
    52aa:	6a e6       	ldi	r22, 0x6A	; 106
    52ac:	72 e2       	ldi	r23, 0x22	; 34
    52ae:	c8 01       	movw	r24, r16
    52b0:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <strcmp>
    52b4:	28 2f       	mov	r18, r24
    52b6:	39 2f       	mov	r19, r25
    52b8:	23 2b       	or	r18, r19
    52ba:	91 f4       	brne	.+36     	; 0x52e0 <data_handler+0x6f2>
    52bc:	ea 81       	ldd	r30, Y+2	; 0x02
    52be:	fb 81       	ldd	r31, Y+3	; 0x03
    52c0:	82 81       	ldd	r24, Z+2	; 0x02
    52c2:	93 81       	ldd	r25, Z+3	; 0x03
    52c4:	02 97       	sbiw	r24, 0x02	; 2
    52c6:	61 f4       	brne	.+24     	; 0x52e0 <data_handler+0x6f2>
            if (config.enable_temp1_lo_event != var->val.b) {
    52c8:	f7 01       	movw	r30, r14
    52ca:	80 81       	ld	r24, Z
    52cc:	e9 ea       	ldi	r30, 0xA9	; 169
    52ce:	fb e2       	ldi	r31, 0x2B	; 43
    52d0:	90 81       	ld	r25, Z
    52d2:	98 17       	cp	r25, r24
    52d4:	09 f4       	brne	.+2      	; 0x52d8 <data_handler+0x6ea>
    52d6:	82 c0       	rjmp	.+260    	; 0x53dc <data_handler+0x7ee>
                config.enable_temp1_lo_event = var->val.b;
    52d8:	80 83       	st	Z, r24
                update_eeprom = true;
    52da:	f1 e0       	ldi	r31, 0x01	; 1
    52dc:	f9 83       	std	Y+1, r31	; 0x01
    52de:	7e c0       	rjmp	.+252    	; 0x53dc <data_handler+0x7ee>
            }
        } else if (strcmp (var->name, CONFIG_TEMP1_HI_TRIGGER_TAG) == 0 && var->type == AWT_INT32) {
    52e0:	60 e7       	ldi	r22, 0x70	; 112
    52e2:	72 e2       	ldi	r23, 0x22	; 34
    52e4:	c8 01       	movw	r24, r16
    52e6:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <strcmp>
    52ea:	28 2f       	mov	r18, r24
    52ec:	39 2f       	mov	r19, r25
    52ee:	23 2b       	or	r18, r19
    52f0:	b1 f5       	brne	.+108    	; 0x535e <data_handler+0x770>
    52f2:	ea 81       	ldd	r30, Y+2	; 0x02
    52f4:	fb 81       	ldd	r31, Y+3	; 0x03
    52f6:	82 81       	ldd	r24, Z+2	; 0x02
    52f8:	93 81       	ldd	r25, Z+3	; 0x03
    52fa:	89 2b       	or	r24, r25
    52fc:	81 f5       	brne	.+96     	; 0x535e <data_handler+0x770>
            if (config.temp1_hi_trigger_x16 != (var->val.i * MODEL_TEMP_SCALE_FACTOR)) {
    52fe:	f7 01       	movw	r30, r14
    5300:	40 81       	ld	r20, Z
    5302:	51 81       	ldd	r21, Z+1	; 0x01
    5304:	62 81       	ldd	r22, Z+2	; 0x02
    5306:	73 81       	ldd	r23, Z+3	; 0x03
    5308:	ea ea       	ldi	r30, 0xAA	; 170
    530a:	fb e2       	ldi	r31, 0x2B	; 43
    530c:	80 81       	ld	r24, Z
    530e:	91 81       	ldd	r25, Z+1	; 0x01
    5310:	aa 27       	eor	r26, r26
    5312:	97 fd       	sbrc	r25, 7
    5314:	a0 95       	com	r26
    5316:	ba 2f       	mov	r27, r26
    5318:	8a 01       	movw	r16, r20
    531a:	9b 01       	movw	r18, r22
    531c:	00 0f       	add	r16, r16
    531e:	11 1f       	adc	r17, r17
    5320:	22 1f       	adc	r18, r18
    5322:	33 1f       	adc	r19, r19
    5324:	00 0f       	add	r16, r16
    5326:	11 1f       	adc	r17, r17
    5328:	22 1f       	adc	r18, r18
    532a:	33 1f       	adc	r19, r19
    532c:	00 0f       	add	r16, r16
    532e:	11 1f       	adc	r17, r17
    5330:	22 1f       	adc	r18, r18
    5332:	33 1f       	adc	r19, r19
    5334:	00 0f       	add	r16, r16
    5336:	11 1f       	adc	r17, r17
    5338:	22 1f       	adc	r18, r18
    533a:	33 1f       	adc	r19, r19
    533c:	80 17       	cp	r24, r16
    533e:	91 07       	cpc	r25, r17
    5340:	a2 07       	cpc	r26, r18
    5342:	b3 07       	cpc	r27, r19
    5344:	09 f4       	brne	.+2      	; 0x5348 <data_handler+0x75a>
    5346:	4a c0       	rjmp	.+148    	; 0x53dc <data_handler+0x7ee>
                config.temp1_hi_trigger_x16 = var->val.i * MODEL_TEMP_SCALE_FACTOR;
    5348:	42 95       	swap	r20
    534a:	52 95       	swap	r21
    534c:	50 7f       	andi	r21, 0xF0	; 240
    534e:	54 27       	eor	r21, r20
    5350:	40 7f       	andi	r20, 0xF0	; 240
    5352:	54 27       	eor	r21, r20
    5354:	40 83       	st	Z, r20
    5356:	51 83       	std	Z+1, r21	; 0x01
                update_eeprom = true;
    5358:	f1 e0       	ldi	r31, 0x01	; 1
    535a:	f9 83       	std	Y+1, r31	; 0x01
    535c:	3f c0       	rjmp	.+126    	; 0x53dc <data_handler+0x7ee>
            }
        } else if (strcmp (var->name, CONFIG_TEMP1_LO_TRIGGER_TAG) == 0 && var->type == AWT_INT32) {
    535e:	69 e7       	ldi	r22, 0x79	; 121
    5360:	72 e2       	ldi	r23, 0x22	; 34
    5362:	c8 01       	movw	r24, r16
    5364:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <strcmp>
    5368:	28 2f       	mov	r18, r24
    536a:	39 2f       	mov	r19, r25
    536c:	23 2b       	or	r18, r19
    536e:	09 f0       	breq	.+2      	; 0x5372 <data_handler+0x784>
    5370:	53 c0       	rjmp	.+166    	; 0x5418 <data_handler+0x82a>
    5372:	ea 81       	ldd	r30, Y+2	; 0x02
    5374:	fb 81       	ldd	r31, Y+3	; 0x03
    5376:	82 81       	ldd	r24, Z+2	; 0x02
    5378:	93 81       	ldd	r25, Z+3	; 0x03
    537a:	89 2b       	or	r24, r25
    537c:	09 f0       	breq	.+2      	; 0x5380 <data_handler+0x792>
    537e:	4c c0       	rjmp	.+152    	; 0x5418 <data_handler+0x82a>
            if (config.temp1_lo_trigger_x16 != (var->val.i * MODEL_TEMP_SCALE_FACTOR)) {
    5380:	f7 01       	movw	r30, r14
    5382:	40 81       	ld	r20, Z
    5384:	51 81       	ldd	r21, Z+1	; 0x01
    5386:	62 81       	ldd	r22, Z+2	; 0x02
    5388:	73 81       	ldd	r23, Z+3	; 0x03
    538a:	ec ea       	ldi	r30, 0xAC	; 172
    538c:	fb e2       	ldi	r31, 0x2B	; 43
    538e:	80 81       	ld	r24, Z
    5390:	91 81       	ldd	r25, Z+1	; 0x01
    5392:	aa 27       	eor	r26, r26
    5394:	97 fd       	sbrc	r25, 7
    5396:	a0 95       	com	r26
    5398:	ba 2f       	mov	r27, r26
    539a:	8a 01       	movw	r16, r20
    539c:	9b 01       	movw	r18, r22
    539e:	00 0f       	add	r16, r16
    53a0:	11 1f       	adc	r17, r17
    53a2:	22 1f       	adc	r18, r18
    53a4:	33 1f       	adc	r19, r19
    53a6:	00 0f       	add	r16, r16
    53a8:	11 1f       	adc	r17, r17
    53aa:	22 1f       	adc	r18, r18
    53ac:	33 1f       	adc	r19, r19
    53ae:	00 0f       	add	r16, r16
    53b0:	11 1f       	adc	r17, r17
    53b2:	22 1f       	adc	r18, r18
    53b4:	33 1f       	adc	r19, r19
    53b6:	00 0f       	add	r16, r16
    53b8:	11 1f       	adc	r17, r17
    53ba:	22 1f       	adc	r18, r18
    53bc:	33 1f       	adc	r19, r19
    53be:	80 17       	cp	r24, r16
    53c0:	91 07       	cpc	r25, r17
    53c2:	a2 07       	cpc	r26, r18
    53c4:	b3 07       	cpc	r27, r19
    53c6:	51 f0       	breq	.+20     	; 0x53dc <data_handler+0x7ee>
                config.temp1_lo_trigger_x16 = var->val.i * MODEL_TEMP_SCALE_FACTOR;
    53c8:	42 95       	swap	r20
    53ca:	52 95       	swap	r21
    53cc:	50 7f       	andi	r21, 0xF0	; 240
    53ce:	54 27       	eor	r21, r20
    53d0:	40 7f       	andi	r20, 0xF0	; 240
    53d2:	54 27       	eor	r21, r20
    53d4:	40 83       	st	Z, r20
    53d6:	51 83       	std	Z+1, r21	; 0x01
                update_eeprom = true;
    53d8:	f1 e0       	ldi	r31, 0x01	; 1
    53da:	f9 83       	std	Y+1, r31	; 0x01
{
    bool update_eeprom = false;
    bool ack = true;
    state.modem.send_config1 = true;
    state.modem.send_config2 = true;
    for (uint8_t i = 0; ack && i < vars; i++, var++) {
    53dc:	93 94       	inc	r9
    53de:	8a 81       	ldd	r24, Y+2	; 0x02
    53e0:	9b 81       	ldd	r25, Y+3	; 0x03
    53e2:	08 96       	adiw	r24, 0x08	; 8
    53e4:	8a 83       	std	Y+2, r24	; 0x02
    53e6:	9b 83       	std	Y+3, r25	; 0x03
    53e8:	98 e0       	ldi	r25, 0x08	; 8
    53ea:	e9 0e       	add	r14, r25
    53ec:	f1 1c       	adc	r15, r1
    53ee:	98 10       	cpse	r9, r8
    53f0:	3e cc       	rjmp	.-1924   	; 0x4c6e <data_handler+0x80>
    53f2:	18 c0       	rjmp	.+48     	; 0x5424 <data_handler+0x836>
            ack = false;
        }
    }
    if (ack) {
        if (update_eeprom) {
            eeprom_write_config ();
    53f4:	0e 94 57 21 	call	0x42ae	; 0x42ae <eeprom_write_config>
            state.modem.secs_since_last_report_home = 0;
    53f8:	10 92 af 28 	sts	0x28AF, r1
    53fc:	10 92 b0 28 	sts	0x28B0, r1
        }
        if (awt_buffer_ack_req (true, path, ticketid)) {
    5400:	a3 01       	movw	r20, r6
    5402:	92 01       	movw	r18, r4
    5404:	b6 01       	movw	r22, r12
    5406:	81 e0       	ldi	r24, 0x01	; 1
    5408:	0e 94 1a 09 	call	0x1234	; 0x1234 <awt_buffer_ack_req>
    540c:	88 23       	and	r24, r24
    540e:	21 f0       	breq	.+8      	; 0x5418 <data_handler+0x82a>
            state.modem.secs_network_inactive = 0;
    5410:	10 92 ad 28 	sts	0x28AD, r1
    5414:	10 92 ae 28 	sts	0x28AE, r1
        }
        state.modem.send_config1 = true;
        state.modem.send_config2 = true;
    }
    state.modem.send_config1 = true;
    5418:	81 e0       	ldi	r24, 0x01	; 1
    541a:	80 93 aa 28 	sts	0x28AA, r24
    state.modem.send_config2 = true;
    541e:	80 93 ab 28 	sts	0x28AB, r24
    5422:	04 c0       	rjmp	.+8      	; 0x542c <data_handler+0x83e>
        } else {
            ack = false;
        }
    }
    if (ack) {
        if (update_eeprom) {
    5424:	e9 81       	ldd	r30, Y+1	; 0x01
    5426:	ee 23       	and	r30, r30
    5428:	59 f3       	breq	.-42     	; 0x5400 <data_handler+0x812>
    542a:	e4 cf       	rjmp	.-56     	; 0x53f4 <data_handler+0x806>
                          uint8_t vars, const awt_var_t* var)
{
    if (strcmp (path, CONFIG_PATH) == 0) {
        config_data_handler (ticketid, path, vars, var);
    }
}
    542c:	23 96       	adiw	r28, 0x03	; 3
    542e:	cd bf       	out	0x3d, r28	; 61
    5430:	de bf       	out	0x3e, r29	; 62
    5432:	df 91       	pop	r29
    5434:	cf 91       	pop	r28
    5436:	1f 91       	pop	r17
    5438:	0f 91       	pop	r16
    543a:	ff 90       	pop	r15
    543c:	ef 90       	pop	r14
    543e:	df 90       	pop	r13
    5440:	cf 90       	pop	r12
    5442:	bf 90       	pop	r11
    5444:	af 90       	pop	r10
    5446:	9f 90       	pop	r9
    5448:	8f 90       	pop	r8
    544a:	7f 90       	pop	r7
    544c:	6f 90       	pop	r6
    544e:	5f 90       	pop	r5
    5450:	4f 90       	pop	r4
    5452:	3f 90       	pop	r3
    5454:	2f 90       	pop	r2
    5456:	08 95       	ret

00005458 <reset_avr>:

void reset_avr (void); // DO NOT CHANGE see uarte0 and uartc1

void reset_avr (void)
{
    eeprom_write_pulse_counters ();
    5458:	0e 94 75 21 	call	0x42ea	; 0x42ea <eeprom_write_pulse_counters>
    Disable_global_interrupt ();
    545c:	f8 94       	cli
	RST.STATUS = causes;
}

static inline void reset_do_soft_reset(void)
{
	ccp_write_io((void *)&RST.CTRL, RST_SWRST_bm);
    545e:	61 e0       	ldi	r22, 0x01	; 1
    5460:	89 e7       	ldi	r24, 0x79	; 121
    5462:	90 e0       	ldi	r25, 0x00	; 0
    5464:	0e 94 a4 14 	call	0x2948	; 0x2948 <ccp_write_io>
    5468:	ff cf       	rjmp	.-2      	; 0x5468 <reset_avr+0x10>

0000546a <command_handler>:
    return (ch >= '0' && ch <= '9') || (ch >= 'A' && ch <= 'F');
}

static void command_handler (uint32_t ticket_id, const char* const path,
                             const char* func_id, uint8_t n_params, const awt_param_t* param)
{
    546a:	2f 92       	push	r2
    546c:	3f 92       	push	r3
    546e:	4f 92       	push	r4
    5470:	5f 92       	push	r5
    5472:	6f 92       	push	r6
    5474:	7f 92       	push	r7
    5476:	8f 92       	push	r8
    5478:	9f 92       	push	r9
    547a:	af 92       	push	r10
    547c:	bf 92       	push	r11
    547e:	cf 92       	push	r12
    5480:	df 92       	push	r13
    5482:	ef 92       	push	r14
    5484:	ff 92       	push	r15
    5486:	0f 93       	push	r16
    5488:	1f 93       	push	r17
    548a:	cf 93       	push	r28
    548c:	df 93       	push	r29
    548e:	00 d0       	rcall	.+0      	; 0x5490 <command_handler+0x26>
    5490:	00 d0       	rcall	.+0      	; 0x5492 <command_handler+0x28>
    5492:	cd b7       	in	r28, 0x3d	; 61
    5494:	de b7       	in	r29, 0x3e	; 62
    5496:	4b 01       	movw	r8, r22
    5498:	5c 01       	movw	r10, r24
    549a:	6a 01       	movw	r12, r20
    549c:	39 01       	movw	r6, r18
    if (strcmp (func_id, "reset") == 0) {
    549e:	62 e8       	ldi	r22, 0x82	; 130
    54a0:	72 e2       	ldi	r23, 0x22	; 34
    54a2:	c9 01       	movw	r24, r18
    54a4:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <strcmp>
    54a8:	28 2f       	mov	r18, r24
    54aa:	39 2f       	mov	r19, r25
    54ac:	23 2b       	or	r18, r19
    54ae:	19 f5       	brne	.+70     	; 0x54f6 <command_handler+0x8c>
        awt_buffer_ack_req (true, path, ticket_id);
    54b0:	a5 01       	movw	r20, r10
    54b2:	94 01       	movw	r18, r8
    54b4:	b6 01       	movw	r22, r12
    54b6:	81 e0       	ldi	r24, 0x01	; 1
    54b8:	0e 94 1a 09 	call	0x1234	; 0x1234 <awt_buffer_ack_req>
        timeout_stop (TIMEOUT_MAIN_EEPROM_SAVE_TIMER);
    54bc:	85 e0       	ldi	r24, 0x05	; 5
    54be:	0e 94 9d 1f 	call	0x3f3a	; 0x3f3a <timeout_stop>
        timeout_start_singleshot (TIMEOUT_MAIN_EEPROM_SAVE_TIMER, TIMEOUT_TICK_HZ * 5);
    54c2:	68 e2       	ldi	r22, 0x28	; 40
    54c4:	70 e0       	ldi	r23, 0x00	; 0
    54c6:	85 e0       	ldi	r24, 0x05	; 5
    54c8:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <timeout_start_singleshot>
        while (!timeout_test_and_clear_expired (TIMEOUT_MAIN_EEPROM_SAVE_TIMER)) {
    54cc:	04 c0       	rjmp	.+8      	; 0x54d6 <command_handler+0x6c>
            awt_send_any_enqueued_acks (update_asset_state);
    54ce:	81 e6       	ldi	r24, 0x61	; 97
    54d0:	92 e2       	ldi	r25, 0x22	; 34
    54d2:	0e 94 59 08 	call	0x10b2	; 0x10b2 <awt_send_any_enqueued_acks>
{
    if (strcmp (func_id, "reset") == 0) {
        awt_buffer_ack_req (true, path, ticket_id);
        timeout_stop (TIMEOUT_MAIN_EEPROM_SAVE_TIMER);
        timeout_start_singleshot (TIMEOUT_MAIN_EEPROM_SAVE_TIMER, TIMEOUT_TICK_HZ * 5);
        while (!timeout_test_and_clear_expired (TIMEOUT_MAIN_EEPROM_SAVE_TIMER)) {
    54d6:	85 e0       	ldi	r24, 0x05	; 5
    54d8:	0e 94 78 1f 	call	0x3ef0	; 0x3ef0 <timeout_test_and_clear_expired>
    54dc:	88 23       	and	r24, r24
    54de:	b9 f3       	breq	.-18     	; 0x54ce <command_handler+0x64>
            awt_send_any_enqueued_acks (update_asset_state);
        }
        if (param[0].val.b) {
    54e0:	f7 01       	movw	r30, r14
    54e2:	82 81       	ldd	r24, Z+2	; 0x02
    54e4:	88 23       	and	r24, r24
    54e6:	31 f0       	breq	.+12     	; 0x54f4 <command_handler+0x8a>
            awt_reset_modem (NULL, __LINE__);
    54e8:	62 ef       	ldi	r22, 0xF2	; 242
    54ea:	74 e0       	ldi	r23, 0x04	; 4
    54ec:	80 e0       	ldi	r24, 0x00	; 0
    54ee:	90 e0       	ldi	r25, 0x00	; 0
    54f0:	0e 94 53 09 	call	0x12a6	; 0x12a6 <awt_reset_modem>
        }
        reset_avr ();
    54f4:	b1 df       	rcall	.-158    	; 0x5458 <reset_avr>
    } else if (strcmp (func_id, "reset_pulse_counter") == 0) {
    54f6:	68 e8       	ldi	r22, 0x88	; 136
    54f8:	72 e2       	ldi	r23, 0x22	; 34
    54fa:	c3 01       	movw	r24, r6
    54fc:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <strcmp>
    5500:	28 2f       	mov	r18, r24
    5502:	39 2f       	mov	r19, r25
    5504:	23 2b       	or	r18, r19
    5506:	a1 f5       	brne	.+104    	; 0x5570 <command_handler+0x106>
        if (n_params == 1 && param[0].type == AWT_INT32) {
    5508:	01 30       	cpi	r16, 0x01	; 1
    550a:	09 f0       	breq	.+2      	; 0x550e <command_handler+0xa4>
    550c:	bd c1       	rjmp	.+890    	; 0x5888 <command_handler+0x41e>
    550e:	f7 01       	movw	r30, r14
    5510:	80 81       	ld	r24, Z
    5512:	91 81       	ldd	r25, Z+1	; 0x01
    5514:	89 2b       	or	r24, r25
    5516:	09 f0       	breq	.+2      	; 0x551a <command_handler+0xb0>
    5518:	b7 c1       	rjmp	.+878    	; 0x5888 <command_handler+0x41e>
            uint8_t mask = param[0].val.i;
    551a:	12 81       	ldd	r17, Z+2	; 0x02
    551c:	01 2f       	mov	r16, r17
            if (mask & 0x01) {
    551e:	10 ff       	sbrs	r17, 0
    5520:	0c c0       	rjmp	.+24     	; 0x553a <command_handler+0xd0>
                set_current_pulse_counter (0, 0);
    5522:	40 e0       	ldi	r20, 0x00	; 0
    5524:	50 e0       	ldi	r21, 0x00	; 0
    5526:	ba 01       	movw	r22, r20
    5528:	80 e0       	ldi	r24, 0x00	; 0
    552a:	0e 94 d0 1f 	call	0x3fa0	; 0x3fa0 <set_current_pulse_counter>
                set_midnight_pulse_counter (0, 0);
    552e:	40 e0       	ldi	r20, 0x00	; 0
    5530:	50 e0       	ldi	r21, 0x00	; 0
    5532:	ba 01       	movw	r22, r20
    5534:	80 e0       	ldi	r24, 0x00	; 0
    5536:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <set_midnight_pulse_counter>
            }
            if (mask & 0x02) {
    553a:	11 ff       	sbrs	r17, 1
    553c:	0c c0       	rjmp	.+24     	; 0x5556 <command_handler+0xec>
                set_current_pulse_counter (1, 0);
    553e:	40 e0       	ldi	r20, 0x00	; 0
    5540:	50 e0       	ldi	r21, 0x00	; 0
    5542:	ba 01       	movw	r22, r20
    5544:	81 e0       	ldi	r24, 0x01	; 1
    5546:	0e 94 d0 1f 	call	0x3fa0	; 0x3fa0 <set_current_pulse_counter>
                set_midnight_pulse_counter (1, 0);
    554a:	40 e0       	ldi	r20, 0x00	; 0
    554c:	50 e0       	ldi	r21, 0x00	; 0
    554e:	ba 01       	movw	r22, r20
    5550:	81 e0       	ldi	r24, 0x01	; 1
    5552:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <set_midnight_pulse_counter>
            }
            if (mask) {
    5556:	00 23       	and	r16, r16
    5558:	21 f0       	breq	.+8      	; 0x5562 <command_handler+0xf8>
                eeprom_write_pulse_counters ();
    555a:	0e 94 75 21 	call	0x42ea	; 0x42ea <eeprom_write_pulse_counters>
                eeprom_read_pulse_counters ();
    555e:	0e 94 e2 20 	call	0x41c4	; 0x41c4 <eeprom_read_pulse_counters>
            }
            awt_buffer_ack_req (true, path, ticket_id);
    5562:	a5 01       	movw	r20, r10
    5564:	94 01       	movw	r18, r8
    5566:	b6 01       	movw	r22, r12
    5568:	81 e0       	ldi	r24, 0x01	; 1
    556a:	0e 94 1a 09 	call	0x1234	; 0x1234 <awt_buffer_ack_req>
            return;
    556e:	92 c1       	rjmp	.+804    	; 0x5894 <command_handler+0x42a>
        }
    } else if (strcmp (func_id, "set_pulse_counter") == 0) {
    5570:	6a e8       	ldi	r22, 0x8A	; 138
    5572:	72 e2       	ldi	r23, 0x22	; 34
    5574:	c3 01       	movw	r24, r6
    5576:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <strcmp>
    557a:	28 2f       	mov	r18, r24
    557c:	39 2f       	mov	r19, r25
    557e:	23 2b       	or	r18, r19
    5580:	71 f5       	brne	.+92     	; 0x55de <command_handler+0x174>
        if (n_params == 2 && param[0].type == AWT_INT32 && param[1].type == AWT_INT32) {
    5582:	02 30       	cpi	r16, 0x02	; 2
    5584:	09 f0       	breq	.+2      	; 0x5588 <command_handler+0x11e>
    5586:	80 c1       	rjmp	.+768    	; 0x5888 <command_handler+0x41e>
    5588:	f7 01       	movw	r30, r14
    558a:	80 81       	ld	r24, Z
    558c:	91 81       	ldd	r25, Z+1	; 0x01
    558e:	89 2b       	or	r24, r25
    5590:	09 f0       	breq	.+2      	; 0x5594 <command_handler+0x12a>
    5592:	7a c1       	rjmp	.+756    	; 0x5888 <command_handler+0x41e>
    5594:	86 81       	ldd	r24, Z+6	; 0x06
    5596:	97 81       	ldd	r25, Z+7	; 0x07
    5598:	89 2b       	or	r24, r25
    559a:	09 f0       	breq	.+2      	; 0x559e <command_handler+0x134>
    559c:	75 c1       	rjmp	.+746    	; 0x5888 <command_handler+0x41e>
            uint8_t counter = param[0].val.i;
    559e:	82 81       	ldd	r24, Z+2	; 0x02
            if (counter == 1 || counter == 2) {
    55a0:	98 2f       	mov	r25, r24
    55a2:	91 50       	subi	r25, 0x01	; 1
    55a4:	92 30       	cpi	r25, 0x02	; 2
    55a6:	08 f0       	brcs	.+2      	; 0x55aa <command_handler+0x140>
    55a8:	6f c1       	rjmp	.+734    	; 0x5888 <command_handler+0x41e>
                int32_t value = param[1].val.i;
                counter--;
    55aa:	19 2f       	mov	r17, r25
                set_current_pulse_counter (counter, value);
    55ac:	40 84       	ldd	r4, Z+8	; 0x08
    55ae:	51 84       	ldd	r5, Z+9	; 0x09
    55b0:	62 84       	ldd	r6, Z+10	; 0x0a
    55b2:	73 84       	ldd	r7, Z+11	; 0x0b
    55b4:	b3 01       	movw	r22, r6
    55b6:	a2 01       	movw	r20, r4
    55b8:	89 2f       	mov	r24, r25
    55ba:	0e 94 d0 1f 	call	0x3fa0	; 0x3fa0 <set_current_pulse_counter>
                set_midnight_pulse_counter (counter, value);
    55be:	b3 01       	movw	r22, r6
    55c0:	a2 01       	movw	r20, r4
    55c2:	81 2f       	mov	r24, r17
    55c4:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <set_midnight_pulse_counter>
                eeprom_write_pulse_counters ();
    55c8:	0e 94 75 21 	call	0x42ea	; 0x42ea <eeprom_write_pulse_counters>
                eeprom_read_pulse_counters ();
    55cc:	0e 94 e2 20 	call	0x41c4	; 0x41c4 <eeprom_read_pulse_counters>
                awt_buffer_ack_req (true, path, ticket_id);
    55d0:	a5 01       	movw	r20, r10
    55d2:	94 01       	movw	r18, r8
    55d4:	b6 01       	movw	r22, r12
    55d6:	81 e0       	ldi	r24, 0x01	; 1
    55d8:	0e 94 1a 09 	call	0x1234	; 0x1234 <awt_buffer_ack_req>
                return;
    55dc:	5b c1       	rjmp	.+694    	; 0x5894 <command_handler+0x42a>
            }
        }
    } else if (strcmp (func_id, "reset_defaults") == 0) {
    55de:	6c e9       	ldi	r22, 0x9C	; 156
    55e0:	72 e2       	ldi	r23, 0x22	; 34
    55e2:	c3 01       	movw	r24, r6
    55e4:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <strcmp>
    55e8:	28 2f       	mov	r18, r24
    55ea:	39 2f       	mov	r19, r25
    55ec:	23 2b       	or	r18, r19
    55ee:	09 f0       	breq	.+2      	; 0x55f2 <command_handler+0x188>
    55f0:	41 c0       	rjmp	.+130    	; 0x5674 <command_handler+0x20a>
        awt_buffer_ack_req (true, path, ticket_id);
    55f2:	a5 01       	movw	r20, r10
    55f4:	94 01       	movw	r18, r8
    55f6:	b6 01       	movw	r22, r12
    55f8:	81 e0       	ldi	r24, 0x01	; 1
    55fa:	0e 94 1a 09 	call	0x1234	; 0x1234 <awt_buffer_ack_req>
        timeout_stop (TIMEOUT_MAIN_EEPROM_SAVE_TIMER);
    55fe:	85 e0       	ldi	r24, 0x05	; 5
    5600:	0e 94 9d 1f 	call	0x3f3a	; 0x3f3a <timeout_stop>
        timeout_start_singleshot (TIMEOUT_MAIN_EEPROM_SAVE_TIMER, TIMEOUT_TICK_HZ * 5);
    5604:	68 e2       	ldi	r22, 0x28	; 40
    5606:	70 e0       	ldi	r23, 0x00	; 0
    5608:	85 e0       	ldi	r24, 0x05	; 5
    560a:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <timeout_start_singleshot>
        while (!timeout_test_and_clear_expired (TIMEOUT_MAIN_EEPROM_SAVE_TIMER)) {
    560e:	04 c0       	rjmp	.+8      	; 0x5618 <command_handler+0x1ae>
            awt_send_any_enqueued_acks (update_asset_state);
    5610:	81 e6       	ldi	r24, 0x61	; 97
    5612:	92 e2       	ldi	r25, 0x22	; 34
    5614:	0e 94 59 08 	call	0x10b2	; 0x10b2 <awt_send_any_enqueued_acks>
        }
    } else if (strcmp (func_id, "reset_defaults") == 0) {
        awt_buffer_ack_req (true, path, ticket_id);
        timeout_stop (TIMEOUT_MAIN_EEPROM_SAVE_TIMER);
        timeout_start_singleshot (TIMEOUT_MAIN_EEPROM_SAVE_TIMER, TIMEOUT_TICK_HZ * 5);
        while (!timeout_test_and_clear_expired (TIMEOUT_MAIN_EEPROM_SAVE_TIMER)) {
    5618:	85 e0       	ldi	r24, 0x05	; 5
    561a:	0e 94 78 1f 	call	0x3ef0	; 0x3ef0 <timeout_test_and_clear_expired>
    561e:	88 23       	and	r24, r24
    5620:	b9 f3       	breq	.-18     	; 0x5610 <command_handler+0x1a6>
            awt_send_any_enqueued_acks (update_asset_state);
        }
        cpu_irq_disable ();
    5622:	f8 94       	cli
        nvm_eeprom_erase_all ();
    5624:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <nvm_eeprom_erase_all>
    5628:	e0 ec       	ldi	r30, 0xC0	; 192
    562a:	f1 e0       	ldi	r31, 0x01	; 1
    562c:	87 85       	ldd	r24, Z+15	; 0x0f
    562e:	88 23       	and	r24, r24
    5630:	ec f3       	brlt	.-6      	; 0x562c <command_handler+0x1c2>
        nvm_wait_until_ready ();
        state.current.pulse_counter[0] = 0;
    5632:	10 92 22 2b 	sts	0x2B22, r1
    5636:	10 92 23 2b 	sts	0x2B23, r1
    563a:	10 92 24 2b 	sts	0x2B24, r1
    563e:	10 92 25 2b 	sts	0x2B25, r1
        state.current.pulse_counter[1] = 0;
    5642:	10 92 26 2b 	sts	0x2B26, r1
    5646:	10 92 27 2b 	sts	0x2B27, r1
    564a:	10 92 28 2b 	sts	0x2B28, r1
    564e:	10 92 29 2b 	sts	0x2B29, r1
        state.midnight_pulse_counter[0] = 0;
    5652:	10 92 51 2b 	sts	0x2B51, r1
    5656:	10 92 52 2b 	sts	0x2B52, r1
    565a:	10 92 53 2b 	sts	0x2B53, r1
    565e:	10 92 54 2b 	sts	0x2B54, r1
        state.midnight_pulse_counter[1] = 0;
    5662:	10 92 55 2b 	sts	0x2B55, r1
    5666:	10 92 56 2b 	sts	0x2B56, r1
    566a:	10 92 57 2b 	sts	0x2B57, r1
    566e:	10 92 58 2b 	sts	0x2B58, r1
        reset_avr ();
    5672:	f2 de       	rcall	.-540    	; 0x5458 <reset_avr>
    } else if (strcmp (func_id, "set_rom_id") == 0) {
    5674:	6b ea       	ldi	r22, 0xAB	; 171
    5676:	72 e2       	ldi	r23, 0x22	; 34
    5678:	c3 01       	movw	r24, r6
    567a:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <strcmp>
    567e:	28 2f       	mov	r18, r24
    5680:	39 2f       	mov	r19, r25
    5682:	23 2b       	or	r18, r19
    5684:	09 f0       	breq	.+2      	; 0x5688 <command_handler+0x21e>
    5686:	00 c1       	rjmp	.+512    	; 0x5888 <command_handler+0x41e>
        uint8_t i;
        if (n_params != 3) {
    5688:	03 30       	cpi	r16, 0x03	; 3
    568a:	09 f0       	breq	.+2      	; 0x568e <command_handler+0x224>
    568c:	fd c0       	rjmp	.+506    	; 0x5888 <command_handler+0x41e>
            goto send_nak;
        }
        if (param[0].type != AWT_STR || param[1].type != AWT_STR
    568e:	f7 01       	movw	r30, r14
    5690:	80 81       	ld	r24, Z
    5692:	91 81       	ldd	r25, Z+1	; 0x01
    5694:	01 97       	sbiw	r24, 0x01	; 1
    5696:	09 f0       	breq	.+2      	; 0x569a <command_handler+0x230>
    5698:	f7 c0       	rjmp	.+494    	; 0x5888 <command_handler+0x41e>
    569a:	86 81       	ldd	r24, Z+6	; 0x06
    569c:	97 81       	ldd	r25, Z+7	; 0x07
    569e:	01 97       	sbiw	r24, 0x01	; 1
    56a0:	09 f0       	breq	.+2      	; 0x56a4 <command_handler+0x23a>
    56a2:	f2 c0       	rjmp	.+484    	; 0x5888 <command_handler+0x41e>
                || param[2].type != AWT_STR) {
    56a4:	84 85       	ldd	r24, Z+12	; 0x0c
    56a6:	95 85       	ldd	r25, Z+13	; 0x0d
    56a8:	01 97       	sbiw	r24, 0x01	; 1
    56aa:	09 f0       	breq	.+2      	; 0x56ae <command_handler+0x244>
    56ac:	ed c0       	rjmp	.+474    	; 0x5888 <command_handler+0x41e>
            goto send_nak;
        }
        if (strlen (param[0].val.s) != 16 || strlen (param[1].val.s) != 16
    56ae:	32 81       	ldd	r19, Z+2	; 0x02
    56b0:	23 81       	ldd	r18, Z+3	; 0x03
    56b2:	e3 2f       	mov	r30, r19
    56b4:	f2 2f       	mov	r31, r18
    56b6:	df 01       	movw	r26, r30
    56b8:	0d 90       	ld	r0, X+
    56ba:	00 20       	and	r0, r0
    56bc:	e9 f7       	brne	.-6      	; 0x56b8 <command_handler+0x24e>
    56be:	cd 01       	movw	r24, r26
    56c0:	41 97       	sbiw	r24, 0x11	; 17
    56c2:	8e 17       	cp	r24, r30
    56c4:	9f 07       	cpc	r25, r31
    56c6:	09 f0       	breq	.+2      	; 0x56ca <command_handler+0x260>
    56c8:	df c0       	rjmp	.+446    	; 0x5888 <command_handler+0x41e>
    56ca:	f7 01       	movw	r30, r14
    56cc:	50 85       	ldd	r21, Z+8	; 0x08
    56ce:	41 85       	ldd	r20, Z+9	; 0x09
    56d0:	e5 2f       	mov	r30, r21
    56d2:	f4 2f       	mov	r31, r20
    56d4:	df 01       	movw	r26, r30
    56d6:	0d 90       	ld	r0, X+
    56d8:	00 20       	and	r0, r0
    56da:	e9 f7       	brne	.-6      	; 0x56d6 <command_handler+0x26c>
    56dc:	cd 01       	movw	r24, r26
    56de:	41 97       	sbiw	r24, 0x11	; 17
    56e0:	8e 17       	cp	r24, r30
    56e2:	9f 07       	cpc	r25, r31
    56e4:	09 f0       	breq	.+2      	; 0x56e8 <command_handler+0x27e>
    56e6:	d0 c0       	rjmp	.+416    	; 0x5888 <command_handler+0x41e>
                || strlen (param[2].val.s) != 16) {
    56e8:	f7 01       	movw	r30, r14
    56ea:	76 85       	ldd	r23, Z+14	; 0x0e
    56ec:	67 85       	ldd	r22, Z+15	; 0x0f
    56ee:	e7 2f       	mov	r30, r23
    56f0:	f6 2f       	mov	r31, r22
    56f2:	df 01       	movw	r26, r30
    56f4:	0d 90       	ld	r0, X+
    56f6:	00 20       	and	r0, r0
    56f8:	e9 f7       	brne	.-6      	; 0x56f4 <command_handler+0x28a>
    56fa:	cd 01       	movw	r24, r26
    56fc:	41 97       	sbiw	r24, 0x11	; 17
    56fe:	8e 17       	cp	r24, r30
    5700:	9f 07       	cpc	r25, r31
    5702:	09 f0       	breq	.+2      	; 0x5706 <command_handler+0x29c>
    5704:	c1 c0       	rjmp	.+386    	; 0x5888 <command_handler+0x41e>
    5706:	03 2f       	mov	r16, r19
    5708:	12 2f       	mov	r17, r18
    570a:	27 2e       	mov	r2, r23
    570c:	36 2e       	mov	r3, r22
    570e:	65 2e       	mov	r6, r21
    5710:	74 2e       	mov	r7, r20
    5712:	68 94       	set
    5714:	55 24       	eor	r5, r5
    5716:	54 f8       	bld	r5, 4
            goto send_nak;
        }
        for (i = 0; i < 16; i++) {
            if (! (valid_hex_char (param[0].val.s[i])  && valid_hex_char (param[1].val.s[i])
    5718:	f8 01       	movw	r30, r16
    571a:	81 91       	ld	r24, Z+
    571c:	8f 01       	movw	r16, r30
    571e:	0e 94 d1 20 	call	0x41a2	; 0x41a2 <valid_hex_char>
    5722:	88 23       	and	r24, r24
    5724:	09 f4       	brne	.+2      	; 0x5728 <command_handler+0x2be>
    5726:	b0 c0       	rjmp	.+352    	; 0x5888 <command_handler+0x41e>
    5728:	f3 01       	movw	r30, r6
    572a:	81 91       	ld	r24, Z+
    572c:	3f 01       	movw	r6, r30
    572e:	0e 94 d1 20 	call	0x41a2	; 0x41a2 <valid_hex_char>
    5732:	88 23       	and	r24, r24
    5734:	09 f4       	brne	.+2      	; 0x5738 <command_handler+0x2ce>
    5736:	a8 c0       	rjmp	.+336    	; 0x5888 <command_handler+0x41e>
                    && valid_hex_char (param[2].val.s[i]))) {
    5738:	f1 01       	movw	r30, r2
    573a:	81 91       	ld	r24, Z+
    573c:	1f 01       	movw	r2, r30
    573e:	0e 94 d1 20 	call	0x41a2	; 0x41a2 <valid_hex_char>
        if (strlen (param[0].val.s) != 16 || strlen (param[1].val.s) != 16
                || strlen (param[2].val.s) != 16) {
            goto send_nak;
        }
        for (i = 0; i < 16; i++) {
            if (! (valid_hex_char (param[0].val.s[i])  && valid_hex_char (param[1].val.s[i])
    5742:	88 23       	and	r24, r24
    5744:	09 f4       	brne	.+2      	; 0x5748 <command_handler+0x2de>
    5746:	a0 c0       	rjmp	.+320    	; 0x5888 <command_handler+0x41e>
    5748:	5a 94       	dec	r5
        }
        if (strlen (param[0].val.s) != 16 || strlen (param[1].val.s) != 16
                || strlen (param[2].val.s) != 16) {
            goto send_nak;
        }
        for (i = 0; i < 16; i++) {
    574a:	31 f7       	brne	.-52     	; 0x5718 <command_handler+0x2ae>
            if (! (valid_hex_char (param[0].val.s[i])  && valid_hex_char (param[1].val.s[i])
                    && valid_hex_char (param[2].val.s[i]))) {
                goto send_nak;
            }
        }
        config.rom[0].valid = false;
    574c:	10 92 73 2b 	sts	0x2B73, r1
        config.rom[1].valid = false;
    5750:	10 92 7c 2b 	sts	0x2B7C, r1
        config.rom[2].valid = false;
    5754:	10 92 85 2b 	sts	0x2B85, r1
    5758:	04 e7       	ldi	r16, 0x74	; 116
    575a:	1b e2       	ldi	r17, 0x2B	; 43
    575c:	0f 2e       	mov	r0, r31
    575e:	fd e7       	ldi	r31, 0x7D	; 125
    5760:	6f 2e       	mov	r6, r31
    5762:	fb e2       	ldi	r31, 0x2B	; 43
    5764:	7f 2e       	mov	r7, r31
    5766:	f0 2d       	mov	r31, r0
    5768:	26 e8       	ldi	r18, 0x86	; 134
    576a:	3b e2       	ldi	r19, 0x2B	; 43
    576c:	29 83       	std	Y+1, r18	; 0x01
    576e:	3a 83       	std	Y+2, r19	; 0x02
    5770:	1b 82       	std	Y+3, r1	; 0x03
    5772:	1c 82       	std	Y+4, r1	; 0x04
            config.rom[0].code[i] = hex_byte (& (param[0].val.s[i * 2]));
            config.rom[1].code[i] = hex_byte (& (param[1].val.s[i * 2]));
            config.rom[2].code[i] = hex_byte (& (param[2].val.s[i * 2]));
            config.rom[0].valid = config.rom[0].valid || config.rom[0].code[i] != 0xff;
            config.rom[1].valid = config.rom[1].valid || config.rom[1].code[i] != 0xff;
            config.rom[2].valid = config.rom[2].valid || config.rom[2].code[i] != 0xff;
    5774:	0f 2e       	mov	r0, r31
    5776:	f5 e8       	ldi	r31, 0x85	; 133
    5778:	2f 2e       	mov	r2, r31
    577a:	fb e2       	ldi	r31, 0x2B	; 43
    577c:	3f 2e       	mov	r3, r31
    577e:	f0 2d       	mov	r31, r0
        }
        config.rom[0].valid = false;
        config.rom[1].valid = false;
        config.rom[2].valid = false;
        for (i = 0; i < 8; i++) {
            config.rom[0].code[i] = hex_byte (& (param[0].val.s[i * 2]));
    5780:	f7 01       	movw	r30, r14
    5782:	82 81       	ldd	r24, Z+2	; 0x02
    5784:	93 81       	ldd	r25, Z+3	; 0x03
    5786:	2b 81       	ldd	r18, Y+3	; 0x03
    5788:	3c 81       	ldd	r19, Y+4	; 0x04
    578a:	82 0f       	add	r24, r18
    578c:	93 1f       	adc	r25, r19
    578e:	0e 94 bf 20 	call	0x417e	; 0x417e <hex_byte>
    5792:	58 2e       	mov	r5, r24
    5794:	f8 01       	movw	r30, r16
    5796:	81 93       	st	Z+, r24
    5798:	8f 01       	movw	r16, r30
            config.rom[1].code[i] = hex_byte (& (param[1].val.s[i * 2]));
    579a:	f7 01       	movw	r30, r14
    579c:	80 85       	ldd	r24, Z+8	; 0x08
    579e:	91 85       	ldd	r25, Z+9	; 0x09
    57a0:	2b 81       	ldd	r18, Y+3	; 0x03
    57a2:	3c 81       	ldd	r19, Y+4	; 0x04
    57a4:	82 0f       	add	r24, r18
    57a6:	93 1f       	adc	r25, r19
    57a8:	0e 94 bf 20 	call	0x417e	; 0x417e <hex_byte>
    57ac:	48 2e       	mov	r4, r24
    57ae:	f3 01       	movw	r30, r6
    57b0:	81 93       	st	Z+, r24
    57b2:	3f 01       	movw	r6, r30
            config.rom[2].code[i] = hex_byte (& (param[2].val.s[i * 2]));
    57b4:	f7 01       	movw	r30, r14
    57b6:	86 85       	ldd	r24, Z+14	; 0x0e
    57b8:	97 85       	ldd	r25, Z+15	; 0x0f
    57ba:	2b 81       	ldd	r18, Y+3	; 0x03
    57bc:	3c 81       	ldd	r19, Y+4	; 0x04
    57be:	82 0f       	add	r24, r18
    57c0:	93 1f       	adc	r25, r19
    57c2:	0e 94 bf 20 	call	0x417e	; 0x417e <hex_byte>
    57c6:	e9 81       	ldd	r30, Y+1	; 0x01
    57c8:	fa 81       	ldd	r31, Y+2	; 0x02
    57ca:	81 93       	st	Z+, r24
    57cc:	e9 83       	std	Y+1, r30	; 0x01
    57ce:	fa 83       	std	Y+2, r31	; 0x02
            config.rom[0].valid = config.rom[0].valid || config.rom[0].code[i] != 0xff;
    57d0:	e3 e7       	ldi	r30, 0x73	; 115
    57d2:	fb e2       	ldi	r31, 0x2B	; 43
    57d4:	90 81       	ld	r25, Z
    57d6:	91 11       	cpse	r25, r1
    57d8:	08 c0       	rjmp	.+16     	; 0x57ea <command_handler+0x380>
    57da:	21 e0       	ldi	r18, 0x01	; 1
    57dc:	30 e0       	ldi	r19, 0x00	; 0
    57de:	ff ef       	ldi	r31, 0xFF	; 255
    57e0:	5f 12       	cpse	r5, r31
    57e2:	05 c0       	rjmp	.+10     	; 0x57ee <command_handler+0x384>
    57e4:	20 e0       	ldi	r18, 0x00	; 0
    57e6:	30 e0       	ldi	r19, 0x00	; 0
    57e8:	02 c0       	rjmp	.+4      	; 0x57ee <command_handler+0x384>
    57ea:	21 e0       	ldi	r18, 0x01	; 1
    57ec:	30 e0       	ldi	r19, 0x00	; 0
    57ee:	21 70       	andi	r18, 0x01	; 1
    57f0:	e3 e7       	ldi	r30, 0x73	; 115
    57f2:	fb e2       	ldi	r31, 0x2B	; 43
    57f4:	20 83       	st	Z, r18
            config.rom[1].valid = config.rom[1].valid || config.rom[1].code[i] != 0xff;
    57f6:	ec e7       	ldi	r30, 0x7C	; 124
    57f8:	fb e2       	ldi	r31, 0x2B	; 43
    57fa:	90 81       	ld	r25, Z
    57fc:	91 11       	cpse	r25, r1
    57fe:	08 c0       	rjmp	.+16     	; 0x5810 <command_handler+0x3a6>
    5800:	21 e0       	ldi	r18, 0x01	; 1
    5802:	30 e0       	ldi	r19, 0x00	; 0
    5804:	ff ef       	ldi	r31, 0xFF	; 255
    5806:	4f 12       	cpse	r4, r31
    5808:	05 c0       	rjmp	.+10     	; 0x5814 <command_handler+0x3aa>
    580a:	20 e0       	ldi	r18, 0x00	; 0
    580c:	30 e0       	ldi	r19, 0x00	; 0
    580e:	02 c0       	rjmp	.+4      	; 0x5814 <command_handler+0x3aa>
    5810:	21 e0       	ldi	r18, 0x01	; 1
    5812:	30 e0       	ldi	r19, 0x00	; 0
    5814:	21 70       	andi	r18, 0x01	; 1
    5816:	ec e7       	ldi	r30, 0x7C	; 124
    5818:	fb e2       	ldi	r31, 0x2B	; 43
    581a:	20 83       	st	Z, r18
            config.rom[2].valid = config.rom[2].valid || config.rom[2].code[i] != 0xff;
    581c:	f1 01       	movw	r30, r2
    581e:	90 81       	ld	r25, Z
    5820:	91 11       	cpse	r25, r1
    5822:	08 c0       	rjmp	.+16     	; 0x5834 <command_handler+0x3ca>
    5824:	21 e0       	ldi	r18, 0x01	; 1
    5826:	30 e0       	ldi	r19, 0x00	; 0
    5828:	8f 3f       	cpi	r24, 0xFF	; 255
    582a:	11 f4       	brne	.+4      	; 0x5830 <command_handler+0x3c6>
    582c:	20 e0       	ldi	r18, 0x00	; 0
    582e:	30 e0       	ldi	r19, 0x00	; 0
    5830:	c9 01       	movw	r24, r18
    5832:	02 c0       	rjmp	.+4      	; 0x5838 <command_handler+0x3ce>
    5834:	81 e0       	ldi	r24, 0x01	; 1
    5836:	90 e0       	ldi	r25, 0x00	; 0
    5838:	81 70       	andi	r24, 0x01	; 1
    583a:	f1 01       	movw	r30, r2
    583c:	80 83       	st	Z, r24
    583e:	2b 81       	ldd	r18, Y+3	; 0x03
    5840:	3c 81       	ldd	r19, Y+4	; 0x04
    5842:	2e 5f       	subi	r18, 0xFE	; 254
    5844:	3f 4f       	sbci	r19, 0xFF	; 255
    5846:	2b 83       	std	Y+3, r18	; 0x03
    5848:	3c 83       	std	Y+4, r19	; 0x04
            }
        }
        config.rom[0].valid = false;
        config.rom[1].valid = false;
        config.rom[2].valid = false;
        for (i = 0; i < 8; i++) {
    584a:	20 31       	cpi	r18, 0x10	; 16
    584c:	31 05       	cpc	r19, r1
    584e:	09 f0       	breq	.+2      	; 0x5852 <command_handler+0x3e8>
    5850:	97 cf       	rjmp	.-210    	; 0x5780 <command_handler+0x316>
            config.rom[2].code[i] = hex_byte (& (param[2].val.s[i * 2]));
            config.rom[0].valid = config.rom[0].valid || config.rom[0].code[i] != 0xff;
            config.rom[1].valid = config.rom[1].valid || config.rom[1].code[i] != 0xff;
            config.rom[2].valid = config.rom[2].valid || config.rom[2].code[i] != 0xff;
        }
        eeprom_write_config ();
    5852:	0e 94 57 21 	call	0x42ae	; 0x42ae <eeprom_write_config>
        awt_buffer_ack_req (true, path, ticket_id);
    5856:	a5 01       	movw	r20, r10
    5858:	94 01       	movw	r18, r8
    585a:	b6 01       	movw	r22, r12
    585c:	81 e0       	ldi	r24, 0x01	; 1
    585e:	0e 94 1a 09 	call	0x1234	; 0x1234 <awt_buffer_ack_req>
        timeout_stop (TIMEOUT_MAIN_EEPROM_SAVE_TIMER);
    5862:	85 e0       	ldi	r24, 0x05	; 5
    5864:	0e 94 9d 1f 	call	0x3f3a	; 0x3f3a <timeout_stop>
        timeout_start_singleshot (TIMEOUT_MAIN_EEPROM_SAVE_TIMER, TIMEOUT_TICK_HZ * 10);
    5868:	60 e5       	ldi	r22, 0x50	; 80
    586a:	70 e0       	ldi	r23, 0x00	; 0
    586c:	85 e0       	ldi	r24, 0x05	; 5
    586e:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <timeout_start_singleshot>
        while (!timeout_test_and_clear_expired (TIMEOUT_MAIN_EEPROM_SAVE_TIMER)) {
    5872:	04 c0       	rjmp	.+8      	; 0x587c <command_handler+0x412>
            awt_send_any_enqueued_acks (update_asset_state);
    5874:	81 e6       	ldi	r24, 0x61	; 97
    5876:	92 e2       	ldi	r25, 0x22	; 34
    5878:	0e 94 59 08 	call	0x10b2	; 0x10b2 <awt_send_any_enqueued_acks>
        }
        eeprom_write_config ();
        awt_buffer_ack_req (true, path, ticket_id);
        timeout_stop (TIMEOUT_MAIN_EEPROM_SAVE_TIMER);
        timeout_start_singleshot (TIMEOUT_MAIN_EEPROM_SAVE_TIMER, TIMEOUT_TICK_HZ * 10);
        while (!timeout_test_and_clear_expired (TIMEOUT_MAIN_EEPROM_SAVE_TIMER)) {
    587c:	85 e0       	ldi	r24, 0x05	; 5
    587e:	0e 94 78 1f 	call	0x3ef0	; 0x3ef0 <timeout_test_and_clear_expired>
    5882:	88 23       	and	r24, r24
    5884:	b9 f3       	breq	.-18     	; 0x5874 <command_handler+0x40a>
            awt_send_any_enqueued_acks (update_asset_state);
        }
        reset_avr ();
    5886:	e8 dd       	rcall	.-1072   	; 0x5458 <reset_avr>
    }
send_nak:
    awt_buffer_ack_req (false, path, ticket_id);
    5888:	a5 01       	movw	r20, r10
    588a:	94 01       	movw	r18, r8
    588c:	b6 01       	movw	r22, r12
    588e:	80 e0       	ldi	r24, 0x00	; 0
    5890:	0e 94 1a 09 	call	0x1234	; 0x1234 <awt_buffer_ack_req>
}
    5894:	24 96       	adiw	r28, 0x04	; 4
    5896:	cd bf       	out	0x3d, r28	; 61
    5898:	de bf       	out	0x3e, r29	; 62
    589a:	df 91       	pop	r29
    589c:	cf 91       	pop	r28
    589e:	1f 91       	pop	r17
    58a0:	0f 91       	pop	r16
    58a2:	ff 90       	pop	r15
    58a4:	ef 90       	pop	r14
    58a6:	df 90       	pop	r13
    58a8:	cf 90       	pop	r12
    58aa:	bf 90       	pop	r11
    58ac:	af 90       	pop	r10
    58ae:	9f 90       	pop	r9
    58b0:	8f 90       	pop	r8
    58b2:	7f 90       	pop	r7
    58b4:	6f 90       	pop	r6
    58b6:	5f 90       	pop	r5
    58b8:	4f 90       	pop	r4
    58ba:	3f 90       	pop	r3
    58bc:	2f 90       	pop	r2
    58be:	08 95       	ret

000058c0 <__vector_64>:
        }
    }
}

ISR (PORTD_INT0_vect)   // GPIO_COUNT2
{
    58c0:	1f 92       	push	r1
    58c2:	0f 92       	push	r0
    58c4:	0f b6       	in	r0, 0x3f	; 63
    58c6:	0f 92       	push	r0
    58c8:	11 24       	eor	r1, r1
    58ca:	8f 93       	push	r24
    58cc:	ef 93       	push	r30
    58ce:	ff 93       	push	r31
    PORTD.INTFLAGS = 0x01;
    58d0:	81 e0       	ldi	r24, 0x01	; 1
    58d2:	e0 e6       	ldi	r30, 0x60	; 96
    58d4:	f6 e0       	ldi	r31, 0x06	; 6
    58d6:	84 87       	std	Z+12, r24	; 0x0c
}
    58d8:	ff 91       	pop	r31
    58da:	ef 91       	pop	r30
    58dc:	8f 91       	pop	r24
    58de:	0f 90       	pop	r0
    58e0:	0f be       	out	0x3f, r0	; 63
    58e2:	0f 90       	pop	r0
    58e4:	1f 90       	pop	r1
    58e6:	18 95       	reti

000058e8 <__vector_2>:

ISR (PORTC_INT0_vect)   // GPIO_COUNT1
{
    58e8:	1f 92       	push	r1
    58ea:	0f 92       	push	r0
    58ec:	0f b6       	in	r0, 0x3f	; 63
    58ee:	0f 92       	push	r0
    58f0:	11 24       	eor	r1, r1
    58f2:	8f 93       	push	r24
    58f4:	ef 93       	push	r30
    58f6:	ff 93       	push	r31
    PORTC.INTFLAGS = 0x01;
    58f8:	81 e0       	ldi	r24, 0x01	; 1
    58fa:	e0 e4       	ldi	r30, 0x40	; 64
    58fc:	f6 e0       	ldi	r31, 0x06	; 6
    58fe:	84 87       	std	Z+12, r24	; 0x0c
}
    5900:	ff 91       	pop	r31
    5902:	ef 91       	pop	r30
    5904:	8f 91       	pop	r24
    5906:	0f 90       	pop	r0
    5908:	0f be       	out	0x3f, r0	; 63
    590a:	0f 90       	pop	r0
    590c:	1f 90       	pop	r1
    590e:	18 95       	reti

00005910 <__vector_34>:

ISR (PORTB_INT0_vect)   // GPIO_COUNT3
{
    5910:	1f 92       	push	r1
    5912:	0f 92       	push	r0
    5914:	0f b6       	in	r0, 0x3f	; 63
    5916:	0f 92       	push	r0
    5918:	11 24       	eor	r1, r1
    591a:	8f 93       	push	r24
    591c:	ef 93       	push	r30
    591e:	ff 93       	push	r31
    PORTB.INTFLAGS = 0x01;
    5920:	81 e0       	ldi	r24, 0x01	; 1
    5922:	e0 e2       	ldi	r30, 0x20	; 32
    5924:	f6 e0       	ldi	r31, 0x06	; 6
    5926:	84 87       	std	Z+12, r24	; 0x0c
}
    5928:	ff 91       	pop	r31
    592a:	ef 91       	pop	r30
    592c:	8f 91       	pop	r24
    592e:	0f 90       	pop	r0
    5930:	0f be       	out	0x3f, r0	; 63
    5932:	0f 90       	pop	r0
    5934:	1f 90       	pop	r1
    5936:	18 95       	reti

00005938 <__vector_66>:

ISR (PORTA_INT0_vect)   // GPIO_COUNT4
{
    5938:	1f 92       	push	r1
    593a:	0f 92       	push	r0
    593c:	0f b6       	in	r0, 0x3f	; 63
    593e:	0f 92       	push	r0
    5940:	11 24       	eor	r1, r1
    5942:	8f 93       	push	r24
    5944:	ef 93       	push	r30
    5946:	ff 93       	push	r31
    PORTA.INTFLAGS = 0x01;
    5948:	81 e0       	ldi	r24, 0x01	; 1
    594a:	e0 e0       	ldi	r30, 0x00	; 0
    594c:	f6 e0       	ldi	r31, 0x06	; 6
    594e:	84 87       	std	Z+12, r24	; 0x0c
}
    5950:	ff 91       	pop	r31
    5952:	ef 91       	pop	r30
    5954:	8f 91       	pop	r24
    5956:	0f 90       	pop	r0
    5958:	0f be       	out	0x3f, r0	; 63
    595a:	0f 90       	pop	r0
    595c:	1f 90       	pop	r1
    595e:	18 95       	reti

00005960 <main>:

int main (void)
{
    5960:	cf 93       	push	r28
    5962:	df 93       	push	r29
    5964:	cd b7       	in	r28, 0x3d	; 61
    5966:	de b7       	in	r29, 0x3e	; 62
    5968:	c0 58       	subi	r28, 0x80	; 128
    596a:	d1 09       	sbc	r29, r1
    596c:	cd bf       	out	0x3d, r28	; 61
    596e:	de bf       	out	0x3e, r29	; 62
    irq_initialize_vectors ();
    5970:	e0 ea       	ldi	r30, 0xA0	; 160
    5972:	f0 e0       	ldi	r31, 0x00	; 0
    5974:	87 e0       	ldi	r24, 0x07	; 7
    5976:	82 83       	std	Z+2, r24	; 0x02
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    5978:	82 83       	std	Z+2, r24	; 0x02
    pmic_init ();
    sysclk_init ();
    597a:	0e 94 1f 14 	call	0x283e	; 0x283e <sysclk_init>
    timeout_init ();
    597e:	0e 94 3b 1f 	call	0x3e76	; 0x3e76 <timeout_init>
    ioport_init ();
    board_init ();
    5982:	0e 94 b9 13 	call	0x2772	; 0x2772 <board_init>
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
    5986:	10 92 85 2d 	sts	0x2D85, r1
    598a:	10 92 86 2d 	sts	0x2D86, r1
    598e:	10 92 87 2d 	sts	0x2D87, r1
    5992:	10 92 88 2d 	sts	0x2D88, r1
    5996:	10 92 89 2d 	sts	0x2D89, r1
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    599a:	81 e0       	ldi	r24, 0x01	; 1
    599c:	80 93 8a 2d 	sts	0x2D8A, r24
    sleepmgr_init ();
    cpu_irq_enable ();
    59a0:	78 94       	sei
    //tc_set_wgm (&TCC1, TC_WG_NORMAL);
    //tc_write_period (&TCC1, 32000000 / 1024);
    //tc_set_overflow_interrupt_level (&TCC1, TC_INT_LVL_LO);
    //tc_write_clock_source (&TCC1, TC_CLKSEL_DIV1024_gc);

    tc_enable (&TCC0);
    59a2:	80 e0       	ldi	r24, 0x00	; 0
    59a4:	98 e0       	ldi	r25, 0x08	; 8
    59a6:	0e 94 b7 1a 	call	0x356e	; 0x356e <tc_enable>
    tc_set_overflow_interrupt_callback (&TCC0, epoch_inc);
    59aa:	63 e2       	ldi	r22, 0x23	; 35
    59ac:	7e e0       	ldi	r23, 0x0E	; 14
    59ae:	80 e0       	ldi	r24, 0x00	; 0
    59b0:	98 e0       	ldi	r25, 0x08	; 8
    59b2:	0e 94 07 1b 	call	0x360e	; 0x360e <tc_set_overflow_interrupt_callback>
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    59b6:	e0 e0       	ldi	r30, 0x00	; 0
    59b8:	f8 e0       	ldi	r31, 0x08	; 8
    59ba:	81 81       	ldd	r24, Z+1	; 0x01
    59bc:	88 7f       	andi	r24, 0xF8	; 248
    59be:	81 83       	std	Z+1, r24	; 0x01
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    59c0:	82 e1       	ldi	r24, 0x12	; 18
    59c2:	9a e7       	ldi	r25, 0x7A	; 122
    59c4:	86 a3       	std	Z+38, r24	; 0x26
    59c6:	97 a3       	std	Z+39, r25	; 0x27
 * \note  Configures OVFINTLVL in INTCTRLA
 */
static inline void tc_set_overflow_interrupt_level(volatile void *tc,
		enum TC_INT_LEVEL_t level)
{
	((TC0_t *)tc)->INTCTRLA = ((TC0_t *)tc)->INTCTRLA & ~TC0_OVFINTLVL_gm;
    59c8:	86 81       	ldd	r24, Z+6	; 0x06
    59ca:	8c 7f       	andi	r24, 0xFC	; 252
    59cc:	86 83       	std	Z+6, r24	; 0x06
	((TC0_t *)tc)->INTCTRLA =
			((TC0_t *)tc)->INTCTRLA | (level << TC0_OVFINTLVL_gp);
    59ce:	86 81       	ldd	r24, Z+6	; 0x06
 */
static inline void tc_set_overflow_interrupt_level(volatile void *tc,
		enum TC_INT_LEVEL_t level)
{
	((TC0_t *)tc)->INTCTRLA = ((TC0_t *)tc)->INTCTRLA & ~TC0_OVFINTLVL_gm;
	((TC0_t *)tc)->INTCTRLA =
    59d0:	82 60       	ori	r24, 0x02	; 2
    59d2:	86 83       	std	Z+6, r24	; 0x06
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    59d4:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    59d6:	80 7f       	andi	r24, 0xF0	; 240
    59d8:	87 60       	ori	r24, 0x07	; 7
    59da:	80 83       	st	Z, r24
    tc_set_wgm (&TCC0, TC_WG_NORMAL);
    tc_write_period (&TCC0, 32000000 / 1024);
    tc_set_overflow_interrupt_level (&TCC0, TC_INT_LVL_MED);
    tc_write_clock_source (&TCC0, TC_CLKSEL_DIV1024_gc);

    tc_enable (&TCD0);
    59dc:	80 e0       	ldi	r24, 0x00	; 0
    59de:	99 e0       	ldi	r25, 0x09	; 9
    59e0:	0e 94 b7 1a 	call	0x356e	; 0x356e <tc_enable>
    tc_set_overflow_interrupt_callback (&TCD0, check_pulse_counters);
    59e4:	66 e8       	ldi	r22, 0x86	; 134
    59e6:	75 e2       	ldi	r23, 0x25	; 37
    59e8:	80 e0       	ldi	r24, 0x00	; 0
    59ea:	99 e0       	ldi	r25, 0x09	; 9
    59ec:	0e 94 07 1b 	call	0x360e	; 0x360e <tc_set_overflow_interrupt_callback>
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    59f0:	e0 e0       	ldi	r30, 0x00	; 0
    59f2:	f9 e0       	ldi	r31, 0x09	; 9
    59f4:	81 81       	ldd	r24, Z+1	; 0x01
    59f6:	88 7f       	andi	r24, 0xF8	; 248
    59f8:	81 83       	std	Z+1, r24	; 0x01
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    59fa:	8c e9       	ldi	r24, 0x9C	; 156
    59fc:	90 e0       	ldi	r25, 0x00	; 0
    59fe:	86 a3       	std	Z+38, r24	; 0x26
    5a00:	97 a3       	std	Z+39, r25	; 0x27
 * \note  Configures OVFINTLVL in INTCTRLA
 */
static inline void tc_set_overflow_interrupt_level(volatile void *tc,
		enum TC_INT_LEVEL_t level)
{
	((TC0_t *)tc)->INTCTRLA = ((TC0_t *)tc)->INTCTRLA & ~TC0_OVFINTLVL_gm;
    5a02:	86 81       	ldd	r24, Z+6	; 0x06
    5a04:	8c 7f       	andi	r24, 0xFC	; 252
    5a06:	86 83       	std	Z+6, r24	; 0x06
	((TC0_t *)tc)->INTCTRLA =
			((TC0_t *)tc)->INTCTRLA | (level << TC0_OVFINTLVL_gp);
    5a08:	86 81       	ldd	r24, Z+6	; 0x06
 */
static inline void tc_set_overflow_interrupt_level(volatile void *tc,
		enum TC_INT_LEVEL_t level)
{
	((TC0_t *)tc)->INTCTRLA = ((TC0_t *)tc)->INTCTRLA & ~TC0_OVFINTLVL_gm;
	((TC0_t *)tc)->INTCTRLA =
    5a0a:	83 60       	ori	r24, 0x03	; 3
    5a0c:	86 83       	std	Z+6, r24	; 0x06
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    5a0e:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    5a10:	80 7f       	andi	r24, 0xF0	; 240
    5a12:	87 60       	ori	r24, 0x07	; 7
    5a14:	80 83       	st	Z, r24
    tc_set_wgm (&TCD0, TC_WG_NORMAL);
    tc_write_period (&TCD0, 32000000 / 1024 / 200);
    tc_set_overflow_interrupt_level (&TCD0, TC_INT_LVL_HI);
    tc_write_clock_source (&TCD0, TC_CLKSEL_DIV1024_gc);

    _DEBUG_init ();
    5a16:	0e 94 ef 11 	call	0x23de	; 0x23de <_uartc1_init>
    _DEBUG_enable_interrupt (USART_INT_LVL_LO);
    5a1a:	81 e0       	ldi	r24, 0x01	; 1
    5a1c:	90 e0       	ldi	r25, 0x00	; 0
    5a1e:	0e 94 e6 11 	call	0x23cc	; 0x23cc <_uartc1_enable_interrupt>
    DEBUG_putu (sizeof (struct _eeprom_0x03_t));
    5a22:	64 ed       	ldi	r22, 0xD4	; 212
    5a24:	70 e0       	ldi	r23, 0x00	; 0
    5a26:	80 e0       	ldi	r24, 0x00	; 0
    5a28:	90 e0       	ldi	r25, 0x00	; 0
    5a2a:	0e 94 58 13 	call	0x26b0	; 0x26b0 <DEBUG_putu>
    DEBUG_puts (" ");
    5a2e:	88 ed       	ldi	r24, 0xD8	; 216
    5a30:	92 e2       	ldi	r25, 0x22	; 34
    5a32:	0e 94 44 13 	call	0x2688	; 0x2688 <DEBUG_puts>
    DEBUG_putu (sizeof (state.event_buffer.buffer[0].str_data));
    5a36:	62 e0       	ldi	r22, 0x02	; 2
    5a38:	70 e0       	ldi	r23, 0x00	; 0
    5a3a:	80 e0       	ldi	r24, 0x00	; 0
    5a3c:	90 e0       	ldi	r25, 0x00	; 0
    5a3e:	0e 94 58 13 	call	0x26b0	; 0x26b0 <DEBUG_putu>
    DEBUG_putcrlf (NULL);
    5a42:	80 e0       	ldi	r24, 0x00	; 0
    5a44:	90 e0       	ldi	r25, 0x00	; 0
    5a46:	0e 94 52 13 	call	0x26a4	; 0x26a4 <DEBUG_putcrlf>

static void eeprom_read_setup (void)
{
    uint8_t i;

    memset (&config, 0, sizeof config);
    5a4a:	00 e7       	ldi	r16, 0x70	; 112
    5a4c:	1b e2       	ldi	r17, 0x2B	; 43
    5a4e:	83 e6       	ldi	r24, 0x63	; 99
    5a50:	d8 01       	movw	r26, r16
    5a52:	1d 92       	st	X+, r1
    5a54:	8a 95       	dec	r24
    5a56:	e9 f7       	brne	.-6      	; 0x5a52 <main+0xf2>
    nvm_eeprom_read_buffer (offsetof (struct _eeprom_0x03_t, config), &config, sizeof config);
    5a58:	43 e6       	ldi	r20, 0x63	; 99
    5a5a:	50 e0       	ldi	r21, 0x00	; 0
    5a5c:	b8 01       	movw	r22, r16
    5a5e:	80 e6       	ldi	r24, 0x60	; 96
    5a60:	90 e0       	ldi	r25, 0x00	; 0
    5a62:	0e 94 aa 14 	call	0x2954	; 0x2954 <nvm_eeprom_read_buffer>

    switch (config.eeprom_version) {
    5a66:	f8 01       	movw	r30, r16
    5a68:	80 81       	ld	r24, Z
    5a6a:	82 30       	cpi	r24, 0x02	; 2
    5a6c:	21 f0       	breq	.+8      	; 0x5a76 <main+0x116>
    5a6e:	83 30       	cpi	r24, 0x03	; 3
    5a70:	09 f0       	breq	.+2      	; 0x5a74 <main+0x114>
    5a72:	df c0       	rjmp	.+446    	; 0x5c32 <main+0x2d2>
    5a74:	d4 c0       	rjmp	.+424    	; 0x5c1e <main+0x2be>
    case 0x02:
        if (crc8_compute ((void*) &config, sizeof (config_0x02_t)) != 0) {
    5a76:	6f e3       	ldi	r22, 0x3F	; 63
    5a78:	80 e7       	ldi	r24, 0x70	; 112
    5a7a:	9b e2       	ldi	r25, 0x2B	; 43
    5a7c:	0e 94 c2 0c 	call	0x1984	; 0x1984 <crc8_compute>
    5a80:	81 11       	cpse	r24, r1
    5a82:	d7 c0       	rjmp	.+430    	; 0x5c32 <main+0x2d2>
            goto create_defaults;
        }
        for (i = 0; i < 3; i++) {
            config.pTimerWeekEndControl[i] = config.pTimerWeekDayControl[i];
    5a84:	80 91 98 2b 	lds	r24, 0x2B98
    5a88:	90 91 99 2b 	lds	r25, 0x2B99
    5a8c:	a0 91 9a 2b 	lds	r26, 0x2B9A
    5a90:	b0 91 9b 2b 	lds	r27, 0x2B9B
    5a94:	80 93 ae 2b 	sts	0x2BAE, r24
    5a98:	90 93 af 2b 	sts	0x2BAF, r25
    5a9c:	a0 93 b0 2b 	sts	0x2BB0, r26
    5aa0:	b0 93 b1 2b 	sts	0x2BB1, r27
            config.pTimerWeekDayWaterRunning[i] = 0;
    5aa4:	10 92 ba 2b 	sts	0x2BBA, r1
    5aa8:	10 92 bb 2b 	sts	0x2BBB, r1
    5aac:	10 92 bc 2b 	sts	0x2BBC, r1
    5ab0:	10 92 bd 2b 	sts	0x2BBD, r1
            config.pTimerWeekEndWaterRunning[i] = 0;
    5ab4:	10 92 c6 2b 	sts	0x2BC6, r1
    5ab8:	10 92 c7 2b 	sts	0x2BC7, r1
    5abc:	10 92 c8 2b 	sts	0x2BC8, r1
    5ac0:	10 92 c9 2b 	sts	0x2BC9, r1
    case 0x02:
        if (crc8_compute ((void*) &config, sizeof (config_0x02_t)) != 0) {
            goto create_defaults;
        }
        for (i = 0; i < 3; i++) {
            config.pTimerWeekEndControl[i] = config.pTimerWeekDayControl[i];
    5ac4:	80 91 9c 2b 	lds	r24, 0x2B9C
    5ac8:	90 91 9d 2b 	lds	r25, 0x2B9D
    5acc:	a0 91 9e 2b 	lds	r26, 0x2B9E
    5ad0:	b0 91 9f 2b 	lds	r27, 0x2B9F
    5ad4:	80 93 b2 2b 	sts	0x2BB2, r24
    5ad8:	90 93 b3 2b 	sts	0x2BB3, r25
    5adc:	a0 93 b4 2b 	sts	0x2BB4, r26
    5ae0:	b0 93 b5 2b 	sts	0x2BB5, r27
            config.pTimerWeekDayWaterRunning[i] = 0;
    5ae4:	10 92 be 2b 	sts	0x2BBE, r1
    5ae8:	10 92 bf 2b 	sts	0x2BBF, r1
    5aec:	10 92 c0 2b 	sts	0x2BC0, r1
    5af0:	10 92 c1 2b 	sts	0x2BC1, r1
            config.pTimerWeekEndWaterRunning[i] = 0;
    5af4:	10 92 ca 2b 	sts	0x2BCA, r1
    5af8:	10 92 cb 2b 	sts	0x2BCB, r1
    5afc:	10 92 cc 2b 	sts	0x2BCC, r1
    5b00:	10 92 cd 2b 	sts	0x2BCD, r1
    case 0x02:
        if (crc8_compute ((void*) &config, sizeof (config_0x02_t)) != 0) {
            goto create_defaults;
        }
        for (i = 0; i < 3; i++) {
            config.pTimerWeekEndControl[i] = config.pTimerWeekDayControl[i];
    5b04:	80 91 a0 2b 	lds	r24, 0x2BA0
    5b08:	90 91 a1 2b 	lds	r25, 0x2BA1
    5b0c:	a0 91 a2 2b 	lds	r26, 0x2BA2
    5b10:	b0 91 a3 2b 	lds	r27, 0x2BA3
    5b14:	80 93 b6 2b 	sts	0x2BB6, r24
    5b18:	90 93 b7 2b 	sts	0x2BB7, r25
    5b1c:	a0 93 b8 2b 	sts	0x2BB8, r26
    5b20:	b0 93 b9 2b 	sts	0x2BB9, r27
            config.pTimerWeekDayWaterRunning[i] = 0;
    5b24:	10 92 c2 2b 	sts	0x2BC2, r1
    5b28:	10 92 c3 2b 	sts	0x2BC3, r1
    5b2c:	10 92 c4 2b 	sts	0x2BC4, r1
    5b30:	10 92 c5 2b 	sts	0x2BC5, r1
            config.pTimerWeekEndWaterRunning[i] = 0;
    5b34:	10 92 ce 2b 	sts	0x2BCE, r1
    5b38:	10 92 cf 2b 	sts	0x2BCF, r1
    5b3c:	10 92 d0 2b 	sts	0x2BD0, r1
    5b40:	10 92 d1 2b 	sts	0x2BD1, r1
static void eeprom_0x02_read_pulse_counters (void)
{
    uint8_t i;
    eeprom_pulse_counters_0x02_t tmp;

    nvm_eeprom_read_buffer (offsetof (struct _eeprom_0x02_t, pulse_counters_0x02), &tmp, sizeof tmp);
    5b44:	41 e1       	ldi	r20, 0x11	; 17
    5b46:	50 e0       	ldi	r21, 0x00	; 0
    5b48:	be 01       	movw	r22, r28
    5b4a:	6f 5f       	subi	r22, 0xFF	; 255
    5b4c:	7f 4f       	sbci	r23, 0xFF	; 255
    5b4e:	8f e9       	ldi	r24, 0x9F	; 159
    5b50:	90 e0       	ldi	r25, 0x00	; 0
    5b52:	0e 94 aa 14 	call	0x2954	; 0x2954 <nvm_eeprom_read_buffer>
    if (crc8_compute ((void*) &tmp, sizeof tmp) == 0) {
    5b56:	61 e1       	ldi	r22, 0x11	; 17
    5b58:	ce 01       	movw	r24, r28
    5b5a:	01 96       	adiw	r24, 0x01	; 1
    5b5c:	0e 94 c2 0c 	call	0x1984	; 0x1984 <crc8_compute>
    5b60:	81 11       	cpse	r24, r1
    5b62:	35 c0       	rjmp	.+106    	; 0x5bce <main+0x26e>
        for (i = 0; i < N_PULSE_COUNTERS; i++) {
            if (tmp.counter[i] == 0xFFFFFFFF) {
    5b64:	89 81       	ldd	r24, Y+1	; 0x01
    5b66:	9a 81       	ldd	r25, Y+2	; 0x02
    5b68:	ab 81       	ldd	r26, Y+3	; 0x03
    5b6a:	bc 81       	ldd	r27, Y+4	; 0x04
    5b6c:	8f 3f       	cpi	r24, 0xFF	; 255
    5b6e:	9f 4f       	sbci	r25, 0xFF	; 255
    5b70:	af 4f       	sbci	r26, 0xFF	; 255
    5b72:	bf 4f       	sbci	r27, 0xFF	; 255
    5b74:	21 f4       	brne	.+8      	; 0x5b7e <main+0x21e>
                tmp.counter[i] = 0;
    5b76:	19 82       	std	Y+1, r1	; 0x01
    5b78:	1a 82       	std	Y+2, r1	; 0x02
    5b7a:	1b 82       	std	Y+3, r1	; 0x03
    5b7c:	1c 82       	std	Y+4, r1	; 0x04
            }
            if (tmp.midnight_counter[i] == 0xFFFFFFFF) {
    5b7e:	89 85       	ldd	r24, Y+9	; 0x09
    5b80:	9a 85       	ldd	r25, Y+10	; 0x0a
    5b82:	ab 85       	ldd	r26, Y+11	; 0x0b
    5b84:	bc 85       	ldd	r27, Y+12	; 0x0c
    5b86:	8f 3f       	cpi	r24, 0xFF	; 255
    5b88:	9f 4f       	sbci	r25, 0xFF	; 255
    5b8a:	af 4f       	sbci	r26, 0xFF	; 255
    5b8c:	bf 4f       	sbci	r27, 0xFF	; 255
    5b8e:	21 f4       	brne	.+8      	; 0x5b98 <main+0x238>
                tmp.midnight_counter[i] = 0;
    5b90:	19 86       	std	Y+9, r1	; 0x09
    5b92:	1a 86       	std	Y+10, r1	; 0x0a
    5b94:	1b 86       	std	Y+11, r1	; 0x0b
    5b96:	1c 86       	std	Y+12, r1	; 0x0c
    eeprom_pulse_counters_0x02_t tmp;

    nvm_eeprom_read_buffer (offsetof (struct _eeprom_0x02_t, pulse_counters_0x02), &tmp, sizeof tmp);
    if (crc8_compute ((void*) &tmp, sizeof tmp) == 0) {
        for (i = 0; i < N_PULSE_COUNTERS; i++) {
            if (tmp.counter[i] == 0xFFFFFFFF) {
    5b98:	8d 81       	ldd	r24, Y+5	; 0x05
    5b9a:	9e 81       	ldd	r25, Y+6	; 0x06
    5b9c:	af 81       	ldd	r26, Y+7	; 0x07
    5b9e:	b8 85       	ldd	r27, Y+8	; 0x08
    5ba0:	8f 3f       	cpi	r24, 0xFF	; 255
    5ba2:	9f 4f       	sbci	r25, 0xFF	; 255
    5ba4:	af 4f       	sbci	r26, 0xFF	; 255
    5ba6:	bf 4f       	sbci	r27, 0xFF	; 255
    5ba8:	21 f4       	brne	.+8      	; 0x5bb2 <main+0x252>
                tmp.counter[i] = 0;
    5baa:	1d 82       	std	Y+5, r1	; 0x05
    5bac:	1e 82       	std	Y+6, r1	; 0x06
    5bae:	1f 82       	std	Y+7, r1	; 0x07
    5bb0:	18 86       	std	Y+8, r1	; 0x08
            }
            if (tmp.midnight_counter[i] == 0xFFFFFFFF) {
    5bb2:	8d 85       	ldd	r24, Y+13	; 0x0d
    5bb4:	9e 85       	ldd	r25, Y+14	; 0x0e
    5bb6:	af 85       	ldd	r26, Y+15	; 0x0f
    5bb8:	b8 89       	ldd	r27, Y+16	; 0x10
    5bba:	8f 3f       	cpi	r24, 0xFF	; 255
    5bbc:	9f 4f       	sbci	r25, 0xFF	; 255
    5bbe:	af 4f       	sbci	r26, 0xFF	; 255
    5bc0:	bf 4f       	sbci	r27, 0xFF	; 255
    5bc2:	61 f4       	brne	.+24     	; 0x5bdc <main+0x27c>
                tmp.midnight_counter[i] = 0;
    5bc4:	1d 86       	std	Y+13, r1	; 0x0d
    5bc6:	1e 86       	std	Y+14, r1	; 0x0e
    5bc8:	1f 86       	std	Y+15, r1	; 0x0f
    5bca:	18 8a       	std	Y+16, r1	; 0x10
    5bcc:	07 c0       	rjmp	.+14     	; 0x5bdc <main+0x27c>
            }
        }
    } else {
        memset (&tmp, 0, sizeof tmp);
    5bce:	fe 01       	movw	r30, r28
    5bd0:	31 96       	adiw	r30, 0x01	; 1
    5bd2:	81 e1       	ldi	r24, 0x11	; 17
    5bd4:	df 01       	movw	r26, r30
    5bd6:	1d 92       	st	X+, r1
    5bd8:	8a 95       	dec	r24
    5bda:	e9 f7       	brne	.-6      	; 0x5bd6 <main+0x276>
    }
    set_current_pulse_counter (0, tmp.counter[0]);
    5bdc:	49 81       	ldd	r20, Y+1	; 0x01
    5bde:	5a 81       	ldd	r21, Y+2	; 0x02
    5be0:	6b 81       	ldd	r22, Y+3	; 0x03
    5be2:	7c 81       	ldd	r23, Y+4	; 0x04
    5be4:	80 e0       	ldi	r24, 0x00	; 0
    5be6:	0e 94 d0 1f 	call	0x3fa0	; 0x3fa0 <set_current_pulse_counter>
    set_current_pulse_counter (1, tmp.counter[1]);
    5bea:	4d 81       	ldd	r20, Y+5	; 0x05
    5bec:	5e 81       	ldd	r21, Y+6	; 0x06
    5bee:	6f 81       	ldd	r22, Y+7	; 0x07
    5bf0:	78 85       	ldd	r23, Y+8	; 0x08
    5bf2:	81 e0       	ldi	r24, 0x01	; 1
    5bf4:	0e 94 d0 1f 	call	0x3fa0	; 0x3fa0 <set_current_pulse_counter>
    set_midnight_pulse_counter (0, tmp.midnight_counter[0]);
    5bf8:	49 85       	ldd	r20, Y+9	; 0x09
    5bfa:	5a 85       	ldd	r21, Y+10	; 0x0a
    5bfc:	6b 85       	ldd	r22, Y+11	; 0x0b
    5bfe:	7c 85       	ldd	r23, Y+12	; 0x0c
    5c00:	80 e0       	ldi	r24, 0x00	; 0
    5c02:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <set_midnight_pulse_counter>
    set_midnight_pulse_counter (1, tmp.midnight_counter[1]);
    5c06:	4d 85       	ldd	r20, Y+13	; 0x0d
    5c08:	5e 85       	ldd	r21, Y+14	; 0x0e
    5c0a:	6f 85       	ldd	r22, Y+15	; 0x0f
    5c0c:	78 89       	ldd	r23, Y+16	; 0x10
    5c0e:	81 e0       	ldi	r24, 0x01	; 1
    5c10:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <set_midnight_pulse_counter>
            config.pTimerWeekEndControl[i] = config.pTimerWeekDayControl[i];
            config.pTimerWeekDayWaterRunning[i] = 0;
            config.pTimerWeekEndWaterRunning[i] = 0;
        }
        eeprom_0x02_read_pulse_counters ();
        eeprom_write_config ();
    5c14:	0e 94 57 21 	call	0x42ae	; 0x42ae <eeprom_write_config>
        eeprom_write_pulse_counters ();
    5c18:	0e 94 75 21 	call	0x42ea	; 0x42ea <eeprom_write_pulse_counters>
    5c1c:	bf c0       	rjmp	.+382    	; 0x5d9c <main+0x43c>
        break;
    case CONFIG_EEPROM_VERSION:
        if (crc8_compute ((void*) &config, sizeof (config_0x03_t)) != 0) {
    5c1e:	63 e6       	ldi	r22, 0x63	; 99
    5c20:	80 e7       	ldi	r24, 0x70	; 112
    5c22:	9b e2       	ldi	r25, 0x2B	; 43
    5c24:	0e 94 c2 0c 	call	0x1984	; 0x1984 <crc8_compute>
    5c28:	81 11       	cpse	r24, r1
    5c2a:	03 c0       	rjmp	.+6      	; 0x5c32 <main+0x2d2>
            goto create_defaults;
        }
        eeprom_read_pulse_counters ();
    5c2c:	0e 94 e2 20 	call	0x41c4	; 0x41c4 <eeprom_read_pulse_counters>
    5c30:	b5 c0       	rjmp	.+362    	; 0x5d9c <main+0x43c>
        break;
    default:
create_defaults:
        memset (&config, 0xFF, sizeof config);
    5c32:	43 e6       	ldi	r20, 0x63	; 99
    5c34:	50 e0       	ldi	r21, 0x00	; 0
    5c36:	6f ef       	ldi	r22, 0xFF	; 255
    5c38:	70 e0       	ldi	r23, 0x00	; 0
    5c3a:	80 e7       	ldi	r24, 0x70	; 112
    5c3c:	9b e2       	ldi	r25, 0x2B	; 43
    5c3e:	0e 94 bf 36 	call	0x6d7e	; 0x6d7e <memset>
        config.eeprom_version = CONFIG_EEPROM_VERSION;
    5c42:	83 e0       	ldi	r24, 0x03	; 3
    5c44:	80 93 70 2b 	sts	0x2B70, r24
        config.report_home_period_secs = CONFIG_DEFAULT_REPORT_HOME_PERIOD;
    5c48:	88 e5       	ldi	r24, 0x58	; 88
    5c4a:	92 e0       	ldi	r25, 0x02	; 2
    5c4c:	80 93 71 2b 	sts	0x2B71, r24
    5c50:	90 93 72 2b 	sts	0x2B72, r25
        config.rom[0].valid = false;
    5c54:	10 92 73 2b 	sts	0x2B73, r1
        config.rom[1].valid = false;
    5c58:	10 92 7c 2b 	sts	0x2B7C, r1
        config.rom[2].valid = false;
    5c5c:	10 92 85 2b 	sts	0x2B85, r1
        config.temp_delta_trigger_x16 = CONFIG_DEFAULT_TEMP_DELTA_TRIG_X16;
    5c60:	80 e1       	ldi	r24, 0x10	; 16
    5c62:	90 e0       	ldi	r25, 0x00	; 0
    5c64:	80 93 8e 2b 	sts	0x2B8E, r24
    5c68:	90 93 8f 2b 	sts	0x2B8F, r25
        config.flow_delta_trigger = CONFIG_DEFAULT_FLOW_DELTA_TRIGGER;
    5c6c:	88 e2       	ldi	r24, 0x28	; 40
    5c6e:	90 e0       	ldi	r25, 0x00	; 0
    5c70:	a0 e0       	ldi	r26, 0x00	; 0
    5c72:	b0 e0       	ldi	r27, 0x00	; 0
    5c74:	80 93 90 2b 	sts	0x2B90, r24
    5c78:	90 93 91 2b 	sts	0x2B91, r25
    5c7c:	a0 93 92 2b 	sts	0x2B92, r26
    5c80:	b0 93 93 2b 	sts	0x2B93, r27
        config.elec_delta_trigger = CONFIG_DEFAULT_ELEC_DELTA_TRIGGER;
    5c84:	80 ef       	ldi	r24, 0xF0	; 240
    5c86:	90 e0       	ldi	r25, 0x00	; 0
    5c88:	a0 e0       	ldi	r26, 0x00	; 0
    5c8a:	b0 e0       	ldi	r27, 0x00	; 0
    5c8c:	80 93 94 2b 	sts	0x2B94, r24
    5c90:	90 93 95 2b 	sts	0x2B95, r25
    5c94:	a0 93 96 2b 	sts	0x2B96, r26
    5c98:	b0 93 97 2b 	sts	0x2B97, r27
        config.pTimerWeekDayControl[0] = 0;
    5c9c:	10 92 98 2b 	sts	0x2B98, r1
    5ca0:	10 92 99 2b 	sts	0x2B99, r1
    5ca4:	10 92 9a 2b 	sts	0x2B9A, r1
    5ca8:	10 92 9b 2b 	sts	0x2B9B, r1
        config.pTimerWeekDayControl[1] = 0;
    5cac:	10 92 9c 2b 	sts	0x2B9C, r1
    5cb0:	10 92 9d 2b 	sts	0x2B9D, r1
    5cb4:	10 92 9e 2b 	sts	0x2B9E, r1
    5cb8:	10 92 9f 2b 	sts	0x2B9F, r1
        config.pTimerWeekDayControl[2] = 0;
    5cbc:	10 92 a0 2b 	sts	0x2BA0, r1
    5cc0:	10 92 a1 2b 	sts	0x2BA1, r1
    5cc4:	10 92 a2 2b 	sts	0x2BA2, r1
    5cc8:	10 92 a3 2b 	sts	0x2BA3, r1
        config.pTimerWeekEndControl[0] = 0;
    5ccc:	10 92 ae 2b 	sts	0x2BAE, r1
    5cd0:	10 92 af 2b 	sts	0x2BAF, r1
    5cd4:	10 92 b0 2b 	sts	0x2BB0, r1
    5cd8:	10 92 b1 2b 	sts	0x2BB1, r1
        config.pTimerWeekEndControl[1] = 0;
    5cdc:	10 92 b2 2b 	sts	0x2BB2, r1
    5ce0:	10 92 b3 2b 	sts	0x2BB3, r1
    5ce4:	10 92 b4 2b 	sts	0x2BB4, r1
    5ce8:	10 92 b5 2b 	sts	0x2BB5, r1
        config.pTimerWeekEndControl[2] = 0;
    5cec:	10 92 b6 2b 	sts	0x2BB6, r1
    5cf0:	10 92 b7 2b 	sts	0x2BB7, r1
    5cf4:	10 92 b8 2b 	sts	0x2BB8, r1
    5cf8:	10 92 b9 2b 	sts	0x2BB9, r1
        config.pTimerWeekDayWaterRunning[0] = 0;
    5cfc:	10 92 ba 2b 	sts	0x2BBA, r1
    5d00:	10 92 bb 2b 	sts	0x2BBB, r1
    5d04:	10 92 bc 2b 	sts	0x2BBC, r1
    5d08:	10 92 bd 2b 	sts	0x2BBD, r1
        config.pTimerWeekDayWaterRunning[1] = 0;
    5d0c:	10 92 be 2b 	sts	0x2BBE, r1
    5d10:	10 92 bf 2b 	sts	0x2BBF, r1
    5d14:	10 92 c0 2b 	sts	0x2BC0, r1
    5d18:	10 92 c1 2b 	sts	0x2BC1, r1
        config.pTimerWeekDayWaterRunning[2] = 0;
    5d1c:	10 92 c2 2b 	sts	0x2BC2, r1
    5d20:	10 92 c3 2b 	sts	0x2BC3, r1
    5d24:	10 92 c4 2b 	sts	0x2BC4, r1
    5d28:	10 92 c5 2b 	sts	0x2BC5, r1
        config.pTimerWeekEndWaterRunning[0] = 0;
    5d2c:	10 92 c6 2b 	sts	0x2BC6, r1
    5d30:	10 92 c7 2b 	sts	0x2BC7, r1
    5d34:	10 92 c8 2b 	sts	0x2BC8, r1
    5d38:	10 92 c9 2b 	sts	0x2BC9, r1
        config.pTimerWeekEndWaterRunning[1] = 0;
    5d3c:	10 92 ca 2b 	sts	0x2BCA, r1
    5d40:	10 92 cb 2b 	sts	0x2BCB, r1
    5d44:	10 92 cc 2b 	sts	0x2BCC, r1
    5d48:	10 92 cd 2b 	sts	0x2BCD, r1
        config.pTimerWeekEndWaterRunning[2] = 0;
    5d4c:	10 92 ce 2b 	sts	0x2BCE, r1
    5d50:	10 92 cf 2b 	sts	0x2BCF, r1
    5d54:	10 92 d0 2b 	sts	0x2BD0, r1
    5d58:	10 92 d1 2b 	sts	0x2BD1, r1
        config.temp_sp_x16 = CONFIG_DEFAULT_TEMP_SP_X16;
    5d5c:	80 ec       	ldi	r24, 0xC0	; 192
    5d5e:	93 e0       	ldi	r25, 0x03	; 3
    5d60:	80 93 a4 2b 	sts	0x2BA4, r24
    5d64:	90 93 a5 2b 	sts	0x2BA5, r25
        config.ctrl_select = CONTROL_SELECT_BYPASS;
    5d68:	81 e0       	ldi	r24, 0x01	; 1
    5d6a:	90 e0       	ldi	r25, 0x00	; 0
    5d6c:	80 93 a6 2b 	sts	0x2BA6, r24
    5d70:	90 93 a7 2b 	sts	0x2BA7, r25
        config.enable_temp1_hi_event = false;
    5d74:	10 92 a8 2b 	sts	0x2BA8, r1
        config.enable_temp1_lo_event = false;
    5d78:	10 92 a9 2b 	sts	0x2BA9, r1
        config.temp1_hi_trigger_x16 = CONFIG_DEFAULT_TEMP1_HI_TRIGGER_X16;
    5d7c:	80 e1       	ldi	r24, 0x10	; 16
    5d7e:	94 e0       	ldi	r25, 0x04	; 4
    5d80:	80 93 aa 2b 	sts	0x2BAA, r24
    5d84:	90 93 ab 2b 	sts	0x2BAB, r25
        config.temp1_lo_trigger_x16 = CONFIG_DEFAULT_TEMP1_LO_TRIGGER_X16;
    5d88:	80 ea       	ldi	r24, 0xA0	; 160
    5d8a:	90 e0       	ldi	r25, 0x00	; 0
    5d8c:	80 93 ac 2b 	sts	0x2BAC, r24
    5d90:	90 93 ad 2b 	sts	0x2BAD, r25
        eeprom_write_config ();
    5d94:	0e 94 57 21 	call	0x42ae	; 0x42ae <eeprom_write_config>
        eeprom_read_pulse_counters ();
    5d98:	0e 94 e2 20 	call	0x41c4	; 0x41c4 <eeprom_read_pulse_counters>
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	PORTCFG.MPCMASK = arch_ioport_pin_to_mask(pin);
    5d9c:	e0 eb       	ldi	r30, 0xB0	; 176
    5d9e:	f0 e0       	ldi	r31, 0x00	; 0
    5da0:	94 e0       	ldi	r25, 0x04	; 4
    5da2:	90 83       	st	Z, r25
	base->PIN0CTRL = mode;
    5da4:	a0 e4       	ldi	r26, 0x40	; 64
    5da6:	b6 e0       	ldi	r27, 0x06	; 6
    5da8:	80 e1       	ldi	r24, 0x10	; 16
    5daa:	50 96       	adiw	r26, 0x10	; 16
    5dac:	8c 93       	st	X, r24
    5dae:	50 97       	sbiw	r26, 0x10	; 16
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	PORTCFG.MPCMASK = arch_ioport_pin_to_mask(pin);
    5db0:	90 83       	st	Z, r25
	base->PIN0CTRL = mode;
    5db2:	e0 e6       	ldi	r30, 0x60	; 96
    5db4:	f6 e0       	ldi	r31, 0x06	; 6
    5db6:	80 8b       	std	Z+16, r24	; 0x10

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    5db8:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    5dba:	f8 94       	cli
	volatile uint8_t *pin_ctrl =
			(&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();
	
	*pin_ctrl &= ~PORT_ISC_gm;
    5dbc:	52 96       	adiw	r26, 0x12	; 18
    5dbe:	9c 91       	ld	r25, X
    5dc0:	52 97       	sbiw	r26, 0x12	; 18
    5dc2:	98 7f       	andi	r25, 0xF8	; 248
    5dc4:	52 96       	adiw	r26, 0x12	; 18
    5dc6:	9c 93       	st	X, r25
    5dc8:	52 97       	sbiw	r26, 0x12	; 18
	*pin_ctrl |= (pin_sense & PORT_ISC_gm);
    5dca:	52 96       	adiw	r26, 0x12	; 18
    5dcc:	9c 91       	ld	r25, X
    5dce:	52 97       	sbiw	r26, 0x12	; 18
    5dd0:	52 96       	adiw	r26, 0x12	; 18
    5dd2:	9c 93       	st	X, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    5dd4:	8f bf       	out	0x3f, r24	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    5dd6:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    5dd8:	f8 94       	cli
	volatile uint8_t *pin_ctrl =
			(&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();
	
	*pin_ctrl &= ~PORT_ISC_gm;
    5dda:	92 89       	ldd	r25, Z+18	; 0x12
    5ddc:	98 7f       	andi	r25, 0xF8	; 248
    5dde:	92 8b       	std	Z+18, r25	; 0x12
	*pin_ctrl |= (pin_sense & PORT_ISC_gm);
    5de0:	92 89       	ldd	r25, Z+18	; 0x12
    5de2:	92 8b       	std	Z+18, r25	; 0x12
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    5de4:	8f bf       	out	0x3f, r24	; 63

    //PORTD.INTCTRL = PORT_INT0LVL_LO_gc;
    //PORTD.INT0MASK = 0x04;


    state.modem.secs_network_inactive = 0;
    5de6:	10 92 ad 28 	sts	0x28AD, r1
    5dea:	10 92 ae 28 	sts	0x28AE, r1
    state.modem.up = false;
    5dee:	10 92 a7 28 	sts	0x28A7, r1
    state.modem.busy = false;
    5df2:	10 92 a8 28 	sts	0x28A8, r1
    state.modem.send_config1 = true;
    5df6:	81 e0       	ldi	r24, 0x01	; 1
    5df8:	80 93 aa 28 	sts	0x28AA, r24
    state.modem.send_config2 = true;
    5dfc:	80 93 ab 28 	sts	0x28AB, r24
    state.modem.send_rom_config = true;
    5e00:	80 93 ac 28 	sts	0x28AC, r24
    state.modem.send_id = true;
    5e04:	80 93 a9 28 	sts	0x28A9, r24
    state.current.temp1_signalled = SIGNALLED_NONE;
    5e08:	10 92 1a 2b 	sts	0x2B1A, r1
    5e0c:	10 92 1b 2b 	sts	0x2B1B, r1
    state.current.temp_x16[0] = INT16_MIN;
    5e10:	80 e0       	ldi	r24, 0x00	; 0
    5e12:	90 e8       	ldi	r25, 0x80	; 128
    5e14:	80 93 1c 2b 	sts	0x2B1C, r24
    5e18:	90 93 1d 2b 	sts	0x2B1D, r25
    state.current.temp_x16[1] = INT16_MIN;
    5e1c:	80 93 1e 2b 	sts	0x2B1E, r24
    5e20:	90 93 1f 2b 	sts	0x2B1F, r25
    state.current.temp_x16[2] = INT16_MIN;
    5e24:	80 93 20 2b 	sts	0x2B20, r24
    5e28:	90 93 21 2b 	sts	0x2B21, r25
    state.current.state = STATUS_STATE_SENSOR_ERROR;
    5e2c:	82 e0       	ldi	r24, 0x02	; 2
    5e2e:	80 93 19 2b 	sts	0x2B19, r24
    state.current.power_on = false;
    5e32:	10 92 2a 2b 	sts	0x2B2A, r1
    state.current.element_on = false;
    5e36:	10 92 2b 2b 	sts	0x2B2B, r1
    state.current.water_event.running = false;
    5e3a:	10 92 2c 2b 	sts	0x2B2C, r1
    state.current.water_event.sent = false;
    5e3e:	10 92 2d 2b 	sts	0x2B2D, r1
    state.current.electrical_short_event_sent = false;
    5e42:	10 92 2e 2b 	sts	0x2B2E, r1
#define CHIP_RESET_CAUSE_WDT            RST_WDRF_bm
//@}

static inline reset_cause_t reset_cause_get_causes(void)
{
	return (reset_cause_t)RST.STATUS;
    5e46:	e8 e7       	ldi	r30, 0x78	; 120
    5e48:	f0 e0       	ldi	r31, 0x00	; 0
    5e4a:	80 81       	ld	r24, Z

    state.reset_reason = reset_cause_get_causes ();
    5e4c:	80 93 a6 28 	sts	0x28A6, r24
}

static inline void reset_cause_clear_causes(reset_cause_t causes)
{
	RST.STATUS = causes;
    5e50:	8f e7       	ldi	r24, 0x7F	; 127
    5e52:	80 83       	st	Z, r24
                              CHIP_RESET_CAUSE_POR |
                              CHIP_RESET_CAUSE_SOFT |
                              CHIP_RESET_CAUSE_SPIKE |
                              CHIP_RESET_CAUSE_WDT);

    memset (&state.event_buffer, 0x00, sizeof state.event_buffer);
    5e54:	82 e8       	ldi	r24, 0x82	; 130
    5e56:	e1 eb       	ldi	r30, 0xB1	; 177
    5e58:	f8 e2       	ldi	r31, 0x28	; 40
    5e5a:	df 01       	movw	r26, r30
    5e5c:	1d 92       	st	X+, r1
    5e5e:	8a 95       	dec	r24
    5e60:	e9 f7       	brne	.-6      	; 0x5e5c <main+0x4fc>
    memset (&state.status_buffer, 0x00, sizeof state.status_buffer);
    5e62:	82 ee       	ldi	r24, 0xE2	; 226
    5e64:	91 e0       	ldi	r25, 0x01	; 1
    5e66:	e3 e3       	ldi	r30, 0x33	; 51
    5e68:	f9 e2       	ldi	r31, 0x29	; 41
    5e6a:	df 01       	movw	r26, r30
    5e6c:	9c 01       	movw	r18, r24
    5e6e:	1d 92       	st	X+, r1
    5e70:	21 50       	subi	r18, 0x01	; 1
    5e72:	30 40       	sbci	r19, 0x00	; 0
    5e74:	e1 f7       	brne	.-8      	; 0x5e6e <main+0x50e>
    state.event_buffer.back = state.event_buffer.front = 0;
    state.status_buffer.back = state.status_buffer.front = 0;

    opt.speed = TWI_SPEED;
    5e76:	80 e5       	ldi	r24, 0x50	; 80
    5e78:	93 ec       	ldi	r25, 0xC3	; 195
    5e7a:	a0 e0       	ldi	r26, 0x00	; 0
    5e7c:	b0 e0       	ldi	r27, 0x00	; 0
    5e7e:	80 93 67 2b 	sts	0x2B67, r24
    5e82:	90 93 68 2b 	sts	0x2B68, r25
    5e86:	a0 93 69 2b 	sts	0x2B69, r26
    5e8a:	b0 93 6a 2b 	sts	0x2B6A, r27
    opt.chip = DS2483_ADDR;
    5e8e:	88 e1       	ldi	r24, 0x18	; 24
    5e90:	80 93 6f 2b 	sts	0x2B6F, r24
typedef TWI_t *twi_master_t;
typedef twi_options_t twi_master_options_t;

static inline int twi_master_setup(twi_master_t twi, twi_master_options_t *opt)
{
	opt->speed_reg = TWI_BAUD(sysclk_get_cpu_hz(),opt->speed);
    5e94:	8b e3       	ldi	r24, 0x3B	; 59
    5e96:	91 e0       	ldi	r25, 0x01	; 1
    5e98:	a0 e0       	ldi	r26, 0x00	; 0
    5e9a:	b0 e0       	ldi	r27, 0x00	; 0
    5e9c:	80 93 6b 2b 	sts	0x2B6B, r24
    5ea0:	90 93 6c 2b 	sts	0x2B6C, r25
    5ea4:	a0 93 6d 2b 	sts	0x2B6D, r26
    5ea8:	b0 93 6e 2b 	sts	0x2B6E, r27
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    5eac:	60 e4       	ldi	r22, 0x40	; 64
    5eae:	83 e0       	ldi	r24, 0x03	; 3
    5eb0:	90 e0       	ldi	r25, 0x00	; 0
    5eb2:	0e 94 71 14 	call	0x28e2	; 0x28e2 <sysclk_enable_module>

	sysclk_enable_peripheral_clock(twi);

	return twi_master_init(twi,opt);
    5eb6:	67 e6       	ldi	r22, 0x67	; 103
    5eb8:	7b e2       	ldi	r23, 0x2B	; 43
    5eba:	80 e8       	ldi	r24, 0x80	; 128
    5ebc:	94 e0       	ldi	r25, 0x04	; 4
    5ebe:	0e 94 1e 1c 	call	0x383c	; 0x383c <twi_master_init>
    twi_master_setup (TWI_IESM, &opt);
    ow_count = 0;
    5ec2:	10 92 84 2d 	sts	0x2D84, r1
    ds18b20_init ();
    5ec6:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <ds18b20_init>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    5eca:	a0 e2       	ldi	r26, 0x20	; 32
    5ecc:	b6 e0       	ldi	r27, 0x06	; 6
    5ece:	98 e0       	ldi	r25, 0x08	; 8
    5ed0:	15 96       	adiw	r26, 0x05	; 5
    5ed2:	9c 93       	st	X, r25
    5ed4:	15 97       	sbiw	r26, 0x05	; 5
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    5ed6:	e0 e0       	ldi	r30, 0x00	; 0
    5ed8:	f6 e0       	ldi	r31, 0x06	; 6
    5eda:	80 e2       	ldi	r24, 0x20	; 32
    5edc:	86 83       	std	Z+6, r24	; 0x06
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    5ede:	15 96       	adiw	r26, 0x05	; 5
    5ee0:	9c 93       	st	X, r25
    5ee2:	85 83       	std	Z+5, r24	; 0x05
    5ee4:	0f 2e       	mov	r0, r31
    5ee6:	ff e0       	ldi	r31, 0x0F	; 15
    5ee8:	df 2e       	mov	r13, r31
    5eea:	f0 2d       	mov	r31, r0

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	base->OUTTGL = arch_ioport_pin_to_mask(pin);
    5eec:	0f 2e       	mov	r0, r31
    5eee:	f0 e2       	ldi	r31, 0x20	; 32
    5ef0:	ef 2e       	mov	r14, r31
    5ef2:	f6 e0       	ldi	r31, 0x06	; 6
    5ef4:	ff 2e       	mov	r15, r31
    5ef6:	f0 2d       	mov	r31, r0
    5ef8:	68 94       	set
    5efa:	bb 24       	eor	r11, r11
    5efc:	b3 f8       	bld	r11, 3
    5efe:	00 e0       	ldi	r16, 0x00	; 0
    5f00:	16 e0       	ldi	r17, 0x06	; 6
    5f02:	68 94       	set
    5f04:	cc 24       	eor	r12, r12
    5f06:	c5 f8       	bld	r12, 5
    ioport_set_pin_high (GPIO_LED1);
    ioport_set_pin_low (GPIO_LED2);
    ioport_set_pin_high (GPIO_LED1);
    ioport_set_pin_high (GPIO_LED2);
    for (uint8_t i = 0; i < 15; i++) {
        timeout_start_singleshot (TIMEOUT_ALL_PAUSE, TIMEOUT_TICK_HZ);
    5f08:	68 e0       	ldi	r22, 0x08	; 8
    5f0a:	70 e0       	ldi	r23, 0x00	; 0
    5f0c:	80 e0       	ldi	r24, 0x00	; 0
    5f0e:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <timeout_start_singleshot>
        while (!timeout_test_and_clear_expired (TIMEOUT_ALL_PAUSE)) {
    5f12:	80 e0       	ldi	r24, 0x00	; 0
    5f14:	0e 94 78 1f 	call	0x3ef0	; 0x3ef0 <timeout_test_and_clear_expired>
    5f18:	88 23       	and	r24, r24
    5f1a:	d9 f3       	breq	.-10     	; 0x5f12 <main+0x5b2>
    5f1c:	d7 01       	movw	r26, r14
    5f1e:	17 96       	adiw	r26, 0x07	; 7
    5f20:	bc 92       	st	X, r11
    5f22:	f8 01       	movw	r30, r16
    5f24:	c7 82       	std	Z+7, r12	; 0x07
    5f26:	da 94       	dec	r13

    ioport_set_pin_high (GPIO_LED1);
    ioport_set_pin_low (GPIO_LED2);
    ioport_set_pin_high (GPIO_LED1);
    ioport_set_pin_high (GPIO_LED2);
    for (uint8_t i = 0; i < 15; i++) {
    5f28:	79 f7       	brne	.-34     	; 0x5f08 <main+0x5a8>
        }
        ioport_toggle_pin (GPIO_LED1);
        ioport_toggle_pin (GPIO_LED2);
    }

    if (!awt_init (reset_avr, modem_reset_handler, modem_up_handler, command_handler,
    5f2a:	07 ef       	ldi	r16, 0xF7	; 247
    5f2c:	15 e2       	ldi	r17, 0x25	; 37
    5f2e:	25 e3       	ldi	r18, 0x35	; 53
    5f30:	3a e2       	ldi	r19, 0x2A	; 42
    5f32:	4e e2       	ldi	r20, 0x2E	; 46
    5f34:	50 e2       	ldi	r21, 0x20	; 32
    5f36:	61 e3       	ldi	r22, 0x31	; 49
    5f38:	70 e2       	ldi	r23, 0x20	; 32
    5f3a:	8c e2       	ldi	r24, 0x2C	; 44
    5f3c:	9a e2       	ldi	r25, 0x2A	; 42
    5f3e:	0e 94 05 0c 	call	0x180a	; 0x180a <awt_init>
    5f42:	81 11       	cpse	r24, r1
    5f44:	16 c0       	rjmp	.+44     	; 0x5f72 <main+0x612>
                   data_handler)) {
        uint16_t count_down = 5000 / TIMEOUT_TICK_PERIOD_MS;
        awt_reset_modem (NULL, __LINE__);
    5f46:	6c ef       	ldi	r22, 0xFC	; 252
    5f48:	75 e0       	ldi	r23, 0x05	; 5
    5f4a:	80 e0       	ldi	r24, 0x00	; 0
    5f4c:	90 e0       	ldi	r25, 0x00	; 0
    5f4e:	0e 94 53 09 	call	0x12a6	; 0x12a6 <awt_reset_modem>
        timeout_start_periodic (0, 1);
    5f52:	61 e0       	ldi	r22, 0x01	; 1
    5f54:	70 e0       	ldi	r23, 0x00	; 0
    5f56:	80 e0       	ldi	r24, 0x00	; 0
    5f58:	0e 94 76 1f 	call	0x3eec	; 0x3eec <timeout_start_periodic>
        ioport_toggle_pin (GPIO_LED2);
    }

    if (!awt_init (reset_avr, modem_reset_handler, modem_up_handler, command_handler,
                   data_handler)) {
        uint16_t count_down = 5000 / TIMEOUT_TICK_PERIOD_MS;
    5f5c:	08 e2       	ldi	r16, 0x28	; 40
    5f5e:	10 e0       	ldi	r17, 0x00	; 0
        awt_reset_modem (NULL, __LINE__);
        timeout_start_periodic (0, 1);
        for (;;) {
            if (timeout_test_and_clear_expired (0)) {
    5f60:	80 e0       	ldi	r24, 0x00	; 0
    5f62:	0e 94 78 1f 	call	0x3ef0	; 0x3ef0 <timeout_test_and_clear_expired>
    5f66:	88 23       	and	r24, r24
    5f68:	d9 f3       	breq	.-10     	; 0x5f60 <main+0x600>
                if (--count_down == 0) {
    5f6a:	01 50       	subi	r16, 0x01	; 1
    5f6c:	11 09       	sbc	r17, r1
    5f6e:	c1 f7       	brne	.-16     	; 0x5f60 <main+0x600>
                    reset_avr ();
    5f70:	73 da       	rcall	.-2842   	; 0x5458 <reset_avr>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    5f72:	88 e0       	ldi	r24, 0x08	; 8
    5f74:	e0 e2       	ldi	r30, 0x20	; 32
    5f76:	f6 e0       	ldi	r31, 0x06	; 6
    5f78:	86 83       	std	Z+6, r24	; 0x06
    5f7a:	80 e2       	ldi	r24, 0x20	; 32
    5f7c:	e0 e0       	ldi	r30, 0x00	; 0
    5f7e:	f6 e0       	ldi	r31, 0x06	; 6
    5f80:	86 83       	std	Z+6, r24	; 0x06
    }

    ioport_set_pin_low (GPIO_LED1);
    ioport_set_pin_low (GPIO_LED2);

    timeout_start_periodic (TIMEOUT_MAIN_CHECK_REPORT_HOME_10_SEC_TIMER,
    5f82:	60 e5       	ldi	r22, 0x50	; 80
    5f84:	70 e0       	ldi	r23, 0x00	; 0
    5f86:	84 e0       	ldi	r24, 0x04	; 4
    5f88:	0e 94 76 1f 	call	0x3eec	; 0x3eec <timeout_start_periodic>
                            TIMEOUT_TICK_HZ * 10);
    timeout_start_periodic (TIMEOUT_MAIN_UPDATE_SENSORS_2_SEC_TIMER,
    5f8c:	60 e1       	ldi	r22, 0x10	; 16
    5f8e:	70 e0       	ldi	r23, 0x00	; 0
    5f90:	87 e0       	ldi	r24, 0x07	; 7
    5f92:	0e 94 76 1f 	call	0x3eec	; 0x3eec <timeout_start_periodic>
                            TIMEOUT_TICK_HZ * 2);
    timeout_start_periodic (TIMEOUT_MAIN_COMMS_INACTIVE_10_SEC_TIMER,
    5f96:	60 e5       	ldi	r22, 0x50	; 80
    5f98:	70 e0       	ldi	r23, 0x00	; 0
    5f9a:	86 e0       	ldi	r24, 0x06	; 6
    5f9c:	0e 94 76 1f 	call	0x3eec	; 0x3eec <timeout_start_periodic>
                            TIMEOUT_TICK_HZ * 10);
    timeout_start_periodic (TIMEOUT_MAIN_EEPROM_SAVE_TIMER,
    5fa0:	60 e8       	ldi	r22, 0x80	; 128
    5fa2:	70 e7       	ldi	r23, 0x70	; 112
    5fa4:	85 e0       	ldi	r24, 0x05	; 5
    5fa6:	0e 94 76 1f 	call	0x3eec	; 0x3eec <timeout_start_periodic>
                            TIMEOUT_TICK_HZ * 60U * 60U);

    // send a status message as soon as possible.
    state.modem.secs_since_last_report_home = config.report_home_period_secs;
    5faa:	80 91 71 2b 	lds	r24, 0x2B71
    5fae:	90 91 72 2b 	lds	r25, 0x2B72
    5fb2:	80 93 af 28 	sts	0x28AF, r24
    5fb6:	90 93 b0 28 	sts	0x28B0, r25
static void send_event_message (void)
{
    char s[20];
    awt_event_t event;
    event_t* pevent = & (state.event_buffer.buffer[state.event_buffer.front]);
    event.timestamp = pevent->timestamp;
    5fba:	2e 01       	movw	r4, r28
    5fbc:	f9 e6       	ldi	r31, 0x69	; 105
    5fbe:	4f 0e       	add	r4, r31
    5fc0:	51 1c       	adc	r5, r1

    // send a status message as soon as possible.
    state.modem.secs_since_last_report_home = config.report_home_period_secs;

    for (;;) {
        if (timeout_test_and_clear_expired (TIMEOUT_MAIN_EEPROM_SAVE_TIMER)) {
    5fc2:	85 e0       	ldi	r24, 0x05	; 5
    5fc4:	0e 94 78 1f 	call	0x3ef0	; 0x3ef0 <timeout_test_and_clear_expired>
    5fc8:	88 23       	and	r24, r24
    5fca:	21 f0       	breq	.+8      	; 0x5fd4 <main+0x674>
            eeprom_write_pulse_counters ();
    5fcc:	0e 94 75 21 	call	0x42ea	; 0x42ea <eeprom_write_pulse_counters>
            eeprom_read_pulse_counters ();
    5fd0:	0e 94 e2 20 	call	0x41c4	; 0x41c4 <eeprom_read_pulse_counters>
        }

        update_asset_state ();
    5fd4:	0e 94 61 22 	call	0x44c2	; 0x44c2 <update_asset_state>

        if (local_midnight) {
    5fd8:	80 91 a0 26 	lds	r24, 0x26A0
    5fdc:	88 23       	and	r24, r24
    5fde:	b1 f0       	breq	.+44     	; 0x600c <main+0x6ac>
            local_midnight = false;
    5fe0:	10 92 a0 26 	sts	0x26A0, r1
            set_midnight_pulse_counter (0, get_current_pulse_counter (0));
    5fe4:	80 e0       	ldi	r24, 0x00	; 0
    5fe6:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <get_current_pulse_counter>
    5fea:	ab 01       	movw	r20, r22
    5fec:	bc 01       	movw	r22, r24
    5fee:	80 e0       	ldi	r24, 0x00	; 0
    5ff0:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <set_midnight_pulse_counter>
            set_midnight_pulse_counter (1, get_current_pulse_counter (1));
    5ff4:	81 e0       	ldi	r24, 0x01	; 1
    5ff6:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <get_current_pulse_counter>
    5ffa:	ab 01       	movw	r20, r22
    5ffc:	bc 01       	movw	r22, r24
    5ffe:	81 e0       	ldi	r24, 0x01	; 1
    6000:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <set_midnight_pulse_counter>
            eeprom_write_pulse_counters ();
    6004:	0e 94 75 21 	call	0x42ea	; 0x42ea <eeprom_write_pulse_counters>
            eeprom_read_pulse_counters ();
    6008:	0e 94 e2 20 	call	0x41c4	; 0x41c4 <eeprom_read_pulse_counters>
        }

        //secs_since_last_report_home increments in 10 second steps
        if (timeout_test_and_clear_expired (TIMEOUT_MAIN_CHECK_REPORT_HOME_10_SEC_TIMER)) {
    600c:	84 e0       	ldi	r24, 0x04	; 4
    600e:	0e 94 78 1f 	call	0x3ef0	; 0x3ef0 <timeout_test_and_clear_expired>
    6012:	88 23       	and	r24, r24
    6014:	71 f0       	breq	.+28     	; 0x6032 <main+0x6d2>
            // only increment if time is not going to wrap
            if (state.modem.secs_since_last_report_home + 10 > state.modem.secs_since_last_report_home) {
    6016:	80 91 af 28 	lds	r24, 0x28AF
    601a:	90 91 b0 28 	lds	r25, 0x28B0
    601e:	9c 01       	movw	r18, r24
    6020:	26 5f       	subi	r18, 0xF6	; 246
    6022:	3f 4f       	sbci	r19, 0xFF	; 255
    6024:	82 17       	cp	r24, r18
    6026:	93 07       	cpc	r25, r19
    6028:	20 f4       	brcc	.+8      	; 0x6032 <main+0x6d2>
                state.modem.secs_since_last_report_home += 10;
    602a:	20 93 af 28 	sts	0x28AF, r18
    602e:	30 93 b0 28 	sts	0x28B0, r19
            }
        }

        // keep the awt service happy
        awt_service (update_asset_state);
    6032:	81 e6       	ldi	r24, 0x61	; 97
    6034:	92 e2       	ldi	r25, 0x22	; 34
    6036:	0e 94 19 0a 	call	0x1432	; 0x1432 <awt_service>

        // update inactive timer.
        //   - reset if no message was sent successfully within the previous 3 report home periods.
        if (timeout_test_and_clear_expired (TIMEOUT_MAIN_COMMS_INACTIVE_10_SEC_TIMER)) {
    603a:	86 e0       	ldi	r24, 0x06	; 6
    603c:	0e 94 78 1f 	call	0x3ef0	; 0x3ef0 <timeout_test_and_clear_expired>
    6040:	88 23       	and	r24, r24
    6042:	c9 f0       	breq	.+50     	; 0x6076 <main+0x716>
            // gets reset every time a awt packet is delivered successfully or modem reset successfully
            state.modem.secs_network_inactive += 10;
    6044:	ed ea       	ldi	r30, 0xAD	; 173
    6046:	f8 e2       	ldi	r31, 0x28	; 40
    6048:	80 81       	ld	r24, Z
    604a:	91 81       	ldd	r25, Z+1	; 0x01
    604c:	0a 96       	adiw	r24, 0x0a	; 10
    604e:	80 83       	st	Z, r24
    6050:	91 83       	std	Z+1, r25	; 0x01
            if (state.modem.secs_network_inactive >= SECS_NETWORK_INACTIVE_TRIGGER) {
    6052:	20 91 71 2b 	lds	r18, 0x2B71
    6056:	30 91 72 2b 	lds	r19, 0x2B72
    605a:	a9 01       	movw	r20, r18
    605c:	44 0f       	add	r20, r20
    605e:	55 1f       	adc	r21, r21
    6060:	24 0f       	add	r18, r20
    6062:	35 1f       	adc	r19, r21
    6064:	82 17       	cp	r24, r18
    6066:	93 07       	cpc	r25, r19
    6068:	30 f0       	brcs	.+12     	; 0x6076 <main+0x716>
                // see callback procedure --> modem_reset_handler()
                awt_reset_modem (update_asset_state, __LINE__);
    606a:	68 e3       	ldi	r22, 0x38	; 56
    606c:	76 e0       	ldi	r23, 0x06	; 6
    606e:	81 e6       	ldi	r24, 0x61	; 97
    6070:	92 e2       	ldi	r25, 0x22	; 34
    6072:	0e 94 53 09 	call	0x12a6	; 0x12a6 <awt_reset_modem>
        }

        //ioport_toggle_pin(GPIO_EXT_OP3);


        if (timeout_test_and_clear_expired (TIMEOUT_MAIN_UPDATE_SENSORS_2_SEC_TIMER)) {
    6076:	87 e0       	ldi	r24, 0x07	; 7
    6078:	0e 94 78 1f 	call	0x3ef0	; 0x3ef0 <timeout_test_and_clear_expired>
    607c:	88 23       	and	r24, r24
    607e:	09 f4       	brne	.+2      	; 0x6082 <main+0x722>
    6080:	a1 c0       	rjmp	.+322    	; 0x61c4 <main+0x864>
            //ioport_toggle_pin(GPIO_EXT_OP3);
            if (ow_count != 3) {
    6082:	80 91 84 2d 	lds	r24, 0x2D84
    6086:	83 30       	cpi	r24, 0x03	; 3
    6088:	09 f4       	brne	.+2      	; 0x608c <main+0x72c>
    608a:	7c c0       	rjmp	.+248    	; 0x6184 <main+0x824>
                DEBUG_putcrlf ("*** DETECT SENSORS");
    608c:	86 eb       	ldi	r24, 0xB6	; 182
    608e:	92 e2       	ldi	r25, 0x22	; 34
    6090:	0e 94 52 13 	call	0x26a4	; 0x26a4 <DEBUG_putcrlf>
                ow_detect_sensors ();
    6094:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <ow_detect_sensors>
    DEBUG_putcrlf ("ERROR ROM");
}

static void config_update_detected_sensors (void)
{
    for (uint8_t i = 0; i < ow_count; i++) {
    6098:	80 91 84 2d 	lds	r24, 0x2D84
    609c:	81 11       	cpse	r24, r1
    609e:	48 c0       	rjmp	.+144    	; 0x6130 <main+0x7d0>
    60a0:	91 c0       	rjmp	.+290    	; 0x61c4 <main+0x864>
    60a2:	20 2e       	mov	r2, r16
        uint8_t k;
        for (k = 0; k < 3; k++) {
            if (config.rom[k].valid
    60a4:	d7 01       	movw	r26, r14
    60a6:	8c 91       	ld	r24, X
    60a8:	88 23       	and	r24, r24
    60aa:	99 f0       	breq	.+38     	; 0x60d2 <main+0x772>
                    && memcmp (ow_rom_codes[i], config.rom[k].code, 8) == 0) {
    60ac:	b8 01       	movw	r22, r16
    60ae:	66 0f       	add	r22, r22
    60b0:	77 1f       	adc	r23, r23
    60b2:	66 0f       	add	r22, r22
    60b4:	77 1f       	adc	r23, r23
    60b6:	66 0f       	add	r22, r22
    60b8:	77 1f       	adc	r23, r23
    60ba:	60 0f       	add	r22, r16
    60bc:	71 1f       	adc	r23, r17
    60be:	6c 58       	subi	r22, 0x8C	; 140
    60c0:	74 4d       	sbci	r23, 0xD4	; 212
    60c2:	48 e0       	ldi	r20, 0x08	; 8
    60c4:	50 e0       	ldi	r21, 0x00	; 0
    60c6:	c6 01       	movw	r24, r12
    60c8:	44 d6       	rcall	.+3208   	; 0x6d52 <memcmp>
    60ca:	28 2f       	mov	r18, r24
    60cc:	39 2f       	mov	r19, r25
    60ce:	23 2b       	or	r18, r19
    60d0:	49 f0       	breq	.+18     	; 0x60e4 <main+0x784>
ISR (PORTA_INT0_vect)   // GPIO_COUNT4
{
    PORTA.INTFLAGS = 0x01;
}

int main (void)
    60d2:	23 94       	inc	r2
    60d4:	0f 5f       	subi	r16, 0xFF	; 255
    60d6:	1f 4f       	sbci	r17, 0xFF	; 255
    60d8:	b9 e0       	ldi	r27, 0x09	; 9
    60da:	eb 0e       	add	r14, r27
    60dc:	f1 1c       	adc	r15, r1

static void config_update_detected_sensors (void)
{
    for (uint8_t i = 0; i < ow_count; i++) {
        uint8_t k;
        for (k = 0; k < 3; k++) {
    60de:	03 30       	cpi	r16, 0x03	; 3
    60e0:	11 05       	cpc	r17, r1
    60e2:	f9 f6       	brne	.-66     	; 0x60a2 <main+0x742>
            if (config.rom[k].valid
                    && memcmp (ow_rom_codes[i], config.rom[k].code, 8) == 0) {
                break;
            }
        }
        if (k == 3) {
    60e4:	e3 e0       	ldi	r30, 0x03	; 3
    60e6:	2e 12       	cpse	r2, r30
    60e8:	1d c0       	rjmp	.+58     	; 0x6124 <main+0x7c4>
            config_add_rom_code (ow_rom_codes[i], ow_rom_codes_str[i]);
    60ea:	83 2d       	mov	r24, r3
    60ec:	90 e0       	ldi	r25, 0x00	; 0
    60ee:	f1 e1       	ldi	r31, 0x11	; 17
    60f0:	f8 9f       	mul	r31, r24
    60f2:	80 01       	movw	r16, r0
    60f4:	f9 9f       	mul	r31, r25
    60f6:	10 0d       	add	r17, r0
    60f8:	11 24       	eor	r1, r1
    60fa:	0c 50       	subi	r16, 0x0C	; 12
    60fc:	14 4d       	sbci	r17, 0xD4	; 212


static void config_add_rom_code (uint8_t* rom_code, const char* rom_code_str)
{
    for (uint8_t k = 0; k < 3; k++) {
        if (!config.rom[k].valid) {
    60fe:	d5 01       	movw	r26, r10
    6100:	2c 91       	ld	r18, X
    6102:	22 23       	and	r18, r18
    6104:	09 f4       	brne	.+2      	; 0x6108 <main+0x7a8>
    6106:	59 c4       	rjmp	.+2226   	; 0x69ba <main+0x105a>
    6108:	f4 01       	movw	r30, r8
    610a:	20 81       	ld	r18, Z
    610c:	22 23       	and	r18, r18
    610e:	09 f4       	brne	.+2      	; 0x6112 <main+0x7b2>
    6110:	90 c4       	rjmp	.+2336   	; 0x6a32 <main+0x10d2>
    6112:	d3 01       	movw	r26, r6
    6114:	2c 91       	ld	r18, X
    6116:	22 23       	and	r18, r18
    6118:	09 f4       	brne	.+2      	; 0x611c <main+0x7bc>
    611a:	6d c4       	rjmp	.+2266   	; 0x69f6 <main+0x1096>
                break;
            }
            return;
        }
    }
    DEBUG_putcrlf ("ERROR ROM");
    611c:	89 ec       	ldi	r24, 0xC9	; 201
    611e:	92 e2       	ldi	r25, 0x22	; 34
    6120:	0e 94 52 13 	call	0x26a4	; 0x26a4 <DEBUG_putcrlf>
}

static void config_update_detected_sensors (void)
{
    for (uint8_t i = 0; i < ow_count; i++) {
    6124:	33 94       	inc	r3
    6126:	80 91 84 2d 	lds	r24, 0x2D84
    612a:	38 16       	cp	r3, r24
    612c:	a0 f0       	brcs	.+40     	; 0x6156 <main+0x7f6>
    612e:	28 c0       	rjmp	.+80     	; 0x6180 <main+0x820>
    6130:	31 2c       	mov	r3, r1
    6132:	0f 2e       	mov	r0, r31
    6134:	f3 e7       	ldi	r31, 0x73	; 115
    6136:	af 2e       	mov	r10, r31
    6138:	fb e2       	ldi	r31, 0x2B	; 43
    613a:	bf 2e       	mov	r11, r31
    613c:	f0 2d       	mov	r31, r0


static void config_add_rom_code (uint8_t* rom_code, const char* rom_code_str)
{
    for (uint8_t k = 0; k < 3; k++) {
        if (!config.rom[k].valid) {
    613e:	0f 2e       	mov	r0, r31
    6140:	fc e7       	ldi	r31, 0x7C	; 124
    6142:	8f 2e       	mov	r8, r31
    6144:	fb e2       	ldi	r31, 0x2B	; 43
    6146:	9f 2e       	mov	r9, r31
    6148:	f0 2d       	mov	r31, r0
    614a:	0f 2e       	mov	r0, r31
    614c:	f5 e8       	ldi	r31, 0x85	; 133
    614e:	6f 2e       	mov	r6, r31
    6150:	fb e2       	ldi	r31, 0x2B	; 43
    6152:	7f 2e       	mov	r7, r31
    6154:	f0 2d       	mov	r31, r0
    6156:	75 01       	movw	r14, r10
        ioport_toggle_pin (GPIO_LED2);
    }

    if (!awt_init (reset_avr, modem_reset_handler, modem_up_handler, command_handler,
                   data_handler)) {
        uint16_t count_down = 5000 / TIMEOUT_TICK_PERIOD_MS;
    6158:	00 e0       	ldi	r16, 0x00	; 0
    615a:	10 e0       	ldi	r17, 0x00	; 0
{
    for (uint8_t i = 0; i < ow_count; i++) {
        uint8_t k;
        for (k = 0; k < 3; k++) {
            if (config.rom[k].valid
                    && memcmp (ow_rom_codes[i], config.rom[k].code, 8) == 0) {
    615c:	c3 2c       	mov	r12, r3
    615e:	d1 2c       	mov	r13, r1
    6160:	c6 01       	movw	r24, r12
    6162:	88 0f       	add	r24, r24
    6164:	99 1f       	adc	r25, r25
    6166:	88 0f       	add	r24, r24
    6168:	99 1f       	adc	r25, r25
    616a:	88 0f       	add	r24, r24
    616c:	99 1f       	adc	r25, r25
    616e:	0f 2e       	mov	r0, r31
    6170:	f4 e0       	ldi	r31, 0x04	; 4
    6172:	cf 2e       	mov	r12, r31
    6174:	fd e2       	ldi	r31, 0x2D	; 45
    6176:	df 2e       	mov	r13, r31
    6178:	f0 2d       	mov	r31, r0
    617a:	c8 0e       	add	r12, r24
    617c:	d9 1e       	adc	r13, r25
    617e:	91 cf       	rjmp	.-222    	; 0x60a2 <main+0x742>
            if (ow_count != 3) {
                DEBUG_putcrlf ("*** DETECT SENSORS");
                ow_detect_sensors ();
                config_update_detected_sensors ();
            }
            if (ow_count) {
    6180:	88 23       	and	r24, r24
    6182:	01 f1       	breq	.+64     	; 0x61c4 <main+0x864>
                wdt_set_timeout_period (WDT_TIMEOUT_PERIOD_8KCLK);
    6184:	8a e0       	ldi	r24, 0x0A	; 10
    6186:	90 e0       	ldi	r25, 0x00	; 0
    6188:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <wdt_set_timeout_period>
                wdt_enable ();
    618c:	0e 94 e6 1e 	call	0x3dcc	; 0x3dcc <wdt_enable>
                ds18b20_update_sensors ();
    6190:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <ds18b20_update_sensors>
                wdt_disable ();
    6194:	0e 94 de 1e 	call	0x3dbc	; 0x3dbc <wdt_disable>
                DEBUG_puts ("***** ");
    6198:	83 ed       	ldi	r24, 0xD3	; 211
    619a:	92 e2       	ldi	r25, 0x22	; 34
    619c:	0e 94 44 13 	call	0x2688	; 0x2688 <DEBUG_puts>
                DEBUG_putu (get_current_pulse_counter (0));
    61a0:	80 e0       	ldi	r24, 0x00	; 0
    61a2:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <get_current_pulse_counter>
    61a6:	0e 94 58 13 	call	0x26b0	; 0x26b0 <DEBUG_putu>
                DEBUG_puts (" ");
    61aa:	88 ed       	ldi	r24, 0xD8	; 216
    61ac:	92 e2       	ldi	r25, 0x22	; 34
    61ae:	0e 94 44 13 	call	0x2688	; 0x2688 <DEBUG_puts>
                DEBUG_putu (get_current_pulse_counter (1));
    61b2:	81 e0       	ldi	r24, 0x01	; 1
    61b4:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <get_current_pulse_counter>
    61b8:	0e 94 58 13 	call	0x26b0	; 0x26b0 <DEBUG_putu>
                DEBUG_putcrlf (" *****");
    61bc:	8a ed       	ldi	r24, 0xDA	; 218
    61be:	92 e2       	ldi	r25, 0x22	; 34
    61c0:	0e 94 52 13 	call	0x26a4	; 0x26a4 <DEBUG_putcrlf>
            }
        }

        // if modem is connected check for any messages to send.
        if (state.modem.up && !state.modem.busy) {
    61c4:	80 91 a7 28 	lds	r24, 0x28A7
    61c8:	88 23       	and	r24, r24
    61ca:	09 f4       	brne	.+2      	; 0x61ce <main+0x86e>
    61cc:	fa ce       	rjmp	.-524    	; 0x5fc2 <main+0x662>
    61ce:	80 91 a8 28 	lds	r24, 0x28A8
    61d2:	81 11       	cpse	r24, r1
    61d4:	f6 ce       	rjmp	.-532    	; 0x5fc2 <main+0x662>
            if (state.modem.send_id) {
    61d6:	80 91 a9 28 	lds	r24, 0x28A9
    61da:	88 23       	and	r24, r24
    61dc:	61 f1       	breq	.+88     	; 0x6236 <main+0x8d6>
    }
}

static void send_id_message (void)
{
    awt_var_t var[] = {
    61de:	9e 01       	movw	r18, r28
    61e0:	2f 5f       	subi	r18, 0xFF	; 255
    61e2:	3f 4f       	sbci	r19, 0xFF	; 255
    61e4:	80 e1       	ldi	r24, 0x10	; 16
    61e6:	f9 01       	movw	r30, r18
    61e8:	11 92       	st	Z+, r1
    61ea:	8a 95       	dec	r24
    61ec:	e9 f7       	brne	.-6      	; 0x61e8 <main+0x888>
    61ee:	81 ee       	ldi	r24, 0xE1	; 225
    61f0:	92 e2       	ldi	r25, 0x22	; 34
    61f2:	89 83       	std	Y+1, r24	; 0x01
    61f4:	9a 83       	std	Y+2, r25	; 0x02
    61f6:	81 e0       	ldi	r24, 0x01	; 1
    61f8:	90 e0       	ldi	r25, 0x00	; 0
    61fa:	8b 83       	std	Y+3, r24	; 0x03
    61fc:	9c 83       	std	Y+4, r25	; 0x04
    61fe:	85 ee       	ldi	r24, 0xE5	; 229
    6200:	92 e2       	ldi	r25, 0x22	; 34
    6202:	8d 83       	std	Y+5, r24	; 0x05
    6204:	9e 83       	std	Y+6, r25	; 0x06
    6206:	83 ef       	ldi	r24, 0xF3	; 243
    6208:	92 e2       	ldi	r25, 0x22	; 34
    620a:	89 87       	std	Y+9, r24	; 0x09
    620c:	9a 87       	std	Y+10, r25	; 0x0a
    620e:	80 91 a6 28 	lds	r24, 0x28A6
    6212:	90 e0       	ldi	r25, 0x00	; 0
    6214:	a0 e0       	ldi	r26, 0x00	; 0
    6216:	b0 e0       	ldi	r27, 0x00	; 0
    6218:	8d 87       	std	Y+13, r24	; 0x0d
    621a:	9e 87       	std	Y+14, r25	; 0x0e
    621c:	af 87       	std	Y+15, r26	; 0x0f
    621e:	b8 8b       	std	Y+16, r27	; 0x10
        {.name = STATUS_FIRMWARE_TAG, .type = AWT_STR, .val.s = STATUS_FIRMWARE_VERSION_STR},
        {.name = STATUS_RESET_REASON_TAG, .type = AWT_INT32, .val.i = state.reset_reason}
    };
    state.modem.busy = true;
    6220:	81 e0       	ldi	r24, 0x01	; 1
    6222:	80 93 a8 28 	sts	0x28A8, r24
    awt_dispatch_data_req (id_message_rsp, STATUS_PATH, sizeof var / sizeof var[0],
    6226:	42 e0       	ldi	r20, 0x02	; 2
    6228:	66 ef       	ldi	r22, 0xF6	; 246
    622a:	72 e2       	ldi	r23, 0x22	; 34
    622c:	86 ea       	ldi	r24, 0xA6	; 166
    622e:	90 e2       	ldi	r25, 0x20	; 32
    6230:	0e 94 8a 07 	call	0xf14	; 0xf14 <awt_dispatch_data_req>
    6234:	c6 ce       	rjmp	.-628    	; 0x5fc2 <main+0x662>

        // if modem is connected check for any messages to send.
        if (state.modem.up && !state.modem.busy) {
            if (state.modem.send_id) {
                send_id_message ();
            } else if (state.modem.send_rom_config) {
    6236:	80 91 ac 28 	lds	r24, 0x28AC
    623a:	88 23       	and	r24, r24
    623c:	09 f4       	brne	.+2      	; 0x6240 <main+0x8e0>
    623e:	78 c0       	rjmp	.+240    	; 0x6330 <main+0x9d0>
}

static void send_rom_config_message (void)
{
    char code[3][17];
    awt_var_t var[] = {
    6240:	88 e1       	ldi	r24, 0x18	; 24
    6242:	d2 01       	movw	r26, r4
    6244:	1d 92       	st	X+, r1
    6246:	8a 95       	dec	r24
    6248:	e9 f7       	brne	.-6      	; 0x6244 <main+0x8e4>
    624a:	85 e0       	ldi	r24, 0x05	; 5
    624c:	93 e2       	ldi	r25, 0x23	; 35
    624e:	f2 01       	movw	r30, r4
    6250:	80 83       	st	Z, r24
    6252:	91 83       	std	Z+1, r25	; 0x01
    6254:	81 e0       	ldi	r24, 0x01	; 1
    6256:	90 e0       	ldi	r25, 0x00	; 0
    6258:	82 83       	std	Z+2, r24	; 0x02
    625a:	93 83       	std	Z+3, r25	; 0x03
    625c:	9e 01       	movw	r18, r28
    625e:	2f 5f       	subi	r18, 0xFF	; 255
    6260:	3f 4f       	sbci	r19, 0xFF	; 255
    6262:	24 83       	std	Z+4, r18	; 0x04
    6264:	35 83       	std	Z+5, r19	; 0x05
    6266:	29 e0       	ldi	r18, 0x09	; 9
    6268:	33 e2       	ldi	r19, 0x23	; 35
    626a:	20 87       	std	Z+8, r18	; 0x08
    626c:	31 87       	std	Z+9, r19	; 0x09
    626e:	82 87       	std	Z+10, r24	; 0x0a
    6270:	93 87       	std	Z+11, r25	; 0x0b
    6272:	9e 01       	movw	r18, r28
    6274:	2e 5e       	subi	r18, 0xEE	; 238
    6276:	3f 4f       	sbci	r19, 0xFF	; 255
    6278:	24 87       	std	Z+12, r18	; 0x0c
    627a:	35 87       	std	Z+13, r19	; 0x0d
    627c:	2d e0       	ldi	r18, 0x0D	; 13
    627e:	33 e2       	ldi	r19, 0x23	; 35
    6280:	20 8b       	std	Z+16, r18	; 0x10
    6282:	31 8b       	std	Z+17, r19	; 0x11
    6284:	82 8b       	std	Z+18, r24	; 0x12
    6286:	93 8b       	std	Z+19, r25	; 0x13
    6288:	ce 01       	movw	r24, r28
    628a:	83 96       	adiw	r24, 0x23	; 35
    628c:	84 8b       	std	Z+20, r24	; 0x14
    628e:	95 8b       	std	Z+21, r25	; 0x15
    6290:	60 e0       	ldi	r22, 0x00	; 0
    6292:	70 e0       	ldi	r23, 0x00	; 0
        {.name = CONFIG_TEMP1_CODE_TAG, .type = AWT_STR, .val.s = code[0]},
        {.name = CONFIG_TEMP2_CODE_TAG, .type = AWT_STR, .val.s = code[1]},
        {.name = CONFIG_TEMP3_CODE_TAG, .type = AWT_STR, .val.s = code[2]},
    };
    for (uint8_t i = 0; i < 3; i++) {
        char* pchar = code[i];
    6294:	0f 2e       	mov	r0, r31
    6296:	f1 e1       	ldi	r31, 0x11	; 17
    6298:	ff 2e       	mov	r15, r31
    629a:	f0 2d       	mov	r31, r0
    629c:	f6 9e       	mul	r15, r22
    629e:	80 01       	movw	r16, r0
    62a0:	f7 9e       	mul	r15, r23
    62a2:	10 0d       	add	r17, r0
    62a4:	11 24       	eor	r1, r1
    62a6:	21 e0       	ldi	r18, 0x01	; 1
    62a8:	30 e0       	ldi	r19, 0x00	; 0
    62aa:	2c 0f       	add	r18, r28
    62ac:	3d 1f       	adc	r19, r29
    62ae:	02 0f       	add	r16, r18
    62b0:	13 1f       	adc	r17, r19
ISR (PORTA_INT0_vect)   // GPIO_COUNT4
{
    PORTA.INTFLAGS = 0x01;
}

int main (void)
    62b2:	db 01       	movw	r26, r22
    62b4:	aa 0f       	add	r26, r26
    62b6:	bb 1f       	adc	r27, r27
    62b8:	aa 0f       	add	r26, r26
    62ba:	bb 1f       	adc	r27, r27
    62bc:	aa 0f       	add	r26, r26
    62be:	bb 1f       	adc	r27, r27
    62c0:	a6 0f       	add	r26, r22
    62c2:	b7 1f       	adc	r27, r23
    62c4:	0f 2e       	mov	r0, r31
    62c6:	f4 e7       	ldi	r31, 0x74	; 116
    62c8:	cf 2e       	mov	r12, r31
    62ca:	fb e2       	ldi	r31, 0x2B	; 43
    62cc:	df 2e       	mov	r13, r31
    62ce:	f0 2d       	mov	r31, r0
    62d0:	ca 0e       	add	r12, r26
    62d2:	db 1e       	adc	r13, r27
    62d4:	a8 01       	movw	r20, r16
    62d6:	40 5f       	subi	r20, 0xF0	; 240
    62d8:	5f 4f       	sbci	r21, 0xFF	; 255
        {.name = CONFIG_TEMP1_CODE_TAG, .type = AWT_STR, .val.s = code[0]},
        {.name = CONFIG_TEMP2_CODE_TAG, .type = AWT_STR, .val.s = code[1]},
        {.name = CONFIG_TEMP3_CODE_TAG, .type = AWT_STR, .val.s = code[2]},
    };
    for (uint8_t i = 0; i < 3; i++) {
        char* pchar = code[i];
    62da:	f8 01       	movw	r30, r16
        for (uint8_t j = 0; j < 8; j++) {
            *pchar++ = ram_hex[config.rom[i].code[j] / 16];
    62dc:	d6 01       	movw	r26, r12
    62de:	8d 91       	ld	r24, X+
    62e0:	6d 01       	movw	r12, r26
    62e2:	28 2f       	mov	r18, r24
    62e4:	22 95       	swap	r18
    62e6:	2f 70       	andi	r18, 0x0F	; 15
    62e8:	30 e0       	ldi	r19, 0x00	; 0
    62ea:	23 52       	subi	r18, 0x23	; 35
    62ec:	3e 4d       	sbci	r19, 0xDE	; 222
    62ee:	d9 01       	movw	r26, r18
    62f0:	9c 91       	ld	r25, X
    62f2:	90 83       	st	Z, r25
            *pchar++ = ram_hex[config.rom[i].code[j] % 16];
    62f4:	8f 70       	andi	r24, 0x0F	; 15
    62f6:	90 e0       	ldi	r25, 0x00	; 0
    62f8:	83 52       	subi	r24, 0x23	; 35
    62fa:	9e 4d       	sbci	r25, 0xDE	; 222
    62fc:	dc 01       	movw	r26, r24
    62fe:	8c 91       	ld	r24, X
    6300:	81 83       	std	Z+1, r24	; 0x01
ISR (PORTA_INT0_vect)   // GPIO_COUNT4
{
    PORTA.INTFLAGS = 0x01;
}

int main (void)
    6302:	32 96       	adiw	r30, 0x02	; 2
        {.name = CONFIG_TEMP2_CODE_TAG, .type = AWT_STR, .val.s = code[1]},
        {.name = CONFIG_TEMP3_CODE_TAG, .type = AWT_STR, .val.s = code[2]},
    };
    for (uint8_t i = 0; i < 3; i++) {
        char* pchar = code[i];
        for (uint8_t j = 0; j < 8; j++) {
    6304:	e4 17       	cp	r30, r20
    6306:	f5 07       	cpc	r31, r21
    6308:	49 f7       	brne	.-46     	; 0x62dc <main+0x97c>
            *pchar++ = ram_hex[config.rom[i].code[j] / 16];
            *pchar++ = ram_hex[config.rom[i].code[j] % 16];
        }
        *pchar = '\x00';
    630a:	f8 01       	movw	r30, r16
    630c:	10 8a       	std	Z+16, r1	; 0x10
    630e:	6f 5f       	subi	r22, 0xFF	; 255
    6310:	7f 4f       	sbci	r23, 0xFF	; 255
    awt_var_t var[] = {
        {.name = CONFIG_TEMP1_CODE_TAG, .type = AWT_STR, .val.s = code[0]},
        {.name = CONFIG_TEMP2_CODE_TAG, .type = AWT_STR, .val.s = code[1]},
        {.name = CONFIG_TEMP3_CODE_TAG, .type = AWT_STR, .val.s = code[2]},
    };
    for (uint8_t i = 0; i < 3; i++) {
    6312:	63 30       	cpi	r22, 0x03	; 3
    6314:	71 05       	cpc	r23, r1
    6316:	11 f6       	brne	.-124    	; 0x629c <main+0x93c>
            *pchar++ = ram_hex[config.rom[i].code[j] / 16];
            *pchar++ = ram_hex[config.rom[i].code[j] % 16];
        }
        *pchar = '\x00';
    }
    state.modem.busy = true;
    6318:	81 e0       	ldi	r24, 0x01	; 1
    631a:	80 93 a8 28 	sts	0x28A8, r24
    awt_dispatch_data_req (rom_config_message_rsp, CONFIG_PATH,
    631e:	92 01       	movw	r18, r4
    6320:	43 e0       	ldi	r20, 0x03	; 3
    6322:	61 ef       	ldi	r22, 0xF1	; 241
    6324:	71 e2       	ldi	r23, 0x21	; 33
    6326:	87 e9       	ldi	r24, 0x97	; 151
    6328:	90 e2       	ldi	r25, 0x20	; 32
    632a:	0e 94 8a 07 	call	0xf14	; 0xf14 <awt_dispatch_data_req>
    632e:	49 ce       	rjmp	.-878    	; 0x5fc2 <main+0x662>
        if (state.modem.up && !state.modem.busy) {
            if (state.modem.send_id) {
                send_id_message ();
            } else if (state.modem.send_rom_config) {
                send_rom_config_message ();
            } else if (state.modem.send_config1) {
    6330:	80 91 aa 28 	lds	r24, 0x28AA
    6334:	88 23       	and	r24, r24
    6336:	09 f4       	brne	.+2      	; 0x633a <main+0x9da>
    6338:	d9 c0       	rjmp	.+434    	; 0x64ec <main+0xb8c>
    }
}

static void send_config1_message (void)
{
    awt_var_t var[] = {
    633a:	fe 01       	movw	r30, r28
    633c:	31 96       	adiw	r30, 0x01	; 1
    633e:	80 e5       	ldi	r24, 0x50	; 80
    6340:	df 01       	movw	r26, r30
    6342:	1d 92       	st	X+, r1
    6344:	8a 95       	dec	r24
    6346:	e9 f7       	brne	.-6      	; 0x6342 <main+0x9e2>
    6348:	80 e0       	ldi	r24, 0x00	; 0
    634a:	92 e2       	ldi	r25, 0x22	; 34
    634c:	89 83       	std	Y+1, r24	; 0x01
    634e:	9a 83       	std	Y+2, r25	; 0x02
    6350:	80 91 71 2b 	lds	r24, 0x2B71
    6354:	90 91 72 2b 	lds	r25, 0x2B72
    6358:	a0 e0       	ldi	r26, 0x00	; 0
    635a:	b0 e0       	ldi	r27, 0x00	; 0
    635c:	8d 83       	std	Y+5, r24	; 0x05
    635e:	9e 83       	std	Y+6, r25	; 0x06
    6360:	af 83       	std	Y+7, r26	; 0x07
    6362:	b8 87       	std	Y+8, r27	; 0x08
    6364:	84 e0       	ldi	r24, 0x04	; 4
    6366:	92 e2       	ldi	r25, 0x22	; 34
    6368:	89 87       	std	Y+9, r24	; 0x09
    636a:	9a 87       	std	Y+10, r25	; 0x0a
        {.name = CONFIG_REPORT_HOME_PERIOD_TAG, .type = AWT_INT32, .val.i = config.report_home_period_secs},
        {.name = CONFIG_TEMP_DELTA_TRIGGER_TAG, .type = AWT_INT32, .val.i = (config.temp_delta_trigger_x16 / MODEL_TEMP_SCALE_FACTOR) },
    636c:	ee e8       	ldi	r30, 0x8E	; 142
    636e:	fb e2       	ldi	r31, 0x2B	; 43
    6370:	80 81       	ld	r24, Z
    6372:	91 81       	ldd	r25, Z+1	; 0x01
    6374:	99 23       	and	r25, r25
    6376:	0c f4       	brge	.+2      	; 0x637a <main+0xa1a>
    6378:	0f 96       	adiw	r24, 0x0f	; 15
    637a:	95 95       	asr	r25
    637c:	87 95       	ror	r24
    637e:	95 95       	asr	r25
    6380:	87 95       	ror	r24
    6382:	95 95       	asr	r25
    6384:	87 95       	ror	r24
    6386:	95 95       	asr	r25
    6388:	87 95       	ror	r24
    }
}

static void send_config1_message (void)
{
    awt_var_t var[] = {
    638a:	aa 27       	eor	r26, r26
    638c:	97 fd       	sbrc	r25, 7
    638e:	a0 95       	com	r26
    6390:	ba 2f       	mov	r27, r26
    6392:	8d 87       	std	Y+13, r24	; 0x0d
    6394:	9e 87       	std	Y+14, r25	; 0x0e
    6396:	af 87       	std	Y+15, r26	; 0x0f
    6398:	b8 8b       	std	Y+16, r27	; 0x10
    639a:	8c e0       	ldi	r24, 0x0C	; 12
    639c:	92 e2       	ldi	r25, 0x22	; 34
    639e:	89 8b       	std	Y+17, r24	; 0x11
    63a0:	9a 8b       	std	Y+18, r25	; 0x12
    63a2:	80 91 94 2b 	lds	r24, 0x2B94
    63a6:	90 91 95 2b 	lds	r25, 0x2B95
    63aa:	a0 91 96 2b 	lds	r26, 0x2B96
    63ae:	b0 91 97 2b 	lds	r27, 0x2B97
    63b2:	8d 8b       	std	Y+21, r24	; 0x15
    63b4:	9e 8b       	std	Y+22, r25	; 0x16
    63b6:	af 8b       	std	Y+23, r26	; 0x17
    63b8:	b8 8f       	std	Y+24, r27	; 0x18
    63ba:	81 e1       	ldi	r24, 0x11	; 17
    63bc:	92 e2       	ldi	r25, 0x22	; 34
    63be:	89 8f       	std	Y+25, r24	; 0x19
    63c0:	9a 8f       	std	Y+26, r25	; 0x1a
    63c2:	80 91 90 2b 	lds	r24, 0x2B90
    63c6:	90 91 91 2b 	lds	r25, 0x2B91
    63ca:	a0 91 92 2b 	lds	r26, 0x2B92
    63ce:	b0 91 93 2b 	lds	r27, 0x2B93
    63d2:	8d 8f       	std	Y+29, r24	; 0x1d
    63d4:	9e 8f       	std	Y+30, r25	; 0x1e
    63d6:	af 8f       	std	Y+31, r26	; 0x1f
    63d8:	b8 a3       	std	Y+32, r27	; 0x20
    63da:	88 e5       	ldi	r24, 0x58	; 88
    63dc:	92 e2       	ldi	r25, 0x22	; 34
    63de:	89 a3       	std	Y+33, r24	; 0x21
    63e0:	9a a3       	std	Y+34, r25	; 0x22
        {.name = CONFIG_REPORT_HOME_PERIOD_TAG, .type = AWT_INT32, .val.i = config.report_home_period_secs},
        {.name = CONFIG_TEMP_DELTA_TRIGGER_TAG, .type = AWT_INT32, .val.i = (config.temp_delta_trigger_x16 / MODEL_TEMP_SCALE_FACTOR) },
        {.name = CONFIG_ELEC_COUNTER_DELTA_TRIGGER_TAG, .type = AWT_INT32, .val.i = config.elec_delta_trigger},
        {.name = CONFIG_FLOW_COUNTER_DELTA_TRIGGER_TAG, .type = AWT_INT32, .val.i = config.flow_delta_trigger},
        {.name = CONFIG_CONTROL_TEMP_SP_TAG, .type = AWT_INT32, .val.i = (config.temp_sp_x16 / MODEL_TEMP_SCALE_FACTOR) },
    63e2:	e4 ea       	ldi	r30, 0xA4	; 164
    63e4:	fb e2       	ldi	r31, 0x2B	; 43
    63e6:	80 81       	ld	r24, Z
    63e8:	91 81       	ldd	r25, Z+1	; 0x01
    63ea:	99 23       	and	r25, r25
    63ec:	0c f4       	brge	.+2      	; 0x63f0 <main+0xa90>
    63ee:	0f 96       	adiw	r24, 0x0f	; 15
    63f0:	95 95       	asr	r25
    63f2:	87 95       	ror	r24
    63f4:	95 95       	asr	r25
    63f6:	87 95       	ror	r24
    63f8:	95 95       	asr	r25
    63fa:	87 95       	ror	r24
    63fc:	95 95       	asr	r25
    63fe:	87 95       	ror	r24
    }
}

static void send_config1_message (void)
{
    awt_var_t var[] = {
    6400:	aa 27       	eor	r26, r26
    6402:	97 fd       	sbrc	r25, 7
    6404:	a0 95       	com	r26
    6406:	ba 2f       	mov	r27, r26
    6408:	8d a3       	std	Y+37, r24	; 0x25
    640a:	9e a3       	std	Y+38, r25	; 0x26
    640c:	af a3       	std	Y+39, r26	; 0x27
    640e:	b8 a7       	std	Y+40, r27	; 0x28
    6410:	80 e6       	ldi	r24, 0x60	; 96
    6412:	92 e2       	ldi	r25, 0x22	; 34
    6414:	89 a7       	std	Y+41, r24	; 0x29
    6416:	9a a7       	std	Y+42, r25	; 0x2a
    6418:	80 91 a6 2b 	lds	r24, 0x2BA6
    641c:	90 91 a7 2b 	lds	r25, 0x2BA7
    6420:	a0 e0       	ldi	r26, 0x00	; 0
    6422:	b0 e0       	ldi	r27, 0x00	; 0
    6424:	8d a7       	std	Y+45, r24	; 0x2d
    6426:	9e a7       	std	Y+46, r25	; 0x2e
    6428:	af a7       	std	Y+47, r26	; 0x2f
    642a:	b8 ab       	std	Y+48, r27	; 0x30
    642c:	84 e6       	ldi	r24, 0x64	; 100
    642e:	92 e2       	ldi	r25, 0x22	; 34
    6430:	89 ab       	std	Y+49, r24	; 0x31
    6432:	9a ab       	std	Y+50, r25	; 0x32
    6434:	82 e0       	ldi	r24, 0x02	; 2
    6436:	90 e0       	ldi	r25, 0x00	; 0
    6438:	8b ab       	std	Y+51, r24	; 0x33
    643a:	9c ab       	std	Y+52, r25	; 0x34
    643c:	20 91 a8 2b 	lds	r18, 0x2BA8
    6440:	2d ab       	std	Y+53, r18	; 0x35
    6442:	2a e6       	ldi	r18, 0x6A	; 106
    6444:	32 e2       	ldi	r19, 0x22	; 34
    6446:	29 af       	std	Y+57, r18	; 0x39
    6448:	3a af       	std	Y+58, r19	; 0x3a
    644a:	8b af       	std	Y+59, r24	; 0x3b
    644c:	9c af       	std	Y+60, r25	; 0x3c
    644e:	80 91 a9 2b 	lds	r24, 0x2BA9
    6452:	8d af       	std	Y+61, r24	; 0x3d
    6454:	80 e7       	ldi	r24, 0x70	; 112
    6456:	92 e2       	ldi	r25, 0x22	; 34
    6458:	23 96       	adiw	r28, 0x03	; 3
    645a:	8e af       	std	Y+62, r24	; 0x3e
    645c:	9f af       	std	Y+63, r25	; 0x3f
    645e:	23 97       	sbiw	r28, 0x03	; 3
        {.name = CONFIG_FLOW_COUNTER_DELTA_TRIGGER_TAG, .type = AWT_INT32, .val.i = config.flow_delta_trigger},
        {.name = CONFIG_CONTROL_TEMP_SP_TAG, .type = AWT_INT32, .val.i = (config.temp_sp_x16 / MODEL_TEMP_SCALE_FACTOR) },
        {.name = CONFIG_CONTROL_SELECT_TAG, .type = AWT_INT32, .val.i = config.ctrl_select},
        {.name = CONFIG_ENABLE_EVENT_HI_TAG, .type = AWT_BOOL, .val.b = config.enable_temp1_hi_event},
        {.name = CONFIG_ENABLE_EVENT_LO_TAG, .type = AWT_BOOL, .val.b = config.enable_temp1_lo_event},
        {.name = CONFIG_TEMP1_HI_TRIGGER_TAG, .type = AWT_INT32, .val.i = config.temp1_hi_trigger_x16 / MODEL_TEMP_SCALE_FACTOR},
    6460:	ea ea       	ldi	r30, 0xAA	; 170
    6462:	fb e2       	ldi	r31, 0x2B	; 43
    6464:	80 81       	ld	r24, Z
    6466:	91 81       	ldd	r25, Z+1	; 0x01
    6468:	99 23       	and	r25, r25
    646a:	0c f4       	brge	.+2      	; 0x646e <main+0xb0e>
    646c:	0f 96       	adiw	r24, 0x0f	; 15
    646e:	95 95       	asr	r25
    6470:	87 95       	ror	r24
    6472:	95 95       	asr	r25
    6474:	87 95       	ror	r24
    6476:	95 95       	asr	r25
    6478:	87 95       	ror	r24
    647a:	95 95       	asr	r25
    647c:	87 95       	ror	r24
    }
}

static void send_config1_message (void)
{
    awt_var_t var[] = {
    647e:	aa 27       	eor	r26, r26
    6480:	97 fd       	sbrc	r25, 7
    6482:	a0 95       	com	r26
    6484:	ba 2f       	mov	r27, r26
    6486:	29 96       	adiw	r28, 0x09	; 9
    6488:	8c af       	std	Y+60, r24	; 0x3c
    648a:	9d af       	std	Y+61, r25	; 0x3d
    648c:	ae af       	std	Y+62, r26	; 0x3e
    648e:	bf af       	std	Y+63, r27	; 0x3f
    6490:	29 97       	sbiw	r28, 0x09	; 9
    6492:	89 e7       	ldi	r24, 0x79	; 121
    6494:	92 e2       	ldi	r25, 0x22	; 34
    6496:	2b 96       	adiw	r28, 0x0b	; 11
    6498:	8e af       	std	Y+62, r24	; 0x3e
    649a:	9f af       	std	Y+63, r25	; 0x3f
    649c:	2b 97       	sbiw	r28, 0x0b	; 11
        {.name = CONFIG_CONTROL_TEMP_SP_TAG, .type = AWT_INT32, .val.i = (config.temp_sp_x16 / MODEL_TEMP_SCALE_FACTOR) },
        {.name = CONFIG_CONTROL_SELECT_TAG, .type = AWT_INT32, .val.i = config.ctrl_select},
        {.name = CONFIG_ENABLE_EVENT_HI_TAG, .type = AWT_BOOL, .val.b = config.enable_temp1_hi_event},
        {.name = CONFIG_ENABLE_EVENT_LO_TAG, .type = AWT_BOOL, .val.b = config.enable_temp1_lo_event},
        {.name = CONFIG_TEMP1_HI_TRIGGER_TAG, .type = AWT_INT32, .val.i = config.temp1_hi_trigger_x16 / MODEL_TEMP_SCALE_FACTOR},
        {.name = CONFIG_TEMP1_LO_TRIGGER_TAG, .type = AWT_INT32, .val.i = config.temp1_lo_trigger_x16 / MODEL_TEMP_SCALE_FACTOR}
    649e:	ec ea       	ldi	r30, 0xAC	; 172
    64a0:	fb e2       	ldi	r31, 0x2B	; 43
    64a2:	80 81       	ld	r24, Z
    64a4:	91 81       	ldd	r25, Z+1	; 0x01
    64a6:	99 23       	and	r25, r25
    64a8:	0c f4       	brge	.+2      	; 0x64ac <main+0xb4c>
    64aa:	0f 96       	adiw	r24, 0x0f	; 15
    64ac:	95 95       	asr	r25
    64ae:	87 95       	ror	r24
    64b0:	95 95       	asr	r25
    64b2:	87 95       	ror	r24
    64b4:	95 95       	asr	r25
    64b6:	87 95       	ror	r24
    64b8:	95 95       	asr	r25
    64ba:	87 95       	ror	r24
    }
}

static void send_config1_message (void)
{
    awt_var_t var[] = {
    64bc:	aa 27       	eor	r26, r26
    64be:	97 fd       	sbrc	r25, 7
    64c0:	a0 95       	com	r26
    64c2:	ba 2f       	mov	r27, r26
    64c4:	61 96       	adiw	r28, 0x11	; 17
    64c6:	8c af       	std	Y+60, r24	; 0x3c
    64c8:	9d af       	std	Y+61, r25	; 0x3d
    64ca:	ae af       	std	Y+62, r26	; 0x3e
    64cc:	bf af       	std	Y+63, r27	; 0x3f
    64ce:	61 97       	sbiw	r28, 0x11	; 17
        {.name = CONFIG_ENABLE_EVENT_HI_TAG, .type = AWT_BOOL, .val.b = config.enable_temp1_hi_event},
        {.name = CONFIG_ENABLE_EVENT_LO_TAG, .type = AWT_BOOL, .val.b = config.enable_temp1_lo_event},
        {.name = CONFIG_TEMP1_HI_TRIGGER_TAG, .type = AWT_INT32, .val.i = config.temp1_hi_trigger_x16 / MODEL_TEMP_SCALE_FACTOR},
        {.name = CONFIG_TEMP1_LO_TRIGGER_TAG, .type = AWT_INT32, .val.i = config.temp1_lo_trigger_x16 / MODEL_TEMP_SCALE_FACTOR}
    };
    state.modem.busy = true;
    64d0:	81 e0       	ldi	r24, 0x01	; 1
    64d2:	80 93 a8 28 	sts	0x28A8, r24
    awt_dispatch_data_req (config1_message_rsp, CONFIG_PATH,
    64d6:	9e 01       	movw	r18, r28
    64d8:	2f 5f       	subi	r18, 0xFF	; 255
    64da:	3f 4f       	sbci	r19, 0xFF	; 255
    64dc:	4a e0       	ldi	r20, 0x0A	; 10
    64de:	61 ef       	ldi	r22, 0xF1	; 241
    64e0:	71 e2       	ldi	r23, 0x21	; 33
    64e2:	89 e7       	ldi	r24, 0x79	; 121
    64e4:	90 e2       	ldi	r25, 0x20	; 32
    64e6:	0e 94 8a 07 	call	0xf14	; 0xf14 <awt_dispatch_data_req>
    64ea:	6b cd       	rjmp	.-1322   	; 0x5fc2 <main+0x662>
                send_id_message ();
            } else if (state.modem.send_rom_config) {
                send_rom_config_message ();
            } else if (state.modem.send_config1) {
                send_config1_message ();
            } else if (state.modem.send_config2) {
    64ec:	80 91 ab 28 	lds	r24, 0x28AB
    64f0:	88 23       	and	r24, r24
    64f2:	09 f4       	brne	.+2      	; 0x64f6 <main+0xb96>
    64f4:	00 c1       	rjmp	.+512    	; 0x66f6 <main+0xd96>
                           sizeof var / sizeof var[0], var);
}

static void send_config2_message (void)
{
    awt_var_t var[] = {
    64f6:	86 e1       	ldi	r24, 0x16	; 22
    64f8:	92 e2       	ldi	r25, 0x22	; 34
    64fa:	89 83       	std	Y+1, r24	; 0x01
    64fc:	9a 83       	std	Y+2, r25	; 0x02
    64fe:	1b 82       	std	Y+3, r1	; 0x03
    6500:	1c 82       	std	Y+4, r1	; 0x04
    6502:	80 91 98 2b 	lds	r24, 0x2B98
    6506:	90 91 99 2b 	lds	r25, 0x2B99
    650a:	a0 91 9a 2b 	lds	r26, 0x2B9A
    650e:	b0 91 9b 2b 	lds	r27, 0x2B9B
    6512:	8d 83       	std	Y+5, r24	; 0x05
    6514:	9e 83       	std	Y+6, r25	; 0x06
    6516:	af 83       	std	Y+7, r26	; 0x07
    6518:	b8 87       	std	Y+8, r27	; 0x08
    651a:	8a e1       	ldi	r24, 0x1A	; 26
    651c:	92 e2       	ldi	r25, 0x22	; 34
    651e:	89 87       	std	Y+9, r24	; 0x09
    6520:	9a 87       	std	Y+10, r25	; 0x0a
    6522:	1b 86       	std	Y+11, r1	; 0x0b
    6524:	1c 86       	std	Y+12, r1	; 0x0c
    6526:	80 91 9c 2b 	lds	r24, 0x2B9C
    652a:	90 91 9d 2b 	lds	r25, 0x2B9D
    652e:	a0 91 9e 2b 	lds	r26, 0x2B9E
    6532:	b0 91 9f 2b 	lds	r27, 0x2B9F
    6536:	8d 87       	std	Y+13, r24	; 0x0d
    6538:	9e 87       	std	Y+14, r25	; 0x0e
    653a:	af 87       	std	Y+15, r26	; 0x0f
    653c:	b8 8b       	std	Y+16, r27	; 0x10
    653e:	8e e1       	ldi	r24, 0x1E	; 30
    6540:	92 e2       	ldi	r25, 0x22	; 34
    6542:	89 8b       	std	Y+17, r24	; 0x11
    6544:	9a 8b       	std	Y+18, r25	; 0x12
    6546:	1b 8a       	std	Y+19, r1	; 0x13
    6548:	1c 8a       	std	Y+20, r1	; 0x14
    654a:	80 91 a0 2b 	lds	r24, 0x2BA0
    654e:	90 91 a1 2b 	lds	r25, 0x2BA1
    6552:	a0 91 a2 2b 	lds	r26, 0x2BA2
    6556:	b0 91 a3 2b 	lds	r27, 0x2BA3
    655a:	8d 8b       	std	Y+21, r24	; 0x15
    655c:	9e 8b       	std	Y+22, r25	; 0x16
    655e:	af 8b       	std	Y+23, r26	; 0x17
    6560:	b8 8f       	std	Y+24, r27	; 0x18
    6562:	82 e2       	ldi	r24, 0x22	; 34
    6564:	92 e2       	ldi	r25, 0x22	; 34
    6566:	89 8f       	std	Y+25, r24	; 0x19
    6568:	9a 8f       	std	Y+26, r25	; 0x1a
    656a:	1b 8e       	std	Y+27, r1	; 0x1b
    656c:	1c 8e       	std	Y+28, r1	; 0x1c
    656e:	80 91 ae 2b 	lds	r24, 0x2BAE
    6572:	90 91 af 2b 	lds	r25, 0x2BAF
    6576:	a0 91 b0 2b 	lds	r26, 0x2BB0
    657a:	b0 91 b1 2b 	lds	r27, 0x2BB1
    657e:	8d 8f       	std	Y+29, r24	; 0x1d
    6580:	9e 8f       	std	Y+30, r25	; 0x1e
    6582:	af 8f       	std	Y+31, r26	; 0x1f
    6584:	b8 a3       	std	Y+32, r27	; 0x20
    6586:	88 e2       	ldi	r24, 0x28	; 40
    6588:	92 e2       	ldi	r25, 0x22	; 34
    658a:	89 a3       	std	Y+33, r24	; 0x21
    658c:	9a a3       	std	Y+34, r25	; 0x22
    658e:	1b a2       	std	Y+35, r1	; 0x23
    6590:	1c a2       	std	Y+36, r1	; 0x24
    6592:	80 91 b2 2b 	lds	r24, 0x2BB2
    6596:	90 91 b3 2b 	lds	r25, 0x2BB3
    659a:	a0 91 b4 2b 	lds	r26, 0x2BB4
    659e:	b0 91 b5 2b 	lds	r27, 0x2BB5
    65a2:	8d a3       	std	Y+37, r24	; 0x25
    65a4:	9e a3       	std	Y+38, r25	; 0x26
    65a6:	af a3       	std	Y+39, r26	; 0x27
    65a8:	b8 a7       	std	Y+40, r27	; 0x28
    65aa:	8e e2       	ldi	r24, 0x2E	; 46
    65ac:	92 e2       	ldi	r25, 0x22	; 34
    65ae:	89 a7       	std	Y+41, r24	; 0x29
    65b0:	9a a7       	std	Y+42, r25	; 0x2a
    65b2:	1b a6       	std	Y+43, r1	; 0x2b
    65b4:	1c a6       	std	Y+44, r1	; 0x2c
    65b6:	80 91 b6 2b 	lds	r24, 0x2BB6
    65ba:	90 91 b7 2b 	lds	r25, 0x2BB7
    65be:	a0 91 b8 2b 	lds	r26, 0x2BB8
    65c2:	b0 91 b9 2b 	lds	r27, 0x2BB9
    65c6:	8d a7       	std	Y+45, r24	; 0x2d
    65c8:	9e a7       	std	Y+46, r25	; 0x2e
    65ca:	af a7       	std	Y+47, r26	; 0x2f
    65cc:	b8 ab       	std	Y+48, r27	; 0x30
    65ce:	84 e3       	ldi	r24, 0x34	; 52
    65d0:	92 e2       	ldi	r25, 0x22	; 34
    65d2:	89 ab       	std	Y+49, r24	; 0x31
    65d4:	9a ab       	std	Y+50, r25	; 0x32
    65d6:	1b aa       	std	Y+51, r1	; 0x33
    65d8:	1c aa       	std	Y+52, r1	; 0x34
    65da:	80 91 ba 2b 	lds	r24, 0x2BBA
    65de:	90 91 bb 2b 	lds	r25, 0x2BBB
    65e2:	a0 91 bc 2b 	lds	r26, 0x2BBC
    65e6:	b0 91 bd 2b 	lds	r27, 0x2BBD
    65ea:	8d ab       	std	Y+53, r24	; 0x35
    65ec:	9e ab       	std	Y+54, r25	; 0x36
    65ee:	af ab       	std	Y+55, r26	; 0x37
    65f0:	b8 af       	std	Y+56, r27	; 0x38
    65f2:	8a e3       	ldi	r24, 0x3A	; 58
    65f4:	92 e2       	ldi	r25, 0x22	; 34
    65f6:	89 af       	std	Y+57, r24	; 0x39
    65f8:	9a af       	std	Y+58, r25	; 0x3a
    65fa:	1b ae       	std	Y+59, r1	; 0x3b
    65fc:	1c ae       	std	Y+60, r1	; 0x3c
    65fe:	80 91 be 2b 	lds	r24, 0x2BBE
    6602:	90 91 bf 2b 	lds	r25, 0x2BBF
    6606:	a0 91 c0 2b 	lds	r26, 0x2BC0
    660a:	b0 91 c1 2b 	lds	r27, 0x2BC1
    660e:	21 96       	adiw	r28, 0x01	; 1
    6610:	8c af       	std	Y+60, r24	; 0x3c
    6612:	9d af       	std	Y+61, r25	; 0x3d
    6614:	ae af       	std	Y+62, r26	; 0x3e
    6616:	bf af       	std	Y+63, r27	; 0x3f
    6618:	21 97       	sbiw	r28, 0x01	; 1
    661a:	80 e4       	ldi	r24, 0x40	; 64
    661c:	92 e2       	ldi	r25, 0x22	; 34
    661e:	23 96       	adiw	r28, 0x03	; 3
    6620:	8e af       	std	Y+62, r24	; 0x3e
    6622:	9f af       	std	Y+63, r25	; 0x3f
    6624:	23 97       	sbiw	r28, 0x03	; 3
    6626:	25 96       	adiw	r28, 0x05	; 5
    6628:	1e ae       	std	Y+62, r1	; 0x3e
    662a:	1f ae       	std	Y+63, r1	; 0x3f
    662c:	25 97       	sbiw	r28, 0x05	; 5
    662e:	80 91 c2 2b 	lds	r24, 0x2BC2
    6632:	90 91 c3 2b 	lds	r25, 0x2BC3
    6636:	a0 91 c4 2b 	lds	r26, 0x2BC4
    663a:	b0 91 c5 2b 	lds	r27, 0x2BC5
    663e:	29 96       	adiw	r28, 0x09	; 9
    6640:	8c af       	std	Y+60, r24	; 0x3c
    6642:	9d af       	std	Y+61, r25	; 0x3d
    6644:	ae af       	std	Y+62, r26	; 0x3e
    6646:	bf af       	std	Y+63, r27	; 0x3f
    6648:	29 97       	sbiw	r28, 0x09	; 9
    664a:	86 e4       	ldi	r24, 0x46	; 70
    664c:	92 e2       	ldi	r25, 0x22	; 34
    664e:	2b 96       	adiw	r28, 0x0b	; 11
    6650:	8e af       	std	Y+62, r24	; 0x3e
    6652:	9f af       	std	Y+63, r25	; 0x3f
    6654:	2b 97       	sbiw	r28, 0x0b	; 11
    6656:	2d 96       	adiw	r28, 0x0d	; 13
    6658:	1e ae       	std	Y+62, r1	; 0x3e
    665a:	1f ae       	std	Y+63, r1	; 0x3f
    665c:	2d 97       	sbiw	r28, 0x0d	; 13
    665e:	80 91 c6 2b 	lds	r24, 0x2BC6
    6662:	90 91 c7 2b 	lds	r25, 0x2BC7
    6666:	a0 91 c8 2b 	lds	r26, 0x2BC8
    666a:	b0 91 c9 2b 	lds	r27, 0x2BC9
    666e:	61 96       	adiw	r28, 0x11	; 17
    6670:	8c af       	std	Y+60, r24	; 0x3c
    6672:	9d af       	std	Y+61, r25	; 0x3d
    6674:	ae af       	std	Y+62, r26	; 0x3e
    6676:	bf af       	std	Y+63, r27	; 0x3f
    6678:	61 97       	sbiw	r28, 0x11	; 17
    667a:	8c e4       	ldi	r24, 0x4C	; 76
    667c:	92 e2       	ldi	r25, 0x22	; 34
    667e:	63 96       	adiw	r28, 0x13	; 19
    6680:	8e af       	std	Y+62, r24	; 0x3e
    6682:	9f af       	std	Y+63, r25	; 0x3f
    6684:	63 97       	sbiw	r28, 0x13	; 19
    6686:	65 96       	adiw	r28, 0x15	; 21
    6688:	1e ae       	std	Y+62, r1	; 0x3e
    668a:	1f ae       	std	Y+63, r1	; 0x3f
    668c:	65 97       	sbiw	r28, 0x15	; 21
    668e:	80 91 ca 2b 	lds	r24, 0x2BCA
    6692:	90 91 cb 2b 	lds	r25, 0x2BCB
    6696:	a0 91 cc 2b 	lds	r26, 0x2BCC
    669a:	b0 91 cd 2b 	lds	r27, 0x2BCD
    669e:	69 96       	adiw	r28, 0x19	; 25
    66a0:	8c af       	std	Y+60, r24	; 0x3c
    66a2:	9d af       	std	Y+61, r25	; 0x3d
    66a4:	ae af       	std	Y+62, r26	; 0x3e
    66a6:	bf af       	std	Y+63, r27	; 0x3f
    66a8:	69 97       	sbiw	r28, 0x19	; 25
    66aa:	82 e5       	ldi	r24, 0x52	; 82
    66ac:	92 e2       	ldi	r25, 0x22	; 34
    66ae:	6b 96       	adiw	r28, 0x1b	; 27
    66b0:	8e af       	std	Y+62, r24	; 0x3e
    66b2:	9f af       	std	Y+63, r25	; 0x3f
    66b4:	6b 97       	sbiw	r28, 0x1b	; 27
    66b6:	6d 96       	adiw	r28, 0x1d	; 29
    66b8:	1e ae       	std	Y+62, r1	; 0x3e
    66ba:	1f ae       	std	Y+63, r1	; 0x3f
    66bc:	6d 97       	sbiw	r28, 0x1d	; 29
    66be:	80 91 ce 2b 	lds	r24, 0x2BCE
    66c2:	90 91 cf 2b 	lds	r25, 0x2BCF
    66c6:	a0 91 d0 2b 	lds	r26, 0x2BD0
    66ca:	b0 91 d1 2b 	lds	r27, 0x2BD1
    66ce:	a1 96       	adiw	r28, 0x21	; 33
    66d0:	8c af       	std	Y+60, r24	; 0x3c
    66d2:	9d af       	std	Y+61, r25	; 0x3d
    66d4:	ae af       	std	Y+62, r26	; 0x3e
    66d6:	bf af       	std	Y+63, r27	; 0x3f
    66d8:	a1 97       	sbiw	r28, 0x21	; 33
        {.name = CONFIG_WATER_RUNNING_POOL_TIMER_3_WEEKDAY_TAG, .type = AWT_INT32, .val.i = config.pTimerWeekDayWaterRunning[2]},
        {.name = CONFIG_WATER_RUNNING_POOL_TIMER_1_WEEKEND_TAG, .type = AWT_INT32, .val.i = config.pTimerWeekEndWaterRunning[0]},
        {.name = CONFIG_WATER_RUNNING_POOL_TIMER_2_WEEKEND_TAG, .type = AWT_INT32, .val.i = config.pTimerWeekEndWaterRunning[1]},
        {.name = CONFIG_WATER_RUNNING_POOL_TIMER_3_WEEKEND_TAG, .type = AWT_INT32, .val.i = config.pTimerWeekEndWaterRunning[2]},
    };
    state.modem.busy = true;
    66da:	81 e0       	ldi	r24, 0x01	; 1
    66dc:	80 93 a8 28 	sts	0x28A8, r24
    awt_dispatch_data_req (config2_message_rsp, CONFIG_PATH,
    66e0:	9e 01       	movw	r18, r28
    66e2:	2f 5f       	subi	r18, 0xFF	; 255
    66e4:	3f 4f       	sbci	r19, 0xFF	; 255
    66e6:	4c e0       	ldi	r20, 0x0C	; 12
    66e8:	61 ef       	ldi	r22, 0xF1	; 241
    66ea:	71 e2       	ldi	r23, 0x21	; 33
    66ec:	88 e8       	ldi	r24, 0x88	; 136
    66ee:	90 e2       	ldi	r25, 0x20	; 32
    66f0:	0e 94 8a 07 	call	0xf14	; 0xf14 <awt_dispatch_data_req>
    66f4:	66 cc       	rjmp	.-1844   	; 0x5fc2 <main+0x662>
            } else if (state.modem.send_config1) {
                send_config1_message ();
            } else if (state.modem.send_config2) {
                send_config2_message ();
            } else {
                if (state.event_buffer.back != state.event_buffer.front) {
    66f6:	e0 91 31 29 	lds	r30, 0x2931
    66fa:	80 91 32 29 	lds	r24, 0x2932
    66fe:	8e 17       	cp	r24, r30
    6700:	09 f4       	brne	.+2      	; 0x6704 <main+0xda4>
    6702:	42 c0       	rjmp	.+132    	; 0x6788 <main+0xe28>

static void send_event_message (void)
{
    char s[20];
    awt_event_t event;
    event_t* pevent = & (state.event_buffer.buffer[state.event_buffer.front]);
    6704:	f0 e0       	ldi	r31, 0x00	; 0
    6706:	ee 0f       	add	r30, r30
    6708:	ff 1f       	adc	r31, r31
    670a:	ee 0f       	add	r30, r30
    670c:	ff 1f       	adc	r31, r31
    670e:	ee 0f       	add	r30, r30
    6710:	ff 1f       	adc	r31, r31
    6712:	ef 54       	subi	r30, 0x4F	; 79
    6714:	f7 4d       	sbci	r31, 0xD7	; 215
    event.timestamp = pevent->timestamp;
    6716:	40 81       	ld	r20, Z
    6718:	51 81       	ldd	r21, Z+1	; 0x01
    671a:	62 81       	ldd	r22, Z+2	; 0x02
    671c:	73 81       	ldd	r23, Z+3	; 0x03
    671e:	d2 01       	movw	r26, r4
    6720:	4d 93       	st	X+, r20
    6722:	5d 93       	st	X+, r21
    6724:	6d 93       	st	X+, r22
    6726:	7c 93       	st	X, r23
    6728:	13 97       	sbiw	r26, 0x03	; 3
    event.code = pevent->event;
    672a:	84 81       	ldd	r24, Z+4	; 0x04
    672c:	48 2f       	mov	r20, r24
    672e:	50 e0       	ldi	r21, 0x00	; 0
    6730:	60 e0       	ldi	r22, 0x00	; 0
    6732:	70 e0       	ldi	r23, 0x00	; 0
    6734:	14 96       	adiw	r26, 0x04	; 4
    6736:	4d 93       	st	X+, r20
    6738:	5d 93       	st	X+, r21
    673a:	6d 93       	st	X+, r22
    673c:	7c 93       	st	X, r23
    673e:	17 97       	sbiw	r26, 0x07	; 7
    if (pevent->is_int) {
    6740:	85 81       	ldd	r24, Z+5	; 0x05
    6742:	88 23       	and	r24, r24
    6744:	81 f0       	breq	.+32     	; 0x6766 <main+0xe06>
        event.text = ltoa (pevent->int_data, s, 10);
    6746:	66 81       	ldd	r22, Z+6	; 0x06
    6748:	77 81       	ldd	r23, Z+7	; 0x07
    674a:	88 27       	eor	r24, r24
    674c:	77 fd       	sbrc	r23, 7
    674e:	80 95       	com	r24
    6750:	98 2f       	mov	r25, r24
    6752:	2a e0       	ldi	r18, 0x0A	; 10
    6754:	30 e0       	ldi	r19, 0x00	; 0
    6756:	ae 01       	movw	r20, r28
    6758:	4f 5f       	subi	r20, 0xFF	; 255
    675a:	5f 4f       	sbci	r21, 0xFF	; 255
    675c:	5c d3       	rcall	.+1720   	; 0x6e16 <ltoa>
    675e:	f2 01       	movw	r30, r4
    6760:	80 87       	std	Z+8, r24	; 0x08
    6762:	91 87       	std	Z+9, r25	; 0x09
    6764:	07 c0       	rjmp	.+14     	; 0x6774 <main+0xe14>
    } else {
        event.text = pevent->str_data;
    6766:	86 81       	ldd	r24, Z+6	; 0x06
    6768:	97 81       	ldd	r25, Z+7	; 0x07
    676a:	d2 01       	movw	r26, r4
    676c:	18 96       	adiw	r26, 0x08	; 8
    676e:	8d 93       	st	X+, r24
    6770:	9c 93       	st	X, r25
    6772:	19 97       	sbiw	r26, 0x09	; 9
    }
    state.modem.busy = true;
    6774:	81 e0       	ldi	r24, 0x01	; 1
    6776:	80 93 a8 28 	sts	0x28A8, r24
    awt_dispatch_event_req (event_message_rsp, ASSET_ID, &event);
    677a:	a2 01       	movw	r20, r4
    677c:	61 e1       	ldi	r22, 0x11	; 17
    677e:	73 e2       	ldi	r23, 0x23	; 35
    6780:	8b e4       	ldi	r24, 0x4B	; 75
    6782:	90 e2       	ldi	r25, 0x20	; 32
    6784:	0e 94 fd 06 	call	0xdfa	; 0xdfa <awt_dispatch_event_req>
                send_config2_message ();
            } else {
                if (state.event_buffer.back != state.event_buffer.front) {
                    send_event_message ();
                }
                if (state.status_buffer.back != state.status_buffer.front) {
    6788:	00 91 13 2b 	lds	r16, 0x2B13
    678c:	80 91 14 2b 	lds	r24, 0x2B14
    6790:	80 17       	cp	r24, r16
    6792:	09 f4       	brne	.+2      	; 0x6796 <main+0xe36>
    6794:	16 cc       	rjmp	.-2004   	; 0x5fc2 <main+0x662>

static void send_status_message (void)
{
    awt_var_t var[13]; // +3];
    uint8_t count = 0;
    status_t* pbuf = &state.status_buffer.buffer[state.status_buffer.front];
    6796:	be e1       	ldi	r27, 0x1E	; 30
    6798:	0b 9f       	mul	r16, r27
    679a:	80 01       	movw	r16, r0
    679c:	11 24       	eor	r1, r1
    679e:	0d 5c       	subi	r16, 0xCD	; 205
    67a0:	16 4d       	sbci	r17, 0xD6	; 214

    // 1
    var[count].name = "timestamp";
    67a2:	89 e1       	ldi	r24, 0x19	; 25
    67a4:	93 e2       	ldi	r25, 0x23	; 35
    67a6:	89 83       	std	Y+1, r24	; 0x01
    67a8:	9a 83       	std	Y+2, r25	; 0x02
    var[count].type = AWT_INT32;
    67aa:	1b 82       	std	Y+3, r1	; 0x03
    67ac:	1c 82       	std	Y+4, r1	; 0x04
    var[count++].val.i = pbuf->epoch;
    67ae:	f8 01       	movw	r30, r16
    67b0:	80 81       	ld	r24, Z
    67b2:	91 81       	ldd	r25, Z+1	; 0x01
    67b4:	a2 81       	ldd	r26, Z+2	; 0x02
    67b6:	b3 81       	ldd	r27, Z+3	; 0x03
    67b8:	8d 83       	std	Y+5, r24	; 0x05
    67ba:	9e 83       	std	Y+6, r25	; 0x06
    67bc:	af 83       	std	Y+7, r26	; 0x07
    67be:	b8 87       	std	Y+8, r27	; 0x08

    // 2
    var[count].name = STATUS_STATE_TAG;
    67c0:	82 e6       	ldi	r24, 0x62	; 98
    67c2:	92 e2       	ldi	r25, 0x22	; 34
    67c4:	89 87       	std	Y+9, r24	; 0x09
    67c6:	9a 87       	std	Y+10, r25	; 0x0a
    var[count].type = AWT_INT32;
    67c8:	1b 86       	std	Y+11, r1	; 0x0b
    67ca:	1c 86       	std	Y+12, r1	; 0x0c
    var[count++].val.i = pbuf->state;
    67cc:	84 81       	ldd	r24, Z+4	; 0x04
    67ce:	99 27       	eor	r25, r25
    67d0:	87 fd       	sbrc	r24, 7
    67d2:	90 95       	com	r25
    67d4:	a9 2f       	mov	r26, r25
    67d6:	b9 2f       	mov	r27, r25
    67d8:	8d 87       	std	Y+13, r24	; 0x0d
    67da:	9e 87       	std	Y+14, r25	; 0x0e
    67dc:	af 87       	std	Y+15, r26	; 0x0f
    67de:	b8 8b       	std	Y+16, r27	; 0x10

    // 3
    var[count].name = STATUS_POWER_ON_TAG;
    67e0:	83 e2       	ldi	r24, 0x23	; 35
    67e2:	93 e2       	ldi	r25, 0x23	; 35
    67e4:	89 8b       	std	Y+17, r24	; 0x11
    67e6:	9a 8b       	std	Y+18, r25	; 0x12
    var[count].type = AWT_BOOL;
    67e8:	82 e0       	ldi	r24, 0x02	; 2
    67ea:	90 e0       	ldi	r25, 0x00	; 0
    67ec:	8b 8b       	std	Y+19, r24	; 0x13
    67ee:	9c 8b       	std	Y+20, r25	; 0x14
    var[count++].val.b = pbuf->power_on;
    67f0:	25 89       	ldd	r18, Z+21	; 0x15
    67f2:	2d 8b       	std	Y+21, r18	; 0x15
	
    // 4	
    var[count].name = STATUS_ELEMENT_ON_TAG;
    67f4:	26 e2       	ldi	r18, 0x26	; 38
    67f6:	33 e2       	ldi	r19, 0x23	; 35
    67f8:	29 8f       	std	Y+25, r18	; 0x19
    67fa:	3a 8f       	std	Y+26, r19	; 0x1a
    var[count].type = AWT_BOOL;
    67fc:	8b 8f       	std	Y+27, r24	; 0x1b
    67fe:	9c 8f       	std	Y+28, r25	; 0x1c
    var[count++].val.b = pbuf->element_on;
    6800:	26 89       	ldd	r18, Z+22	; 0x16
    6802:	2d 8f       	std	Y+29, r18	; 0x1d

    // 5
    var[count].name = STATUS_WATER_RUNNING_TAG;
    6804:	29 e2       	ldi	r18, 0x29	; 41
    6806:	33 e2       	ldi	r19, 0x23	; 35
    6808:	29 a3       	std	Y+33, r18	; 0x21
    680a:	3a a3       	std	Y+34, r19	; 0x22
    var[count].type = AWT_BOOL;
    680c:	8b a3       	std	Y+35, r24	; 0x23
    680e:	9c a3       	std	Y+36, r25	; 0x24
    var[count++].val.b = pbuf->water_event.running;
    6810:	87 89       	ldd	r24, Z+23	; 0x17
    6812:	8d a3       	std	Y+37, r24	; 0x25

    // 6
    var[count].name = STATUS_PULSE1_TOTAL_TAG;
    6814:	8c e2       	ldi	r24, 0x2C	; 44
    6816:	93 e2       	ldi	r25, 0x23	; 35
    6818:	89 a7       	std	Y+41, r24	; 0x29
    681a:	9a a7       	std	Y+42, r25	; 0x2a
    var[count].type = AWT_INT32;
    681c:	1b a6       	std	Y+43, r1	; 0x2b
    681e:	1c a6       	std	Y+44, r1	; 0x2c
    var[count++].val.i = pbuf->pulse_counter[0];
    6820:	c5 84       	ldd	r12, Z+13	; 0x0d
    6822:	d6 84       	ldd	r13, Z+14	; 0x0e
    6824:	e7 84       	ldd	r14, Z+15	; 0x0f
    6826:	f0 88       	ldd	r15, Z+16	; 0x10
    6828:	cd a6       	std	Y+45, r12	; 0x2d
    682a:	de a6       	std	Y+46, r13	; 0x2e
    682c:	ef a6       	std	Y+47, r14	; 0x2f
    682e:	f8 aa       	std	Y+48, r15	; 0x30

    // 7
    var[count].name = STATUS_PULSE2_TOTAL_TAG;
    6830:	81 e3       	ldi	r24, 0x31	; 49
    6832:	93 e2       	ldi	r25, 0x23	; 35
    6834:	89 ab       	std	Y+49, r24	; 0x31
    6836:	9a ab       	std	Y+50, r25	; 0x32
    var[count].type = AWT_INT32;
    6838:	1b aa       	std	Y+51, r1	; 0x33
    683a:	1c aa       	std	Y+52, r1	; 0x34
    var[count++].val.i = pbuf->pulse_counter[1];
    683c:	81 89       	ldd	r24, Z+17	; 0x11
    683e:	92 89       	ldd	r25, Z+18	; 0x12
    6840:	a3 89       	ldd	r26, Z+19	; 0x13
    6842:	b4 89       	ldd	r27, Z+20	; 0x14
    6844:	8d ab       	std	Y+53, r24	; 0x35
    6846:	9e ab       	std	Y+54, r25	; 0x36
    6848:	af ab       	std	Y+55, r26	; 0x37
    684a:	b8 af       	std	Y+56, r27	; 0x38

    // 8
    var[count].name = STATUS_PULSE1_RESET_TAG;
    684c:	86 e3       	ldi	r24, 0x36	; 54
    684e:	93 e2       	ldi	r25, 0x23	; 35
    6850:	89 af       	std	Y+57, r24	; 0x39
    6852:	9a af       	std	Y+58, r25	; 0x3a
    var[count].type = AWT_INT32;
    6854:	1b ae       	std	Y+59, r1	; 0x3b
    6856:	1c ae       	std	Y+60, r1	; 0x3c
    var[count++].val.i = pbuf->pulse_counter[0] - get_midnight_pulse_counter (0);
    6858:	80 e0       	ldi	r24, 0x00	; 0
    685a:	0e 94 c0 1f 	call	0x3f80	; 0x3f80 <get_midnight_pulse_counter>
    685e:	c6 1a       	sub	r12, r22
    6860:	d7 0a       	sbc	r13, r23
    6862:	e8 0a       	sbc	r14, r24
    6864:	f9 0a       	sbc	r15, r25
    6866:	21 96       	adiw	r28, 0x01	; 1
    6868:	cc ae       	std	Y+60, r12	; 0x3c
    686a:	dd ae       	std	Y+61, r13	; 0x3d
    686c:	ee ae       	std	Y+62, r14	; 0x3e
    686e:	ff ae       	std	Y+63, r15	; 0x3f
    6870:	21 97       	sbiw	r28, 0x01	; 1

    // 9
	var[count].name = STATUS_PULSE2_RESET_TAG;
    6872:	8b e3       	ldi	r24, 0x3B	; 59
    6874:	93 e2       	ldi	r25, 0x23	; 35
    6876:	23 96       	adiw	r28, 0x03	; 3
    6878:	8e af       	std	Y+62, r24	; 0x3e
    687a:	9f af       	std	Y+63, r25	; 0x3f
    687c:	23 97       	sbiw	r28, 0x03	; 3
    var[count].type = AWT_INT32;
    687e:	25 96       	adiw	r28, 0x05	; 5
    6880:	1e ae       	std	Y+62, r1	; 0x3e
    6882:	1f ae       	std	Y+63, r1	; 0x3f
    6884:	25 97       	sbiw	r28, 0x05	; 5
    var[count++].val.i = pbuf->pulse_counter[1] - get_midnight_pulse_counter (1);
    6886:	d8 01       	movw	r26, r16
    6888:	51 96       	adiw	r26, 0x11	; 17
    688a:	cd 90       	ld	r12, X+
    688c:	dd 90       	ld	r13, X+
    688e:	ed 90       	ld	r14, X+
    6890:	fc 90       	ld	r15, X
    6892:	54 97       	sbiw	r26, 0x14	; 20
    6894:	81 e0       	ldi	r24, 0x01	; 1
    6896:	0e 94 c0 1f 	call	0x3f80	; 0x3f80 <get_midnight_pulse_counter>
    689a:	c6 1a       	sub	r12, r22
    689c:	d7 0a       	sbc	r13, r23
    689e:	e8 0a       	sbc	r14, r24
    68a0:	f9 0a       	sbc	r15, r25
    68a2:	29 96       	adiw	r28, 0x09	; 9
    68a4:	cc ae       	std	Y+60, r12	; 0x3c
    68a6:	dd ae       	std	Y+61, r13	; 0x3d
    68a8:	ee ae       	std	Y+62, r14	; 0x3e
    68aa:	ff ae       	std	Y+63, r15	; 0x3f
    68ac:	29 97       	sbiw	r28, 0x09	; 9


    // 10
    if (pbuf->temp_x16[0] != INT16_MIN) {
    68ae:	f8 01       	movw	r30, r16
    68b0:	87 81       	ldd	r24, Z+7	; 0x07
    68b2:	90 85       	ldd	r25, Z+8	; 0x08
    68b4:	81 15       	cp	r24, r1
    68b6:	f0 e8       	ldi	r31, 0x80	; 128
    68b8:	9f 07       	cpc	r25, r31
    68ba:	b1 f0       	breq	.+44     	; 0x68e8 <main+0xf88>
        var[count].name = STATUS_TEMP1_TAG;
    68bc:	20 e4       	ldi	r18, 0x40	; 64
    68be:	33 e2       	ldi	r19, 0x23	; 35
    68c0:	2b 96       	adiw	r28, 0x0b	; 11
    68c2:	2e af       	std	Y+62, r18	; 0x3e
    68c4:	3f af       	std	Y+63, r19	; 0x3f
    68c6:	2b 97       	sbiw	r28, 0x0b	; 11
        var[count].type = AWT_INT32;
    68c8:	2d 96       	adiw	r28, 0x0d	; 13
    68ca:	1e ae       	std	Y+62, r1	; 0x3e
    68cc:	1f ae       	std	Y+63, r1	; 0x3f
    68ce:	2d 97       	sbiw	r28, 0x0d	; 13
        var[count++].val.i = pbuf->temp_x16[0];
    68d0:	aa 27       	eor	r26, r26
    68d2:	97 fd       	sbrc	r25, 7
    68d4:	a0 95       	com	r26
    68d6:	ba 2f       	mov	r27, r26
    68d8:	61 96       	adiw	r28, 0x11	; 17
    68da:	8c af       	std	Y+60, r24	; 0x3c
    68dc:	9d af       	std	Y+61, r25	; 0x3d
    68de:	ae af       	std	Y+62, r26	; 0x3e
    68e0:	bf af       	std	Y+63, r27	; 0x3f
    68e2:	61 97       	sbiw	r28, 0x11	; 17
    68e4:	4a e0       	ldi	r20, 0x0A	; 10
    68e6:	01 c0       	rjmp	.+2      	; 0x68ea <main+0xf8a>
    var[count++].val.i = pbuf->pulse_counter[0] - get_midnight_pulse_counter (0);

    // 9
	var[count].name = STATUS_PULSE2_RESET_TAG;
    var[count].type = AWT_INT32;
    var[count++].val.i = pbuf->pulse_counter[1] - get_midnight_pulse_counter (1);
    68e8:	49 e0       	ldi	r20, 0x09	; 9
        var[count].type = AWT_INT32;
        var[count++].val.i = pbuf->temp_x16[0];
    }

    // 11
    if (pbuf->temp_x16[1] != INT16_MIN) {
    68ea:	d8 01       	movw	r26, r16
    68ec:	19 96       	adiw	r26, 0x09	; 9
    68ee:	8d 91       	ld	r24, X+
    68f0:	9c 91       	ld	r25, X
    68f2:	1a 97       	sbiw	r26, 0x0a	; 10
    68f4:	81 15       	cp	r24, r1
    68f6:	b0 e8       	ldi	r27, 0x80	; 128
    68f8:	9b 07       	cpc	r25, r27
    68fa:	c1 f0       	breq	.+48     	; 0x692c <main+0xfcc>
        var[count].name = STATUS_TEMP2_TAG;
    68fc:	e1 e0       	ldi	r30, 0x01	; 1
    68fe:	f0 e0       	ldi	r31, 0x00	; 0
    6900:	ec 0f       	add	r30, r28
    6902:	fd 1f       	adc	r31, r29
    6904:	28 e0       	ldi	r18, 0x08	; 8
    6906:	42 9f       	mul	r20, r18
    6908:	e0 0d       	add	r30, r0
    690a:	f1 1d       	adc	r31, r1
    690c:	11 24       	eor	r1, r1
    690e:	27 e4       	ldi	r18, 0x47	; 71
    6910:	33 e2       	ldi	r19, 0x23	; 35
    6912:	20 83       	st	Z, r18
    6914:	31 83       	std	Z+1, r19	; 0x01
        var[count].type = AWT_INT32;
    6916:	12 82       	std	Z+2, r1	; 0x02
    6918:	13 82       	std	Z+3, r1	; 0x03
        var[count++].val.i = pbuf->temp_x16[1];
    691a:	aa 27       	eor	r26, r26
    691c:	97 fd       	sbrc	r25, 7
    691e:	a0 95       	com	r26
    6920:	ba 2f       	mov	r27, r26
    6922:	84 83       	std	Z+4, r24	; 0x04
    6924:	95 83       	std	Z+5, r25	; 0x05
    6926:	a6 83       	std	Z+6, r26	; 0x06
    6928:	b7 83       	std	Z+7, r27	; 0x07
    692a:	4f 5f       	subi	r20, 0xFF	; 255
    }

    // 12
    if (pbuf->temp_x16[2] != INT16_MIN) {
    692c:	d8 01       	movw	r26, r16
    692e:	1b 96       	adiw	r26, 0x0b	; 11
    6930:	8d 91       	ld	r24, X+
    6932:	9c 91       	ld	r25, X
    6934:	1c 97       	sbiw	r26, 0x0c	; 12
    6936:	81 15       	cp	r24, r1
    6938:	b0 e8       	ldi	r27, 0x80	; 128
    693a:	9b 07       	cpc	r25, r27
    693c:	c1 f0       	breq	.+48     	; 0x696e <main+0x100e>
        var[count].name = STATUS_TEMP3_TAG;
    693e:	e1 e0       	ldi	r30, 0x01	; 1
    6940:	f0 e0       	ldi	r31, 0x00	; 0
    6942:	ec 0f       	add	r30, r28
    6944:	fd 1f       	adc	r31, r29
    6946:	28 e0       	ldi	r18, 0x08	; 8
    6948:	42 9f       	mul	r20, r18
    694a:	e0 0d       	add	r30, r0
    694c:	f1 1d       	adc	r31, r1
    694e:	11 24       	eor	r1, r1
    6950:	2e e4       	ldi	r18, 0x4E	; 78
    6952:	33 e2       	ldi	r19, 0x23	; 35
    6954:	20 83       	st	Z, r18
    6956:	31 83       	std	Z+1, r19	; 0x01
        var[count].type = AWT_INT32;
    6958:	12 82       	std	Z+2, r1	; 0x02
    695a:	13 82       	std	Z+3, r1	; 0x03
        var[count++].val.i = pbuf->temp_x16[2];
    695c:	aa 27       	eor	r26, r26
    695e:	97 fd       	sbrc	r25, 7
    6960:	a0 95       	com	r26
    6962:	ba 2f       	mov	r27, r26
    6964:	84 83       	std	Z+4, r24	; 0x04
    6966:	95 83       	std	Z+5, r25	; 0x05
    6968:	a6 83       	std	Z+6, r26	; 0x06
    696a:	b7 83       	std	Z+7, r27	; 0x07
    696c:	4f 5f       	subi	r20, 0xFF	; 255
    }
	
	// 13
	var[count].name = STATUS_EPOCH_TAG;
    696e:	e1 e0       	ldi	r30, 0x01	; 1
    6970:	f0 e0       	ldi	r31, 0x00	; 0
    6972:	ec 0f       	add	r30, r28
    6974:	fd 1f       	adc	r31, r29
    6976:	38 e0       	ldi	r19, 0x08	; 8
    6978:	43 9f       	mul	r20, r19
    697a:	e0 0d       	add	r30, r0
    697c:	f1 1d       	adc	r31, r1
    697e:	11 24       	eor	r1, r1
    6980:	85 e5       	ldi	r24, 0x55	; 85
    6982:	93 e2       	ldi	r25, 0x23	; 35
    6984:	80 83       	st	Z, r24
    6986:	91 83       	std	Z+1, r25	; 0x01
	var[count].type = AWT_INT32;
    6988:	12 82       	std	Z+2, r1	; 0x02
    698a:	13 82       	std	Z+3, r1	; 0x03
	var[count++].val.i = pbuf->epoch;
    698c:	d8 01       	movw	r26, r16
    698e:	0d 91       	ld	r16, X+
    6990:	1d 91       	ld	r17, X+
    6992:	2d 91       	ld	r18, X+
    6994:	3c 91       	ld	r19, X
    6996:	04 83       	std	Z+4, r16	; 0x04
    6998:	15 83       	std	Z+5, r17	; 0x05
    699a:	26 83       	std	Z+6, r18	; 0x06
    699c:	37 83       	std	Z+7, r19	; 0x07


    state.modem.busy = true;
    699e:	81 e0       	ldi	r24, 0x01	; 1
    69a0:	80 93 a8 28 	sts	0x28A8, r24
    }
	
	// 13
	var[count].name = STATUS_EPOCH_TAG;
	var[count].type = AWT_INT32;
	var[count++].val.i = pbuf->epoch;
    69a4:	4f 5f       	subi	r20, 0xFF	; 255


    state.modem.busy = true;
    awt_dispatch_data_req (status_message_rsp, STATUS_PATH, count, var);
    69a6:	9e 01       	movw	r18, r28
    69a8:	2f 5f       	subi	r18, 0xFF	; 255
    69aa:	3f 4f       	sbci	r19, 0xFF	; 255
    69ac:	66 ef       	ldi	r22, 0xF6	; 246
    69ae:	72 e2       	ldi	r23, 0x22	; 34
    69b0:	8c e5       	ldi	r24, 0x5C	; 92
    69b2:	90 e2       	ldi	r25, 0x20	; 32
    69b4:	0e 94 8a 07 	call	0xf14	; 0xf14 <awt_dispatch_data_req>
    69b8:	04 cb       	rjmp	.-2552   	; 0x5fc2 <main+0x662>

static void config_add_rom_code (uint8_t* rom_code, const char* rom_code_str)
{
    for (uint8_t k = 0; k < 3; k++) {
        if (!config.rom[k].valid) {
            memcpy (config.rom[k].code, rom_code, 8);
    69ba:	88 0f       	add	r24, r24
    69bc:	99 1f       	adc	r25, r25
    69be:	88 0f       	add	r24, r24
    69c0:	99 1f       	adc	r25, r25
    69c2:	88 0f       	add	r24, r24
    69c4:	99 1f       	adc	r25, r25
    69c6:	fc 01       	movw	r30, r24
    69c8:	ec 5f       	subi	r30, 0xFC	; 252
    69ca:	f2 4d       	sbci	r31, 0xD2	; 210
    69cc:	a4 e7       	ldi	r26, 0x74	; 116
    69ce:	bb e2       	ldi	r27, 0x2B	; 43
    69d0:	88 e0       	ldi	r24, 0x08	; 8
    69d2:	01 90       	ld	r0, Z+
    69d4:	0d 92       	st	X+, r0
    69d6:	8a 95       	dec	r24
    69d8:	e1 f7       	brne	.-8      	; 0x69d2 <main+0x1072>
            config.rom[k].valid = true;
    69da:	21 e0       	ldi	r18, 0x01	; 1
    69dc:	f5 01       	movw	r30, r10
    69de:	20 83       	st	Z, r18
            eeprom_write_config ();
    69e0:	0e 94 57 21 	call	0x42ae	; 0x42ae <eeprom_write_config>
            switch (k) {
            case 0:
                buffer_str_event (EVENT_NEW_TEMP1_SENSOR, rom_code_str);
    69e4:	b8 01       	movw	r22, r16
    69e6:	8f e6       	ldi	r24, 0x6F	; 111
    69e8:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <buffer_str_event>
                state.modem.send_rom_config = true;
    69ec:	e1 e0       	ldi	r30, 0x01	; 1
    69ee:	ac ea       	ldi	r26, 0xAC	; 172
    69f0:	b8 e2       	ldi	r27, 0x28	; 40
    69f2:	ec 93       	st	X, r30
    69f4:	97 cb       	rjmp	.-2258   	; 0x6124 <main+0x7c4>

static void config_add_rom_code (uint8_t* rom_code, const char* rom_code_str)
{
    for (uint8_t k = 0; k < 3; k++) {
        if (!config.rom[k].valid) {
            memcpy (config.rom[k].code, rom_code, 8);
    69f6:	88 0f       	add	r24, r24
    69f8:	99 1f       	adc	r25, r25
    69fa:	88 0f       	add	r24, r24
    69fc:	99 1f       	adc	r25, r25
    69fe:	88 0f       	add	r24, r24
    6a00:	99 1f       	adc	r25, r25
    6a02:	fc 01       	movw	r30, r24
    6a04:	ec 5f       	subi	r30, 0xFC	; 252
    6a06:	f2 4d       	sbci	r31, 0xD2	; 210
    6a08:	a6 e8       	ldi	r26, 0x86	; 134
    6a0a:	bb e2       	ldi	r27, 0x2B	; 43
    6a0c:	88 e0       	ldi	r24, 0x08	; 8
    6a0e:	01 90       	ld	r0, Z+
    6a10:	0d 92       	st	X+, r0
    6a12:	8a 95       	dec	r24
    6a14:	e1 f7       	brne	.-8      	; 0x6a0e <main+0x10ae>
            config.rom[k].valid = true;
    6a16:	e1 e0       	ldi	r30, 0x01	; 1
    6a18:	d3 01       	movw	r26, r6
    6a1a:	ec 93       	st	X, r30
            eeprom_write_config ();
    6a1c:	0e 94 57 21 	call	0x42ae	; 0x42ae <eeprom_write_config>
            case 1:
                buffer_str_event (EVENT_NEW_TEMP2_SENSOR, rom_code_str);
                state.modem.send_rom_config = true;
                break;
            case 2:
                buffer_str_event (EVENT_NEW_TEMP3_SENSOR, rom_code_str);
    6a20:	b8 01       	movw	r22, r16
    6a22:	81 e7       	ldi	r24, 0x71	; 113
    6a24:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <buffer_str_event>
                state.modem.send_rom_config = true;
    6a28:	e1 e0       	ldi	r30, 0x01	; 1
    6a2a:	ac ea       	ldi	r26, 0xAC	; 172
    6a2c:	b8 e2       	ldi	r27, 0x28	; 40
    6a2e:	ec 93       	st	X, r30
    6a30:	79 cb       	rjmp	.-2318   	; 0x6124 <main+0x7c4>

static void config_add_rom_code (uint8_t* rom_code, const char* rom_code_str)
{
    for (uint8_t k = 0; k < 3; k++) {
        if (!config.rom[k].valid) {
            memcpy (config.rom[k].code, rom_code, 8);
    6a32:	88 0f       	add	r24, r24
    6a34:	99 1f       	adc	r25, r25
    6a36:	88 0f       	add	r24, r24
    6a38:	99 1f       	adc	r25, r25
    6a3a:	88 0f       	add	r24, r24
    6a3c:	99 1f       	adc	r25, r25
    6a3e:	fc 01       	movw	r30, r24
    6a40:	ec 5f       	subi	r30, 0xFC	; 252
    6a42:	f2 4d       	sbci	r31, 0xD2	; 210
    6a44:	ad e7       	ldi	r26, 0x7D	; 125
    6a46:	bb e2       	ldi	r27, 0x2B	; 43
    6a48:	88 e0       	ldi	r24, 0x08	; 8
    6a4a:	01 90       	ld	r0, Z+
    6a4c:	0d 92       	st	X+, r0
    6a4e:	8a 95       	dec	r24
    6a50:	e1 f7       	brne	.-8      	; 0x6a4a <main+0x10ea>
            config.rom[k].valid = true;
    6a52:	e1 e0       	ldi	r30, 0x01	; 1
    6a54:	d4 01       	movw	r26, r8
    6a56:	ec 93       	st	X, r30
            eeprom_write_config ();
    6a58:	0e 94 57 21 	call	0x42ae	; 0x42ae <eeprom_write_config>
            case 0:
                buffer_str_event (EVENT_NEW_TEMP1_SENSOR, rom_code_str);
                state.modem.send_rom_config = true;
                break;
            case 1:
                buffer_str_event (EVENT_NEW_TEMP2_SENSOR, rom_code_str);
    6a5c:	b8 01       	movw	r22, r16
    6a5e:	80 e7       	ldi	r24, 0x70	; 112
    6a60:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <buffer_str_event>
                state.modem.send_rom_config = true;
    6a64:	e1 e0       	ldi	r30, 0x01	; 1
    6a66:	ac ea       	ldi	r26, 0xAC	; 172
    6a68:	b8 e2       	ldi	r27, 0x28	; 40
    6a6a:	ec 93       	st	X, r30
    6a6c:	5b cb       	rjmp	.-2378   	; 0x6124 <main+0x7c4>

00006a6e <__udivmodhi4>:
    6a6e:	aa 1b       	sub	r26, r26
    6a70:	bb 1b       	sub	r27, r27
    6a72:	51 e1       	ldi	r21, 0x11	; 17
    6a74:	07 c0       	rjmp	.+14     	; 0x6a84 <__udivmodhi4_ep>

00006a76 <__udivmodhi4_loop>:
    6a76:	aa 1f       	adc	r26, r26
    6a78:	bb 1f       	adc	r27, r27
    6a7a:	a6 17       	cp	r26, r22
    6a7c:	b7 07       	cpc	r27, r23
    6a7e:	10 f0       	brcs	.+4      	; 0x6a84 <__udivmodhi4_ep>
    6a80:	a6 1b       	sub	r26, r22
    6a82:	b7 0b       	sbc	r27, r23

00006a84 <__udivmodhi4_ep>:
    6a84:	88 1f       	adc	r24, r24
    6a86:	99 1f       	adc	r25, r25
    6a88:	5a 95       	dec	r21
    6a8a:	a9 f7       	brne	.-22     	; 0x6a76 <__udivmodhi4_loop>
    6a8c:	80 95       	com	r24
    6a8e:	90 95       	com	r25
    6a90:	bc 01       	movw	r22, r24
    6a92:	cd 01       	movw	r24, r26
    6a94:	08 95       	ret

00006a96 <__divmodhi4>:
    6a96:	97 fb       	bst	r25, 7
    6a98:	07 2e       	mov	r0, r23
    6a9a:	16 f4       	brtc	.+4      	; 0x6aa0 <__divmodhi4+0xa>
    6a9c:	00 94       	com	r0
    6a9e:	06 d0       	rcall	.+12     	; 0x6aac <__divmodhi4_neg1>
    6aa0:	77 fd       	sbrc	r23, 7
    6aa2:	08 d0       	rcall	.+16     	; 0x6ab4 <__divmodhi4_neg2>
    6aa4:	e4 df       	rcall	.-56     	; 0x6a6e <__udivmodhi4>
    6aa6:	07 fc       	sbrc	r0, 7
    6aa8:	05 d0       	rcall	.+10     	; 0x6ab4 <__divmodhi4_neg2>
    6aaa:	3e f4       	brtc	.+14     	; 0x6aba <__divmodhi4_exit>

00006aac <__divmodhi4_neg1>:
    6aac:	90 95       	com	r25
    6aae:	81 95       	neg	r24
    6ab0:	9f 4f       	sbci	r25, 0xFF	; 255
    6ab2:	08 95       	ret

00006ab4 <__divmodhi4_neg2>:
    6ab4:	70 95       	com	r23
    6ab6:	61 95       	neg	r22
    6ab8:	7f 4f       	sbci	r23, 0xFF	; 255

00006aba <__divmodhi4_exit>:
    6aba:	08 95       	ret

00006abc <__udivmodsi4>:
    6abc:	a1 e2       	ldi	r26, 0x21	; 33
    6abe:	1a 2e       	mov	r1, r26
    6ac0:	aa 1b       	sub	r26, r26
    6ac2:	bb 1b       	sub	r27, r27
    6ac4:	fd 01       	movw	r30, r26
    6ac6:	0d c0       	rjmp	.+26     	; 0x6ae2 <__udivmodsi4_ep>

00006ac8 <__udivmodsi4_loop>:
    6ac8:	aa 1f       	adc	r26, r26
    6aca:	bb 1f       	adc	r27, r27
    6acc:	ee 1f       	adc	r30, r30
    6ace:	ff 1f       	adc	r31, r31
    6ad0:	a2 17       	cp	r26, r18
    6ad2:	b3 07       	cpc	r27, r19
    6ad4:	e4 07       	cpc	r30, r20
    6ad6:	f5 07       	cpc	r31, r21
    6ad8:	20 f0       	brcs	.+8      	; 0x6ae2 <__udivmodsi4_ep>
    6ada:	a2 1b       	sub	r26, r18
    6adc:	b3 0b       	sbc	r27, r19
    6ade:	e4 0b       	sbc	r30, r20
    6ae0:	f5 0b       	sbc	r31, r21

00006ae2 <__udivmodsi4_ep>:
    6ae2:	66 1f       	adc	r22, r22
    6ae4:	77 1f       	adc	r23, r23
    6ae6:	88 1f       	adc	r24, r24
    6ae8:	99 1f       	adc	r25, r25
    6aea:	1a 94       	dec	r1
    6aec:	69 f7       	brne	.-38     	; 0x6ac8 <__udivmodsi4_loop>
    6aee:	60 95       	com	r22
    6af0:	70 95       	com	r23
    6af2:	80 95       	com	r24
    6af4:	90 95       	com	r25
    6af6:	9b 01       	movw	r18, r22
    6af8:	ac 01       	movw	r20, r24
    6afa:	bd 01       	movw	r22, r26
    6afc:	cf 01       	movw	r24, r30
    6afe:	08 95       	ret

00006b00 <__umulhisi3>:
    6b00:	a2 9f       	mul	r26, r18
    6b02:	b0 01       	movw	r22, r0
    6b04:	b3 9f       	mul	r27, r19
    6b06:	c0 01       	movw	r24, r0
    6b08:	a3 9f       	mul	r26, r19
    6b0a:	01 d0       	rcall	.+2      	; 0x6b0e <__umulhisi3+0xe>
    6b0c:	b2 9f       	mul	r27, r18
    6b0e:	70 0d       	add	r23, r0
    6b10:	81 1d       	adc	r24, r1
    6b12:	11 24       	eor	r1, r1
    6b14:	91 1d       	adc	r25, r1
    6b16:	08 95       	ret

00006b18 <strtoul>:
    6b18:	a0 e0       	ldi	r26, 0x00	; 0
    6b1a:	b0 e0       	ldi	r27, 0x00	; 0
    6b1c:	e1 e9       	ldi	r30, 0x91	; 145
    6b1e:	f5 e3       	ldi	r31, 0x35	; 53
    6b20:	26 c2       	rjmp	.+1100   	; 0x6f6e <__prologue_saves__+0x4>
    6b22:	5b 01       	movw	r10, r22
    6b24:	ea 01       	movw	r28, r20
    6b26:	61 15       	cp	r22, r1
    6b28:	71 05       	cpc	r23, r1
    6b2a:	19 f0       	breq	.+6      	; 0x6b32 <strtoul+0x1a>
    6b2c:	fb 01       	movw	r30, r22
    6b2e:	80 83       	st	Z, r24
    6b30:	91 83       	std	Z+1, r25	; 0x01
    6b32:	20 97       	sbiw	r28, 0x00	; 0
    6b34:	39 f0       	breq	.+14     	; 0x6b44 <strtoul+0x2c>
    6b36:	9e 01       	movw	r18, r28
    6b38:	22 50       	subi	r18, 0x02	; 2
    6b3a:	31 09       	sbc	r19, r1
    6b3c:	23 32       	cpi	r18, 0x23	; 35
    6b3e:	31 05       	cpc	r19, r1
    6b40:	08 f0       	brcs	.+2      	; 0x6b44 <strtoul+0x2c>
    6b42:	be c0       	rjmp	.+380    	; 0x6cc0 <strtoul+0x1a8>
    6b44:	7c 01       	movw	r14, r24
    6b46:	f7 01       	movw	r30, r14
    6b48:	91 90       	ld	r9, Z+
    6b4a:	7f 01       	movw	r14, r30
    6b4c:	8f 01       	movw	r16, r30
    6b4e:	89 2d       	mov	r24, r9
    6b50:	90 e0       	ldi	r25, 0x00	; 0
    6b52:	f7 d0       	rcall	.+494    	; 0x6d42 <isspace>
    6b54:	89 2b       	or	r24, r25
    6b56:	b9 f7       	brne	.-18     	; 0x6b46 <strtoul+0x2e>
    6b58:	fd e2       	ldi	r31, 0x2D	; 45
    6b5a:	9f 12       	cpse	r9, r31
    6b5c:	06 c0       	rjmp	.+12     	; 0x6b6a <strtoul+0x52>
    6b5e:	f7 01       	movw	r30, r14
    6b60:	91 90       	ld	r9, Z+
    6b62:	8f 01       	movw	r16, r30
    6b64:	88 24       	eor	r8, r8
    6b66:	83 94       	inc	r8
    6b68:	07 c0       	rjmp	.+14     	; 0x6b78 <strtoul+0x60>
    6b6a:	fb e2       	ldi	r31, 0x2B	; 43
    6b6c:	9f 12       	cpse	r9, r31
    6b6e:	03 c0       	rjmp	.+6      	; 0x6b76 <strtoul+0x5e>
    6b70:	f7 01       	movw	r30, r14
    6b72:	91 90       	ld	r9, Z+
    6b74:	8f 01       	movw	r16, r30
    6b76:	81 2c       	mov	r8, r1
    6b78:	20 97       	sbiw	r28, 0x00	; 0
    6b7a:	09 f4       	brne	.+2      	; 0x6b7e <strtoul+0x66>
    6b7c:	ab c0       	rjmp	.+342    	; 0x6cd4 <strtoul+0x1bc>
    6b7e:	c0 31       	cpi	r28, 0x10	; 16
    6b80:	d1 05       	cpc	r29, r1
    6b82:	81 f4       	brne	.+32     	; 0x6ba4 <strtoul+0x8c>
    6b84:	ae c0       	rjmp	.+348    	; 0x6ce2 <strtoul+0x1ca>
    6b86:	f8 01       	movw	r30, r16
    6b88:	80 81       	ld	r24, Z
    6b8a:	88 37       	cpi	r24, 0x78	; 120
    6b8c:	19 f0       	breq	.+6      	; 0x6b94 <strtoul+0x7c>
    6b8e:	88 35       	cpi	r24, 0x58	; 88
    6b90:	09 f0       	breq	.+2      	; 0x6b94 <strtoul+0x7c>
    6b92:	9a c0       	rjmp	.+308    	; 0x6cc8 <strtoul+0x1b0>
    6b94:	f8 01       	movw	r30, r16
    6b96:	91 80       	ldd	r9, Z+1	; 0x01
    6b98:	0e 5f       	subi	r16, 0xFE	; 254
    6b9a:	1f 4f       	sbci	r17, 0xFF	; 255
    6b9c:	f2 e0       	ldi	r31, 0x02	; 2
    6b9e:	8f 2a       	or	r8, r31
    6ba0:	c0 e1       	ldi	r28, 0x10	; 16
    6ba2:	d0 e0       	ldi	r29, 0x00	; 0
    6ba4:	ca 30       	cpi	r28, 0x0A	; 10
    6ba6:	d1 05       	cpc	r29, r1
    6ba8:	19 f1       	breq	.+70     	; 0x6bf0 <strtoul+0xd8>
    6baa:	c0 31       	cpi	r28, 0x10	; 16
    6bac:	d1 05       	cpc	r29, r1
    6bae:	21 f0       	breq	.+8      	; 0x6bb8 <strtoul+0xa0>
    6bb0:	c8 30       	cpi	r28, 0x08	; 8
    6bb2:	d1 05       	cpc	r29, r1
    6bb4:	89 f4       	brne	.+34     	; 0x6bd8 <strtoul+0xc0>
    6bb6:	07 c0       	rjmp	.+14     	; 0x6bc6 <strtoul+0xae>
    6bb8:	cc 24       	eor	r12, r12
    6bba:	ca 94       	dec	r12
    6bbc:	dc 2c       	mov	r13, r12
    6bbe:	ec 2c       	mov	r14, r12
    6bc0:	3f e0       	ldi	r19, 0x0F	; 15
    6bc2:	f3 2e       	mov	r15, r19
    6bc4:	1b c0       	rjmp	.+54     	; 0x6bfc <strtoul+0xe4>
    6bc6:	c8 e0       	ldi	r28, 0x08	; 8
    6bc8:	d0 e0       	ldi	r29, 0x00	; 0
    6bca:	cc 24       	eor	r12, r12
    6bcc:	ca 94       	dec	r12
    6bce:	dc 2c       	mov	r13, r12
    6bd0:	ec 2c       	mov	r14, r12
    6bd2:	2f e1       	ldi	r18, 0x1F	; 31
    6bd4:	f2 2e       	mov	r15, r18
    6bd6:	12 c0       	rjmp	.+36     	; 0x6bfc <strtoul+0xe4>
    6bd8:	9e 01       	movw	r18, r28
    6bda:	44 27       	eor	r20, r20
    6bdc:	37 fd       	sbrc	r19, 7
    6bde:	40 95       	com	r20
    6be0:	54 2f       	mov	r21, r20
    6be2:	6f ef       	ldi	r22, 0xFF	; 255
    6be4:	7f ef       	ldi	r23, 0xFF	; 255
    6be6:	cb 01       	movw	r24, r22
    6be8:	69 df       	rcall	.-302    	; 0x6abc <__udivmodsi4>
    6bea:	69 01       	movw	r12, r18
    6bec:	7a 01       	movw	r14, r20
    6bee:	06 c0       	rjmp	.+12     	; 0x6bfc <strtoul+0xe4>
    6bf0:	99 e9       	ldi	r25, 0x99	; 153
    6bf2:	c9 2e       	mov	r12, r25
    6bf4:	dc 2c       	mov	r13, r12
    6bf6:	ec 2c       	mov	r14, r12
    6bf8:	99 e1       	ldi	r25, 0x19	; 25
    6bfa:	f9 2e       	mov	r15, r25
    6bfc:	60 e0       	ldi	r22, 0x00	; 0
    6bfe:	20 e0       	ldi	r18, 0x00	; 0
    6c00:	30 e0       	ldi	r19, 0x00	; 0
    6c02:	a9 01       	movw	r20, r18
    6c04:	2e 01       	movw	r4, r28
    6c06:	66 24       	eor	r6, r6
    6c08:	57 fc       	sbrc	r5, 7
    6c0a:	60 94       	com	r6
    6c0c:	76 2c       	mov	r7, r6
    6c0e:	e9 2d       	mov	r30, r9
    6c10:	e0 53       	subi	r30, 0x30	; 48
    6c12:	ea 30       	cpi	r30, 0x0A	; 10
    6c14:	60 f0       	brcs	.+24     	; 0x6c2e <strtoul+0x116>
    6c16:	89 2d       	mov	r24, r9
    6c18:	81 54       	subi	r24, 0x41	; 65
    6c1a:	8a 31       	cpi	r24, 0x1A	; 26
    6c1c:	10 f4       	brcc	.+4      	; 0x6c22 <strtoul+0x10a>
    6c1e:	e7 50       	subi	r30, 0x07	; 7
    6c20:	06 c0       	rjmp	.+12     	; 0x6c2e <strtoul+0x116>
    6c22:	89 2d       	mov	r24, r9
    6c24:	81 56       	subi	r24, 0x61	; 97
    6c26:	8a 31       	cpi	r24, 0x1A	; 26
    6c28:	38 f5       	brcc	.+78     	; 0x6c78 <strtoul+0x160>
    6c2a:	e9 2d       	mov	r30, r9
    6c2c:	e7 55       	subi	r30, 0x57	; 87
    6c2e:	8e 2f       	mov	r24, r30
    6c30:	90 e0       	ldi	r25, 0x00	; 0
    6c32:	8c 17       	cp	r24, r28
    6c34:	9d 07       	cpc	r25, r29
    6c36:	04 f5       	brge	.+64     	; 0x6c78 <strtoul+0x160>
    6c38:	6f 3f       	cpi	r22, 0xFF	; 255
    6c3a:	d1 f0       	breq	.+52     	; 0x6c70 <strtoul+0x158>
    6c3c:	c2 16       	cp	r12, r18
    6c3e:	d3 06       	cpc	r13, r19
    6c40:	e4 06       	cpc	r14, r20
    6c42:	f5 06       	cpc	r15, r21
    6c44:	90 f0       	brcs	.+36     	; 0x6c6a <strtoul+0x152>
    6c46:	c3 01       	movw	r24, r6
    6c48:	b2 01       	movw	r22, r4
    6c4a:	76 d1       	rcall	.+748    	; 0x6f38 <__mulsi3>
    6c4c:	9b 01       	movw	r18, r22
    6c4e:	ac 01       	movw	r20, r24
    6c50:	8e 2f       	mov	r24, r30
    6c52:	90 e0       	ldi	r25, 0x00	; 0
    6c54:	a0 e0       	ldi	r26, 0x00	; 0
    6c56:	b0 e0       	ldi	r27, 0x00	; 0
    6c58:	28 0f       	add	r18, r24
    6c5a:	39 1f       	adc	r19, r25
    6c5c:	4a 1f       	adc	r20, r26
    6c5e:	5b 1f       	adc	r21, r27
    6c60:	28 17       	cp	r18, r24
    6c62:	39 07       	cpc	r19, r25
    6c64:	4a 07       	cpc	r20, r26
    6c66:	5b 07       	cpc	r21, r27
    6c68:	10 f4       	brcc	.+4      	; 0x6c6e <strtoul+0x156>
    6c6a:	6f ef       	ldi	r22, 0xFF	; 255
    6c6c:	01 c0       	rjmp	.+2      	; 0x6c70 <strtoul+0x158>
    6c6e:	61 e0       	ldi	r22, 0x01	; 1
    6c70:	f8 01       	movw	r30, r16
    6c72:	91 90       	ld	r9, Z+
    6c74:	8f 01       	movw	r16, r30
    6c76:	cb cf       	rjmp	.-106    	; 0x6c0e <strtoul+0xf6>
    6c78:	a1 14       	cp	r10, r1
    6c7a:	b1 04       	cpc	r11, r1
    6c7c:	61 f0       	breq	.+24     	; 0x6c96 <strtoul+0x17e>
    6c7e:	66 23       	and	r22, r22
    6c80:	19 f0       	breq	.+6      	; 0x6c88 <strtoul+0x170>
    6c82:	01 50       	subi	r16, 0x01	; 1
    6c84:	11 09       	sbc	r17, r1
    6c86:	04 c0       	rjmp	.+8      	; 0x6c90 <strtoul+0x178>
    6c88:	81 fe       	sbrs	r8, 1
    6c8a:	05 c0       	rjmp	.+10     	; 0x6c96 <strtoul+0x17e>
    6c8c:	02 50       	subi	r16, 0x02	; 2
    6c8e:	11 09       	sbc	r17, r1
    6c90:	f5 01       	movw	r30, r10
    6c92:	00 83       	st	Z, r16
    6c94:	11 83       	std	Z+1, r17	; 0x01
    6c96:	80 fe       	sbrs	r8, 0
    6c98:	07 c0       	rjmp	.+14     	; 0x6ca8 <strtoul+0x190>
    6c9a:	50 95       	com	r21
    6c9c:	40 95       	com	r20
    6c9e:	30 95       	com	r19
    6ca0:	21 95       	neg	r18
    6ca2:	3f 4f       	sbci	r19, 0xFF	; 255
    6ca4:	4f 4f       	sbci	r20, 0xFF	; 255
    6ca6:	5f 4f       	sbci	r21, 0xFF	; 255
    6ca8:	67 ff       	sbrs	r22, 7
    6caa:	1f c0       	rjmp	.+62     	; 0x6cea <strtoul+0x1d2>
    6cac:	82 e2       	ldi	r24, 0x22	; 34
    6cae:	90 e0       	ldi	r25, 0x00	; 0
    6cb0:	80 93 93 2d 	sts	0x2D93, r24
    6cb4:	90 93 94 2d 	sts	0x2D94, r25
    6cb8:	2f ef       	ldi	r18, 0xFF	; 255
    6cba:	3f ef       	ldi	r19, 0xFF	; 255
    6cbc:	a9 01       	movw	r20, r18
    6cbe:	15 c0       	rjmp	.+42     	; 0x6cea <strtoul+0x1d2>
    6cc0:	20 e0       	ldi	r18, 0x00	; 0
    6cc2:	30 e0       	ldi	r19, 0x00	; 0
    6cc4:	a9 01       	movw	r20, r18
    6cc6:	11 c0       	rjmp	.+34     	; 0x6cea <strtoul+0x1d2>
    6cc8:	80 e3       	ldi	r24, 0x30	; 48
    6cca:	98 2e       	mov	r9, r24
    6ccc:	20 97       	sbiw	r28, 0x00	; 0
    6cce:	09 f4       	brne	.+2      	; 0x6cd2 <strtoul+0x1ba>
    6cd0:	7a cf       	rjmp	.-268    	; 0x6bc6 <strtoul+0xae>
    6cd2:	68 cf       	rjmp	.-304    	; 0x6ba4 <strtoul+0x8c>
    6cd4:	f0 e3       	ldi	r31, 0x30	; 48
    6cd6:	9f 16       	cp	r9, r31
    6cd8:	09 f4       	brne	.+2      	; 0x6cdc <strtoul+0x1c4>
    6cda:	55 cf       	rjmp	.-342    	; 0x6b86 <strtoul+0x6e>
    6cdc:	ca e0       	ldi	r28, 0x0A	; 10
    6cde:	d0 e0       	ldi	r29, 0x00	; 0
    6ce0:	87 cf       	rjmp	.-242    	; 0x6bf0 <strtoul+0xd8>
    6ce2:	80 e3       	ldi	r24, 0x30	; 48
    6ce4:	98 12       	cpse	r9, r24
    6ce6:	5e cf       	rjmp	.-324    	; 0x6ba4 <strtoul+0x8c>
    6ce8:	4e cf       	rjmp	.-356    	; 0x6b86 <strtoul+0x6e>
    6cea:	b9 01       	movw	r22, r18
    6cec:	ca 01       	movw	r24, r20
    6cee:	cd b7       	in	r28, 0x3d	; 61
    6cf0:	de b7       	in	r29, 0x3e	; 62
    6cf2:	e0 e1       	ldi	r30, 0x10	; 16
    6cf4:	55 c1       	rjmp	.+682    	; 0x6fa0 <__epilogue_restores__+0x4>

00006cf6 <atol>:
    6cf6:	1f 93       	push	r17
    6cf8:	fc 01       	movw	r30, r24
    6cfa:	99 27       	eor	r25, r25
    6cfc:	88 27       	eor	r24, r24
    6cfe:	bc 01       	movw	r22, r24
    6d00:	e8 94       	clt
    6d02:	11 91       	ld	r17, Z+
    6d04:	10 32       	cpi	r17, 0x20	; 32
    6d06:	e9 f3       	breq	.-6      	; 0x6d02 <atol+0xc>
    6d08:	19 30       	cpi	r17, 0x09	; 9
    6d0a:	10 f0       	brcs	.+4      	; 0x6d10 <atol+0x1a>
    6d0c:	1e 30       	cpi	r17, 0x0E	; 14
    6d0e:	c8 f3       	brcs	.-14     	; 0x6d02 <atol+0xc>
    6d10:	1b 32       	cpi	r17, 0x2B	; 43
    6d12:	49 f0       	breq	.+18     	; 0x6d26 <atol+0x30>
    6d14:	1d 32       	cpi	r17, 0x2D	; 45
    6d16:	41 f4       	brne	.+16     	; 0x6d28 <atol+0x32>
    6d18:	68 94       	set
    6d1a:	05 c0       	rjmp	.+10     	; 0x6d26 <atol+0x30>
    6d1c:	ae d0       	rcall	.+348    	; 0x6e7a <__mulsi_const_10>
    6d1e:	61 0f       	add	r22, r17
    6d20:	71 1d       	adc	r23, r1
    6d22:	81 1d       	adc	r24, r1
    6d24:	91 1d       	adc	r25, r1
    6d26:	11 91       	ld	r17, Z+
    6d28:	10 53       	subi	r17, 0x30	; 48
    6d2a:	1a 30       	cpi	r17, 0x0A	; 10
    6d2c:	b8 f3       	brcs	.-18     	; 0x6d1c <atol+0x26>
    6d2e:	3e f4       	brtc	.+14     	; 0x6d3e <atol+0x48>
    6d30:	90 95       	com	r25
    6d32:	80 95       	com	r24
    6d34:	70 95       	com	r23
    6d36:	61 95       	neg	r22
    6d38:	7f 4f       	sbci	r23, 0xFF	; 255
    6d3a:	8f 4f       	sbci	r24, 0xFF	; 255
    6d3c:	9f 4f       	sbci	r25, 0xFF	; 255
    6d3e:	1f 91       	pop	r17
    6d40:	08 95       	ret

00006d42 <isspace>:
    6d42:	91 11       	cpse	r25, r1
    6d44:	e6 c0       	rjmp	.+460    	; 0x6f12 <__ctype_isfalse>
    6d46:	80 32       	cpi	r24, 0x20	; 32
    6d48:	19 f0       	breq	.+6      	; 0x6d50 <isspace+0xe>
    6d4a:	89 50       	subi	r24, 0x09	; 9
    6d4c:	85 50       	subi	r24, 0x05	; 5
    6d4e:	d0 f7       	brcc	.-12     	; 0x6d44 <isspace+0x2>
    6d50:	08 95       	ret

00006d52 <memcmp>:
    6d52:	fb 01       	movw	r30, r22
    6d54:	dc 01       	movw	r26, r24
    6d56:	04 c0       	rjmp	.+8      	; 0x6d60 <memcmp+0xe>
    6d58:	8d 91       	ld	r24, X+
    6d5a:	01 90       	ld	r0, Z+
    6d5c:	80 19       	sub	r24, r0
    6d5e:	21 f4       	brne	.+8      	; 0x6d68 <memcmp+0x16>
    6d60:	41 50       	subi	r20, 0x01	; 1
    6d62:	50 40       	sbci	r21, 0x00	; 0
    6d64:	c8 f7       	brcc	.-14     	; 0x6d58 <memcmp+0x6>
    6d66:	88 1b       	sub	r24, r24
    6d68:	99 0b       	sbc	r25, r25
    6d6a:	08 95       	ret

00006d6c <memcpy>:
    6d6c:	fb 01       	movw	r30, r22
    6d6e:	dc 01       	movw	r26, r24
    6d70:	02 c0       	rjmp	.+4      	; 0x6d76 <memcpy+0xa>
    6d72:	01 90       	ld	r0, Z+
    6d74:	0d 92       	st	X+, r0
    6d76:	41 50       	subi	r20, 0x01	; 1
    6d78:	50 40       	sbci	r21, 0x00	; 0
    6d7a:	d8 f7       	brcc	.-10     	; 0x6d72 <memcpy+0x6>
    6d7c:	08 95       	ret

00006d7e <memset>:
    6d7e:	dc 01       	movw	r26, r24
    6d80:	01 c0       	rjmp	.+2      	; 0x6d84 <memset+0x6>
    6d82:	6d 93       	st	X+, r22
    6d84:	41 50       	subi	r20, 0x01	; 1
    6d86:	50 40       	sbci	r21, 0x00	; 0
    6d88:	e0 f7       	brcc	.-8      	; 0x6d82 <memset+0x4>
    6d8a:	08 95       	ret

00006d8c <strcmp>:
    6d8c:	fb 01       	movw	r30, r22
    6d8e:	dc 01       	movw	r26, r24
    6d90:	8d 91       	ld	r24, X+
    6d92:	01 90       	ld	r0, Z+
    6d94:	80 19       	sub	r24, r0
    6d96:	01 10       	cpse	r0, r1
    6d98:	d9 f3       	breq	.-10     	; 0x6d90 <strcmp+0x4>
    6d9a:	99 0b       	sbc	r25, r25
    6d9c:	08 95       	ret

00006d9e <strncmp>:
    6d9e:	fb 01       	movw	r30, r22
    6da0:	dc 01       	movw	r26, r24
    6da2:	41 50       	subi	r20, 0x01	; 1
    6da4:	50 40       	sbci	r21, 0x00	; 0
    6da6:	30 f0       	brcs	.+12     	; 0x6db4 <strncmp+0x16>
    6da8:	8d 91       	ld	r24, X+
    6daa:	01 90       	ld	r0, Z+
    6dac:	80 19       	sub	r24, r0
    6dae:	19 f4       	brne	.+6      	; 0x6db6 <strncmp+0x18>
    6db0:	00 20       	and	r0, r0
    6db2:	b9 f7       	brne	.-18     	; 0x6da2 <strncmp+0x4>
    6db4:	88 1b       	sub	r24, r24
    6db6:	99 0b       	sbc	r25, r25
    6db8:	08 95       	ret

00006dba <strncpy>:
    6dba:	fb 01       	movw	r30, r22
    6dbc:	dc 01       	movw	r26, r24
    6dbe:	41 50       	subi	r20, 0x01	; 1
    6dc0:	50 40       	sbci	r21, 0x00	; 0
    6dc2:	48 f0       	brcs	.+18     	; 0x6dd6 <strncpy+0x1c>
    6dc4:	01 90       	ld	r0, Z+
    6dc6:	0d 92       	st	X+, r0
    6dc8:	00 20       	and	r0, r0
    6dca:	c9 f7       	brne	.-14     	; 0x6dbe <strncpy+0x4>
    6dcc:	01 c0       	rjmp	.+2      	; 0x6dd0 <strncpy+0x16>
    6dce:	1d 92       	st	X+, r1
    6dd0:	41 50       	subi	r20, 0x01	; 1
    6dd2:	50 40       	sbci	r21, 0x00	; 0
    6dd4:	e0 f7       	brcc	.-8      	; 0x6dce <strncpy+0x14>
    6dd6:	08 95       	ret

00006dd8 <itoa>:
    6dd8:	fb 01       	movw	r30, r22
    6dda:	9f 01       	movw	r18, r30
    6ddc:	e8 94       	clt
    6dde:	42 30       	cpi	r20, 0x02	; 2
    6de0:	bc f0       	brlt	.+46     	; 0x6e10 <itoa+0x38>
    6de2:	45 32       	cpi	r20, 0x25	; 37
    6de4:	ac f4       	brge	.+42     	; 0x6e10 <itoa+0x38>
    6de6:	4a 30       	cpi	r20, 0x0A	; 10
    6de8:	29 f4       	brne	.+10     	; 0x6df4 <itoa+0x1c>
    6dea:	97 fb       	bst	r25, 7
    6dec:	1e f4       	brtc	.+6      	; 0x6df4 <itoa+0x1c>
    6dee:	90 95       	com	r25
    6df0:	81 95       	neg	r24
    6df2:	9f 4f       	sbci	r25, 0xFF	; 255
    6df4:	64 2f       	mov	r22, r20
    6df6:	77 27       	eor	r23, r23
    6df8:	3a de       	rcall	.-908    	; 0x6a6e <__udivmodhi4>
    6dfa:	80 5d       	subi	r24, 0xD0	; 208
    6dfc:	8a 33       	cpi	r24, 0x3A	; 58
    6dfe:	0c f0       	brlt	.+2      	; 0x6e02 <itoa+0x2a>
    6e00:	89 5d       	subi	r24, 0xD9	; 217
    6e02:	81 93       	st	Z+, r24
    6e04:	cb 01       	movw	r24, r22
    6e06:	00 97       	sbiw	r24, 0x00	; 0
    6e08:	a9 f7       	brne	.-22     	; 0x6df4 <itoa+0x1c>
    6e0a:	16 f4       	brtc	.+4      	; 0x6e10 <itoa+0x38>
    6e0c:	5d e2       	ldi	r21, 0x2D	; 45
    6e0e:	51 93       	st	Z+, r21
    6e10:	10 82       	st	Z, r1
    6e12:	c9 01       	movw	r24, r18
    6e14:	81 c0       	rjmp	.+258    	; 0x6f18 <strrev>

00006e16 <ltoa>:
    6e16:	fa 01       	movw	r30, r20
    6e18:	cf 93       	push	r28
    6e1a:	ff 93       	push	r31
    6e1c:	ef 93       	push	r30
    6e1e:	22 30       	cpi	r18, 0x02	; 2
    6e20:	3c f1       	brlt	.+78     	; 0x6e70 <ltoa+0x5a>
    6e22:	25 32       	cpi	r18, 0x25	; 37
    6e24:	2c f5       	brge	.+74     	; 0x6e70 <ltoa+0x5a>
    6e26:	c2 2f       	mov	r28, r18
    6e28:	e8 94       	clt
    6e2a:	ca 30       	cpi	r28, 0x0A	; 10
    6e2c:	49 f4       	brne	.+18     	; 0x6e40 <ltoa+0x2a>
    6e2e:	97 fb       	bst	r25, 7
    6e30:	3e f4       	brtc	.+14     	; 0x6e40 <ltoa+0x2a>
    6e32:	90 95       	com	r25
    6e34:	80 95       	com	r24
    6e36:	70 95       	com	r23
    6e38:	61 95       	neg	r22
    6e3a:	7f 4f       	sbci	r23, 0xFF	; 255
    6e3c:	8f 4f       	sbci	r24, 0xFF	; 255
    6e3e:	9f 4f       	sbci	r25, 0xFF	; 255
    6e40:	2c 2f       	mov	r18, r28
    6e42:	33 27       	eor	r19, r19
    6e44:	44 27       	eor	r20, r20
    6e46:	55 27       	eor	r21, r21
    6e48:	ff 93       	push	r31
    6e4a:	ef 93       	push	r30
    6e4c:	37 de       	rcall	.-914    	; 0x6abc <__udivmodsi4>
    6e4e:	ef 91       	pop	r30
    6e50:	ff 91       	pop	r31
    6e52:	60 5d       	subi	r22, 0xD0	; 208
    6e54:	6a 33       	cpi	r22, 0x3A	; 58
    6e56:	0c f0       	brlt	.+2      	; 0x6e5a <ltoa+0x44>
    6e58:	69 5d       	subi	r22, 0xD9	; 217
    6e5a:	61 93       	st	Z+, r22
    6e5c:	b9 01       	movw	r22, r18
    6e5e:	ca 01       	movw	r24, r20
    6e60:	60 50       	subi	r22, 0x00	; 0
    6e62:	70 40       	sbci	r23, 0x00	; 0
    6e64:	80 40       	sbci	r24, 0x00	; 0
    6e66:	90 40       	sbci	r25, 0x00	; 0
    6e68:	59 f7       	brne	.-42     	; 0x6e40 <ltoa+0x2a>
    6e6a:	16 f4       	brtc	.+4      	; 0x6e70 <ltoa+0x5a>
    6e6c:	cd e2       	ldi	r28, 0x2D	; 45
    6e6e:	c1 93       	st	Z+, r28
    6e70:	10 82       	st	Z, r1
    6e72:	8f 91       	pop	r24
    6e74:	9f 91       	pop	r25
    6e76:	cf 91       	pop	r28
    6e78:	4f c0       	rjmp	.+158    	; 0x6f18 <strrev>

00006e7a <__mulsi_const_10>:
    6e7a:	59 2f       	mov	r21, r25
    6e7c:	48 2f       	mov	r20, r24
    6e7e:	37 2f       	mov	r19, r23
    6e80:	26 2f       	mov	r18, r22
    6e82:	66 0f       	add	r22, r22
    6e84:	77 1f       	adc	r23, r23
    6e86:	88 1f       	adc	r24, r24
    6e88:	99 1f       	adc	r25, r25
    6e8a:	66 0f       	add	r22, r22
    6e8c:	77 1f       	adc	r23, r23
    6e8e:	88 1f       	adc	r24, r24
    6e90:	99 1f       	adc	r25, r25
    6e92:	62 0f       	add	r22, r18
    6e94:	73 1f       	adc	r23, r19
    6e96:	84 1f       	adc	r24, r20
    6e98:	95 1f       	adc	r25, r21
    6e9a:	66 0f       	add	r22, r22
    6e9c:	77 1f       	adc	r23, r23
    6e9e:	88 1f       	adc	r24, r24
    6ea0:	99 1f       	adc	r25, r25
    6ea2:	08 95       	ret

00006ea4 <ultoa>:
    6ea4:	fa 01       	movw	r30, r20
    6ea6:	cf 93       	push	r28
    6ea8:	ff 93       	push	r31
    6eaa:	ef 93       	push	r30
    6eac:	22 30       	cpi	r18, 0x02	; 2
    6eae:	c4 f0       	brlt	.+48     	; 0x6ee0 <ultoa+0x3c>
    6eb0:	25 32       	cpi	r18, 0x25	; 37
    6eb2:	b4 f4       	brge	.+44     	; 0x6ee0 <ultoa+0x3c>
    6eb4:	c2 2f       	mov	r28, r18
    6eb6:	2c 2f       	mov	r18, r28
    6eb8:	33 27       	eor	r19, r19
    6eba:	44 27       	eor	r20, r20
    6ebc:	55 27       	eor	r21, r21
    6ebe:	ff 93       	push	r31
    6ec0:	ef 93       	push	r30
    6ec2:	fc dd       	rcall	.-1032   	; 0x6abc <__udivmodsi4>
    6ec4:	ef 91       	pop	r30
    6ec6:	ff 91       	pop	r31
    6ec8:	60 5d       	subi	r22, 0xD0	; 208
    6eca:	6a 33       	cpi	r22, 0x3A	; 58
    6ecc:	0c f0       	brlt	.+2      	; 0x6ed0 <ultoa+0x2c>
    6ece:	69 5d       	subi	r22, 0xD9	; 217
    6ed0:	61 93       	st	Z+, r22
    6ed2:	b9 01       	movw	r22, r18
    6ed4:	ca 01       	movw	r24, r20
    6ed6:	60 50       	subi	r22, 0x00	; 0
    6ed8:	70 40       	sbci	r23, 0x00	; 0
    6eda:	80 40       	sbci	r24, 0x00	; 0
    6edc:	90 40       	sbci	r25, 0x00	; 0
    6ede:	59 f7       	brne	.-42     	; 0x6eb6 <ultoa+0x12>
    6ee0:	10 82       	st	Z, r1
    6ee2:	8f 91       	pop	r24
    6ee4:	9f 91       	pop	r25
    6ee6:	cf 91       	pop	r28
    6ee8:	17 c0       	rjmp	.+46     	; 0x6f18 <strrev>

00006eea <utoa>:
    6eea:	fb 01       	movw	r30, r22
    6eec:	9f 01       	movw	r18, r30
    6eee:	42 30       	cpi	r20, 0x02	; 2
    6ef0:	6c f0       	brlt	.+26     	; 0x6f0c <utoa+0x22>
    6ef2:	45 32       	cpi	r20, 0x25	; 37
    6ef4:	5c f4       	brge	.+22     	; 0x6f0c <utoa+0x22>
    6ef6:	64 2f       	mov	r22, r20
    6ef8:	77 27       	eor	r23, r23
    6efa:	b9 dd       	rcall	.-1166   	; 0x6a6e <__udivmodhi4>
    6efc:	80 5d       	subi	r24, 0xD0	; 208
    6efe:	8a 33       	cpi	r24, 0x3A	; 58
    6f00:	0c f0       	brlt	.+2      	; 0x6f04 <utoa+0x1a>
    6f02:	89 5d       	subi	r24, 0xD9	; 217
    6f04:	81 93       	st	Z+, r24
    6f06:	cb 01       	movw	r24, r22
    6f08:	00 97       	sbiw	r24, 0x00	; 0
    6f0a:	a9 f7       	brne	.-22     	; 0x6ef6 <utoa+0xc>
    6f0c:	10 82       	st	Z, r1
    6f0e:	c9 01       	movw	r24, r18
    6f10:	03 c0       	rjmp	.+6      	; 0x6f18 <strrev>

00006f12 <__ctype_isfalse>:
    6f12:	99 27       	eor	r25, r25
    6f14:	88 27       	eor	r24, r24

00006f16 <__ctype_istrue>:
    6f16:	08 95       	ret

00006f18 <strrev>:
    6f18:	dc 01       	movw	r26, r24
    6f1a:	fc 01       	movw	r30, r24
    6f1c:	67 2f       	mov	r22, r23
    6f1e:	71 91       	ld	r23, Z+
    6f20:	77 23       	and	r23, r23
    6f22:	e1 f7       	brne	.-8      	; 0x6f1c <strrev+0x4>
    6f24:	32 97       	sbiw	r30, 0x02	; 2
    6f26:	04 c0       	rjmp	.+8      	; 0x6f30 <strrev+0x18>
    6f28:	7c 91       	ld	r23, X
    6f2a:	6d 93       	st	X+, r22
    6f2c:	70 83       	st	Z, r23
    6f2e:	62 91       	ld	r22, -Z
    6f30:	ae 17       	cp	r26, r30
    6f32:	bf 07       	cpc	r27, r31
    6f34:	c8 f3       	brcs	.-14     	; 0x6f28 <strrev+0x10>
    6f36:	08 95       	ret

00006f38 <__mulsi3>:
    6f38:	db 01       	movw	r26, r22
    6f3a:	8f 93       	push	r24
    6f3c:	9f 93       	push	r25
    6f3e:	0b d0       	rcall	.+22     	; 0x6f56 <__muluhisi3>
    6f40:	bf 91       	pop	r27
    6f42:	af 91       	pop	r26
    6f44:	a2 9f       	mul	r26, r18
    6f46:	80 0d       	add	r24, r0
    6f48:	91 1d       	adc	r25, r1
    6f4a:	a3 9f       	mul	r26, r19
    6f4c:	90 0d       	add	r25, r0
    6f4e:	b2 9f       	mul	r27, r18
    6f50:	90 0d       	add	r25, r0
    6f52:	11 24       	eor	r1, r1
    6f54:	08 95       	ret

00006f56 <__muluhisi3>:
    6f56:	d4 dd       	rcall	.-1112   	; 0x6b00 <__umulhisi3>
    6f58:	a5 9f       	mul	r26, r21
    6f5a:	90 0d       	add	r25, r0
    6f5c:	b4 9f       	mul	r27, r20
    6f5e:	90 0d       	add	r25, r0
    6f60:	a4 9f       	mul	r26, r20
    6f62:	80 0d       	add	r24, r0
    6f64:	91 1d       	adc	r25, r1
    6f66:	11 24       	eor	r1, r1
    6f68:	08 95       	ret

00006f6a <__prologue_saves__>:
    6f6a:	2f 92       	push	r2
    6f6c:	3f 92       	push	r3
    6f6e:	4f 92       	push	r4
    6f70:	5f 92       	push	r5
    6f72:	6f 92       	push	r6
    6f74:	7f 92       	push	r7
    6f76:	8f 92       	push	r8
    6f78:	9f 92       	push	r9
    6f7a:	af 92       	push	r10
    6f7c:	bf 92       	push	r11
    6f7e:	cf 92       	push	r12
    6f80:	df 92       	push	r13
    6f82:	ef 92       	push	r14
    6f84:	ff 92       	push	r15
    6f86:	0f 93       	push	r16
    6f88:	1f 93       	push	r17
    6f8a:	cf 93       	push	r28
    6f8c:	df 93       	push	r29
    6f8e:	cd b7       	in	r28, 0x3d	; 61
    6f90:	de b7       	in	r29, 0x3e	; 62
    6f92:	ca 1b       	sub	r28, r26
    6f94:	db 0b       	sbc	r29, r27
    6f96:	cd bf       	out	0x3d, r28	; 61
    6f98:	de bf       	out	0x3e, r29	; 62
    6f9a:	09 94       	ijmp

00006f9c <__epilogue_restores__>:
    6f9c:	2a 88       	ldd	r2, Y+18	; 0x12
    6f9e:	39 88       	ldd	r3, Y+17	; 0x11
    6fa0:	48 88       	ldd	r4, Y+16	; 0x10
    6fa2:	5f 84       	ldd	r5, Y+15	; 0x0f
    6fa4:	6e 84       	ldd	r6, Y+14	; 0x0e
    6fa6:	7d 84       	ldd	r7, Y+13	; 0x0d
    6fa8:	8c 84       	ldd	r8, Y+12	; 0x0c
    6faa:	9b 84       	ldd	r9, Y+11	; 0x0b
    6fac:	aa 84       	ldd	r10, Y+10	; 0x0a
    6fae:	b9 84       	ldd	r11, Y+9	; 0x09
    6fb0:	c8 84       	ldd	r12, Y+8	; 0x08
    6fb2:	df 80       	ldd	r13, Y+7	; 0x07
    6fb4:	ee 80       	ldd	r14, Y+6	; 0x06
    6fb6:	fd 80       	ldd	r15, Y+5	; 0x05
    6fb8:	0c 81       	ldd	r16, Y+4	; 0x04
    6fba:	1b 81       	ldd	r17, Y+3	; 0x03
    6fbc:	aa 81       	ldd	r26, Y+2	; 0x02
    6fbe:	b9 81       	ldd	r27, Y+1	; 0x01
    6fc0:	ce 0f       	add	r28, r30
    6fc2:	d1 1d       	adc	r29, r1
    6fc4:	cd bf       	out	0x3d, r28	; 61
    6fc6:	de bf       	out	0x3e, r29	; 62
    6fc8:	ed 01       	movw	r28, r26
    6fca:	08 95       	ret

00006fcc <_exit>:
    6fcc:	f8 94       	cli

00006fce <__stop_program>:
    6fce:	ff cf       	rjmp	.-2      	; 0x6fce <__stop_program>
